!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	glib-core/linalg.h	/^    TFlt A;$/;"	m	class:TSigmoid
ALTERNATIVE_TABLE_H	snap-exp/alternativetable.h	2;"	d
AND	snap-core/table.h	/^typedef enum {NOT, AND, OR, NOP} TPredOp; $/;"	e	enum:__anon81
ATagNm	glib-core/html.cpp	/^const TStr THtmlTok::ATagNm="<A>";$/;"	m	class:THtmlTok	file:
AbsSecs	glib-core/tm.h	/^  TUInt AbsSecs; \/\/ pretend that local time zone is UTC$/;"	m	class:TSecTm
AcceptFldNm	glib-core/http.cpp	/^const TStr THttp::AcceptFldNm="Accept";$/;"	m	class:THttp	file:
AcceptFldNm	glib-core/http.h	/^  static const TStr AcceptFldNm;$/;"	m	class:THttp
AcceptRangesFldNm	glib-core/http.cpp	/^const TStr THttp::AcceptRangesFldNm="Accept-Ranges";$/;"	m	class:THttp	file:
AcceptRangesFldNm	glib-core/http.h	/^  static const TStr AcceptRangesFldNm;$/;"	m	class:THttp
Accuracy	snap-adv/cascdynetinf.h	/^  TFltPrV Accuracy, MAE, MSE;$/;"	m	class:TNIBs
ActiveCount	snap-core/flow.cpp	/^  int ActiveCount;$/;"	m	class:TSnap::TPRManager	file:
ActiveNodeQ	snap-core/flow.cpp	/^  TIntQ ActiveNodeQ;$/;"	m	class:TSnap::TPRManager	file:
ActiveNodeSet	snap-core/flow.cpp	/^  TIntV ActiveNodeSet;$/;"	m	class:TSnap::TPRManager	file:
Add	glib-core/ds.h	/^  TSizeTy Add(){ AssertR(MxVals!=-1, "This vector was obtained from TVecPool. Such vectors cannot change its size!");$/;"	f	class:TVec
Add	glib-core/ds.h	/^  TSizeTy Add(TVal& Val){ AssertR(MxVals!=-1, "This vector was obtained from TVecPool. Such vectors cannot change its size!");$/;"	f	class:TVec
Add	glib-core/ds.h	/^  TSizeTy Add(const TVal& Val){ AssertR(MxVals!=-1, "This vector was obtained from TVecPool. Such vectors cannot change its size!");$/;"	f	class:TVec
Add	glib-core/ds.h	/^  TSizeTy Add(const TVal& Val, const TSizeTy& ResizeLen){ AssertR(MxVals!=-1, "This vector was obtained from TVecPool. Such vectors cannot change its size!");$/;"	f	class:TVec
Add	glib-core/ds.h	/^  int Add(const TVal& Val){return V.Add(Val);}$/;"	f	class:PVec
Add	glib-core/md5.cpp	/^void TMd5::Add(const PSIn& SIn){$/;"	f	class:TMd5
Add	glib-core/md5.cpp	/^void TMd5::Add(uchar* InBf, const int& InBfL){$/;"	f	class:TMd5
Add	glib-core/shash.h	/^  void Add(const TVal& Val) { ResizeDelta(1); ValT[Vals-1]=Val; }$/;"	f	class:TPackVec
Add	glib-core/unicode.h	/^	static inline void Add(TVector& vector, const TElement& element) { vector += element; }$/;"	f	class:TVecElt
Add	glib-core/unicode.h	/^	static inline void Add(TVector& vector, const TElement& element) { vector.Add(element); }$/;"	f	class:TVecElt
Add	glib-core/unicode.h	/^	void Add(const TSrcVec& src) { Add(src, 0, (size_t) src.Len()); }$/;"	f	class:TUniTrie
Add	glib-core/unicode.h	/^	void Add(const TSrcVec& src, const size_t srcIdx, const size_t srcCount)$/;"	f	class:TUniTrie
Add	glib-core/xmath.cpp	/^void THist::Add(const double& Val, const bool& OnlyInP) {$/;"	f	class:THist
Add	glib-core/xmath.h	/^  void Add(const TFlt& Val, const TFlt& Wgt=1){Assert(!DefP);$/;"	f
Add	snap-adv/cascdynetinf.h	/^  void Add(const int& NId, const double& HitTm) { NIdHitH.AddDat(NId, THitInfo(NId, HitTm)); }$/;"	f	class:TCascade
Add	snap-adv/cascnetinf.h	/^  void Add(const int& NId, const double& HitTm) { NIdHitH.AddDat(NId, THitInfo(NId, HitTm)); }$/;"	f	class:TCascade
Add	snap-adv/subgraphenum.h	/^		inline void Add(int i) { if(!m_nodes[i]) m_size++; m_nodes[i]=true; }$/;"	f	class:TSubGraphEnum::TSSet
Add	snap-core/cncom.h	/^  void Add(const int& NodeId) { NIdV.Add(NodeId); }$/;"	f	class:TCnCom
Add	snap-core/gbase.h	/^  int Add(const int& Key) { KIdSetH.AddDat(Key, TIntPr(-1, 0));  return Key; }$/;"	f	class:TUnionFind
Add	snap-core/gbase.h	/^  void Add(const TVal& Val) { HeapV.Add(Val); }$/;"	f	class:THeap
Add	snap-core/gstat.cpp	/^PGStat TGStatVec::Add() {$/;"	f	class:TGStatVec
Add	snap-core/gstat.cpp	/^PGStat TGStatVec::Add(const TSecTm& Time, const TStr& GraphNm) {$/;"	f	class:TGStatVec
Add	snap-core/gstat.cpp	/^void TGStatVec::Add(const PNEGraph& Graph, const TSecTm& Time, const TStr& GraphNm) {$/;"	f	class:TGStatVec
Add	snap-core/gstat.cpp	/^void TGStatVec::Add(const PNGraph& Graph, const TSecTm& Time, const TStr& GraphNm) {$/;"	f	class:TGStatVec
Add	snap-core/gstat.cpp	/^void TGStatVec::Add(const PUNGraph& Graph, const TSecTm& Time, const TStr& GraphNm) {$/;"	f	class:TGStatVec
Add	snap-core/gstat.h	/^  void Add(const PGStat& Growth) { GStatV.Add(Growth); }$/;"	f	class:TGStatVec
Add	snap-exp/lsh.cpp	/^void TLSHash::Add(TFltV Datum) {$/;"	f	class:TLSHash
AddBack	glib-core/ds.h	/^TLstNd<TVal>* TLst<TVal>::AddBack(const TVal& Val){$/;"	f	class:TLst
AddBackSorted	glib-core/ds.h	/^TLstNd<TVal>* TLst<TVal>::AddBackSorted(const TVal& Val, const bool& Asc){$/;"	f	class:TLst
AddBackSorted	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::AddBackSorted(const TVal& Val, const bool& Asc){$/;"	f	class:TVec
AddBagOfWhiskers	snap-adv/ncp.cpp	/^void TLocClustStat::AddBagOfWhiskers() {$/;"	f	class:TLocClustStat
AddBaseCmty	snap-adv/agmfit.cpp	/^void TAGMFit::AddBaseCmty() {$/;"	f	class:TAGMFit
AddBf	glib-core/dt.cpp	/^void TMem::AddBf(const void* _Bf, const int& _BfL){$/;"	f	class:TMem
AddBiDirEdges	snap-exp/wgtnet.cpp	/^void TWgtNet::AddBiDirEdges(const double& Wgt) {$/;"	f	class:TWgtNet
AddCStr	glib-core/wch.cpp	/^void TWChA::AddCStr(const char* CStr){$/;"	f	class:TWChA
AddCasc	snap-adv/cascdynetinf.cpp	/^void TNIBs::AddCasc(const TIntFltH& Cascade, const int& CId, const TModel& Model) {$/;"	f	class:TNIBs
AddCasc	snap-adv/cascdynetinf.cpp	/^void TNIBs::AddCasc(const TStr& CascStr, const TModel& Model) {$/;"	f	class:TNIBs
AddCasc	snap-adv/cascdynetinf.h	/^  void AddCasc(const TCascade& Cascade) { CascH.AddDat(Cascade.CId) = Cascade; }$/;"	f	class:TNIBs
AddCasc	snap-adv/cascnetinf.cpp	/^void TNetInfBs::AddCasc(const TStr& CascStr, const int& Model, const double& alpha) {$/;"	f	class:TNetInfBs
AddCasc	snap-adv/cascnetinf.h	/^  void AddCasc(const TCascade& Cascade) { CascV.Add(Cascade); }$/;"	f	class:TNetInfBs
AddCmd	glib-core/gnuplot.h	/^  void AddCmd(const TStr& Cmd) { MoreCmds.Add(Cmd); }$/;"	f	class:TGnuPlot
AddColType	snap-core/table.h	/^  void AddColType(const TStr& ColName, TAttrType ColType, TInt Index) {$/;"	f	class:TTable
AddColType	snap-core/table.h	/^  void AddColType(const TStr& ColName, TPair<TAttrType,TInt> ColType) {$/;"	f	class:TTable
AddColType	snap-exp/alternativetable.h	/^  void AddColType(const TStr& ColName, TAttrType ColType, TInt Index) { $/;"	f	class:ExplicitStringTable
AddColType	snap-exp/alternativetable.h	/^  void AddColType(const TStr& ColName, TAttrType ColType, TInt Index) { $/;"	f	class:PhysicalOrderTable
AddColType	snap-exp/alternativetable.h	/^  void AddColType(const TStr& ColName, TPair<TAttrType,TInt> ColType) { $/;"	f	class:ExplicitStringTable
AddColType	snap-exp/alternativetable.h	/^  void AddColType(const TStr& ColName, TPair<TAttrType,TInt> ColType) { $/;"	f	class:PhysicalOrderTable
AddCom	snap-adv/agmattr.h	/^  void inline AddCom(const int& NID, const int& CID, const double& Val) {$/;"	f	class:TCesna
AddCom	snap-adv/agmdirected.h	/^  void inline AddCom(const bool IsOut, const int& NID, const int& CID, const double& Val) {$/;"	f	class:TCoda
AddCom	snap-adv/agmfast.h	/^  void inline AddCom(const int& NID, const int& CID, const double& Val) {$/;"	f	class:TAGMFast
AddComIn	snap-adv/agmdirected.h	/^  void inline AddComIn(const int& NID, const int& CID, const double& Val) {$/;"	f	class:TCoda
AddComOut	snap-adv/agmdirected.h	/^  void inline AddComOut(const int& NID, const int& CID, const double& Val) {$/;"	f	class:TCoda
AddConsecutiveValues	test/test-alg.cpp	/^void AddConsecutiveValues(TIntV& Vector, int Start, int End) {$/;"	f
AddConstraint	snap-core/triad.h	/^void TNetConstraint<PGraph>::AddConstraint(const int& NId1, const int& NId2) {$/;"	f	class:TNetConstraint
AddCrossNet	snap-core/mmnet.cpp	/^int TMMNet::AddCrossNet(const TInt& ModeId1, const TInt& ModeId2, const TStr& CrossNetName, bool isDir) {$/;"	f	class:TMMNet
AddCrossNet	snap-core/mmnet.cpp	/^int TMMNet::AddCrossNet(const TStr& CrossNetName, const TInt& CrossNetId, const TCrossNet& CrossNet) {$/;"	f	class:TMMNet
AddCrossNet	snap-core/mmnet.cpp	/^int TMMNet::AddCrossNet(const TStr& ModeName1, const TStr& ModeName2, const TStr& CrossNetName, bool isDir) {$/;"	f	class:TMMNet
AddCut	snap-adv/ncp.cpp	/^void TLocClustStat::AddCut(const TIntV& NIdV) {$/;"	f	class:TLocClustStat
AddCut	snap-adv/ncp.cpp	/^void TLocClustStat::AddCut(const int& ClustSz, const double& Phi) {$/;"	f	class:TLocClustStat
AddDat	glib-core/hash.h	/^  TDat& AddDat(const TKey& Key){return KeyDatV[AddKey(Key)].Dat;}$/;"	f	class:THash
AddDat	glib-core/hash.h	/^  TDat& AddDat(const TKey& Key, const TDat& Dat){$/;"	f	class:THash
AddDat	glib-core/hashmp.h	/^  TDat& AddDat(const TKey& Key){return Table[AddKey(Key)].Dat;}$/;"	f	class:THashMP
AddDat	glib-core/hashmp.h	/^  TDat& AddDat(const TKey& Key, const TDat& Dat){$/;"	f	class:THashMP
AddDat	glib-core/shash.h	/^TDat& TSparseHash<TKey, TDat, GroupSize>::AddDat(const TKey& Key) {$/;"	f	class:TSparseHash
AddDat	glib-core/shash.h	/^TDat& TSparseHash<TKey, TDat, GroupSize>::AddDat(const TKey& Key, const TDat& Dat) {$/;"	f	class:TSparseHash
AddDat	snap-core/ghash.h	/^  TDat& AddDat(const PNGraph& Graph) { return GraphH[AddKey(Graph)]; }$/;"	f	class:TGHash
AddDat	snap-core/ghash.h	/^  TDat& AddDat(const PNGraph& Graph, const TDat& Dat) { return GraphH[AddKey(Graph)] = Dat; }$/;"	f	class:TGHash
AddDatId	glib-core/hash.h	/^  TDat& AddDatId(const TKey& Key){$/;"	f	class:THash
AddDatId	glib-core/hashmp.h	/^  TDat& AddDatId(const TKey& Key){$/;"	f	class:THashMP
AddDays	glib-core/tm.h	/^  TSecTm& AddDays(const int& Days){$/;"	f	class:TSecTm
AddDays	glib-core/tm.h	/^  void AddDays(const int& Days){AddTime(Days*24);}$/;"	f	class:TTm
AddDecomposition	glib-core/unicode.h	/^void TUniChDb::AddDecomposition(const int codePoint, TVec<TDestCh>& dest, const bool compatibility) const$/;"	f	class:TUniChDb
AddDomainNm	snap-adv/cascdynetinf.h	/^  void AddDomainNm(const TStr& Domain, const int& DomainId=-1) { DomainsIdH.AddDat(Domain) = TInt(DomainId==-1? DomainsIdH.Len() : DomainId); }$/;"	f	class:TNIBs
AddDstNodeAttr	snap-core/table.h	/^  void AddDstNodeAttr(TStrV& Attrs) { AddGraphAttributeV(Attrs, false, false, true); }$/;"	f	class:TTable
AddDstNodeAttr	snap-core/table.h	/^  void AddDstNodeAttr(const TStr& Attr) { AddGraphAttribute(Attr, false, false, true); }$/;"	f	class:TTable
AddEType	snap-exp/mmgraph-exp.h	/^  int AddEType(const TStr& ETypeName, const TStr& SrcNTypeName, const TStr& DstNTypeName) {$/;"	f	class:TMNet
AddEdge	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TBigNet
AddEdge	snap-core/ghash.h	/^  void AddEdge(const int& SrcNId, const int& DstNId) { EdgeV.Add(TIntPr(SrcNId, DstNId)); }$/;"	f	class:TSimpleGraph
AddEdge	snap-core/graph.cpp	/^int TBPGraph::AddEdge(const int& LeftNId, const int& RightNId) {$/;"	f	class:TBPGraph
AddEdge	snap-core/graph.cpp	/^int TNEGraph::AddEdge(const int& SrcNId, const int& DstNId, int EId) {$/;"	f	class:TNEGraph
AddEdge	snap-core/graph.cpp	/^int TNGraph::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraph
AddEdge	snap-core/graph.cpp	/^int TUNGraph::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TUNGraph
AddEdge	snap-core/graph.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TBPGraph
AddEdge	snap-core/graph.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TNGraph
AddEdge	snap-core/graph.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TUNGraph
AddEdge	snap-core/graph.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId(), EdgeI.GetId()); }$/;"	f	class:TNEGraph
AddEdge	snap-core/graphmp.cpp	/^int TNGraphMP::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraphMP
AddEdge	snap-core/graphmp.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TNGraphMP
AddEdge	snap-core/mmnet.cpp	/^int TCrossNet::AddEdge(const int& sourceNId, const int& destNId, int EId){$/;"	f	class:TCrossNet
AddEdge	snap-core/network.cpp	/^int TDirNet::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TDirNet
AddEdge	snap-core/network.cpp	/^int TNEANet::AddEdge(const int& SrcNId, const int& DstNId, int EId) {$/;"	f	class:TNEANet
AddEdge	snap-core/network.cpp	/^int TUndirNet::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TUndirNet
AddEdge	snap-core/network.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TDirNet
AddEdge	snap-core/network.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TNodeNet
AddEdge	snap-core/network.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TUndirNet
AddEdge	snap-core/network.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId(), EdgeI()); }$/;"	f	class:TNodeEDatNet
AddEdge	snap-core/network.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId(), EdgeI.GetId()); }$/;"	f	class:TNEANet
AddEdge	snap-core/network.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId(), EdgeI.GetId(), EdgeI.GetDat()); }$/;"	f	class:TNodeEdgeNet
AddEdge	snap-core/network.h	/^int TNodeEDatNet<TNodeData, TEdgeData>::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNodeEDatNet
AddEdge	snap-core/network.h	/^int TNodeEDatNet<TNodeData, TEdgeData>::AddEdge(const int& SrcNId, const int& DstNId, const TEdgeData& EdgeDat) {$/;"	f	class:TNodeEDatNet
AddEdge	snap-core/network.h	/^int TNodeEdgeNet<TNodeData, TEdgeData>::AddEdge(const int& SrcNId, const int& DstNId, int EId) {$/;"	f	class:TNodeEdgeNet
AddEdge	snap-core/network.h	/^int TNodeEdgeNet<TNodeData, TEdgeData>::AddEdge(const int& SrcNId, const int& DstNId, int EId, const TEdgeData& EdgeDat) {$/;"	f	class:TNodeEdgeNet
AddEdge	snap-core/network.h	/^int TNodeNet<TNodeData>::AddEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNodeNet
AddEdge	snap-core/networkmp.cpp	/^int TNEANetMP::AddEdge(const int& SrcNId, const int& DstNId, int EId) {$/;"	f	class:TNEANetMP
AddEdge	snap-core/networkmp.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId(), EdgeI.GetId()); }$/;"	f	class:TNEANetMP
AddEdge	snap-exp/graphmp-exp.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId()); }$/;"	f	class:TUNGraphMP
AddEdge	snap-exp/mmgraph-exp.h	/^  int AddEdge(const TEdgeI& EdgeI) { return AddEdge(EdgeI.GetSrcNId(), EdgeI.GetDstNId(), EdgeI.GetTypeId(), EdgeI.GetId()); }$/;"	f	class:TMNet
AddEdge	snap-exp/mmgraph-exp.h	/^  int AddEdge(const int& SrcNId, const int& DstNId, const TStr& ETypeStr) { return AddEdge(SrcNId, DstNId, GetETypeId(ETypeStr)); }$/;"	f	class:TMNet
AddEdge	snap-exp/mmgraph-exp.h	/^  int AddEdge(const int& SrcNId, const int& DstNId, const int& ETypeId, int EId  = -1) {$/;"	f	class:TMNet
AddEdge	snap-exp/signnet.h	/^  void AddEdge(const int& SrcNId, const int& DstNId, const int& TrueSign) {$/;"	f	class:TEdgeSignPred
AddEdge2	snap-core/graph.cpp	/^int TNGraph::AddEdge2(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraph
AddEdge2	snap-core/graph.cpp	/^int TUNGraph::AddEdge2(const int& SrcNId, const int& DstNId) {$/;"	f	class:TUNGraph
AddEdgeAttr	snap-core/table.h	/^  void AddEdgeAttr(TStrV& Attrs) { AddGraphAttributeV(Attrs, true, false, false); }$/;"	f	class:TTable
AddEdgeAttr	snap-core/table.h	/^  void AddEdgeAttr(const TStr& Attr) { AddGraphAttribute(Attr, true, false, false); }$/;"	f	class:TTable
AddEdgeAttributes	snap-core/mmnet.cpp	/^int TMMNet::AddEdgeAttributes(PNEANet& NewNet, TCrossNet& Net, TVec<TPair<TStr, TStr> >& Attrs, int CrossId, int oldId, int EId) {$/;"	f	class:TMMNet
AddEdgeAttributes	snap-core/table.cpp	/^inline void TTable::AddEdgeAttributes(PNEANet& Graph, int RowId) {$/;"	f	class:TTable
AddEdgeUnchecked	snap-core/graph.cpp	/^int TNGraph::AddEdgeUnchecked(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraph
AddEdgeUnchecked	snap-core/graph.cpp	/^int TUNGraph::AddEdgeUnchecked(const int& SrcNId, const int& DstNId) {$/;"	f	class:TUNGraph
AddEdgeUnchecked	snap-core/graphmp.cpp	/^int TNGraphMP::AddEdgeUnchecked(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraphMP
AddEdgeUnchecked	snap-core/networkmp.cpp	/^void TNEANetMP::AddEdgeUnchecked(const TInt& EId, const int SrcNId, const int DstNId) {$/;"	f	class:TNEANetMP
AddEdges	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
AddEgonetFeatures	snap-adv/rolx.cpp	/^void AddEgonetFeatures(const PUNGraph Graph, TIntFtrH& Features) {$/;"	f
AddElecRes	snap-exp/wikinet.cpp	/^bool TWikiElecBs::AddElecRes(const TWikiMetaHist& WMH, const THash<TStr, TStr>& UsrMapH, const THash<TStr, TWikiElecBs::TElecSum>& ElecSumH) {$/;"	f	class:TWikiElecBs
AddEmptyV	glib-core/ds.h	/^int TVecPool<TVal, TSizeTy>::AddEmptyV(const int& ValVLen) {$/;"	f	class:TVecPool
AddEmptyV	glib-core/ds.h	/^int TVecPool<TVal>::AddEmptyV(const int& ValVLen) {$/;"	f	class:TGLib_OLD::TVecPool
AddErrBar	glib-core/gnuplot.cpp	/^int TGnuPlot::AddErrBar(const TFltKdV& XYValV, const TFltV& DeltaYV, const TStr& Label) {$/;"	f	class:TGnuPlot
AddErrBar	glib-core/gnuplot.cpp	/^int TGnuPlot::AddErrBar(const TFltPrV& XYValV, const TFltV& DeltaV, const TStr& DatLabel, const TStr& ErrLabel) {$/;"	f	class:TGnuPlot
AddErrBar	glib-core/gnuplot.cpp	/^int TGnuPlot::AddErrBar(const TFltPrV& XYValV, const TFltV& DeltaYV, const TStr& Label) {$/;"	f	class:TGnuPlot
AddErrBar	glib-core/gnuplot.cpp	/^int TGnuPlot::AddErrBar(const TFltTrV& XYDValV, const TStr& DatLabel, const TStr& ErrLabel) {$/;"	f	class:TGnuPlot
AddErrBar	glib-core/gnuplot.cpp	/^int TGnuPlot::AddErrBar(const TFltTrV& XYDValV, const TStr& Label) {$/;"	f	class:TGnuPlot
AddErrBar	glib-core/gnuplot.cpp	/^int TGnuPlot::AddErrBar(const TFltV& XValV, const TFltV& YValV, const TFltV& DeltaYV, const TStr& Label) {$/;"	f	class:TGnuPlot
AddErrBar	glib-core/gnuplot.cpp	/^int TGnuPlot::AddErrBar(const TFltV& YValV, const TFltV& DeltaYV, const TStr& Label) {$/;"	f	class:TGnuPlot
AddEscapeChAFromStr	glib-core/json.cpp	/^void TJsonVal::AddEscapeChAFromStr(const TStr& Str, TChA& ChA){$/;"	f	class:TJsonVal
AddEscapeStrFromStr	glib-core/json.h	/^  static TStr AddEscapeStrFromStr(const TStr& Str) { $/;"	f
AddExpFit	glib-core/gnuplot.cpp	/^int TGnuPlot::AddExpFit(const int& PlotId, const TGpSeriesTy& SeriesTy, const double& FitXOffset, const TStr& Style) {$/;"	f	class:TGnuPlot
AddFldVal	glib-core/http.cpp	/^void THttpResp::AddFldVal(const TStr& FldNm, const TStr& FldVal){$/;"	f	class:THttpResp
AddFldVal	glib-core/http.cpp	/^void THttpRq::AddFldVal(const TStr& FldNm, const TStr& FldVal){$/;"	f	class:THttpRq
AddFlt	snap-core/table.h	/^  void AddFlt(const TFlt& Val) { FltVals.Add(Val); }$/;"	f	class:TTableRow
AddFltAttrDatE	snap-core/mmnet.cpp	/^int TCrossNet::AddFltAttrDatE(const int& EId, const TFlt& value, const TStr& attr) {$/;"	f	class:TCrossNet
AddFltAttrDatE	snap-core/mmnet.h	/^  int AddFltAttrDatE(const TCrossEdgeI& EdgeI, const TFlt& value, const TStr& attr) { return AddFltAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TCrossNet
AddFltAttrDatE	snap-core/network.cpp	/^int TNEANet::AddFltAttrDatE(const int& EId, const TFlt& value, const TStr& attr) {$/;"	f	class:TNEANet
AddFltAttrDatE	snap-core/network.h	/^  int AddFltAttrDatE(const TEdgeI& EdgeI, const TFlt& value, const TStr& attr) { return AddFltAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddFltAttrDatE	snap-core/networkmp.cpp	/^int TNEANetMP::AddFltAttrDatE(const int& EId, const TFlt& value, const TStr& attr) {$/;"	f	class:TNEANetMP
AddFltAttrDatE	snap-core/networkmp.h	/^  int AddFltAttrDatE(const TEdgeI& EdgeId, const TFlt& value, const TStr& attr) { return AddFltAttrDatE(EdgeId.GetId(), value, attr); }$/;"	f	class:TNEANetMP
AddFltAttrDatN	snap-core/network.cpp	/^int TNEANet::AddFltAttrDatN(const int& NId, const TFlt& value, const TStr& attr) {$/;"	f	class:TNEANet
AddFltAttrDatN	snap-core/network.h	/^  int AddFltAttrDatN(const TNodeI& NodeI, const TFlt& value, const TStr& attr) { return AddFltAttrDatN(NodeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddFltAttrDatN	snap-core/networkmp.cpp	/^int TNEANetMP::AddFltAttrDatN(const int& NId, const TFlt& value, const TStr& attr) {$/;"	f	class:TNEANetMP
AddFltAttrDatN	snap-core/networkmp.h	/^  int AddFltAttrDatN(const TNodeI& NodeId, const TFlt& value, const TStr& attr) { return AddFltAttrDatN(NodeId.GetId(), value, attr); }$/;"	f	class:TNEANetMP
AddFltAttrE	snap-core/mmnet.cpp	/^int TCrossNet::AddFltAttrE(const TStr& attr, TFlt defaultValue) {$/;"	f	class:TCrossNet
AddFltAttrE	snap-core/network.cpp	/^int TNEANet::AddFltAttrE(const TStr& attr, TFlt defaultValue) {$/;"	f	class:TNEANet
AddFltAttrE	snap-core/networkmp.cpp	/^int TNEANetMP::AddFltAttrE(const TStr& attr, TFlt defaultValue) {$/;"	f	class:TNEANetMP
AddFltAttrN	snap-core/network.cpp	/^int TNEANet::AddFltAttrN(const TStr& attr, TFlt defaultValue) {$/;"	f	class:TNEANet
AddFltAttrN	snap-core/networkmp.cpp	/^int TNEANetMP::AddFltAttrN(const TStr& attr, TFlt defaultValue) {$/;"	f	class:TNEANetMP
AddFltCol	snap-core/table.cpp	/^void TTable::AddFltCol(const TStr& ColName) {$/;"	f	class:TTable
AddFront	glib-core/ds.h	/^TLstNd<TVal>* TLst<TVal>::AddFront(const TVal& Val){$/;"	f	class:TLst
AddFrontSorted	glib-core/ds.h	/^TLstNd<TVal>* TLst<TVal>::AddFrontSorted(const TVal& Val, const bool& Asc){$/;"	f	class:TLst
AddFunc	glib-core/gnuplot.cpp	/^int TGnuPlot::AddFunc(const TStr& FuncStr, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddGraphAttribute	snap-core/table.cpp	/^void TTable::AddGraphAttribute(const TStr& Attr, TBool IsEdge, TBool IsSrc, TBool IsDst) {$/;"	f	class:TTable
AddGraphAttributeV	snap-core/table.cpp	/^void TTable::AddGraphAttributeV(TStrV& Attrs, TBool IsEdge, TBool IsSrc, TBool IsDst) {$/;"	f	class:TTable
AddGroundTruth	snap-adv/cascnetinf.h	/^  void AddGroundTruth(PNGraph& gt) { GroundTruth = gt; }$/;"	f	class:TNetInfBs
AddHdFld	glib-core/http.cpp	/^void THttpResp::AddHdFld(const TStr& FldNm, const TStr& FldVal, TChA& HdChA){$/;"	f	class:THttpResp
AddHours	glib-core/tm.h	/^  TSecTm& AddHours(const int& Hours){$/;"	f	class:TSecTm
AddIdColumn	snap-core/table.cpp	/^void TTable::AddIdColumn(const TStr& ColName) {$/;"	f	class:TTable
AddIdColumn	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::AddIdColumn(const TStr& ColName) {$/;"	f	class:ExplicitStringTable
AddIdColumn	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::AddIdColumn(const TStr& ColName) {$/;"	f	class:PhysicalOrderTable
AddInETypeIds	snap-exp/mmgraph-exp.h	/^  void AddInETypeIds(const TIntV& ETypeIds) { } \/\/ Do nothing.$/;"	f	class:TMVNode
AddInETypeIds	snap-exp/mmgraph-exp.h	/^  void AddInETypeIds(const TIntV& ETypeIds) {$/;"	f	class:TCVNode
AddInETypeIds	snap-exp/mmgraph-exp.h	/^  void AddInETypeIds(const TIntV& ETypeIds) {$/;"	f	class:TSVNode
AddInEdge1	snap-core/graphmp.cpp	/^int TNGraphMP::AddInEdge1(int& DstIdx, const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraphMP
AddInEdge2	snap-core/graphmp.cpp	/^void TNGraphMP::AddInEdge2(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraphMP
AddInNbr	snap-exp/mmgraph-exp.h	/^  void AddInNbr(const int& ETypeId, const int& EId) { InEIdVV[ETypeId].Add(EId); InDeg++; }$/;"	f	class:TSVNode
AddInNbr	snap-exp/mmgraph-exp.h	/^  void AddInNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TCVNode
AddInNbr	snap-exp/mmgraph-exp.h	/^  void AddInNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TMVNode
AddInt	snap-core/table.h	/^  void AddInt(const TInt& Val) { IntVals.Add(Val); }$/;"	f	class:TTableRow
AddInt	snap-exp/alternativetable.h	/^  void AddInt(const TInt& Val) { IntVals.Add(Val); }$/;"	f	class:RowBasedTableRow
AddIntAttrDatE	snap-core/mmnet.cpp	/^int TCrossNet::AddIntAttrDatE(const int& EId, const TInt& value, const TStr& attr) {$/;"	f	class:TCrossNet
AddIntAttrDatE	snap-core/mmnet.h	/^  int AddIntAttrDatE(const TCrossEdgeI& EdgeI, const TInt& value, const TStr& attr) { return AddIntAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TCrossNet
AddIntAttrDatE	snap-core/network.cpp	/^int TNEANet::AddIntAttrDatE(const int& EId, const TInt& value, const TStr& attr) {$/;"	f	class:TNEANet
AddIntAttrDatE	snap-core/network.h	/^  int AddIntAttrDatE(const TEdgeI& EdgeI, const TInt& value, const TStr& attr) { return AddIntAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddIntAttrDatE	snap-core/networkmp.cpp	/^int TNEANetMP::AddIntAttrDatE(const int& EId, const TInt& value, const TStr& attr) {$/;"	f	class:TNEANetMP
AddIntAttrDatE	snap-core/networkmp.h	/^  int AddIntAttrDatE(const TEdgeI& EdgeId, const TInt& value, const TStr& attr) { return AddIntAttrDatE(EdgeId.GetId(), value, attr); }$/;"	f	class:TNEANetMP
AddIntAttrDatN	snap-core/network.cpp	/^int TNEANet::AddIntAttrDatN(const int& NId, const TInt& value, const TStr& attr) {$/;"	f	class:TNEANet
AddIntAttrDatN	snap-core/network.h	/^  int AddIntAttrDatN(const TNodeI& NodeI, const TInt& value, const TStr& attr) { return AddIntAttrDatN(NodeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddIntAttrDatN	snap-core/networkmp.cpp	/^int TNEANetMP::AddIntAttrDatN(const int& NId, const TInt& value, const TStr& attr) {$/;"	f	class:TNEANetMP
AddIntAttrDatN	snap-core/networkmp.h	/^  int AddIntAttrDatN(const TNodeI& NodeId, const TInt& value, const TStr& attr) { return AddIntAttrDatN(NodeId.GetId(), value, attr); }$/;"	f	class:TNEANetMP
AddIntAttrE	snap-core/mmnet.cpp	/^int TCrossNet::AddIntAttrE(const TStr& attr, TInt defaultValue){$/;"	f	class:TCrossNet
AddIntAttrE	snap-core/network.cpp	/^int TNEANet::AddIntAttrE(const TStr& attr, TInt defaultValue){$/;"	f	class:TNEANet
AddIntAttrE	snap-core/networkmp.cpp	/^int TNEANetMP::AddIntAttrE(const TStr& attr, TInt defaultValue){$/;"	f	class:TNEANetMP
AddIntAttrN	snap-core/network.cpp	/^int TNEANet::AddIntAttrN(const TStr& attr, TInt defaultValue){$/;"	f	class:TNEANet
AddIntAttrN	snap-core/networkmp.cpp	/^int TNEANetMP::AddIntAttrN(const TStr& attr, TInt defaultValue){$/;"	f	class:TNEANetMP
AddIntCol	snap-core/table.cpp	/^void TTable::AddIntCol(const TStr& ColName) {$/;"	f	class:TTable
AddIntVAttrByVecN	snap-core/mmnet.cpp	/^int TModeNet::AddIntVAttrByVecN(const TStr& attr, TVec<TIntV>& Attrs){$/;"	f	class:TModeNet
AddIntVAttrDatE	snap-core/network.cpp	/^int TNEANet::AddIntVAttrDatE(const int& EId, const TIntV& value, const TStr& attr) {$/;"	f	class:TNEANet
AddIntVAttrDatE	snap-core/network.h	/^  int AddIntVAttrDatE(const TEdgeI& EdgeI, const TIntV& value, const TStr& attr) { return AddIntVAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddIntVAttrDatN	snap-core/network.cpp	/^int TNEANet::AddIntVAttrDatN(const int& NId, const TIntV& value, const TStr& attr) {$/;"	f	class:TNEANet
AddIntVAttrDatN	snap-core/network.h	/^  int AddIntVAttrDatN(const TNodeI& NodeI, const TIntV& value, const TStr& attr) { return AddIntVAttrDatN(NodeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddIntVAttrE	snap-core/network.cpp	/^int TNEANet::AddIntVAttrE(const TStr& attr){$/;"	f	class:TNEANet
AddIntVAttrN	snap-core/network.cpp	/^int TNEANet::AddIntVAttrN(const TStr& attr){$/;"	f	class:TNEANet
AddJointRow	snap-core/table.cpp	/^void TTable::AddJointRow(const TTable& T1, const TTable& T2, TInt RowIdx1, TInt RowIdx2) {$/;"	f	class:TTable
AddJointRow	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::AddJointRow(const ExplicitStringTable& T1, const ExplicitStringTable& T2, TInt RowIdx1, TInt RowIdx2) {$/;"	f	class:ExplicitStringTable
AddKey	glib-core/hash.h	/^int THash<TKey, TDat, THashFunc>::AddKey(const TKey& Key){$/;"	f	class:THash
AddKey	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::AddKey(const TKey& Key) {$/;"	f	class:THashMP
AddKey	glib-core/shash.h	/^int THashSet<TKey, THashFunc>::AddKey(const TKey& Key) {$/;"	f	class:THashSet
AddKey	glib-core/shash.h	/^int TSparseHash<TKey, TDat, GroupSize>::AddKey(const TKey& Key) {$/;"	f	class:TSparseHash
AddKey	glib-core/shash.h	/^int TSparseSet<TKey, GroupSize>::AddKey(const TKey& Key) {$/;"	f	class:TSparseSet
AddKey	snap-core/ghash.h	/^int TGHash<TDat>::AddKey(const PNGraph& Graph) {$/;"	f	class:TGHash
AddKey1	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::AddKey1(const TKey& Key, bool& Found) {$/;"	f	class:THashMP
AddKey11	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::AddKey11(const int& BegTableN, const TKey& Key, bool& Found) {$/;"	f	class:THashMP
AddKey12	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::AddKey12(const int& BegTableN, const TKey& Key, bool& Found) {$/;"	f	class:THashMP
AddKey13	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::AddKey13(const int& BegTableN, const TKey& Key) {$/;"	f	class:THashMP
AddKey2	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::AddKey2(const int& BegTableN, const TKey& Key, bool& Found) {$/;"	f	class:THashMP
AddKeyV	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::AddKeyV(const TVec<TKey>& KeyV) {$/;"	f	class:THashSet
AddKeyword	snap-adv/cascdynetinf.h	/^  void AddKeyword(const int& KId) { Keywords.AddUnique(KId); }$/;"	f	class:THitInfo
AddLeftChild	snap-core/table.h	/^		void AddLeftChild(TPredicateNode* Child) { Left = Child; Child->Parent = this; }$/;"	f	class:TPredicateNode
AddLinFit	glib-core/gnuplot.cpp	/^int TGnuPlot::AddLinFit(const int& PlotId, const TGpSeriesTy& SeriesTy, const TStr& Style) {$/;"	f	class:TGnuPlot
AddLink	snap-exp/memes.cpp	/^void TClustNet::AddLink(const TQuote& SrcQt, const TQuote& DstQt) {$/;"	f	class:TClustNet
AddLocalFeatures	snap-adv/rolx.cpp	/^void AddLocalFeatures(const PUNGraph Graph, TIntFtrH& Features) {$/;"	f
AddLogFit	glib-core/gnuplot.cpp	/^int TGnuPlot::AddLogFit(const int& PlotId, const TGpSeriesTy& SeriesTy, const TStr& Style) {$/;"	f	class:TGnuPlot
AddMP	glib-core/ds.h	/^  TSizeTy AddMP(const TVal& Val){ const int Idx = __sync_fetch_and_add(&Vals, 1);$/;"	f	class:TVec
AddMerged	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::AddMerged(const TVal& Val){$/;"	f	class:TVec
AddMergedQtsToQtBs	snap-exp/memes.cpp	/^void TQuoteBs::AddMergedQtsToQtBs() {$/;"	f	class:TQuoteBs
AddMins	glib-core/tm.h	/^  TSecTm& AddMins(const int& Mins){$/;"	f	class:TSecTm
AddMode	snap-core/mmnet.cpp	/^int TMMNet::AddMode(const TStr& ModeName, const TInt& ModeId, const TModeNet& ModeNet) {$/;"	f	class:TMMNet
AddModeNet	snap-core/mmnet.cpp	/^int TMMNet::AddModeNet(const TStr& ModeName) {$/;"	f	class:TMMNet
AddNJointRowsMP	snap-core/table.cpp	/^void TTable::AddNJointRowsMP(const TTable& T1, const TTable& T2, const TVec<TIntPrV>& JointRowIDSet) {$/;"	f	class:TTable
AddNRows	snap-core/table.cpp	/^void TTable::AddNRows(int NewRows, const TVec<TIntV>& IntColsP, const TVec<TFltV>& FltColsP, const TVec<TIntV>& StrColMapsP) {$/;"	f	class:TTable
AddNType	snap-exp/mmgraph-exp.h	/^  int AddNType(const TStr& NTypeName) {$/;"	f	class:TMNet
AddNbrType	snap-core/mmnet.cpp	/^int TModeNet::AddNbrType(const TStr& CrossName, const bool sameMode, bool isDir) {$/;"	f	class:TModeNet
AddNeighbor	snap-core/mmnet.cpp	/^int TModeNet::AddNeighbor(const int& NId, const int& EId, bool outEdge, const TStr& CrossName, const bool sameMode, bool isDir){$/;"	f	class:TModeNet
AddNeighbor	snap-core/mmnet.cpp	/^int TModeNet::AddNeighbor(const int& NId, const int& EId, bool outEdge, const int linkId, const bool sameMode, bool isDir){$/;"	f	class:TModeNet
AddNeighborhoodFeatures	snap-adv/rolx.cpp	/^void AddNeighborhoodFeatures(const PUNGraph Graph, TIntFtrH& Features) {$/;"	f
AddNeighborhoods	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
AddNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual void AddNode(int Id){};$/;"	f	class:TNodeList
AddNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void AddNode(int Id) {$/;"	f	class:TCandidatesList
AddNode	glib-core/ds.h	/^  int AddNode(const int& ParentNodeId, const TVal& NodeVal=TVal()){$/;"	f	class:TTree
AddNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddNode(int NId, const TIntV& InNIdV, const TIntV& OutNIdV) {$/;"	f	class:TBigNet
AddNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddNode(int NId, const TIntV& InNIdV, const TIntV& OutNIdV, const TNodeData& NodeDat) {$/;"	f	class:TBigNet
AddNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddNode(int NId, const int& InDeg, const int& OutDeg) {$/;"	f	class:TBigNet
AddNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddNode(int NId, const int& InDeg, const int& OutDeg, const TNodeData& NodeDat) {$/;"	f	class:TBigNet
AddNode	snap-core/graph.cpp	/^int TBPGraph::AddNode(int NId, const bool& LeftNode) {$/;"	f	class:TBPGraph
AddNode	snap-core/graph.cpp	/^int TNEGraph::AddNode(int NId) {$/;"	f	class:TNEGraph
AddNode	snap-core/graph.cpp	/^int TNGraph::AddNode(const int& NId, const TIntV& InNIdV, const TIntV& OutNIdV) {$/;"	f	class:TNGraph
AddNode	snap-core/graph.cpp	/^int TNGraph::AddNode(const int& NId, const TVecPool<TInt>& Pool, const int& SrcVId, const int& DstVId) {$/;"	f	class:TNGraph
AddNode	snap-core/graph.cpp	/^int TNGraph::AddNode(int NId) {$/;"	f	class:TNGraph
AddNode	snap-core/graph.cpp	/^int TUNGraph::AddNode(const int& NId, const TIntV& NbrNIdV) {$/;"	f	class:TUNGraph
AddNode	snap-core/graph.cpp	/^int TUNGraph::AddNode(const int& NId, const TVecPool<TInt>& Pool, const int& NIdVId) {$/;"	f	class:TUNGraph
AddNode	snap-core/graph.cpp	/^int TUNGraph::AddNode(int NId) {$/;"	f	class:TUNGraph
AddNode	snap-core/graph.h	/^  int AddNode(const TNodeI& NodeI) { return AddNode(NodeI.GetId()); }$/;"	f	class:TUNGraph
AddNode	snap-core/graph.h	/^  int AddNode(const TNodeI& NodeI) { return AddNode(NodeI.GetId(), NodeI.IsLeft()); }$/;"	f	class:TBPGraph
AddNode	snap-core/graph.h	/^  int AddNode(const TNodeI& NodeId) { return AddNode(NodeId.GetId()); }$/;"	f	class:TNEGraph
AddNode	snap-core/graph.h	/^  int AddNode(const TNodeI& NodeId) { return AddNode(NodeId.GetId()); }$/;"	f	class:TNGraph
AddNode	snap-core/graphmp.cpp	/^int TNGraphMP::AddNode(const int& NId, const TIntV& InNIdV, const TIntV& OutNIdV) {$/;"	f	class:TNGraphMP
AddNode	snap-core/graphmp.cpp	/^int TNGraphMP::AddNode(const int& NId, const TVecPool<TInt>& Pool, const int& SrcVId, const int& DstVId) {$/;"	f	class:TNGraphMP
AddNode	snap-core/graphmp.cpp	/^int TNGraphMP::AddNode(int NId) {$/;"	f	class:TNGraphMP
AddNode	snap-core/graphmp.h	/^  int AddNode(const TNodeI& NodeId) { return AddNode(NodeId.GetId()); }$/;"	f	class:TNGraphMP
AddNode	snap-core/network.cpp	/^int TDirNet::AddNode(const int& NId, const TIntV& InNIdV, const TIntV& OutNIdV) {$/;"	f	class:TDirNet
AddNode	snap-core/network.cpp	/^int TDirNet::AddNode(const int& NId, const TVecPool<TInt>& Pool, const int& SrcVId, const int& DstVId) {$/;"	f	class:TDirNet
AddNode	snap-core/network.cpp	/^int TDirNet::AddNode(int NId) {$/;"	f	class:TDirNet
AddNode	snap-core/network.cpp	/^int TNEANet::AddNode(int NId) {$/;"	f	class:TNEANet
AddNode	snap-core/network.cpp	/^int TUndirNet::AddNode(const int& NId, const TIntV& NbrNIdV) {$/;"	f	class:TUndirNet
AddNode	snap-core/network.cpp	/^int TUndirNet::AddNode(const int& NId, const TVecPool<TInt>& Pool, const int& NIdVId) {$/;"	f	class:TUndirNet
AddNode	snap-core/network.cpp	/^int TUndirNet::AddNode(int NId) {$/;"	f	class:TUndirNet
AddNode	snap-core/network.h	/^  int AddNode(const TNodeI& NodeI) { return AddNode(NodeI.GetId()); }$/;"	f	class:TNEANet
AddNode	snap-core/network.h	/^  int AddNode(const TNodeI& NodeI) { return AddNode(NodeI.GetId()); }$/;"	f	class:TUndirNet
AddNode	snap-core/network.h	/^  int AddNode(const TNodeI& NodeI) { return AddNode(NodeI.GetId(), NodeI.GetDat()); }$/;"	f	class:TNodeEDatNet
AddNode	snap-core/network.h	/^  int AddNode(const TNodeI& NodeI) { return AddNode(NodeI.GetId(), NodeI.GetDat()); }$/;"	f	class:TNodeEdgeNet
AddNode	snap-core/network.h	/^  int AddNode(const TNodeI& NodeI) { return AddNode(NodeI.GetId(), NodeI.GetDat()); }$/;"	f	class:TNodeNet
AddNode	snap-core/network.h	/^  int AddNode(const TNodeI& NodeId) { return AddNode(NodeId.GetId()); }$/;"	f	class:TDirNet
AddNode	snap-core/network.h	/^int TNodeEDatNet<TNodeData, TEdgeData>::AddNode(int NId) {$/;"	f	class:TNodeEDatNet
AddNode	snap-core/network.h	/^int TNodeEDatNet<TNodeData, TEdgeData>::AddNode(int NId, const TNodeData& NodeDat) {$/;"	f	class:TNodeEDatNet
AddNode	snap-core/network.h	/^int TNodeEdgeNet<TNodeData, TEdgeData>::AddNode(int NId) {$/;"	f	class:TNodeEdgeNet
AddNode	snap-core/network.h	/^int TNodeEdgeNet<TNodeData, TEdgeData>::AddNode(int NId, const TNodeData& NodeDat) {$/;"	f	class:TNodeEdgeNet
AddNode	snap-core/network.h	/^int TNodeNet<TNodeData>::AddNode(int NId) {$/;"	f	class:TNodeNet
AddNode	snap-core/network.h	/^int TNodeNet<TNodeData>::AddNode(int NId, const TNodeData& NodeDat) {$/;"	f	class:TNodeNet
AddNode	snap-core/networkmp.cpp	/^int TNEANetMP::AddNode(int NId) {$/;"	f	class:TNEANetMP
AddNode	snap-core/networkmp.h	/^  int AddNode(const TNodeI& NodeId) { return AddNode(NodeId.GetId()); }$/;"	f	class:TNEANetMP
AddNode	snap-exp/graphmp-exp.h	/^  int AddNode(const TNodeI& NodeId) { return AddNode(NodeId.GetId()); }$/;"	f	class:TUNGraphMP
AddNode	snap-exp/mmgraph-exp.h	/^  int AddNode(const TNodeI& NodeId) { return AddNode(NodeId.GetTypeId(), NodeId.GetId()); }$/;"	f	class:TMNet
AddNode	snap-exp/mmgraph-exp.h	/^  int AddNode(const TStr& NTypeStr) { return AddNode(GetNTypeId(NTypeStr)); }$/;"	f	class:TMNet
AddNode	snap-exp/mmgraph-exp.h	/^  int AddNode(const int& NTypeId, int NId = -1) {$/;"	f	class:TMNet
AddNodeAttr	snap-core/table.h	/^  void AddNodeAttr(TStrV& Attrs) { AddSrcNodeAttr(Attrs); AddDstNodeAttr(Attrs); }$/;"	f	class:TTable
AddNodeAttr	snap-core/table.h	/^  void AddNodeAttr(const TStr& Attr) { AddSrcNodeAttr(Attr); AddDstNodeAttr(Attr); }$/;"	f	class:TTable
AddNodeAttributes	snap-core/mmnet.cpp	/^int TMMNet::AddNodeAttributes(PNEANet& NewNet, TModeNet& Net, TVec<TPair<TStr, TStr> >& Attrs, int ModeId, int oldId, int NId) {$/;"	f	class:TMMNet
AddNodeAttributes	snap-core/table.cpp	/^inline void TTable::AddNodeAttributes(TInt NId, TStrV NodeAttrV, TInt RowId, THash<TInt, TStrIntVH>& NodeIntAttrs,$/;"	f	class:TTable
AddNodeNm	snap-adv/cascdynetinf.h	/^  void AddNodeNm(const int& NId, const TNodeInfo& Info) { NodeNmH.AddDat(NId, Info); }$/;"	f	class:TNIBs
AddNodeNm	snap-adv/cascnetinf.h	/^  void AddNodeNm(const int& NId, const TNodeInfo& Info) { NodeNmH.AddDat(NId, Info); }$/;"	f	class:TNetInfBs
AddNodeUnchecked	snap-core/graph.cpp	/^int TNGraph::AddNodeUnchecked(int NId) {$/;"	f	class:TNGraph
AddNodeUnchecked	snap-core/graph.cpp	/^int TUNGraph::AddNodeUnchecked(int NId) {$/;"	f	class:TUNGraph
AddNodeUnchecked	snap-core/graphmp.cpp	/^int TNGraphMP::AddNodeUnchecked(int NId) {$/;"	f	class:TNGraphMP
AddNodeWithEdges	snap-core/graphmp.cpp	/^void TNGraphMP::AddNodeWithEdges(const TInt& NId, TIntV& InNIdV, TIntV& OutNIdV) {$/;"	f	class:TNGraphMP
AddNodeWithEdges	snap-core/networkmp.cpp	/^void TNEANetMP::AddNodeWithEdges(const TInt& NId, TIntV& InEIdV, TIntV& OutEIdV) {$/;"	f	class:TNEANetMP
AddNodes	snap-core/ff.cpp	/^TFfGGen::TStopReason TFfGGen::AddNodes(const int& GraphNodes, const bool& FloodStop) {$/;"	f	class:TFfGGen
AddNodes	snap-core/ff.cpp	/^TFfGGen::TStopReason TUndirFFire::AddNodes(const int& GraphNodes, const bool& FloodStop) {$/;"	f	class:TUndirFFire
AddOutETypeIds	snap-exp/mmgraph-exp.h	/^  void AddOutETypeIds(const TIntV& ETypeIds) { } \/\/ Do nothing.$/;"	f	class:TMVNode
AddOutETypeIds	snap-exp/mmgraph-exp.h	/^  void AddOutETypeIds(const TIntV& ETypeIds) {$/;"	f	class:TCVNode
AddOutETypeIds	snap-exp/mmgraph-exp.h	/^  void AddOutETypeIds(const TIntV& ETypeIds) {$/;"	f	class:TSVNode
AddOutEdge1	snap-core/graphmp.cpp	/^int TNGraphMP::AddOutEdge1(int& SrcIdx, const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraphMP
AddOutEdge2	snap-core/graphmp.cpp	/^void TNGraphMP::AddOutEdge2(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNGraphMP
AddOutNbr	snap-exp/mmgraph-exp.h	/^  void AddOutNbr(const int& ETypeId, const int& EId) { OutEIdVV[ETypeId].Add(EId); OutDeg++; }$/;"	f	class:TSVNode
AddOutNbr	snap-exp/mmgraph-exp.h	/^  void AddOutNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TCVNode
AddOutNbr	snap-exp/mmgraph-exp.h	/^  void AddOutNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TMVNode
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TFltKdV& XYValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TFltPrV& XYValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TFltV& XValV, const TFltV& YValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TFltV& YValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TIntFltKdV& XYValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TIntFltPrV& XYValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TIntKdV& XYValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TIntPrV& XYValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TIntV& YValV, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TStr& DataFNm, const int& ColX, const int& ColY,$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPlot(const TStr& DataFNm, const int& ColY,$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.h	/^int TGnuPlot::AddPlot(const THash<TKey, TDat, THashFunc>& XYValH, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style, const bool& ExpBucket) {$/;"	f	class:TGnuPlot
AddPlot	glib-core/gnuplot.h	/^int TGnuPlot::AddPlot(const THash<TKey, TMom, THashFunc>& ValMomH, const TGpSeriesTy& SeriesTy, const TStr& Label, const TStr& Style, bool PlotAvg, bool PlotMed, bool PlotMin, bool PlotMax, bool PlotSDev, bool PlotStdErr, const bool& ExpBucket) {$/;"	f	class:TGnuPlot
AddPred	snap-exp/signnet.h	/^  void AddPred(const TStr& Method, const int& PredSign, const int& TrueSign) {$/;"	f	class:TEdgeSignPred
AddPwrFit	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPwrFit(const int& PlotId, const TGpSeriesTy& SeriesTy, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPwrFit1	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPwrFit1(const int& PlotId, const TGpSeriesTy& SeriesTy, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPwrFit2	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPwrFit2(const int& PlotId, const TGpSeriesTy& SeriesTy, const double& MinX, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPwrFit3	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPwrFit3(const int& PlotId, const TGpSeriesTy& SeriesTy, const double& MinX, const TStr& Style) {$/;"	f	class:TGnuPlot
AddPwrFit3	glib-core/gnuplot.cpp	/^int TGnuPlot::AddPwrFit3(const int& PlotId, const TGpSeriesTy& SeriesTy, const double& MinX, const TStr& Style, double& Intercept, double& Slope, double& R2) {$/;"	f	class:TGnuPlot
AddQ	snap-core/cmty.cpp	/^    void AddQ(const int& NId, const double& Q) {$/;"	f	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat
AddQChAFromStr	glib-core/json.cpp	/^void TJsonVal::AddQChAFromStr(const TStr& Str, TChA& ChA){$/;"	f	class:TJsonVal
AddQuote	snap-exp/memes.cpp	/^void TQuoteBs::AddQuote(const TQuote& Quote, const TQuoteBs& CurQtBs) {$/;"	f	class:TQuoteBs
AddQuote	snap-exp/memes.cpp	/^void TQuoteBs::AddQuote(const TVec<TChA>& QuoteV, const TVec<TChA>& LinkV, const TChA& PostUrlStr, const TSecTm& PubTm, const int& MinQtWrdLen) {$/;"	f	class:TQuoteBs
AddRecursiveFeatures	snap-adv/rolx.cpp	/^void AddRecursiveFeatures(const PUNGraph Graph, TIntFtrH& Features) {$/;"	f
AddRightChild	snap-core/table.h	/^		void AddRightChild(TPredicateNode* Child) { Right = Child; Child->Parent = this; }$/;"	f	class:TPredicateNode
AddRndNoise	snap-adv/kronecker.cpp	/^void TKronMtx::AddRndNoise(const double& SDev) {$/;"	f	class:TKronMtx
AddRndNoise	snap-adv/mag.cpp	/^void TMAGAffMtx::AddRndNoise(TRnd& Rnd, const double& SDev) {$/;"	f	class:TMAGAffMtx
AddRoot	glib-core/ds.h	/^  int AddRoot(const TVal& NodeVal=TVal()){$/;"	f	class:TTree
AddRow	snap-core/table.cpp	/^void TTable::AddRow(const TIntV& IntVals, const TFltV& FltVals, const TStrV& StrVals) {$/;"	f	class:TTable
AddRow	snap-core/table.cpp	/^void TTable::AddRow(const TRowIterator& RI) {$/;"	f	class:TTable
AddRow	snap-core/table.h	/^  void AddRow(const TTableRow& Row) { AddRow(Row.GetIntVals(), Row.GetFltVals(), Row.GetStrVals()); };$/;"	f	class:TTable
AddRow	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::AddRow(const ExplicitStringRowIterator& RI) {$/;"	f	class:ExplicitStringTable
AddRw	glib-core/lx.cpp	/^TLxSym TILx::AddRw(const TStr& Str){$/;"	f	class:TILx
AddRw	glib-core/lx.cpp	/^TLxSym TOLx::AddRw(const TStr& Str){$/;"	f	class:TOLx
AddSAttr	snap-core/attr.cpp	/^int TAttr::AddSAttr(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TAttr
AddSAttr	snap-core/attr.cpp	/^int TAttrPair::AddSAttr(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TAttrPair
AddSAttrDat	snap-core/attr.cpp	/^int TAttr::AddSAttrDat(const TInt& Id, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TAttr
AddSAttrDat	snap-core/attr.cpp	/^int TAttr::AddSAttrDat(const TInt& Id, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TAttr
AddSAttrDat	snap-core/attr.cpp	/^int TAttr::AddSAttrDat(const TInt& Id, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TAttr
AddSAttrDat	snap-core/attr.cpp	/^int TAttr::AddSAttrDat(const TInt& Id, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TAttr
AddSAttrDat	snap-core/attr.cpp	/^int TAttr::AddSAttrDat(const TInt& Id, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TAttr
AddSAttrDat	snap-core/attr.cpp	/^int TAttr::AddSAttrDat(const TInt& Id, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TAttr
AddSAttrDat	snap-core/attr.cpp	/^int TAttrPair::AddSAttrDat(const TIntPr& Id, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TAttrPair
AddSAttrDat	snap-core/attr.cpp	/^int TAttrPair::AddSAttrDat(const TIntPr& Id, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TAttrPair
AddSAttrDat	snap-core/attr.cpp	/^int TAttrPair::AddSAttrDat(const TIntPr& Id, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TAttrPair
AddSAttrDat	snap-core/attr.cpp	/^int TAttrPair::AddSAttrDat(const TIntPr& Id, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TAttrPair
AddSAttrDat	snap-core/attr.cpp	/^int TAttrPair::AddSAttrDat(const TIntPr& Id, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TAttrPair
AddSAttrDat	snap-core/attr.cpp	/^int TAttrPair::AddSAttrDat(const TIntPr& Id, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TAttrPair
AddSAttrDatE	snap-core/network.cpp	/^int TDirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.cpp	/^int TDirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.cpp	/^int TDirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.cpp	/^int TDirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.cpp	/^int TDirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.cpp	/^int TDirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.cpp	/^int TNEANet::AddSAttrDatE(const TInt& EId, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.cpp	/^int TNEANet::AddSAttrDatE(const TInt& EId, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.cpp	/^int TNEANet::AddSAttrDatE(const TInt& EId, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.cpp	/^int TNEANet::AddSAttrDatE(const TInt& EId, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.cpp	/^int TNEANet::AddSAttrDatE(const TInt& EId, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.cpp	/^int TNEANet::AddSAttrDatE(const TInt& EId, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TFlt& Val){$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TFlt& Val){$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TFlt& Val){$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatE	snap-core/network.h	/^  int AddSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.cpp	/^int TDirNet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.cpp	/^int TDirNet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.cpp	/^int TDirNet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.cpp	/^int TDirNet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.cpp	/^int TDirNet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.cpp	/^int TDirNet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.cpp	/^int TNEANet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.cpp	/^int TNEANet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.cpp	/^int TNEANet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.cpp	/^int TNEANet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.cpp	/^int TNEANet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.cpp	/^int TNEANet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatN(const TInt& NId, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.cpp	/^int TUndirNet::AddSAttrDatN(const TInt& NId, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TFlt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TFlt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TInt& Val) {$/;"	f	class:TUndirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TDirNet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TNEANet
AddSAttrDatN	snap-core/network.h	/^  int AddSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, const TStr& Val) {$/;"	f	class:TUndirNet
AddSAttrE	snap-core/network.cpp	/^int TDirNet::AddSAttrE(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TDirNet
AddSAttrE	snap-core/network.cpp	/^int TNEANet::AddSAttrE(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TNEANet
AddSAttrE	snap-core/network.cpp	/^int TUndirNet::AddSAttrE(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TUndirNet
AddSAttrN	snap-core/network.cpp	/^int TDirNet::AddSAttrN(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TDirNet
AddSAttrN	snap-core/network.cpp	/^int TNEANet::AddSAttrN(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TNEANet
AddSAttrN	snap-core/network.cpp	/^int TUndirNet::AddSAttrN(const TStr& Name, const TAttrType& AttrType, TInt& AttrId) {$/;"	f	class:TUndirNet
AddSchemaCol	snap-core/table.h	/^  void AddSchemaCol(const TStr& ColName, TAttrType ColType) {$/;"	f	class:TTable
AddSchemaCol	snap-exp/alternativetable.h	/^  void AddSchemaCol(const TStr& ColName, TAttrType ColType) { $/;"	f	class:ExplicitStringTable
AddSchemaCol	snap-exp/alternativetable.h	/^  void AddSchemaCol(const TStr& ColName, TAttrType ColType) { $/;"	f	class:PhysicalOrderTable
AddSecs	glib-core/tm.h	/^  TSecTm& AddSecs(const int& Secs){$/;"	f	class:TSecTm
AddSelectedRows	snap-core/table.cpp	/^void TTable::AddSelectedRows(const TTable& Table, const TIntV& RowIDs) {$/;"	f	class:TTable
AddSelfEdges	snap-core/alg.h	/^void AddSelfEdges(const PGraph& Graph) {$/;"	f	namespace:TSnap
AddSorted	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::AddSorted(const TVal& Val, const bool& Asc, const TSizeTy& _MxVals){$/;"	f	class:TVec
AddSorted	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::AddSorted(int* Beg, int* End, const int& Val) {$/;"	f	class:TBigNet
AddSpuriousEdges	examples/cascades/cascades.cpp	/^PNGraph AddSpuriousEdges(const PUNGraph& Graph, const PNGraph& Casc, TIntH NIdTmH) {$/;"	f
AddSrcNodeAttr	snap-core/table.h	/^  void AddSrcNodeAttr(TStrV& Attrs) { AddGraphAttributeV(Attrs, false, true, false); }$/;"	f	class:TTable
AddSrcNodeAttr	snap-core/table.h	/^  void AddSrcNodeAttr(const TStr& Attr) { AddGraphAttribute(Attr, false, true, false); }$/;"	f	class:TTable
AddStr	glib-core/dt.cpp	/^uint TStrPool::AddStr(const char *Str, const uint& Len) {$/;"	f	class:TStrPool
AddStr	glib-core/dt.cpp	/^uint64 TStrPool64::AddStr(const TStr& Str) {$/;"	f	class:TStrPool64
AddStr	glib-core/hash.cpp	/^int TBigStrPool::AddStr(const char *Str, uint Len) {$/;"	f	class:TBigStrPool
AddStr	glib-core/hash.h	/^  int AddStr(const TStr& Str) { return AddStr(Str.CStr(), Str.Len() + 1); }$/;"	f
AddStr	glib-core/hash.h	/^  int AddStr(const char *Str) { return AddStr(Str, uint(strlen(Str)) + 1); }$/;"	f
AddStr	snap-core/table.h	/^  TInt AddStr(const TStr& Key) {$/;"	f	class:TTableContext
AddStr	snap-core/table.h	/^  void AddStr(const TStr& Val) { StrVals.Add(Val); }$/;"	f	class:TTableRow
AddStr	snap-exp/imdbnet.h	/^  int AddStr(const TStr& Str) { return StrIdH.AddKey(Str); }$/;"	f	class:TImdbNet
AddStr	snap-exp/memes.h	/^  int AddStr(const TChA& ChA) { return StrQtIdH.AddDat(ChA.CStr(), -1); }$/;"	f	class:TQuoteBs
AddStr	snap-exp/memes.h	/^  int AddStr(const char* CStr) { return StrQtIdH.AddDat(CStr, -1); }$/;"	f	class:TQuoteBs
AddStrAttrDatE	snap-core/mmnet.cpp	/^int TCrossNet::AddStrAttrDatE(const int& EId, const TStr& value, const TStr& attr) {$/;"	f	class:TCrossNet
AddStrAttrDatE	snap-core/mmnet.h	/^  int AddStrAttrDatE(const TCrossEdgeI& EdgeI, const TStr& value, const TStr& attr) { return AddStrAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TCrossNet
AddStrAttrDatE	snap-core/network.cpp	/^int TNEANet::AddStrAttrDatE(const int& EId, const TStr& value, const TStr& attr) {$/;"	f	class:TNEANet
AddStrAttrDatE	snap-core/network.h	/^  int AddStrAttrDatE(const TEdgeI& EdgeI, const TStr& value, const TStr& attr) { return AddStrAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddStrAttrDatE	snap-core/networkmp.cpp	/^int TNEANetMP::AddStrAttrDatE(const int& EId, const TStr& value, const TStr& attr) {$/;"	f	class:TNEANetMP
AddStrAttrDatE	snap-core/networkmp.h	/^  int AddStrAttrDatE(const TEdgeI& EdgeId, const TStr& value, const TStr& attr) { return AddStrAttrDatE(EdgeId.GetId(), value, attr); }$/;"	f	class:TNEANetMP
AddStrAttrDatN	snap-core/network.cpp	/^int TNEANet::AddStrAttrDatN(const int& NId, const TStr& value, const TStr& attr) {$/;"	f	class:TNEANet
AddStrAttrDatN	snap-core/network.h	/^  int AddStrAttrDatN(const TNodeI& NodeI, const TStr& value, const TStr& attr) { return AddStrAttrDatN(NodeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AddStrAttrDatN	snap-core/networkmp.cpp	/^int TNEANetMP::AddStrAttrDatN(const int& NId, const TStr& value, const TStr& attr) {$/;"	f	class:TNEANetMP
AddStrAttrDatN	snap-core/networkmp.h	/^  int AddStrAttrDatN(const TNodeI& NodeId, const TStr& value, const TStr& attr) { return AddStrAttrDatN(NodeId.GetId(), value, attr); }$/;"	f	class:TNEANetMP
AddStrAttrE	snap-core/mmnet.cpp	/^int TCrossNet::AddStrAttrE(const TStr& attr, TStr defaultValue) {$/;"	f	class:TCrossNet
AddStrAttrE	snap-core/network.cpp	/^int TNEANet::AddStrAttrE(const TStr& attr, TStr defaultValue) {$/;"	f	class:TNEANet
AddStrAttrE	snap-core/networkmp.cpp	/^int TNEANetMP::AddStrAttrE(const TStr& attr, TStr defaultValue) {$/;"	f	class:TNEANetMP
AddStrAttrN	snap-core/network.cpp	/^int TNEANet::AddStrAttrN(const TStr& attr, TStr defaultValue) {$/;"	f	class:TNEANet
AddStrAttrN	snap-core/networkmp.cpp	/^int TNEANetMP::AddStrAttrN(const TStr& attr, TStr defaultValue) {$/;"	f	class:TNEANetMP
AddStrCol	snap-core/table.cpp	/^void TTable::AddStrCol(const TStr& ColName) {$/;"	f	class:TTable
AddStrVal	snap-core/table.cpp	/^void TTable::AddStrVal(const TInt& ColIdx, const TStr& Key) {$/;"	f	class:TTable
AddStrVal	snap-core/table.cpp	/^void TTable::AddStrVal(const TStr& Col, const TStr& Key) {$/;"	f	class:TTable
AddStrVal	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::AddStrVal(const TInt& ColIdx, const TStr& Val) {$/;"	f	class:PhysicalOrderTable
AddStrVal	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::AddStrVal(const TStr& Col, const TStr& Val) {$/;"	f	class:PhysicalOrderTable
AddTable	snap-core/table.cpp	/^void TTable::AddTable(const TTable& T) {$/;"	f	class:TTable
AddTime	glib-core/tm.cpp	/^void TTm::AddTime(const int& Hours,$/;"	f	class:TTm
AddTimer	glib-core/tm.cpp	/^int TTmProfiler::AddTimer(const TStr& TimerNm) { $/;"	f	class:TTmProfiler
AddToArr	glib-core/json.h	/^  void AddToArr(const PJsonVal& Val){$/;"	f
AddToBestCutH	snap-adv/ncp.cpp	/^void TLocClustStat::AddToBestCutH(const PUNGraph& Graph, const TIntV& NIdV, const bool& AddBestCond) {$/;"	f	class:TLocClustStat
AddToFMid	glib-core/dt.cpp	/^TStr TStr::AddToFMid(const TStr& FNm, const TStr& ExtFMid){$/;"	f	class:TStr
AddToObj	glib-core/json.cpp	/^void TJsonVal::AddToObj(const PJsonVal& Val) {$/;"	f	class:TJsonVal
AddToObj	glib-core/json.h	/^  void AddToObj(const TStr& KeyNm, const PJsonVal& Val){$/;"	f
AddToObj	glib-core/json.h	/^  void AddToObj(const TStr& KeyNm, const TJsonValV& ValV){ AddToObj(KeyNm, NewArr(ValV)); }$/;"	f
AddToObj	glib-core/json.h	/^  void AddToObj(const TStr& KeyNm, const TStr& Val){ AddToObj(KeyNm, NewStr(Val)); }$/;"	f
AddToObj	glib-core/json.h	/^  void AddToObj(const TStr& KeyNm, const bool& Val){ AddToObj(KeyNm, NewBool(Val)); }$/;"	f
AddToObj	glib-core/json.h	/^  void AddToObj(const TStr& KeyNm, const char* Val){ AddToObj(KeyNm, NewStr(Val)); }$/;"	f
AddToObj	glib-core/json.h	/^  void AddToObj(const TStr& KeyNm, const double& Val){ AddToObj(KeyNm, NewNum(Val)); }$/;"	f
AddToObj	glib-core/json.h	/^  void AddToObj(const TStr& KeyNm, const int& Val){ AddToObj(KeyNm, NewNum((double)Val)); }$/;"	f
AddTokToChA	glib-core/xml.cpp	/^void TXmlTok::AddTokToChA(const bool& XmlP, TChA& ChA) const {$/;"	f	class:TXmlTok
AddUndirNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddUndirNode(int NId, const TIntV& EdgeNIdV) {$/;"	f	class:TBigNet
AddUndirNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddUndirNode(int NId, const TIntV& EdgeNIdV, const TNodeData& NodeDat) {$/;"	f	class:TBigNet
AddUndirNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddUndirNode(int NId, const int& Deg) {$/;"	f	class:TBigNet
AddUndirNode	snap-core/bignet.h	/^int TBigNet<TNodeData, IsDir>::AddUndirNode(int NId, const int& Deg, const TNodeData& NodeDat) {$/;"	f	class:TBigNet
AddUnique	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::AddUnique(const TVal& Val){$/;"	f	class:TVec
AddUrl	snap-exp/memenet.h	/^  int AddUrl(const char* UrlStr, const TSecTm& PostTm) { $/;"	f	class:TBlogPostNet
AddUrl	snap-exp/memenet.h	/^  int AddUrl(const char* UrlStr, const TUrlTy& UrlTy) { return UrlH.AddDat(UrlStr, UrlTy); }$/;"	f	class:TMemeNetBs
AddUsr	snap-exp/wikinet.h	/^  int AddUsr(const TChA& ChA) { Assert(TChA(ChA).SearchCh(' ')==-1 && TChA(ChA)==TChA(ChA).ToLc());$/;"	f	class:TWikiElecBs
AddUsr	snap-exp/wikinet.h	/^  int AddUsr(const char* CStr) { Assert(TChA(CStr)==TChA(CStr).ToLc() && TChA(CStr).SearchCh(' ')==-1);$/;"	f	class:TWikiElecBs
AddV	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::AddV(const TVec<TVal, TSizeTy>& ValV){$/;"	f	class:TVec
AddV	glib-core/ds.h	/^int TVecPool<TVal, TSizeTy>::AddV(const TValV& ValV) {$/;"	f	class:TVecPool
AddV	glib-core/ds.h	/^int TVecPool<TVal>::AddV(const TValV& ValV) {$/;"	f	class:TGLib_OLD::TVecPool
AddV	glib-core/shash.h	/^  void AddV(TSIn& FIn) { int NVals;  FIn.Load(NVals);$/;"	f	class:TPackVec
AddV	glib-core/shash.h	/^  void AddV(const TPackVec<TVal>& ValV) { ResizeDelta(ValV.Len());$/;"	f	class:TPackVec
AddV	glib-core/shash.h	/^  void AddV(const TVec<TVal>& ValV) { ResizeDelta(ValV.Len());$/;"	f	class:TPackVec
AddV	snap-exp/lsh.cpp	/^void TLSHash::AddV(TVec<TFltV> NewV) {$/;"	f	class:TLSHash
AddVMerged	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::AddVMerged(const TVec<TVal, TSizeTy>& ValV){$/;"	f	class:TVec
AddValues	test/test-alg.cpp	/^void AddValues(TIntV& Vector, int NumValues, int Value) {$/;"	f
AddVec	glib-core/linalg.cpp	/^void TLinAlg::AddVec(const TIntFltKdV& x, const TIntFltKdV& y, TIntFltKdV& z) {$/;"	f	class:TLinAlg
AddVec	glib-core/linalg.cpp	/^void TLinAlg::AddVec(const double& k, const TFltV& x, const TFltV& y, TFltV& z) {$/;"	f	class:TLinAlg
AddVec	glib-core/linalg.cpp	/^void TLinAlg::AddVec(const double& k, const TIntFltKdV& x, TFltV& y) {$/;"	f	class:TLinAlg
AddVec	glib-core/linalg.cpp	/^void TLinAlg::AddVec(const double& k, const TIntFltKdV& x, const TFltV& y, TFltV& z) {$/;"	f	class:TLinAlg
AddVec	glib-core/linalg.cpp	/^void TLinAlg::AddVec(double k, const TFltVV& X, int ColId, TFltV& Result){$/;"	f	class:TLinAlg
AddVec	glib-core/linalg.cpp	/^void TLinAlg::AddVec(double k, const TFltVV& X, int ColIdX, TFltVV& Y, int ColIdY){$/;"	f	class:TLinAlg
AddWeeks	glib-core/tm.h	/^  TSecTm& AddWeeks(const int& Weeks){$/;"	f	class:TSecTm
AddXDim	glib-core/ds.h	/^void TVVec<TVal>::AddXDim(){$/;"	f	class:TVVec
AddYDim	glib-core/ds.h	/^void TVVec<TVal>::AddYDim(){$/;"	f	class:TVVec
Addr	glib-core/bd.h	/^  TRec* Addr;$/;"	m	class:TPt
Addr	glib-core/blobbs.h	/^  uint Addr;$/;"	v
Addr	glib-core/ds.h	/^  TRec* Addr;$/;"	m	class:TAPt
AdjustHeap	snap-core/gbase.h	/^void THeap<TVal, TCmp>::AdjustHeap(const int& First, int HoleIdx, const int& Len, TVal Val) {$/;"	f	class:THeap
AdjustLabels	snap-adv/motifcluster.cpp	/^void ChibaNishizekiWeighter::AdjustLabels(int kcurr, int klast, const TIntV& Up) {$/;"	f	class:ChibaNishizekiWeighter
Admin	snap-exp/wikinet.h	/^  TBool Admin;$/;"	m	class:TWikiUsr
AffMtxV	snap-adv/mag.h	/^	TMAGAffMtxV AffMtxV;$/;"	m	class:TMAGParam
AggrPolicy	snap-core/table.h	/^  TAttrAggr AggrPolicy; \/\/\/< Aggregation policy used for solving conflicts between different values of an attribute of the same node.$/;"	m	class:TTable
Aggregate	snap-core/table.cpp	/^void TTable::Aggregate(const TStrV& GroupByAttrs, TAttrAggr AggOp,$/;"	f	class:TTable
AggregateCols	snap-core/table.cpp	/^void TTable::AggregateCols(const TStrV& AggrAttrs, TAttrAggr AggOp, const TStr& ResAttr) {$/;"	f	class:TTable
AggregateVector	snap-core/table.h	/^T TTable::AggregateVector(TVec<T>& V, TAttrAggr Policy) {$/;"	f	class:TTable
Aging	snap-adv/cascdynetinf.h	/^  TFlt Gamma, Mu, Aging;$/;"	m	class:TNIBs
AliveNIdV	snap-core/ff.h	/^  TIntV BurningNIdV, NewBurnedNIdV, AliveNIdV; \/\/ temporary$/;"	m	class:TUndirFFire
AllCombinationsMN	snap-core/centr.cpp	/^TIntH *AllCombinationsMN(int m, int n){$/;"	f	namespace:TSnap
AllGraphsWithNNodes	snap-core/centr.cpp	/^PUNGraph *AllGraphsWithNNodes(int n){$/;"	f	namespace:TSnap
AllStat	snap-core/gstat.cpp	/^TFSet TGStat::AllStat() {$/;"	f	class:TGStat
AllocateColumnCopies	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
Alpha	snap-adv/cascnetinf.h	/^  TFlt CurProb, Alpha, Eps;$/;"	m	class:TCascade
Alpha	snap-adv/ncp.h	/^  TFlt Alpha, SizeFrac, KFac;$/;"	m	class:TLocClustStat
Alpha	snap-adv/ncp.h	/^  double Alpha;            \/\/ PageRank jump probability (smaller Alpha diffuses the mass farther away)$/;"	m	class:TLocClust
Alpha	snap-exp/linkpred.h	/^  TFlt Alpha;  \/\/ random jump prob$/;"	m	class:__OLD__::TLpBase
Alpha	snap-exp/linkpred.h	/^  double Alpha;   \/\/ random jump prob$/;"	m	class:TLpPredictor
AlphaV	snap-adv/mag.h	/^	TFltV AlphaV;$/;"	m	class:TMAGNodeBeta
Alphas	snap-adv/cascnetinf.h	/^  TIntPrFltH Alphas, Betas;$/;"	m	class:TNetInfBs
AltArgNm	glib-core/html.cpp	/^const TStr THtmlTok::AltArgNm="ALT";$/;"	m	class:THtmlTok	file:
AlwaysFalse	glib-core/unicode.h	/^inline bool AlwaysFalse()$/;"	f
AlwaysTrue	glib-core/unicode.h	/^inline bool AlwaysTrue()$/;"	f
AmpersandStr	glib-core/lx.cpp	/^const TStr TLxSymStr::AmpersandStr="&";$/;"	m	class:TLxSymStr	file:
AppJSonFldVal	glib-core/http.cpp	/^const TStr THttp::AppJSonFldVal = "application\/json";$/;"	m	class:THttp	file:
AppJSonFldVal	glib-core/http.h	/^  static const TStr AppJSonFldVal;$/;"	m	class:THttp
AppOctetFldVal	glib-core/http.cpp	/^const TStr THttp::AppOctetFldVal="application\/octet-stream";$/;"	m	class:THttp	file:
AppOctetFldVal	glib-core/http.h	/^  static const TStr AppOctetFldVal;$/;"	m	class:THttp
AppSoapXmlFldVal	glib-core/http.cpp	/^const TStr THttp::AppSoapXmlFldVal="application\/soap+xml";$/;"	m	class:THttp	file:
AppSoapXmlFldVal	glib-core/http.h	/^  static const TStr AppSoapXmlFldVal;$/;"	m	class:THttp
AppW3FormFldVal	glib-core/http.cpp	/^const TStr THttp::AppW3FormFldVal="application\/x-www-form-urlencoded";$/;"	m	class:THttp	file:
AppW3FormFldVal	glib-core/http.h	/^  static const TStr AppW3FormFldVal;$/;"	m	class:THttp
AppearsAt	snap-exp/memes.cpp	/^bool AppearsAt(const TIntSet& UrlSet, const TQuote& Q) {$/;"	f
AppearsAtDom	snap-exp/memes.cpp	/^int AppearsAtDom(const TQuote& CentrQt, const TIntSet& GoodDom, const TIntH& UrlDomH) {$/;"	f
AppendBf	glib-core/fl.cpp	/^void TMOut::AppendBf(const void* LBf, const TSize& LBfL) {$/;"	f	class:TMOut
AppendFeatures	snap-adv/rolx.cpp	/^void AppendFeatures(TIntFtrH& DstFeatures, const TIntFtrH& SrcFeatures,$/;"	f
AppendIntVAttrDatE	snap-core/network.cpp	/^int TNEANet::AppendIntVAttrDatE(const int& EId, const TInt& value, const TStr& attr) {$/;"	f	class:TNEANet
AppendIntVAttrDatE	snap-core/network.h	/^  int AppendIntVAttrDatE(const TEdgeI& EdgeI, const TInt& value, const TStr& attr) { return AppendIntVAttrDatE(EdgeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AppendIntVAttrDatN	snap-core/network.cpp	/^int TNEANet::AppendIntVAttrDatN(const int& NId, const TInt& value, const TStr& attr) {$/;"	f	class:TNEANet
AppendIntVAttrDatN	snap-core/network.h	/^  int AppendIntVAttrDatN(const TNodeI& NodeI, const TInt& value, const TStr& attr) { return AppendIntVAttrDatN(NodeI.GetId(), value, attr); }$/;"	f	class:TNEANet
AppendIsoNodes	snap-adv/kronecker.cpp	/^void TKroneckerLL::AppendIsoNodes() {$/;"	f	class:TKroneckerLL
AppendVector	glib-core/unicode.h	/^	inline static void AppendVector(const TVec<TSrcDat>& src, TVec<TDestDat>& dest) {$/;"	f	class:TUniCaseFolding
ApproxBytes	snap-core/anf.h	/^  TInt NBits, MoreBits, ApproxBytes; \/\/ NBits=logNodes+MoreBits;  MoreBits: additional R bits;  ApproxBytes: Approx\/8;$/;"	m	class:TGraphAnf
ApproxContributionsBalanced	snap-core/randwalk.h	/^  void ApproxContributionsBalanced(const PGraph& Graph,$/;"	f	namespace:__anon64
ApproxPageRank	snap-adv/ncp.cpp	/^int TLocClust::ApproxPageRank(const int& SeedNode, const double& Eps) {$/;"	f	class:TLocClust
AprN	glib-core/tm.cpp	/^const int TTmInfo::MarN=3; const int TTmInfo::AprN=4;$/;"	m	class:TTmInfo	file:
AprN	glib-core/tm.h	/^  static const int MarN; static const int AprN;$/;"	m	class:TTmInfo
AreaTagNm	glib-core/html.cpp	/^const TStr THtmlTok::AreaTagNm="<AREA>";$/;"	m	class:THtmlTok	file:
ArgV	glib-core/env.h	/^  TStrV ArgV;$/;"	m	class:TEnv
ArtSet	snap-core/cncom.h	/^  TIntSet ArtSet;$/;"	m	class:TArtPointVisitor
ArticleId	snap-exp/wikinet.h	/^  TInt ArticleId, RevisionId;$/;"	m	class:TWikiMetaLoader
Asc	glib-core/hash.h	/^    bool CmpKey, Asc;$/;"	m	class:THash::THashKeyDatCmp
Asc	glib-core/hashmp.h	/^    bool CmpKey, Asc;$/;"	m	class:THashMP::THashMPKeyDatCmp
AssE_	glib-core/unicode.cpp	765;"	d	file:
AssE_	glib-core/unicode.cpp	813;"	d	file:
Assert	glib-core/bd.h	249;"	d
Assert	glib-core/bd.h	251;"	d
AssertBfCsEqFlCs	glib-core/blobbs.cpp	/^void TBlobBs::AssertBfCsEqFlCs(const TCs& BfCs, const TCs& FCs){$/;"	f	class:TBlobBs
AssertBlobBsStateStr	glib-core/blobbs.cpp	/^void TBlobBs::AssertBlobBsStateStr($/;"	f	class:TBlobBs
AssertBlobState	glib-core/blobbs.cpp	/^void TBlobBs::AssertBlobState(const PFRnd& FBlobBs, const TBlobState& State){$/;"	f	class:TBlobBs
AssertBlobTag	glib-core/blobbs.cpp	/^void TBlobBs::AssertBlobTag(const PFRnd& FBlobBs, const TBlobTag& BlobTag){$/;"	f	class:TBlobBs
AssertEq	glib-core/unicode.cpp	/^void AssertEq(const TIntV& v1, const TIntV& v2, const TStr& explanation, FILE *f)$/;"	f	namespace:__anon54
AssertNTypeId	snap-exp/mmgraph-exp.h	/^  void AssertNTypeId(const int NTypeId) const {$/;"	f	class:TMNet
AssertOrtogonality	glib-core/linalg.cpp	/^void TLinAlg::AssertOrtogonality(const TFltVV& Vecs, const double& Threshold) {$/;"	f	class:TLinAlg
AssertOrtogonality	glib-core/linalg.cpp	/^void TLinAlg::AssertOrtogonality(const TVec<TFltV>& Vecs, const double& Threshold) {$/;"	f	class:TLinAlg
AssertR	glib-core/bd.h	256;"	d
AssertR	glib-core/bd.h	258;"	d
AssertUnicodeDefOk	glib-core/unicodestring.h	/^  static void AssertUnicodeDefOk(){$/;"	f	class:TUStr
AssertVersionStr	glib-core/blobbs.cpp	/^void TBlobBs::AssertVersionStr(const PFRnd& FBlobBs){$/;"	f	class:TBlobBs
AssertXmlHd	glib-core/xml.cpp	/^void TXmlObjSer::AssertXmlHd($/;"	f	class:TXmlObjSer
AssignBinValue	snap-adv/rolx.cpp	/^void AssignBinValue(const TVec<TInt>& SortedNId, const float BinFraction,$/;"	f
AsteriskStr	glib-core/lx.cpp	/^const TStr TLxSymStr::AsteriskStr="*";$/;"	m	class:TLxSymStr	file:
At	glib-core/ds.h	/^  TVal& At(const int& X, const int& Y){$/;"	f	class:TVVec
At	glib-core/ds.h	/^  TVal& At(const int& X, const int& Y, const int& Z){$/;"	f	class:TVVVec
At	glib-core/ds.h	/^  const TVal& At(const int& X, const int& Y) const {$/;"	f	class:TVVec
At	glib-core/ds.h	/^  const TVal& At(const int& X, const int& Y, const int& Z) const {$/;"	f	class:TVVVec
At	glib-core/ss.cpp	/^TStr& TSs::At(const int& X, const int& Y){$/;"	f	class:TSs
At	snap-adv/kronecker.h	/^  const double& At(const int& Row, const int& Col) const { return SeedMtx[MtxDim*Row+Col].Val; }$/;"	f	class:TKronMtx
At	snap-adv/kronecker.h	/^  const double& At(const int& ValN) const { return SeedMtx[ValN].Val; }$/;"	f	class:TKronMtx
At	snap-adv/kronecker.h	/^  double& At(const int& Row, const int& Col) { return SeedMtx[MtxDim*Row+Col].Val; }$/;"	f	class:TKronMtx
At	snap-adv/kronecker.h	/^  double& At(const int& ValN) { return SeedMtx[ValN].Val; }$/;"	f	class:TKronMtx
At	snap-adv/mag.h	/^  const double& At(const int& Row, const int& Col) const { return SeedMtx[MtxDim*Row+Col].Val; }$/;"	f	class:TMAGAffMtx
At	snap-adv/mag.h	/^  const double& At(const int& ValN) const { return SeedMtx[ValN].Val; }$/;"	f	class:TMAGAffMtx
At	snap-adv/mag.h	/^  double& At(const int& Row, const int& Col) { return SeedMtx[MtxDim*Row+Col].Val; }$/;"	f	class:TMAGAffMtx
At	snap-adv/mag.h	/^  double& At(const int& ValN) { return SeedMtx[ValN].Val; }$/;"	f	class:TMAGAffMtx
At	snap-core/gstat.h	/^  PGStat At(const int& ValN) const { return GStatV[ValN]; }$/;"	f	class:TGStatVec
AtEof	glib-core/http.cpp	/^  bool AtEof;$/;"	m	class:THttpLx	file:
AtLeastOne	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	bool AtLeastOne() {$/;"	f	class:TSBitSet
Atom	snap-core/table.h	/^		TAtomicPredicate Atom; \/\/\/< Atomic predicate at this node$/;"	m	class:TPredicateNode
Attr	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    TEdgeData* Attr;$/;"	m	class:TMatchingMachine::TMaMaEdge
Attr	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    TEdgeData* Attr;$/;"	m	class:TMatchingMachine::TMaMaEdge
AttrGen	snap-adv/mag.cpp	/^void TMAGNodeBern::AttrGen(TIntVV& AttrVV, const int& NNodes) {$/;"	f	class:TMAGNodeBern
AttrGen	snap-adv/mag.cpp	/^void TMAGNodeBeta::AttrGen(TIntVV& AttrVV, const int& NNodes) {$/;"	f	class:TMAGNodeBeta
AttrGen	snap-adv/mag.cpp	/^void TMAGNodeSimple::AttrGen(TIntVV& AttrVV, const int& NNodes) {$/;"	f	class:TMAGNodeSimple
AttrIdToName	snap-core/attr.h	/^  TIntIntStrPrH AttrIdToName;$/;"	m	class:TAttr
AttrIdToName	snap-core/attr.h	/^  TIntIntStrPrH AttrIdToName;$/;"	m	class:TAttrPair
AttrNameEI	snap-core/mmnet.cpp	/^void TCrossNet::AttrNameEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TStrV& Names) const {$/;"	f	class:TCrossNet
AttrNameEI	snap-core/mmnet.h	/^  void AttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TCrossNet
AttrNameEI	snap-core/network.cpp	/^void TNEANet::AttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANet
AttrNameEI	snap-core/network.h	/^  void AttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANet
AttrNameEI	snap-core/networkmp.cpp	/^void TNEANetMP::AttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
AttrNameEI	snap-core/networkmp.h	/^  void AttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANetMP
AttrNameNI	snap-core/network.cpp	/^void TNEANet::AttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANet
AttrNameNI	snap-core/network.h	/^  void AttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANet
AttrNameNI	snap-core/networkmp.cpp	/^void TNEANetMP::AttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
AttrNameNI	snap-core/networkmp.h	/^  void AttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANetMP
AttrNameToId	snap-core/attr.h	/^  TStrIntPrH AttrNameToId;$/;"	m	class:TAttr
AttrNameToId	snap-core/attr.h	/^  TStrIntPrH AttrNameToId;$/;"	m	class:TAttrPair
AttrType	snap-core/table.h	/^  TAttrType AttrType;$/;"	m	class:TPrimitive
AttrV	snap-exp/linkpred.h	/^  TFltV AttrV;    \/\/ attribute vector$/;"	m	class:TEdgeGrad
AttrValueEI	snap-core/mmnet.cpp	/^void TCrossNet::AttrValueEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TStrV& Values) const {$/;"	f	class:TCrossNet
AttrValueEI	snap-core/mmnet.h	/^  void AttrValueEI(const TInt& EId, TStrV& Values) const {$/;"	f	class:TCrossNet
AttrValueEI	snap-core/network.cpp	/^void TNEANet::AttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Values) const {$/;"	f	class:TNEANet
AttrValueEI	snap-core/network.h	/^  void AttrValueEI(const TInt& EId, TStrV& Values) const {$/;"	f	class:TNEANet
AttrValueEI	snap-core/networkmp.cpp	/^void TNEANetMP::AttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Values) const {$/;"	f	class:TNEANetMP
AttrValueEI	snap-core/networkmp.h	/^  void AttrValueEI(const TInt& EId, TStrV& Values) const {$/;"	f	class:TNEANetMP
AttrValueNI	snap-core/network.cpp	/^void TNEANet::AttrValueNI(const TInt& NId , TStrIntPrH::TIter NodeHI, TStrV& Values) const {$/;"	f	class:TNEANet
AttrValueNI	snap-core/network.h	/^  void AttrValueNI(const TInt& NId, TStrV& Values) const {$/;"	f	class:TNEANet
AttrValueNI	snap-core/networkmp.cpp	/^void TNEANetMP::AttrValueNI(const TInt& NId , TStrIntPrH::TIter NodeHI, TStrV& Values) const {$/;"	f	class:TNEANetMP
AttrValueNI	snap-core/networkmp.h	/^  void AttrValueNI(const TInt& NId, TStrV& Values) const {$/;"	f	class:TNEANetMP
Attrs	snap-adv/agmattr.h	/^  TInt Attrs; \/\/ number of attributes$/;"	m	class:TCesna
Attrs	snap-exp/linkpred.h	/^  int Attrs() const { return EAttrV[0].Len(); }$/;"	f	class:__OLD__::TLpExample
AugN	glib-core/tm.cpp	/^const int TTmInfo::JulN=7; const int TTmInfo::AugN=8;$/;"	m	class:TTmInfo	file:
AugN	glib-core/tm.h	/^  static const int JulN; static const int AugN;$/;"	m	class:TTmInfo
AuthorV	snap-exp/arxiv.h	/^    TStrV AuthorV;$/;"	m	class:TArxivPaperList::TArxivPaper
AuthorV	snap-exp/arxiv.h	/^  TStrV AuthorV;$/;"	m	class:TArxivPaperList
AuthorV	snap-exp/dblp.h	/^  TChAV AuthorV;$/;"	m	class:TDblpLoader
AutoSizeP	glib-core/hash.h	/^  TBool AutoSizeP;$/;"	m	class:THash
AutoSizeP	glib-core/shash.h	/^  TBool AutoSizeP;$/;"	m	class:THashSet
AveDiffAlphas	snap-adv/cascdynetinf.h	/^  TIntFltH AveDiffAlphas;$/;"	m	class:TNIBs
AveVar	glib-core/xmath.cpp	/^void TStatTest::AveVar(const TFltV& ValV, double& Ave, double& Var){$/;"	f	class:TStatTest
AverageTimeDiff	snap-adv/cascnetinf.h	/^  TFlt MarginalGain, MarginalBound, MedianTimeDiff, AverageTimeDiff; \/\/ we can skip MarginalBound for efficiency if not explicitly required$/;"	m	class:TEdgeInfo
Avg	snap-core/util.cpp	/^double TStopwatch::Avg(const TExperiment Exp) const {$/;"	f	class:TStopwatch
AvgGStat	snap-core/gstat.cpp	/^void TGStat::AvgGStat(const PGStatVec& GStatVec, const bool& ClipAt1) {$/;"	f	class:TGStat
AvgGStat	snap-core/gstat.cpp	/^void TGStat::AvgGStat(const TGStatV& GStatV, const bool& ClipAt1) {$/;"	f	class:TGStat
AvgLstZero	snap-core/anf.h	/^double TGraphAnf<PGraph>::AvgLstZero(const TAnfBitV& BitV, const uint64& NIdOffset) const { \/\/average least zero bit position (least significant zero)$/;"	f	class:TGraphAnf
AvgPhiPairVV	snap-adv/mag.h	/^	TFltVV AvgPhiPairVV;$/;"	m	class:TMAGFitBern
AvgPhiV	snap-adv/mag.h	/^	TFltV AvgPhiV;$/;"	m	class:TMAGFitBern
AvgSzInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> AvgSzInf, AvgSzNet;   \/\/ average cascade size (number of nodes)$/;"	m	class:TCascadeStat	file:
AvgSzNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> AvgSzInf, AvgSzNet;   \/\/ average cascade size (number of nodes)$/;"	m	class:TCascadeStat	file:
B	glib-core/linalg.h	/^    TFlt B;$/;"	m	class:TSigmoid
B	snap-exp/linkpred.h	/^  TFlt B;      \/\/ margin$/;"	m	class:__OLD__::TLpBase
B	snap-exp/linkpred.h	/^  double B;       \/\/ margin$/;"	m	class:TLpPredictor
B1	glib-core/bits.h	/^  TB1Def::TB1 B1;$/;"	m	class:TB8Set
B1Bits	glib-core/bits.cpp	/^const int TB1Def::B1Bits=8;$/;"	m	class:TB1Def	file:
B1Bits	glib-core/bits.h	/^  static const int B1Bits;$/;"	m	class:TB1Def
B1BitsT	glib-core/bits.h	/^  int* B1BitsT;$/;"	m	class:TB1Def
B1Def	glib-core/bits.cpp	/^const TB1Def TB1Def::B1Def;$/;"	m	class:TB1Def	file:
B1Def	glib-core/bits.h	/^  static const TB1Def B1Def;$/;"	m	class:TB1Def
B1P2T	glib-core/bits.h	/^  TB1* B1P2T;$/;"	m	class:TB1Def
B2Bits	glib-core/bits.cpp	/^const int TB2Def::B2Bits=16;$/;"	m	class:TB2Def	file:
B2Bits	glib-core/bits.h	/^  static const int B2Bits;$/;"	m	class:TB2Def
B2Def	glib-core/bits.cpp	/^const TB2Def TB2Def::B2Def;$/;"	m	class:TB2Def	file:
B2Def	glib-core/bits.h	/^  static const TB2Def B2Def;$/;"	m	class:TB2Def
B2P2T	glib-core/bits.h	/^  TB2* B2P2T;$/;"	m	class:TB2Def
B4	glib-core/bits.h	/^  TB4Def::TB4 B4;$/;"	m	class:TB32Set
B4Bits	glib-core/bits.cpp	/^const int TB4Def::B4Bits=32;$/;"	m	class:TB4Def	file:
B4Bits	glib-core/bits.h	/^  static const int B4Bits;$/;"	m	class:TB4Def
B4Def	glib-core/bits.cpp	/^const TB4Def TB4Def::B4Def;$/;"	m	class:TB4Def	file:
B4Def	glib-core/bits.h	/^  static const TB4Def B4Def;$/;"	m	class:TB4Def
B4P2T	glib-core/bits.h	/^  TB4* B4P2T;$/;"	m	class:TB4Def
B4T	glib-core/bits.h	/^  TB4Def::TB4* B4T;$/;"	v
B4V	glib-core/bits.h	/^  TUIntV B4V;$/;"	m	class:TFSet
B4s	glib-core/bits.cpp	/^const int TFSet::B4s=4;$/;"	m	class:TFSet	file:
B4s	glib-core/bits.h	/^  int B4s, Bits;$/;"	v
B4s	glib-core/bits.h	/^  static const int B4s;$/;"	m	class:TFSet
BFSExp	snap-exp/multimodal-dev/benchmark-util.cpp	/^void BFSExp(const PGraph& Graph, const TStrV& RandNStrs, const TStrIntH& NStrH,$/;"	f
BMClear	glib-core/shash.h	/^  void BMClear(const int&  ValN) { BitSet[CharBit(ValN)] &= ~ModBit(ValN); }$/;"	f	class:TSparseGroup
BMSet	glib-core/shash.h	/^  void BMSet(const int&  ValN) { BitSet[CharBit(ValN)] |= ModBit(ValN); }$/;"	f	class:TSparseGroup
BMTest	glib-core/shash.h	/^  bool BMTest(const int&  ValN) const { return (BitSet[CharBit(ValN)] & ModBit(ValN)) != 0; }$/;"	f	class:TSparseGroup
BSG	snap-adv/cascdynetinf.cpp	/^void TNIBs::BSG(const int& NId, const int& Iters, const TFltV& Steps, const int& BatchLen, const TSampling& Sampling, const TStr& ParamSampling, const bool& PlotPerformance) {$/;"	f	class:TNIBs
BSet	glib-core/bits.h	/^  TBSet(const TBSet& BSet);$/;"	v
BSort	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::BSort(const TSizeTy& MnLValN, const TSizeTy& MxRValN, const bool& Asc){$/;"	f	class:TVec
BSortCmp	glib-core/ds.h	/^  static void BSortCmp(TIter BI, TIter EI, const TCmp& Cmp) {$/;"	f	class:TVec
BackEdge	snap-core/cncom.h	/^  void BackEdge(const int& NId1, const int& NId2) { }$/;"	f	class:TSccVisitor
BackEdge	snap-core/cncom.h	/^  void BackEdge(const int& NId1, const int& NId2) {$/;"	f	class:TArtPointVisitor
BackEdge	snap-core/cncom.h	/^  void BackEdge(const int& NId1, const int& NId2) {$/;"	f	class:TBiConVisitor
BadPostCnt	snap-exp/spinn3r.h	/^  TInt BadPostCnt, NoContentCnt, NoLatinCnt, GoodLatinCnt, QuotePostCnt, QuotesCnt;$/;"	m	class:TQuoteExtractor
BadRqStatusCd	glib-core/http.cpp	/^const int THttp::BadRqStatusCd=400;$/;"	m	class:THttp	file:
BadRqStatusCd	glib-core/http.h	/^  static const int BadRqStatusCd;$/;"	m	class:THttp
BagOfWhiskerV	snap-adv/ncp.h	/^  TFltPrV BagOfWhiskerV;          \/\/ (size, conductance) for bag of whiskers$/;"	m	class:TLocClustStat
BagOfWhiskers	snap-adv/ncp.cpp	/^void TLocClustStat::BagOfWhiskers(const PUNGraph& Graph, TFltPrV& SizePhiV, TFltPr& MaxWhisk) {$/;"	f	class:TLocClustStat
BagOfWhiskers2	snap-adv/ncp.cpp	/^void TLocClustStat::BagOfWhiskers2(const PUNGraph& Graph, TFltPrV& SizePhiV) {$/;"	f	class:TLocClustStat
Bands	snap-exp/lsh.h	/^  int Bands;$/;"	m	class:TLSHash
BarnStars	snap-exp/wikinet.h	/^  TInt BarnStars;$/;"	m	class:TWikiUsr
BaseCID	snap-adv/agmfit.h	/^  TInt BaseCID; \/\/\/< ID of the Epsilon-community (in case we fit P_c of the epsilon community). We do not fit for the Epsilon-community in general.$/;"	m	class:TAGMFit
BaseTralala	glib-core/base.cpp	/^void BaseTralala(){$/;"	f
BaseUrlStr	glib-core/url.h	/^  TStr UrlStr, RelUrlStr, BaseUrlStr;$/;"	v
BasicStat	snap-core/gstat.cpp	/^TFSet TGStat::BasicStat() {$/;"	f	class:TGStat
BasicUsage	examples/randwalk/randwalk.cpp	/^void BasicUsage(const PNGraph& Graph) {$/;"	f
BckBurnProb	snap-core/ff.h	/^  TFlt FwdBurnProb, BckBurnProb, ProbDecay; \/\/ Forest Fire parameters$/;"	m	class:TFfGGen
BckBurnProb	snap-core/ff.h	/^  TFlt FwdBurnProb, BckBurnProb, ProbDecay;$/;"	m	class:TForestFire
BegCrossNetI	snap-core/mmnet.h	/^  TCrossNetI BegCrossNetI() const { return TCrossNetI(TCrossNetH.BegI(), this); }$/;"	f	class:TMMNet
BegEAFltI	snap-core/mmnet.h	/^  TAFltI BegEAFltI(const TStr& attr) const {$/;"	f	class:TCrossNet
BegEAFltI	snap-core/network.h	/^  TAFltI BegEAFltI(const TStr& attr) const {$/;"	f	class:TNEANet
BegEAFltI	snap-core/networkmp.h	/^  TAFltI BegEAFltI(const TStr& attr) const {$/;"	f	class:TNEANetMP
BegEAIntI	snap-core/mmnet.h	/^  TAIntI BegEAIntI(const TStr& attr) const {$/;"	f	class:TCrossNet
BegEAIntI	snap-core/network.h	/^  TAIntI BegEAIntI(const TStr& attr) const {$/;"	f	class:TNEANet
BegEAIntI	snap-core/networkmp.h	/^  TAIntI BegEAIntI(const TStr& attr) const {$/;"	f	class:TNEANetMP
BegEAIntVI	snap-core/network.h	/^  TAIntVI BegEAIntVI(const TStr& attr) const {$/;"	f	class:TNEANet
BegEAStrI	snap-core/mmnet.h	/^  TAStrI BegEAStrI(const TStr& attr) const {$/;"	f	class:TCrossNet
BegEAStrI	snap-core/network.h	/^  TAStrI BegEAStrI(const TStr& attr) const {$/;"	f	class:TNEANet
BegEAStrI	snap-core/networkmp.h	/^  TAStrI BegEAStrI(const TStr& attr) const {$/;"	f	class:TNEANetMP
BegEI	snap-core/bignet.h	/^  TEdgeI BegEI() const { TNodeI NI=BegNI();  while(NI<EndNI() && NI.GetOutDeg()==0) NI++;  return TEdgeI(NI, EndNI()); }$/;"	f	class:TBigNet
BegEI	snap-core/graph.h	/^  TEdgeI BegEI() const { TNodeI NI = BegNI(); TEdgeI EI(NI, EndNI(), 0); if (GetNodes() != 0 && (NI.GetOutDeg()==0 || NI.GetId()>NI.GetOutNId(0))) { EI++; } return EI; }$/;"	f	class:TUNGraph
BegEI	snap-core/graph.h	/^  TEdgeI BegEI() const { TNodeI NI=BegLNI(); while (NI<EndLNI() && (NI.GetOutDeg()==0 || NI.GetId()>NI.GetOutNId(0))) { NI++; } return TEdgeI(NI, EndLNI()); }$/;"	f	class:TBPGraph
BegEI	snap-core/graph.h	/^  TEdgeI BegEI() const { TNodeI NI=BegNI(); while(NI<EndNI() && NI.GetOutDeg()==0){NI++;} return TEdgeI(NI, EndNI()); }$/;"	f	class:TNGraph
BegEI	snap-core/graph.h	/^  TEdgeI BegEI() const { return TEdgeI(EdgeH.BegI(), this); }$/;"	f	class:TNEGraph
BegEI	snap-core/graphmp.h	/^  TEdgeI BegEI() const { TNodeI NI=BegNI(); while(NI<EndNI() && NI.GetOutDeg()==0){NI++;} return TEdgeI(NI, EndNI()); }$/;"	f	class:TNGraphMP
BegEI	snap-core/network.h	/^  TEdgeI BegEI() const { TNodeI NI = BegNI(); TEdgeI EI(NI, EndNI(), 0); if (GetNodes() != 0 && (NI.GetOutDeg()==0 || NI.GetId()>NI.GetOutNId(0))) { EI++; } return EI; }$/;"	f	class:TUndirNet
BegEI	snap-core/network.h	/^  TEdgeI BegEI() const { TNodeI NI=BegNI();  while(NI<EndNI() && NI.GetOutDeg()==0) NI++;  return TEdgeI(NI, EndNI()); }$/;"	f	class:TNodeNet
BegEI	snap-core/network.h	/^  TEdgeI BegEI() const { TNodeI NI=BegNI();  while(NI<EndNI() && NI.GetOutDeg()==0) NI++; return TEdgeI(NI, EndNI()); }$/;"	f	class:TNodeEDatNet
BegEI	snap-core/network.h	/^  TEdgeI BegEI() const { TNodeI NI=BegNI(); while(NI<EndNI() && NI.GetOutDeg()==0){NI++;} return TEdgeI(NI, EndNI()); }$/;"	f	class:TDirNet
BegEI	snap-core/network.h	/^  TEdgeI BegEI() const { return TEdgeI(EdgeH.BegI(), this); }$/;"	f	class:TNEANet
BegEI	snap-core/network.h	/^  TEdgeI BegEI() const { return TEdgeI(EdgeH.BegI(), this); }$/;"	f	class:TNodeEdgeNet
BegEI	snap-core/networkmp.h	/^  TEdgeI BegEI() const { return TEdgeI(EdgeH.BegI(), this); }$/;"	f	class:TNEANetMP
BegEI	snap-exp/graphmp-exp.h	/^  TEdgeI BegEI() const { TNodeI NI=BegNI(); while(NI<EndNI() && NI.GetOutDeg()==0){NI++;} return TEdgeI(NI, EndNI()); }$/;"	f	class:TUNGraphMP
BegEI	snap-exp/mmgraph-exp.h	/^  TEdgeI BegEI() const { return TEdgeI(EdgeH.BegI(), this); }$/;"	f	class:TMNet
BegEdgeI	snap-core/mmnet.h	/^  TCrossEdgeI BegEdgeI() const { return TCrossEdgeI(CrossH.BegI(), this); }$/;"	f	class:TCrossNet
BegI	glib-core/ds.h	/^  TIter BegI() const {return ValT;}$/;"	f	class:TVec
BegI	glib-core/hash.h	/^  TIter BegI() const {$/;"	f	class:THash
BegI	glib-core/hashmp.h	/^  TIter BegI() const {$/;"	f	class:THashMP
BegI	glib-core/shash.h	/^  TGroupVI BegI, GroupI, EndI;$/;"	m	class:TSparseTableI
BegI	glib-core/shash.h	/^  TIter BegI() const { return Table.BegI(); }$/;"	f	class:TSparseHash
BegI	glib-core/shash.h	/^  TIter BegI() const { return Table.BegI(); }$/;"	f	class:TSparseSet
BegI	glib-core/shash.h	/^  TIter BegI() const {$/;"	f	class:THashSet
BegI	glib-core/shash.h	/^  TIter BegI() const {$/;"	f	class:TSparseTable
BegI	glib-core/shash.h	/^  TIter BegI() const {return ValT; }$/;"	f	class:TPackVec
BegI	snap-adv/cascdynetinf.h	/^  THash<TInt, THitInfo>::TIter BegI() const { return NIdHitH.BegI(); }$/;"	f	class:TCascade
BegI	snap-core/ghash.h	/^  TIter BegI() const { return GraphH.BegI(); }$/;"	f	class:TGHash
BegLNI	snap-core/graph.h	/^  TNodeI BegLNI() const { return TNodeI(LeftH.BegI(), RightH.EndI()); }$/;"	f	class:TBPGraph
BegMMNI	snap-core/mmnet.h	/^  TNodeI BegMMNI() const { return TNodeI(NodeH.BegI(), this); }$/;"	f	class:TModeNet
BegModeNetI	snap-core/mmnet.h	/^  TModeNetI BegModeNetI() const { return TModeNetI(TModeNetH.BegI(), this); }$/;"	f	class:TMMNet
BegNAFltI	snap-core/network.h	/^  TAFltI BegNAFltI(const TStr& attr) const {$/;"	f	class:TNEANet
BegNAFltI	snap-core/networkmp.h	/^  TAFltI BegNAFltI(const TStr& attr) const {$/;"	f	class:TNEANetMP
BegNAIntI	snap-core/network.h	/^  TAIntI BegNAIntI(const TStr& attr) const {$/;"	f	class:TNEANet
BegNAIntI	snap-core/networkmp.h	/^  TAIntI BegNAIntI(const TStr& attr) const {$/;"	f	class:TNEANetMP
BegNAIntVI	snap-core/network.h	/^  TAIntVI BegNAIntVI(const TStr& attr) const {$/;"	f	class:TNEANet
BegNAStrI	snap-core/network.h	/^  TAStrI BegNAStrI(const TStr& attr) const {$/;"	f	class:TNEANet
BegNAStrI	snap-core/networkmp.h	/^  TAStrI BegNAStrI(const TStr& attr) const {$/;"	f	class:TNEANetMP
BegNI	snap-core/bignet.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI(), (TVPool *)&Pool); }$/;"	f	class:TBigNet
BegNI	snap-core/graph.h	/^  TNodeI BegNI() const { return TNodeI(LeftH.BegI(), RightH.BegI()); }$/;"	f	class:TBPGraph
BegNI	snap-core/graph.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI()); }$/;"	f	class:TNGraph
BegNI	snap-core/graph.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI()); }$/;"	f	class:TUNGraph
BegNI	snap-core/graph.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI(), this); }$/;"	f	class:TNEGraph
BegNI	snap-core/graphmp.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI()); }$/;"	f	class:TNGraphMP
BegNI	snap-core/network.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI()); }$/;"	f	class:TDirNet
BegNI	snap-core/network.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI()); }$/;"	f	class:TUndirNet
BegNI	snap-core/network.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI(), this); }$/;"	f	class:TNEANet
BegNI	snap-core/network.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI(), this); }$/;"	f	class:TNodeEDatNet
BegNI	snap-core/network.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI(), this); }$/;"	f	class:TNodeEdgeNet
BegNI	snap-core/network.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI(), this); }$/;"	f	class:TNodeNet
BegNI	snap-core/networkmp.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI(), this); }$/;"	f	class:TNEANetMP
BegNI	snap-exp/graphmp-exp.h	/^  TNodeI BegNI() const { return TNodeI(NodeH.BegI()); }$/;"	f	class:TUNGraphMP
BegNI	snap-exp/mmgraph-exp.h	/^  TNodeI BegNI() const {$/;"	f	class:TMNet
BegNI	snap-exp/mmgraph-exp.h	/^  TNodeI BegNI(const int& NTypeId) const { return TNodeI(TypeNodeV.GetI(NTypeId), this); }$/;"	f	class:TMNet
BegRI	snap-core/table.h	/^  TRowIterator BegRI() const { return TRowIterator(FirstValidRow, this);}$/;"	f	class:TTable
BegRI	snap-exp/alternativetable.h	/^    RowBasedRowIterator BegRI() const { return RowBasedRowIterator(FirstValidRow, this);}$/;"	f	class:RowBasedTable
BegRI	snap-exp/alternativetable.h	/^  ExplicitStringRowIterator BegRI() const { return ExplicitStringRowIterator(FirstValidRow, this);}$/;"	f	class:ExplicitStringTable
BegRIWR	snap-core/table.h	/^  TRowIteratorWithRemove BegRIWR(){ return TRowIteratorWithRemove(FirstValidRow, this);}$/;"	f	class:TTable
BegRIWR	snap-exp/alternativetable.h	/^  ExplicitStringRowIteratorWithRemove BegRIWR(){ return ExplicitStringRowIteratorWithRemove(FirstValidRow, this);}$/;"	f	class:ExplicitStringTable
BegRNI	snap-core/graph.h	/^  TNodeI BegRNI() const { return TNodeI(LeftH.EndI(), RightH.BegI()); }$/;"	f	class:TBPGraph
BegTm	snap-core/timenet.h	/^    TSecTm BegTm; \/\/ start time of the bucket, end time is determined by GroupBy$/;"	m	class:TTimeNet::TTmBucket
Begin	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TIterator Begin() {$/;"	f	class:TSBitSet
Benchmark	tutorials/demo-topology-benchmark.cpp	/^void Benchmark(PGraph G, std::ofstream& file) {$/;"	f
BenchmarkGraphDegTrav	tutorials/demo-topology-benchmark.cpp	/^void BenchmarkGraphDegTrav(PGraph Graph, std::ofstream& file, bool isDefrag) {$/;"	f
BenchmarkGraphEdgeI	tutorials/demo-topology-benchmark.cpp	/^void BenchmarkGraphEdgeI(PGraph Graph, std::ofstream& file, bool isDefrag) {$/;"	f
BenchmarkGraphNodeI	tutorials/demo-topology-benchmark.cpp	/^void BenchmarkGraphNodeI(PGraph Graph, std::ofstream& file, bool isDefrag) {$/;"	f
BestCut	snap-adv/ncp.h	/^  TCutInfo BestCut;               \/\/ best over-all cut$/;"	m	class:TLocClustStat
BestCut	snap-adv/ncp.h	/^  int BestCut() const { return BestCutIdx; }$/;"	f	class:TLocClust
BestCutH	snap-adv/ncp.h	/^  THash<TInt, TCutInfo> BestCutH; \/\/ best cut (min conductance) at size K (edges inside, edges cut)$/;"	m	class:TLocClustStat
BestCutIdx	snap-adv/ncp.h	/^  int BestCutIdx;          \/\/ Index K to vectors where the conductance of the bounding cut (PhiV[K]) achieves its minimum$/;"	m	class:TLocClust
BestCutNodes	snap-adv/ncp.h	/^  int BestCutNodes() const { return BestCutIdx+1; }$/;"	f	class:TLocClust
BestErr	snap-exp/sir.h	/^  double CurErr, BestErr;$/;"	m	class:TEstEpidemParams
BestParamV	snap-exp/sir.h	/^  TFltV ParamV, NewParamV, BestParamV;$/;"	m	class:TEstEpidemParams
BestPart	snap-exp/signnet.h	/^  TIntH BestPart;$/;"	m	class:THopfield
BestWhisk	snap-adv/ncp.h	/^  TFltPr BestWhisk;               \/\/ best whisker (whisker with largest volume), (size, conductance)$/;"	m	class:TLocClustStat
BestWhiskEdges	snap-adv/ncp.h	/^  int BestWhiskEdges() const { return (int)TMath::Round(1.0\/BestWhisk.Val2.Val)\/2-1; }$/;"	f	class:TLocClustStat
BestWhiskNodes	snap-adv/ncp.h	/^  int BestWhiskNodes() const { return int(BestWhisk.Val1.Val); }$/;"	f	class:TLocClustStat
BestWhiskPhi	snap-adv/ncp.h	/^  double BestWhiskPhi() const { return BestWhisk.Val2; }$/;"	f	class:TLocClustStat
Beta	snap-exp/sir.h	/^  double Beta, Gamma;$/;"	m	class:TSirModel
BetaB	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSir2Model
BetaB	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSirSR2Model
BetaBM	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSir2Model
BetaBM	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSirSR2Model
BetaCf	glib-core/xmath.cpp	/^double TSpecFunc::BetaCf(const double& a, const double& b, const double& x){$/;"	f	class:TSpecFunc
BetaI	glib-core/xmath.cpp	/^double TSpecFunc::BetaI(const double& a, const double& b, const double& x){$/;"	f	class:TSpecFunc
BetaM	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSir2Model
BetaM	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSirSR2Model
BetaMB	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSir2Model
BetaMB	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSirSR2Model
BetaV	snap-adv/mag.h	/^	TFltV BetaV;$/;"	m	class:TMAGNodeBeta
Betas	snap-adv/cascnetinf.h	/^  TIntPrFltH Alphas, Betas;$/;"	m	class:TNetInfBs
Bf	glib-core/bd.h	/^  char* Bf;$/;"	m	class:TSStr
Bf	glib-core/dt.h	/^  char* Bf;$/;"	v
Bf	glib-core/fl.h	/^  char* Bf;$/;"	m	class:TFIn
Bf	glib-core/fl.h	/^  char* Bf;$/;"	m	class:TFOut
Bf	glib-core/fl.h	/^  char* Bf;$/;"	m	class:TMIn
Bf	glib-core/fl.h	/^  char* Bf;$/;"	m	class:TMOut
Bf	glib-core/hash.h	/^  char *Bf;$/;"	v
Bf	glib-core/url.cpp	/^  TChA Bf;$/;"	m	class:TUrlLx	file:
Bf	glib-core/zipfl.h	/^  char* Bf;$/;"	m	class:TZipIn
Bf	glib-core/zipfl.h	/^  char* Bf;$/;"	m	class:TZipOut
BfC	glib-core/fl.h	/^  int BfC, BfL;$/;"	m	class:TFIn
BfC	glib-core/fl.h	/^  uint64 BfC, BfL;$/;"	m	class:TMIn
BfC	glib-core/url.cpp	/^  int BfC;$/;"	m	class:TUrlLx	file:
BfC	glib-core/zipfl.h	/^  int BfC, BfL;$/;"	m	class:TZipIn
BfL	glib-core/dt.h	/^  int MxBfL, BfL;$/;"	v
BfL	glib-core/fl.h	/^  TSize BfL;$/;"	m	class:TFOut
BfL	glib-core/fl.h	/^  int BfC, BfL;$/;"	m	class:TFIn
BfL	glib-core/fl.h	/^  int BfL, MxBfL;$/;"	m	class:TMOut
BfL	glib-core/fl.h	/^  uint64 BfC, BfL;$/;"	m	class:TMIn
BfL	glib-core/hash.h	/^  TSize MxBfL, BfL;$/;"	v
BfL	glib-core/zipfl.h	/^  TSize BfL;$/;"	m	class:TZipOut
BfL	glib-core/zipfl.h	/^  int BfC, BfL;$/;"	m	class:TZipIn
BfsDfsTest	test/test-bfsdfs.cpp	/^class BfsDfsTest { };  \/\/ For gtest highlighting$/;"	c	file:
BifanMotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::BifanMotifAdjacency(PNGraph graph, WeightVH& weights) {$/;"	f	class:MotifCluster
BinFOut	snap-exp/spinn3r.h	/^  PSOut BinFOut;$/;"	m	class:TQuoteExtractor
BinFactor	snap-adv/ncp.cpp	/^double TLocClustStat::BinFactor = 1.01;$/;"	m	class:TLocClustStat	file:
BinFactor	snap-adv/ncp.h	/^  static double BinFactor;$/;"	m	class:TLocClustStat
BinSearch	snap-core/bignet.h	/^const int* TBigNet<TNodeData, IsDir>::BinSearch(const int* Beg, const int* End, const int& Val) {$/;"	f	class:TBigNet
BinSearch2	snap-core/bignet.h	/^const int* TBigNet<TNodeData, IsDir>::BinSearch2(const int* Beg, const int* End, const int& Val) {$/;"	f	class:TBigNet
BitSet	glib-core/shash.h	/^  unsigned char BitSet [(GroupSize-1)\/8 + 1];   \/\/ fancy math is so we round up$/;"	m	class:TSparseGroup
Bits	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	sbitset_block* Bits;$/;"	m	class:TSBitSet
Bits	glib-core/bits.cpp	/^const int TB32Set::Bits=32;$/;"	m	class:TB32Set	file:
Bits	glib-core/bits.cpp	/^const int TB8Set::Bits=8;$/;"	m	class:TB8Set	file:
Bits	glib-core/bits.cpp	/^const int TFSet::Bits=TFSet::B4s*TB4Def::B4Bits;$/;"	m	class:TFSet	file:
Bits	glib-core/bits.h	/^  int B4s, Bits;$/;"	v
Bits	glib-core/bits.h	/^  static const int Bits;$/;"	m	class:TB32Set
Bits	glib-core/bits.h	/^  static const int Bits;$/;"	m	class:TB8Set
Bits	glib-core/bits.h	/^  static const int Bits;$/;"	m	class:TFSet
BlockLenVNm	glib-core/blobbs.cpp	/^const TStr TBlobBs::BlockLenVNm="BlockLenV";$/;"	m	class:TBlobBs	file:
BlogDesc	snap-exp/spinn3r.h	/^  TChA BlogDesc;$/;"	m	class:TSpinn3rFeedItem
BlogDesc	snap-exp/spinn3r.h	/^  TChA BlogDesc;$/;"	m	class:TSpinn3rFullItem
BlogLang	snap-exp/spinn3r.h	/^  TChA BlogLang;$/;"	m	class:TSpinn3rFeedItem
BlogLang	snap-exp/spinn3r.h	/^  TChA BlogLang;$/;"	m	class:TSpinn3rFullItem
BlogTitleStr	snap-exp/memes.h	/^  TChA BlogTitleStr;$/;"	m	class:TQuoteLoader
BlogTitleStr	snap-exp/spinn3r.h	/^  TChA BlogTitleStr;$/;"	m	class:TSpinn3rFeedItem
BlogTitleStr	snap-exp/spinn3r.h	/^  TChA BlogTitleStr;$/;"	m	class:TSpinn3rFullItem
BlogUrlStr	snap-exp/memes.h	/^  TChA BlogUrlStr;$/;"	m	class:TQuoteLoader
BlogUrlStr	snap-exp/spinn3r.h	/^  TChA BlogUrlStr;$/;"	m	class:TSpinn3rFeedItem
BlogUrlStr	snap-exp/spinn3r.h	/^  TChA BlogUrlStr;$/;"	m	class:TSpinn3rFullItem
BlogV	snap-exp/sir.h	/^  TFltV MediaV, BlogV;$/;"	m	class:TSir2Model
BlogV	snap-exp/sir.h	/^  TFltV MediaV, BlogV;$/;"	m	class:TSirSR2Model
BodyMem	glib-core/http.h	/^  TMem BodyMem;$/;"	v
Bool	glib-core/json.h	/^  TBool Bool; $/;"	v
BorgattiEverettMeasure	snap-core/coreper.cpp	/^  double BorgattiEverettMeasure(PUNGraph& Graph, TIntIntH& out, double coresize, int type){$/;"	f	namespace:TSnap
BottomUpStep	snap-core/bfsdfs.h	/^bool TBreathFS<PGraph>::BottomUpStep(TIntV &NIdDistV, TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS
BottomUpStep	snap-exp/bfs-dev/bfs-hybrid-test.h	/^bool TBreathFS_Hybrid_Test<PGraph>::BottomUpStep(TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS_Hybrid_Test
BottomUpStep	snap-exp/bfs-dev/bfs-hybrid.h	/^bool TBreathFS_Hybrid<PGraph>::BottomUpStep(TIntV &NIdDistV, TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS_Hybrid
BottomUpStep	snap-exp/bfs-dev/bfs-parallel.h	/^bool TBreathFS_Parallel<PGraph>::BottomUpStep(TIntV &NIdDistV, TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS_Parallel
BoundOn	snap-adv/cascnetinf.h	/^  bool BoundOn, CompareGroundTruth;$/;"	m	class:TNetInfBs
BrTagNm	glib-core/html.cpp	/^const TStr THtmlTok::BrTagNm="<BR>";$/;"	m	class:THtmlTok	file:
Buckets	glib-core/shash.h	/^  uint16 Buckets;                               \/\/ limits GroupSize to 64K$/;"	m	class:TSparseGroup
Build	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void Build(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &SSG) {$/;"	f	class:TMatchingMachine
Build	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void Build(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &SSG) {$/;"	f	class:TMatchingMachine
Build	snap-exp/memenet.cpp	/^PMemeNetBs TMemeNetBs::Build(const PQuoteBs& QtBs, const TStr& MemesFNmWc, const int& TakeTopN) {$/;"	f	class:TMemeNetBs
BuildCapacityNetwork	examples/flows/flows.cpp	/^int BuildCapacityNetwork(const TStr& InFNm, PNEANet &Net, const int& SrcColId = 0, const int& DstColId = 1, const int& CapColId = 2) {$/;"	f
BuildCapacityNetwork	test/test-flow.cpp	/^int BuildCapacityNetwork(const TStr& InFNm, PNEANet &Net, const int& SrcColId = 0, const int& DstColId = 1, const int& CapColId = 2) {$/;"	f
BuildCombinedEdgeTable	snap-exp/multimodal-dev/benchmark-util.cpp	/^void BuildCombinedEdgeTable(const TVec<TPair<PTable,TStr> >& NodeTblV, const TVec<TQuad<PTable,TStr,TStr,TBool> >& EdgeTblV, THash<TStr,TStrH>& NStrH, TIntStrH& NIdH, PTable CombinedEdgeTbl) {$/;"	f
BuildFeatureGraph	snap-adv/rolx.cpp	/^PUNGraph BuildFeatureGraph(const TIntFtrH& LogBinFeatures,$/;"	f
BuildFromQt	snap-exp/memenet.h	/^  static PBlogPostNet BuildFromQt(const TStr& InFNmWc) {$/;"	f	class:TBlogPostNet
BuildGraph	snap-core/table.cpp	/^PNEANet TTable::BuildGraph(const TIntV& RowIds, TAttrAggr AggrPolicy) {$/;"	f	class:TTable
BuildPerms	snap-exp/signnet.cpp	/^void TSignMicroEvol::BuildPerms() {$/;"	f	class:TSignMicroEvol
BuildPhraseInvertIdx	snap-exp/memes.cpp	/^void BuildPhraseInvertIdx(const PQuoteBs& QtBs, TStrHash<TInt>& WordIdH, THash<TInt, TIntV>& WIdQtIdVH) {$/;"	f
BuildQtSubSeqCounts	snap-exp/memes.cpp	/^void TQuoteBs::BuildQtSubSeqCounts(TIntV& QtIdV, const TStr& OutFNm) {$/;"	f	class:TQuoteBs
BuildQuoteBs	snap-exp/memes.cpp	/^PQuoteBs TQuoteBs::BuildQuoteBs(const TStr& InBinFNmWc, const int& MinQtWrdLen) {$/;"	f	class:TQuoteBs
BuildSubgraph	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
BurUId	snap-exp/wikinet.h	/^  TInt UsrId, NomUId, BurUId; \/\/ user, nominator, bureaucrat user-id$/;"	m	class:TWikiElec
Bureaucrat	snap-exp/wikinet.h	/^    TStr Usr, RfA, NominatedBy, Bureaucrat;$/;"	m	struct:TWikiElecBs::TElecSum
BurnExpFire	snap-core/ff.cpp	/^void TForestFire::BurnExpFire() {$/;"	f	class:TForestFire
BurnExpFire	snap-core/ff.h	/^  TBool BurnExpFire;   \/\/ burn Exponential or Geometric fire$/;"	m	class:TFfGGen
BurnGeoFire	snap-core/ff.cpp	/^int TUndirFFire::BurnGeoFire(const int& StartNId) {$/;"	f	class:TUndirFFire
BurnGeoFire	snap-core/ff.cpp	/^void TForestFire::BurnGeoFire() {$/;"	f	class:TForestFire
BurnProb	snap-core/ff.h	/^  double BurnProb;$/;"	m	class:TUndirFFire
BurnedNIdV	snap-core/ff.h	/^  TIntV BurnedNIdV;  \/\/ nodes that got burned (FF model creates edges to them)$/;"	m	class:TForestFire
BurnedSet	snap-core/ff.h	/^  TIntSet BurnedSet; \/\/ all burned nodes in the current iteration$/;"	m	class:TUndirFFire
BurningNIdV	snap-core/ff.h	/^  TIntV BurningNIdV, NewBurnedNIdV, AliveNIdV; \/\/ temporary$/;"	m	class:TUndirFFire
CASCADE_STEP	snap-adv/cascdynetinf.h	/^  CASCADE_STEP, \/\/ run inference every time a cascade "finishes"$/;"	e	enum:__anon63
CAssert	glib-core/bd.h	302;"	d
CC	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^CC=g++$/;"	m
CC	contrib/unict_univr-risnap/RiToSnap/Makefile	/^CC=g++$/;"	m
CFLAGS	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^CFLAGS=-c -O3 $/;"	m
CFLAGS	contrib/unict_univr-risnap/RiToSnap/Makefile	/^CFLAGS=-c -O3 $/;"	m
CHAINSAW	snap-adv/cascdynetinf.h	/^  CHAINSAW, \/\/ chainsaw$/;"	e	enum:__anon59
CHUNKS_PER_THREAD	glib-core/base.h	155;"	d
CHat	snap-adv/circles.h	/^  TVec<TIntSet> CHat; \/\/ Latent community memberships$/;"	m	class:TCluster
CIDNSetV	snap-adv/agmfit.h	/^  TVec<TIntSet> CIDNSetV;  \/\/\/< Community ID -> Member Node ID Sets.$/;"	m	class:TAGMFit
CId	snap-adv/cascdynetinf.h	/^  TInt CId; \/\/ cascade id$/;"	m	class:TCascade
COMMENT_FILES	snap-exp/test-dev/Benchmark.cpp	7;"	d	file:
COMMENT_OPS	snap-exp/test-dev/Benchmark.cpp	9;"	d	file:
CONSTANT	snap-adv/cascdynetinf.h	/^  CONSTANT, \/\/ constant$/;"	e	enum:__anon59
CONV_H	snap-core/conv.h	2;"	d
COSINE	snap-exp/lsh.h	/^  enum DistMeasure {JACCARD, COSINE, EUCLIDEAN};$/;"	e	enum:TLSHash::DistMeasure
CPP	snap-exp/test-dev/Makefile	/^CPP = Engine.cpp$/;"	m
CRef	glib-core/ds.h	/^  TCRef CRef;$/;"	m	class:PVec
CRef	glib-core/ds.h	/^  TCRef CRef;$/;"	m	class:TGLib_OLD::TVecPool
CRef	glib-core/ds.h	/^  TCRef CRef;$/;"	m	class:TVecPool
CRef	glib-core/fl.h	/^  TCRef CRef;$/;"	m	class:TSBase
CRef	glib-core/hash.h	/^  TCRef CRef;$/;"	m	class:PHash
CRef	glib-core/unicode.h	/^	TCRef CRef;$/;"	m	class:TCodecBase
CRef	snap-adv/agm.h	/^    TCRef CRef;$/;"	m	class:TLogRegPredict
CRef	snap-adv/circles.h	/^  TCRef CRef;$/;"	m	class:TCluster
CRef	snap-adv/circles.h	/^  TCRef CRef;$/;"	m	class:TGraphAttributes
CRef	snap-adv/kronecker.h	/^  TCRef CRef;$/;"	m	class:TKroneckerLL
CRef	snap-core/bignet.h	/^  TCRef CRef;$/;"	m	class:TBigNet
CRef	snap-core/graph.h	/^  TCRef CRef;$/;"	m	class:TBPGraph
CRef	snap-core/graph.h	/^  TCRef CRef;$/;"	m	class:TNEGraph
CRef	snap-core/graph.h	/^  TCRef CRef;$/;"	m	class:TNGraph
CRef	snap-core/graph.h	/^  TCRef CRef;$/;"	m	class:TUNGraph
CRef	snap-core/graphmp.h	/^  TCRef CRef;$/;"	m	class:TNGraphMP
CRef	snap-core/gstat.h	/^  TCRef CRef;$/;"	m	class:TGStat
CRef	snap-core/gstat.h	/^  TCRef CRef;$/;"	m	class:TGStatVec
CRef	snap-core/mmnet.h	/^  TCRef CRef; \/\/Reference counter. Necessary for pointers.$/;"	m	class:TMMNet
CRef	snap-core/network.h	/^  TCRef CRef;$/;"	m	class:TDirNet
CRef	snap-core/network.h	/^  TCRef CRef;$/;"	m	class:TNEANet
CRef	snap-core/network.h	/^  TCRef CRef;$/;"	m	class:TNodeEDatNet
CRef	snap-core/network.h	/^  TCRef CRef;$/;"	m	class:TNodeEdgeNet
CRef	snap-core/network.h	/^  TCRef CRef;$/;"	m	class:TNodeNet
CRef	snap-core/network.h	/^  TCRef CRef;$/;"	m	class:TUndirNet
CRef	snap-core/networkmp.h	/^  TCRef CRef;$/;"	m	class:TNEANetMP
CRef	snap-core/table.h	/^  TCRef CRef;$/;"	m	class:TTable
CRef	snap-exp/alternativetable.h	/^    TCRef CRef;$/;"	m	class:RowBasedTable
CRef	snap-exp/alternativetable.h	/^  TCRef CRef;$/;"	m	class:ExplicitStringTable
CRef	snap-exp/alternativetable.h	/^  TCRef CRef;$/;"	m	class:PhysicalOrderTable
CRef	snap-exp/circles/circles.h	/^  TCRef CRef;$/;"	m	class:TCluster
CRef	snap-exp/circles/circles.h	/^  TCRef CRef;$/;"	m	class:TGraphAttributes
CRef	snap-exp/graphmp-exp.h	/^  TCRef CRef;$/;"	m	class:TUNGraphMP
CRef	snap-exp/lsh.h	/^    TCRef CRef;$/;"	m	class:TLSHash::HashFunc
CRef	snap-exp/memenet.h	/^  TCRef CRef;$/;"	m	class:TBlogPostNet
CRef	snap-exp/memenet.h	/^  TCRef CRef;$/;"	m	class:TMemeNetBs
CRef	snap-exp/memes.h	/^  TCRef CRef;$/;"	m	class:TQuoteBs
CRef	snap-exp/mmgraph-exp.h	/^  TCRef CRef;$/;"	m	class:TMNet
CStr	glib-core/bd.h	/^  char* CStr() {return Bf;}$/;"	f	class:TSStr
CStr	glib-core/bd.h	/^  const char* CStr() const {return Bf;}$/;"	f	class:TSStr
C_	snap-adv/motifcluster.h	/^  TIntV C_;$/;"	m	class:ChibaNishizekiWeighter
CacheCtrlFldNm	glib-core/http.cpp	/^const TStr THttp::CacheCtrlFldNm="Cache-Control";$/;"	m	class:THttp	file:
CacheCtrlFldNm	glib-core/http.h	/^  static const TStr CacheCtrlFldNm;$/;"	m	class:THttp
CalcApxGraphDLL	snap-adv/kronecker.cpp	/^const TFltV& TKroneckerLL::CalcApxGraphDLL() {$/;"	f	class:TKroneckerLL
CalcApxGraphLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::CalcApxGraphLL() {$/;"	f	class:TKroneckerLL
CalcAvgDiamPdf	snap-core/anf.cpp	/^double CalcAvgDiamPdf(const TFltPrV& DistNbrsPdfV) {$/;"	f	namespace:TSnap::TSnapDetail
CalcAvgDiamPdf	snap-core/anf.cpp	/^double CalcAvgDiamPdf(const TIntFltKdV& DistNbrsPdfV) {$/;"	f	namespace:TSnap::TSnapDetail
CalcChainR2	snap-adv/kronecker.cpp	/^double TKroneckerLL::CalcChainR2(const TVec<TFltV>& ChainLLV) {$/;"	f	class:TKroneckerLL
CalcConstraints	snap-core/triad.h	/^void TNetConstraint<PGraph>::CalcConstraints() {$/;"	f	class:TNetConstraint
CalcConstraints	snap-core/triad.h	/^void TNetConstraint<PGraph>::CalcConstraints(const int& NId) {$/;"	f	class:TNetConstraint
CalcDescriptionLength	snap-adv/rolx.cpp	/^TFlt CalcDescriptionLength(const TFltVV& V, const TFltVV& G,$/;"	f
CalcEffDiam	snap-core/anf.cpp	/^double CalcEffDiam(const TFltPrV& DistNbrsCdfV, const double& Percentile) {$/;"	f	namespace:TSnap::TSnapDetail
CalcEffDiam	snap-core/anf.cpp	/^double CalcEffDiam(const TIntFltKdV& DistNbrsCdfV, const double& Percentile) {$/;"	f	namespace:TSnap::TSnapDetail
CalcEffDiamPdf	snap-core/anf.cpp	/^double CalcEffDiamPdf(const TFltPrV& DistNbrsPdfV, const double& Percentile) {$/;"	f	namespace:TSnap::TSnapDetail
CalcEffDiamPdf	snap-core/anf.cpp	/^double CalcEffDiamPdf(const TIntFltKdV& DistNbrsPdfV, const double& Percentile) {$/;"	f	namespace:TSnap::TSnapDetail
CalcFullApxGraphDLL	snap-adv/kronecker.cpp	/^const TFltV& TKroneckerLL::CalcFullApxGraphDLL() {$/;"	f	class:TKroneckerLL
CalcGraphDLL	snap-adv/kronecker.cpp	/^const TFltV& TKroneckerLL::CalcGraphDLL() {$/;"	f	class:TKroneckerLL
CalcGraphLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::CalcGraphLL() {$/;"	f	class:TKroneckerLL
CalcLogRegGradient	snap-adv/agm.cpp	/^PLogRegPredict TLogRegFit::CalcLogRegGradient(const TVec<TFltV>& XPt, const TFltV& yPt, const TStr& PlotNm, const double& ChangeEps, const int& MaxStep, const bool Intercept) {$/;"	f	class:TLogRegFit
CalcLogRegNewton	snap-adv/agm.cpp	/^PLogRegPredict TLogRegFit::CalcLogRegNewton(const TVec<TFltV>& XPt, const TFltV& yPt, const TStr& PlotNm, const double& ChangeEps, const int& MaxStep, const bool Intercept) {$/;"	f	class:TLogRegFit
CalcNonNegativeFactorization	snap-adv/rolx.cpp	/^void CalcNonNegativeFactorization(const TFltVV& V, const int NumRoles,$/;"	f
CalcPNoComByCmtyVV	snap-adv/agmfit.cpp	/^double TAGMFit::CalcPNoComByCmtyVV(const int& SamplePairs) {$/;"	f	class:TAGMFit
CalcPRankGrad	snap-exp/linkpred.cpp	/^void TQGraph::CalcPRankGrad() {$/;"	f	class:__OLD__::TQGraph
CalcPageRank	snap-exp/linkpred.cpp	/^void TLpExample::CalcPageRank() {$/;"	f	class:TLpExample
CalcVerticalLogBinning	snap-adv/rolx.cpp	/^TIntFtrH CalcVerticalLogBinning(const TIntFtrH& Features,$/;"	f
CalculateOverlapMtx	snap-adv/cliques.cpp	/^PUNGraph TCliqueOverlap::CalculateOverlapMtx(const TVec<TIntV>& MaxCliques, int MinNodeOverlap) {$/;"	f	class:TCliqueOverlap
CalculateOverlapMtx	snap-adv/cliques.cpp	/^void TCliqueOverlap::CalculateOverlapMtx(const TVec<TIntV>& MaxCliques, int MinNodeOverlap, TVec<TIntV>& OverlapMtx) {$/;"	f	class:TCliqueOverlap
CanSentenceEndHere	glib-core/unicode.h	/^bool TUniChDb::CanSentenceEndHere(const TSrcVec& src, const size_t srcIdx, const size_t position) const$/;"	f	class:TUniChDb
CandItemH	snap-exp/trawling.h	/^  THash<TIntV, TInt, TIntVHashFunc> CandItemH, CurItemH;$/;"	m	class:TTrawling
CapAttrName	snap-core/flow.h	/^const TStr CapAttrName = "capacity";$/;"	m	namespace:TSnap
CapIndex	snap-core/flow.cpp	/^  int CapIndex;$/;"	m	class:TSnap::TPRManager	file:
Capacity	snap-adv/subgraphenum.h	/^		inline int Capacity() const { return m_capacity; }$/;"	f	class:TSubGraphEnum::TSSet
Capacity	snap-adv/subgraphenum.h	/^		inline int Capacity() const { return m_capacity; }$/;"	f	class:TSubGraphEnum::TSVec
Capacity	snap-core/flow.cpp	/^  int Capacity (int EId) {$/;"	f	class:TSnap::TPRManager
CardTagNm	glib-core/html.cpp	/^const TStr THtmlTok::CardTagNm="<CARD>";$/;"	m	class:THtmlTok	file:
CascFind	snap-core/casc.cpp	/^void CascFind(PNGraph Graph,PTable P,const TStr C1,const TStr C2,const TStr C3,const TStr C4,TVec<TIntV> &TopCascVV,bool Print) {$/;"	f	namespace:TSnap
CascFindMP	snap-core/casc.cpp	/^void CascFindMP(PNGraph Graph,PTable P,const TStr C1,const TStr C2,const TStr C3,const TStr C4,TVec<TIntV> &TopCascVV) {$/;"	f	namespace:TSnap
CascGraph	snap-core/casc.cpp	/^PNGraph CascGraph(PTable P,const TStr C1,const TStr C2,const TStr C3,const TStr C4,const TInt W,bool SortParam) {$/;"	f	namespace:TSnap
CascGraphSource	snap-core/casc.cpp	/^PNGraph CascGraphSource(PTable P,const TStr C1,const TStr C2,const TStr C3,const TStr C4,const TInt W) {$/;"	f	namespace:TSnap
CascGraphTime	snap-core/casc.cpp	/^PNGraph CascGraphTime(PTable P,const TStr C1,const TStr C2,const TStr C3,const TStr C4,const TInt W) {$/;"	f	namespace:TSnap
CascH	snap-adv/cascdynetinf.h	/^  THash<TInt, TCascade> CascH; \/\/ cascades, indexed by id$/;"	m	class:TNIBs
CascPerEdge	snap-adv/cascdynetinf.h	/^  THash<TIntPr, TIntV> CascPerEdge;$/;"	m	class:TNIBs
CascPerEdge	snap-adv/cascnetinf.h	/^  THash<TIntPr, TIntV> CascPerEdge; \/\/ To implement localized update$/;"	m	class:TNetInfBs
CascV	snap-adv/cascnetinf.h	/^  TVec<TCascade> CascV;$/;"	m	class:TNetInfBs
CascadeIdH	snap-adv/cascdynetinf.h	/^  TStrIntH CascadeIdH; \/\/ quote, CascadeId hash table, QuoteId is equivalent to cascadeId$/;"	m	class:TNIBs
CatStr	snap-exp/wikinet.h	/^  TChA CatStr, ImgStr, TemplateStr; \/\/ list of categories, images and templates$/;"	m	class:TWikiMetaLoader
CellStrVV	glib-core/ss.h	/^  TVec<PStrV> CellStrVV;$/;"	v
CenterTagNm	glib-core/html.cpp	/^const TStr THtmlTok::CenterTagNm="<CENTER>";$/;"	m	class:THtmlTok	file:
Ch	glib-core/fl.h	/^  char Ch;$/;"	m	class:TChRet
Ch	glib-core/http.cpp	/^  char Ch;$/;"	m	class:THttpLx	file:
ChDef	glib-core/html.cpp	/^PHtmlLxChDef THtmlLxChDef::ChDef=PHtmlLxChDef(new THtmlLxChDef());$/;"	m	class:THtmlLxChDef	file:
ChDef	glib-core/html.cpp	/^THtmlLxChDef THtmlLx::ChDef;$/;"	m	class:THtmlLx	file:
ChDef	glib-core/html.h	/^  static PHtmlLxChDef ChDef;$/;"	v
ChDef	glib-core/http.cpp	/^  static THttpChDef ChDef;$/;"	m	class:THttpLx	file:
ChDef	glib-core/http.cpp	/^THttpChDef THttpLx::ChDef;$/;"	m	class:THttpLx	file:
ChDef	glib-core/url.cpp	/^  static const TUrlLxChDef ChDef;$/;"	m	class:TUrlLx	file:
ChDef	glib-core/url.cpp	/^const TUrlLxChDef TUrlLx::ChDef;$/;"	m	class:TUrlLx	file:
ChDef	glib-core/xml.cpp	/^TXmlChDef TXmlLx::ChDef;$/;"	m	class:TXmlLx	file:
ChDefTy	glib-core/lx.h	/^  TLxChDef(const TLxChDefTy& ChDefTy);$/;"	v
ChN	glib-core/http.cpp	/^  int Chs, ChN;$/;"	m	class:THttpChRet	file:
ChTyV	glib-core/html.h	/^  TIntV ChTyV;$/;"	v
ChTyV	glib-core/http.cpp	/^  TIntV ChTyV;$/;"	m	class:THttpChDef	file:
ChTyV	glib-core/lx.h	/^  TIntV ChTyV;$/;"	v
ChainGelmapRubinPlot	snap-adv/kronecker.cpp	/^void TKroneckerLL::ChainGelmapRubinPlot(const TVec<TFltV>& ChainLLV, const TStr& OutFNm, const TStr& Desc) {$/;"	f	class:TKroneckerLL
ChangeCh	glib-core/dt.cpp	/^int TStr::ChangeCh(const char& SrcCh, const char& DstCh, const int& BChN){$/;"	f	class:TStr
ChangeCh	glib-core/dt.cpp	/^void TChA::ChangeCh(const char& SrcCh, const char& DstCh){$/;"	f	class:TChA
ChangeChAll	glib-core/dt.cpp	/^int TStr::ChangeChAll(const char& SrcCh, const char& DstCh){$/;"	f	class:TStr
ChangeContext	snap-core/table.cpp	/^TTableContext* TTable::ChangeContext(TTableContext* NewContext) {$/;"	f	class:TTable
ChangeHttpRqStr	glib-core/url.h	/^  void ChangeHttpRqStr(const TStr& SrcStr, const TStr& DstStr){$/;"	f
ChangeStr	glib-core/dt.cpp	/^int TStr::ChangeStr(const TStr& SrcStr, const TStr& DstStr, const int& BChN){$/;"	f	class:TStr
ChangeStrAll	glib-core/dt.cpp	/^int TStr::ChangeStrAll(const TStr& SrcStr, const TStr& DstStr, const bool& FromStartP){$/;"	f	class:TStr
CharBit	glib-core/shash.h	/^  static int CharBit(const int&  ValN) { return ValN >> 3; }$/;"	f	class:TSparseGroup
CharChSet	glib-core/xml.h	/^  TBSet CharChSet, CombChSet, ExtChSet;$/;"	v
Check	glib-core/dt.cpp	/^bool TRnd::Check(){$/;"	f	class:TRnd
Check	glib-core/md5.cpp	/^bool TMd5::Check(){$/;"	f	class:TMd5
CheckAndAddFltNode	snap-core/table.h	/^TInt TTable::CheckAndAddFltNode(T Graph, THash<TFlt, TInt>& NodeVals, TFlt FNodeVal) {$/;"	f	class:TTable
CheckAndAddIntNode	snap-core/table.cpp	/^inline void TTable::CheckAndAddIntNode(PNEANet Graph, THashSet<TInt>& NodeVals, TInt NodeId) {$/;"	f	class:TTable
CheckGap	snap-core/flow.cpp	/^  void CheckGap (int GapLabel) {$/;"	f	class:TSnap::TPRManager
CheckGraphs	test/test-alg.cpp	/^void CheckGraphs(const TIntPrV& ExpectedDegCnt, const PNEGraph& ActualGraph) {$/;"	f
CheckGraphs	test/test-alg.cpp	/^void CheckGraphs(const TIntPrV& ExpectedDegCnt, const PNGraph& ActualGraph) {$/;"	f
CheckGraphs	test/test-alg.cpp	/^void CheckGraphs(const TIntPrV& ExpectedDegCnt, const PUNGraph& ActualGraph) {$/;"	f
CheckNodeIds	snap-core/gsvd.cpp	/^bool TNGraphMtx::CheckNodeIds() {$/;"	f	class:TNGraphMtx
CheckNodeIds	snap-core/gsvd.cpp	/^bool TUNGraphMtx::CheckNodeIds() {$/;"	f	class:TUNGraphMtx
CheckNotInSet	test/test-alg.cpp	/^void CheckNotInSet(int Key, const TIntSet& Keys) {$/;"	f
CheckSortedKeyVal	snap-core/table.cpp	/^TInt TTable::CheckSortedKeyVal(TIntV& Key, TIntV& Val, TInt Start, TInt End) {$/;"	f	class:TTable
CheckVectors	test/test-alg.cpp	/^void CheckVectors(const TFltPrV& Expected, const TFltPrV& Actual) {$/;"	f
CheckVectors	test/test-alg.cpp	/^void CheckVectors(const TIntPrV& Expected, const TIntPrV& Actual) {$/;"	f
CheckVectors	test/test-alg.cpp	/^void CheckVectors(const TIntSet& Expected, const TIntSet& Actual) {$/;"	f
CheckVectors	test/test-alg.cpp	/^void CheckVectors(const TIntV& Expected, const TIntV& Actual) {$/;"	f
ChiSquareOne	glib-core/xmath.cpp	/^void TStatTest::ChiSquareOne($/;"	f	class:TStatTest
ChiSquareTwo	glib-core/xmath.cpp	/^void TStatTest::ChiSquareTwo($/;"	f	class:TStatTest
ChibaNishizekiWeighter	snap-adv/motifcluster.h	/^ ChibaNishizekiWeighter(PUNGraph graph) : orig_graph_(graph) {}$/;"	f	class:ChibaNishizekiWeighter
ChibaNishizekiWeighter	snap-adv/motifcluster.h	/^class ChibaNishizekiWeighter {$/;"	c
CholeskyDecomposition	glib-core/linalg.cpp	/^void TNumericalStuff::CholeskyDecomposition(TFltVV& A, TFltV& p) {$/;"	f	class:TNumericalStuff
CholeskySolve	glib-core/linalg.cpp	/^void TNumericalStuff::CholeskySolve(const TFltVV& A, const TFltV& p, const TFltV& b, TFltV& x) {$/;"	f	class:TNumericalStuff
Choose	glib-core/xmath.h	/^  static int Choose(const int& N, const int& K){ \/\/ binomial coefficient$/;"	f	class:TMath
Chs	glib-core/http.cpp	/^  int Chs, ChN;$/;"	m	class:THttpChRet	file:
Chs	glib-core/xml.h	/^  TInt Chs;$/;"	v
Circle	test/test-alg.cpp	/^  PNGraph Circle;$/;"	m	class:TreeTest	file:
ClassHdTP	glib-core/bd.h	135;"	d
ClassHdTPV	glib-core/bd.h	172;"	d
ClassT	glib-core/bd.h	112;"	d
ClassTE	glib-core/bd.h	157;"	d
ClassTP	glib-core/bd.h	126;"	d
ClassTPE	glib-core/bd.h	139;"	d
ClassTPEE	glib-core/bd.h	148;"	d
ClassTPV	glib-core/bd.h	162;"	d
ClassTPVL	glib-core/bd.h	177;"	d
ClassTV	glib-core/bd.h	115;"	d
ClassTVQ	glib-core/bd.h	120;"	d
Classify	snap-core/table.cpp	/^void TTable::Classify(TPredicate& Predicate, const TStr& LabelName, const TInt& PositiveLabel, const TInt& NegativeLabel) {$/;"	f	class:TTable
ClassifyAtomic	snap-core/table.cpp	/^void TTable::ClassifyAtomic(const TStr& Col1, const TStr& Col2, TPredComp Cmp,$/;"	f	class:TTable
ClassifyAtomicConst	snap-core/table.h	/^  void ClassifyAtomicConst(const TStr& Col, const T& Val, TPredComp Cmp,$/;"	f	class:TTable
ClassifyAux	snap-core/table.cpp	/^void TTable::ClassifyAux(const TIntV& SelectedRows, const TStr& LabelName, const TInt& PositiveLabel, const TInt& NegativeLabel) {$/;"	f	class:TTable
ClearElecData	snap-exp/wikinet.cpp	/^void TWikiTalkNet::ClearElecData() {$/;"	f	class:TWikiTalkNet
CliqueEnum	snap-adv/motifcluster.cpp	/^void ChibaNishizekiWeighter::CliqueEnum(int k, const TIntV& U) {$/;"	f	class:ChibaNishizekiWeighter
CliqueMotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::CliqueMotifAdjacency(PUNGraph graph, int clique_size,$/;"	f	class:MotifCluster
Clone	glib-core/bd.h	/^  TPt<TRec> Clone(){return MkClone(*this);}$/;"	f	class:TPt
Clone	glib-core/bits.h	/^  PBSet Clone() const {return PBSet(new TBSet(*this));}$/;"	f
Clone	snap-core/gstat.h	/^  PGStat Clone() const { return new TGStat(*this); }$/;"	f	class:TGStat
Close	glib-core/unicode.h	/^		void Close() { putBackCh = EOF; if (f) { fclose(f); f = 0; }}$/;"	f	class:TUniChDb::TUcdFileReader
CloseTriadH	snap-exp/signnet.h	/^  THash<TInt, TCloseStat> CloseTriadH;  \/\/ OpnTriadId -> 0->1 +\/- edges$/;"	m	class:TSignMicroEvol
Clr	glib-core/bd.h	/^  void Clr(){UnRef(); Addr=NULL;}$/;"	f	class:TPt
Clr	glib-core/bits.cpp	/^void TBSet::Clr(){$/;"	f	class:TBSet
Clr	glib-core/bits.h	/^  TB32Set& Clr(){B4=0; return *this;}$/;"	f	class:TB32Set
Clr	glib-core/bits.h	/^  TB8Set& Clr(){B1=0; return *this;}$/;"	f	class:TB8Set
Clr	glib-core/bits.h	/^  void Clr(){$/;"	f	class:TFSet
Clr	glib-core/blobbs.h	/^  void Clr(){Seg=0; Addr=TUInt::Mx;}$/;"	f
Clr	glib-core/ds.h	/^  void Clr(){$/;"	f	class:TLst
Clr	glib-core/ds.h	/^  void Clr(){NodeV.Clr();}$/;"	f	class:TTree
Clr	glib-core/ds.h	/^  void Clr(){XDim=0; YDim=0; ValV.Clr();}$/;"	f	class:TVVec
Clr	glib-core/ds.h	/^  void Clr(){XDim=0; YDim=0; ZDim=0; ValV.Clr();}$/;"	f	class:TVVVec
Clr	glib-core/ds.h	/^  void Clr(bool DoDel = true) {$/;"	f	class:TGLib_OLD::TVecPool
Clr	glib-core/ds.h	/^  void Clr(bool DoDel = true) {$/;"	f	class:TVecPool
Clr	glib-core/ds.h	/^  void Clr(const bool& DoDel=false) {ValV.Clr(DoDel);}$/;"	f	class:TSStack
Clr	glib-core/ds.h	/^  void Clr(const bool& DoDel=true){ValV.Clr(DoDel); First=Last=0;}$/;"	f	class:TQQueue
Clr	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Clr(const bool& DoDel, const TSizeTy& NoDelLim){$/;"	f	class:TVec
Clr	glib-core/dt.cpp	/^void TStrPool64::Clr(bool DoDel) { $/;"	f	class:TStrPool64
Clr	glib-core/dt.h	/^  void Clr(const bool& DoDel=true){$/;"	f
Clr	glib-core/fl.h	/^  void Clr() { Fail; }$/;"	f	class:TFInOut
Clr	glib-core/fl.h	/^  void Clr(){BfL=0;}$/;"	f	class:TMOut
Clr	glib-core/hash.h	/^  void Clr(bool DoDel = false) { BfL = 0; if (DoDel && Bf) { free(Bf); Bf = 0; MxBfL = 0; } }$/;"	f
Clr	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::Clr(const bool& DoDel, const int& NoDelLim, const bool& ResetDat){$/;"	f	class:THash
Clr	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::Clr(const bool& DoDel){$/;"	f	class:THashMP
Clr	glib-core/shash.h	/^  void Clr() { if (ValT != NULL) { free(ValT); ValT=NULL; } Vals = 0; }$/;"	f	class:TPackVec
Clr	glib-core/shash.h	/^  void Clr(const bool& DoDel = true) { Table.Clr(DoDel);  ResetThresh(); }$/;"	f	class:TSparseHash
Clr	glib-core/shash.h	/^  void Clr(const bool& DoDel = true) { Table.Clr(DoDel);  ResetThresh(); }$/;"	f	class:TSparseSet
Clr	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::Clr(const bool& DoDel, const int& NoDelLim) {$/;"	f	class:THashSet
Clr	glib-core/shash.h	/^void TSparseGroup<TVal, GroupSize>::Clr(const bool& DoDel) {$/;"	f	class:TSparseGroup
Clr	glib-core/shash.h	/^void TSparseTable<TVal, GroupSize>::Clr(const bool& DoDel) {$/;"	f	class:TSparseTable
Clr	glib-core/unicode.h	/^	void Clr() { cfCommon.Clr(); cfSimple.Clr(); cfFull.Clr(); cfTurkic.Clr(); }$/;"	f	class:TUniCaseFolding
Clr	glib-core/unicode.h	/^	void Clr() { singles.Clr(); pairs.Clr(); roots.Clr(); nodes.Clr(); }$/;"	f	class:TUniTrie
Clr	glib-core/unicode.h	/^	void Clr() {$/;"	f	class:TUniChDb
Clr	glib-core/unicodestring.h	/^  void Clr(){UniChV.Clr();}$/;"	f	class:TUStr
Clr	glib-core/wch.h	/^  void Clr(){WChV.Clr();}$/;"	f	class:TWChA
Clr	snap-adv/cascdynetinf.h	/^  void Clr() { NIdHitH.Clr(); }$/;"	f	class:TCascade
Clr	snap-adv/cascnetinf.h	/^  void Clr() { NIdHitH.Clr(); CurProb = 0; Alpha = 1.0; }$/;"	f	class:TCascade
Clr	snap-adv/mag.h	/^	void Clr() {  AffMtxV.Clr();  }$/;"	f	class:TMAGParam
Clr	snap-adv/mag.h	/^	void Clr() {  PhiVV.Clr();  KnownVV.Clr();  }$/;"	f	class:TMAGFitBern
Clr	snap-adv/ncp.cpp	/^void TLocClustStat::Clr() {$/;"	f	class:TLocClustStat
Clr	snap-core/attr.h	/^  void Clr() { AttrNameToId.Clr(); AttrIdToName.Clr(); IntAttrVals.Clr(); FltAttrVals.Clr(); StrAttrVals.Clr(); }$/;"	f	class:TAttr
Clr	snap-core/attr.h	/^  void Clr() { AttrNameToId.Clr(); AttrIdToName.Clr(); IntAttrVals.Clr(); FltAttrVals.Clr(); StrAttrVals.Clr(); }$/;"	f	class:TAttrPair
Clr	snap-core/bignet.h	/^  void Clr(const bool& DoDel = true) { MxNId = 0;  NodeH.Clr(DoDel); Pool.Clr(DoDel); }$/;"	f	class:TBigNet
Clr	snap-core/cncom.h	/^  void Clr() { NIdV.Clr(); }$/;"	f	class:TCnCom
Clr	snap-core/ff.h	/^  void Clr() { Graph->Clr(); }$/;"	f	class:TFfGGen
Clr	snap-core/gbase.h	/^  void Clr(const bool& DoDel=true) { ValV.Clr(DoDel);  First=Last=0; }$/;"	f	class:TSnapQueue
Clr	snap-core/ghash.h	/^  void Clr(const bool& DoDel=true, const int& NoDelLim=-1) { GraphH.Clr(DoDel, NoDelLim); }$/;"	f	class:TGHash
Clr	snap-core/graph.h	/^  void Clr() { MxNId=0; LeftH.Clr(); RightH.Clr(); }$/;"	f	class:TBPGraph
Clr	snap-core/graph.h	/^  void Clr() { MxNId=0; MxEId=0; NodeH.Clr(); EdgeH.Clr(); }$/;"	f	class:TNEGraph
Clr	snap-core/graph.h	/^  void Clr() { MxNId=0; NEdges=0; NodeH.Clr(); }$/;"	f	class:TUNGraph
Clr	snap-core/graph.h	/^  void Clr() { MxNId=0; NodeH.Clr(); }$/;"	f	class:TNGraph
Clr	snap-core/graphmp.h	/^  void Clr() { MxNId=0; NodeH.Clr(); }$/;"	f	class:TNGraphMP
Clr	snap-core/gstat.h	/^  void Clr() { GStatV.Clr(); }$/;"	f	class:TGStatVec
Clr	snap-core/mmnet.cpp	/^void TCrossNet::Clr() {$/;"	f	class:TCrossNet
Clr	snap-core/mmnet.cpp	/^void TModeNet::Clr() {$/;"	f	class:TModeNet
Clr	snap-core/network.h	/^  void Clr() { MxNId=0;  MxEId=0;  NodeH.Clr();  EdgeH.Clr(); }$/;"	f	class:TNodeEdgeNet
Clr	snap-core/network.h	/^  void Clr() { MxNId=0; MxEId=0; NodeH.Clr(); EdgeH.Clr();$/;"	f	class:TNEANet
Clr	snap-core/network.h	/^  void Clr() { MxNId=0; NEdges=0; NodeH.Clr(); SAttrN.Clr(); SAttrE.Clr(); }$/;"	f	class:TUndirNet
Clr	snap-core/network.h	/^  void Clr() { MxNId=0; NodeH.Clr(); SAttrN.Clr(); SAttrE.Clr(); }$/;"	f	class:TDirNet
Clr	snap-core/network.h	/^  void Clr(const bool& DoDel=true, const bool& ResetDat=true) {$/;"	f	class:TNodeEDatNet
Clr	snap-core/network.h	/^  void Clr(const bool& DoDel=true, const bool& ResetDat=true) {$/;"	f	class:TNodeNet
Clr	snap-core/networkmp.h	/^  void Clr() { MxNId=0; MxEId=0; NodeH.Clr(); EdgeH.Clr(),$/;"	f	class:TNEANetMP
Clr	snap-exp/graphmp-exp.h	/^  void Clr() { MxNId=0; NodeH.Clr(); }$/;"	f	class:TUNGraphMP
Clr	snap-exp/memes.cpp	/^void TMemesDataLoader::Clr() {$/;"	f	class:TMemesDataLoader
Clr	snap-exp/memes.cpp	/^void TQuoteLoader::Clr() {$/;"	f	class:TQuoteLoader
Clr	snap-exp/spinn3r.cpp	/^void TSpinn3rFeedItem::Clr() {$/;"	f	class:TSpinn3rFeedItem
Clr	snap-exp/spinn3r.cpp	/^void TSpinn3rFullItem::Clr() {$/;"	f	class:TSpinn3rFullItem
Clr	snap-exp/wikinet.cpp	/^void TWikiMetaHist::Clr() {$/;"	f	class:TWikiMetaHist
ClrCodecs	glib-core/unicode.h	/^	void ClrCodecs() { codecs.Clr(); }$/;"	f	class:TUnicode
ClrDcpFlags	glib-core/unicode.h	/^	void ClrDcpFlags() { flags = flags & ~ucfDcpMask; }$/;"	f	class:TUniChInfo
ClrMemSf	glib-core/http.cpp	/^  void ClrMemSf(){SfMem.Clr();}$/;"	f	class:THttpLx
ClrNbr	snap-core/mmnet.cpp	/^void TMMNet::ClrNbr(const TInt& ModeId, const TInt& CrossNetId, const bool& outEdge, const bool& sameMode, bool& isDir) {$/;"	f	class:TMMNet
ClrNbr	snap-core/mmnet.cpp	/^void TModeNet::ClrNbr(const TStr& CrossNetName, const bool& outEdge, const bool& sameMode, bool& isDir) {$/;"	f	class:TModeNet
ClrSentenceBoundaryExceptions	glib-core/unicode.h	/^	void ClrSentenceBoundaryExceptions() { ucd.SbEx_Clr(); }$/;"	f	class:TUnicode
ClrWbAndSbFlags	glib-core/unicode.h	/^	void ClrWbAndSbFlags() { flags = flags & ~(ucfWbMask | ucfSbMask); }$/;"	f	class:TUniChInfo
ClustGreedyRandom	snap-exp/memes.cpp	/^void TClustNet::ClustGreedyRandom() const {$/;"	f	class:TClustNet
ClustGreedyTopDown	snap-exp/memes.cpp	/^void TClustNet::ClustGreedyTopDown() const {$/;"	f	class:TClustNet
ClustGreedyTopDown	snap-exp/memes.cpp	/^void TClustNet::ClustGreedyTopDown(TIntPrV& KeepEdgeV) const {$/;"	f	class:TClustNet
ClustKeepSingleEdge	snap-exp/memes.cpp	/^void TClustNet::ClustKeepSingleEdge(const int& MethodId) const {$/;"	f	class:TClustNet
ClustKeepSingleEdge	snap-exp/memes.cpp	/^void TClustNet::ClustKeepSingleEdge(const int& MethodId, TIntPrV& KeepEdgeV) const {$/;"	f	class:TClustNet
ClustQtIdVH	snap-exp/memes.h	/^  THash<TInt, TIntV> ClustQtIdVH; \/\/ root quote id --> all quotes in the cluster$/;"	m	class:TQuoteBs
ClusterQts	snap-exp/memes.cpp	/^void TQuoteBs::ClusterQts(const int& MinRootWrdLen, const int& MinQtFq, const TStr& OutFNmPref, const TStrV& BlackListV) {$/;"	f	class:TQuoteBs
Cmp	glib-core/bd.h	/^  int Cmp(const T& d1, const T& d2) const { \/\/** vprasaj Janeza za uporabo$/;"	f	class:TGtr
Cmp	glib-core/bd.h	/^  int Cmp(const T& d1, const T& d2) const {$/;"	f	class:TLss
Cmp	glib-core/bd.h	/^bool Cmp(const int& RelOp, const TRec& Rec1, const TRec& Rec2){$/;"	f
Cmp	glib-core/hash.h	/^  int Cmp(const int& StrId, const char *Str) const { Assert(StrId < GetStrs());$/;"	f
Cmp	snap-core/gbase.h	/^  TCmp Cmp;$/;"	m	class:THeap
CmpI	glib-core/dt.cpp	/^int TRStr::CmpI(const char* p, const char* r){$/;"	f	class:TRStr
CmpKey	glib-core/hash.h	/^    bool CmpKey, Asc;$/;"	m	class:THash::THashKeyDatCmp
CmpKey	glib-core/hashmp.h	/^    bool CmpKey, Asc;$/;"	m	class:THashMP::THashMPKeyDatCmp
Cmt	snap-exp/wikinet.h	/^  TChA Usr, Cmt;$/;"	m	class:TWikiMetaHist
CmtyCMN	snap-core/cmty.cpp	/^  static double CmtyCMN(const PUNGraph& Graph, TCnComV& CmtyV) {$/;"	f	class:TSnap::TSnapDetail::TCNMQMatrix
CmtyEvolutionFileBatch	snap-core/cmty.cpp	/^void CmtyEvolutionFileBatch(TStr InFNm, TIntIntHH& sizesCont, TIntIntHH& cCont, TIntIntVH& edges, double alpha, double beta, int CmtyAlg) {$/;"	f	namespace:TSnap
CmtyEvolutionFileBatchV	snap-core/cmty.cpp	/^void CmtyEvolutionFileBatchV(TStr InFNm, TIntIntVH& sizesContV, TIntIntVH& cContV, TIntIntVH& edges, double alpha, double beta, int CmtyAlg) {$/;"	f	namespace:TSnap
CmtyEvolutionJson	snap-core/cmty.cpp	/^void CmtyEvolutionJson(TStr& Json, TIntIntVH& sizesContV, TIntIntVH& cContV, TIntIntVH& edges){$/;"	f	namespace:TSnap
CmtyGirvanNewmanStep	snap-core/cmty.cpp	/^void CmtyGirvanNewmanStep(PUNGraph& Graph, TIntV& Cmty1, TIntV& Cmty2) {$/;"	f	namespace:TSnap::TSnapDetail
CmtyIdUF	snap-core/cmty.cpp	/^  TUnionFind CmtyIdUF;$/;"	m	class:TSnap::TSnapDetail::TCNMQMatrix	file:
CmtyQH	snap-core/cmty.cpp	/^  THash<TInt, TCmtyDat> CmtyQH;$/;"	m	class:TSnap::TSnapDetail::TCNMQMatrix	file:
CmtyTest	snap-core/cmty.cpp	/^TStr CmtyTest(TStr InFNm, int CmtyAlg){$/;"	f	namespace:TSnap
CnComTest	test/test-cncom.cpp	/^class CnComTest { };  \/\/ For gtest highlighting$/;"	c	file:
CnComTest	tutorials/demo-cncom.cpp	/^class CnComTest { };  \/\/ For gtest highlighting$/;"	c	file:
CnComV	snap-core/cncom.h	/^  TCnComV CnComV;$/;"	m	class:TBiConVisitor
CnComV	snap-core/cncom.h	/^  TCnComV CnComV;$/;"	m	class:TSccVisitor
Cnt	snap-core/util.cpp	/^int TStopwatch::Cnt(const TExperiment Exp) const {$/;"	f	class:TStopwatch
Cnt	snap-exp/memes.h	/^    int Cnt() const { return (int)QtCnt; }$/;"	f	class:TQuote::TTmUrlCnt
Cnt	snap-exp/signnet.h	/^    TInt Cnt;    \/\/ number of + edges$/;"	m	struct:TSignMicroEvol::TTransStat
CntDegNodes	snap-core/alg.h	/^int CntDegNodes(const PGraph& Graph, const int& NodeDeg) {$/;"	f	namespace:TSnap
CntEdgesToSet	snap-core/alg.h	/^int CntEdgesToSet(const PGraph& Graph, const int& NId, const TIntSet& NodeSet) {$/;"	f	namespace:TSnap
CntInDegNodes	snap-core/alg.h	/^int CntInDegNodes(const PGraph& Graph, const int& NodeInDeg) {$/;"	f	namespace:TSnap
CntNonZNodes	snap-core/alg.h	/^int CntNonZNodes(const PGraph& Graph) {$/;"	f	namespace:TSnap
CntOutDegNodes	snap-core/alg.h	/^int CntOutDegNodes(const PGraph& Graph, const int& NodeOutDeg) {$/;"	f	namespace:TSnap
CntSelfEdges	snap-core/alg.h	/^int CntSelfEdges(const PGraph& Graph) {$/;"	f	namespace:TSnap
CntUniqBiDirEdges	snap-core/alg.h	/^int CntUniqBiDirEdges(const PGraph& Graph) {$/;"	f	namespace:TSnap
CntUniqDirEdges	snap-core/alg.h	/^int CntUniqDirEdges(const PGraph& Graph) {$/;"	f	namespace:TSnap
CntUniqUndirEdges	snap-core/alg.h	/^int CntUniqUndirEdges(const PGraph& Graph) {$/;"	f	namespace:TSnap
Cntry	snap-exp/imdbnet.h	/^  TInt Cntry, Lang;          \/\/ movie country and language$/;"	m	class:TImdbNode
Cnts	snap-core/util.h	/^  int Cnts[NEXPS];$/;"	m	class:TStopwatch
ColAdd	snap-core/table.cpp	/^void TTable::ColAdd(const TStr& Attr1, TTable& Table, const TStr& Attr2, $/;"	f	class:TTable
ColAdd	snap-core/table.cpp	/^void TTable::ColAdd(const TStr& Attr1, const TFlt& Num, const TStr& ResultAttrName, const TBool floatCast) {$/;"	f	class:TTable
ColAdd	snap-core/table.cpp	/^void TTable::ColAdd(const TStr& Attr1, const TStr& Attr2, const TStr& ResultAttrName) {$/;"	f	class:TTable
ColConcat	snap-core/table.cpp	/^void TTable::ColConcat(const TStr& Attr1, TTable& Table, const TStr& Attr2, const TStr& Sep, $/;"	f	class:TTable
ColConcat	snap-core/table.cpp	/^void TTable::ColConcat(const TStr& Attr1, const TStr& Attr2, const TStr& Sep, const TStr& ResAttr) {$/;"	f	class:TTable
ColConcatConst	snap-core/table.cpp	/^void TTable::ColConcatConst(const TStr& Attr1, const TStr& Val, const TStr& Sep, const TStr& ResAttr) {$/;"	f	class:TTable
ColDiv	snap-core/table.cpp	/^void TTable::ColDiv(const TStr& Attr1, TTable& Table, const TStr& Attr2, $/;"	f	class:TTable
ColDiv	snap-core/table.cpp	/^void TTable::ColDiv(const TStr& Attr1, const TFlt& Num, const TStr& ResultAttrName, const TBool floatCast) {$/;"	f	class:TTable
ColDiv	snap-core/table.cpp	/^void TTable::ColDiv(const TStr& Attr1, const TStr& Attr2, const TStr& ResultAttrName) {$/;"	f	class:TTable
ColGenericOp	snap-core/table.cpp	/^void TTable::ColGenericOp(const TStr& Attr1, TTable& Table, const TStr& Attr2, const TStr& ResAttr,$/;"	f	class:TTable
ColGenericOp	snap-core/table.cpp	/^void TTable::ColGenericOp(const TStr& Attr1, const TFlt& Num, const TStr& ResAttr, TArithOp op, const TBool floatCast) {$/;"	f	class:TTable
ColGenericOp	snap-core/table.cpp	/^void TTable::ColGenericOp(const TStr& Attr1, const TStr& Attr2, const TStr& ResAttr, TArithOp op) {$/;"	f	class:TTable
ColGenericOpMP	snap-core/table.cpp	/^void TTable::ColGenericOpMP(TInt ArgColIdx1, TInt ArgColIdx2, TAttrType ArgType1, TAttrType ArgType2, TInt ResColIdx, TArithOp op){$/;"	f	class:TTable
ColGenericOpMP	snap-core/table.cpp	/^void TTable::ColGenericOpMP(const TInt& ColIdx1, const TInt& ColIdx2, TAttrType ArgType, const TFlt& Num, TArithOp op, TBool ShouldCast){$/;"	f	class:TTable
ColMax	snap-core/table.cpp	/^void TTable::ColMax(const TStr& Attr1, const TStr& Attr2, const TStr& ResultAttrName) {$/;"	f	class:TTable
ColMin	snap-core/table.cpp	/^void TTable::ColMin(const TStr& Attr1, const TStr& Attr2, const TStr& ResultAttrName) {$/;"	f	class:TTable
ColMod	snap-core/table.cpp	/^void TTable::ColMod(const TStr& Attr1, TTable& Table, const TStr& Attr2, $/;"	f	class:TTable
ColMod	snap-core/table.cpp	/^void TTable::ColMod(const TStr& Attr1, const TFlt& Num, const TStr& ResultAttrName, const TBool floatCast) {$/;"	f	class:TTable
ColMod	snap-core/table.cpp	/^void TTable::ColMod(const TStr& Attr1, const TStr& Attr2, const TStr& ResultAttrName) {$/;"	f	class:TTable
ColMul	snap-core/table.cpp	/^void TTable::ColMul(const TStr& Attr1, TTable& Table, const TStr& Attr2, $/;"	f	class:TTable
ColMul	snap-core/table.cpp	/^void TTable::ColMul(const TStr& Attr1, const TFlt& Num, const TStr& ResultAttrName, const TBool floatCast) {$/;"	f	class:TTable
ColMul	snap-core/table.cpp	/^void TTable::ColMul(const TStr& Attr1, const TStr& Attr2, const TStr& ResultAttrName) {$/;"	f	class:TTable
ColN	glib-core/linalg.h	/^    int RowN, ColN;$/;"	m	class:TFullColMatrix
ColN	glib-core/linalg.h	/^    int RowN, ColN;$/;"	m	class:TSparseColMatrix
ColN	glib-core/linalg.h	/^    int RowN, ColN;$/;"	m	class:TSparseRowMatrix
ColSpVV	glib-core/linalg.h	/^    TVec<TIntFltKdV> ColSpVV;$/;"	m	class:TSparseColMatrix
ColSub	snap-core/table.cpp	/^void TTable::ColSub(const TStr& Attr1, TTable& Table, const TStr& Attr2, $/;"	f	class:TTable
ColSub	snap-core/table.cpp	/^void TTable::ColSub(const TStr& Attr1, const TFlt& Num, const TStr& ResultAttrName, const TBool floatCast) {$/;"	f	class:TTable
ColSub	snap-core/table.cpp	/^void TTable::ColSub(const TStr& Attr1, const TStr& Attr2, const TStr& ResultAttrName) {$/;"	f	class:TTable
ColTypeMap	snap-core/table.h	/^  THash<TStr,TPair<TAttrType,TInt> > ColTypeMap; \/\/\/ A mapping from column name to column type and column index among columns of the same type.$/;"	m	class:TTable
ColTypeMap	snap-exp/alternativetable.h	/^  THash<TStr,TPair<TAttrType,TInt> > ColTypeMap; \/\/\/ A mapping from column name to column type and column index among columns of the same type.$/;"	m	class:PhysicalOrderTable
ColTypeMap	snap-exp/alternativetable.h	/^  THash<TStr,TPair<TAttrType,TInt> > ColTypeMap;$/;"	m	class:ExplicitStringTable
ColV	glib-core/linalg.h	/^    TVec<TFltV> ColV;$/;"	m	class:TFullColMatrix
ColonStr	glib-core/http.cpp	/^const TStr THttp::ColonStr=":";$/;"	m	class:THttp	file:
ColonStr	glib-core/http.h	/^  static const TStr ColonStr;$/;"	m	class:THttp
ColonStr	glib-core/lx.cpp	/^const TStr TLxSymStr::ColonStr=":";$/;"	m	class:TLxSymStr	file:
ComEdgesV	snap-adv/agmfit.h	/^  TIntV ComEdgesV; \/\/\/< The number of edges in each community.$/;"	m	class:TAGMFit
CombChSet	glib-core/xml.h	/^  TBSet CharChSet, CombChSet, ExtChSet;$/;"	v
CombinePath	glib-core/unicode.cpp	/^TStr CombinePath(const TStr& s, const TStr& t)$/;"	f	namespace:__anon54
CommaStr	glib-core/lx.cpp	/^const TStr TLxSymStr::CommaStr=",";$/;"	m	class:TLxSymStr	file:
CommentStr	snap-exp/wikinet.h	/^  TChA CommentStr; \/\/ categories, images, templates and comment$/;"	m	class:TWikiMetaLoader
CommonNodeAttrs	snap-core/table.h	/^  TStrTrV CommonNodeAttrs; \/\/\/< List of attribute pairs with values common to source and destination and their common given name. ##TTable::CommonNodeAttrs$/;"	m	class:TTable
CommunityCNM	snap-core/cmty.cpp	/^double CommunityCNM(const PUNGraph& Graph, TCnComV& CmtyV) {$/;"	f	namespace:TSnap
CommunityGirvanNewman	snap-core/cmty.cpp	/^double CommunityGirvanNewman(PUNGraph& Graph, TCnComV& CmtyV) {$/;"	f	namespace:TSnap
CompactEdgePool	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::CompactEdgePool() {$/;"	f	class:TBigNet
CompactPool	glib-core/ds.h	/^void TVecPool<TVal, TSizeTy>::CompactPool(const TVal& DelVal) {$/;"	f	class:TVecPool
CompactPool	glib-core/ds.h	/^void TVecPool<TVal>::CompactPool(const TVal& DelVal) {$/;"	f	class:TGLib_OLD::TVecPool
Compare	snap-core/table.h	/^    TPredComp Compare; \/\/\/< Comparison op represented by this node$/;"	m	class:TAtomicPredicate
CompareAtomicConst	snap-core/table.cpp	/^TBool TRowIterator::CompareAtomicConst(TInt ColIdx, const TPrimitive& Val, TPredComp Cmp) {$/;"	f	class:TRowIterator
CompareAtomicConst	snap-core/table.cpp	/^TBool TRowIteratorWithRemove::CompareAtomicConst(TInt ColIdx, const TPrimitive& Val, TPredComp Cmp) {$/;"	f	class:TRowIteratorWithRemove
CompareAtomicConst	snap-exp/alternativetable.cpp	/^TBool ExplicitStringRowIterator::CompareAtomicConst(TInt ColIdx, const TPrimitive& Val, TPredComp Cmp) {$/;"	f	class:ExplicitStringRowIterator
CompareAtomicConst	snap-exp/alternativetable.cpp	/^TBool ExplicitStringRowIteratorWithRemove::CompareAtomicConst(TInt ColIdx, const TPrimitive& Val, TPredComp Cmp) {$/;"	f	class:ExplicitStringRowIteratorWithRemove
CompareAtomicConstTStr	snap-core/table.cpp	/^TBool TRowIterator::CompareAtomicConstTStr(TInt ColIdx, const TStr& Val, TPredComp Cmp) {$/;"	f	class:TRowIterator
CompareAtomicConstTStr	snap-exp/alternativetable.cpp	/^TBool ExplicitStringRowIterator::CompareAtomicConstTStr(TInt ColIdx, const TStr& Val, TPredComp Cmp) {$/;"	f	class:ExplicitStringRowIterator
CompareGroundTruth	snap-adv/cascnetinf.h	/^  bool BoundOn, CompareGroundTruth;$/;"	m	class:TNetInfBs
CompareKeyVal	snap-core/table.cpp	/^TInt TTable::CompareKeyVal(const TInt& K1, const TInt& V1, const TInt& K2, const TInt& V2) {$/;"	f	class:TTable
CompareRows	snap-core/table.cpp	/^inline TInt TTable::CompareRows(TInt R1, TInt R2, const TAttrType& CompareByType, const TInt& CompareByIndex, TBool Asc) {$/;"	f	class:TTable
CompareRows	snap-core/table.cpp	/^inline TInt TTable::CompareRows(TInt R1, TInt R2, const TVec<TAttrType>& CompareByTypes, const TIntV& CompareByIndices, TBool Asc) {$/;"	f	class:TTable
CompareRows	snap-exp/alternativetable.cpp	/^inline TInt PhysicalOrderTable::CompareRows(TInt R1, TInt R2, const TAttrType& CompareByType, const TInt& CompareByIndex, TBool Asc) {$/;"	f	class:PhysicalOrderTable
CompareRows	snap-exp/alternativetable.cpp	/^inline TInt PhysicalOrderTable::CompareRows(TInt R1, TInt R2, const TVec<TAttrType>& CompareByTypes, const TIntV& CompareByIndices, TBool Asc) {$/;"	f	class:PhysicalOrderTable
CompleteP	glib-core/http.h	/^  bool CompleteP;$/;"	v
Compose	glib-core/unicode.h	/^	void Compose(const TIntV& src, TIntV& dest) const { return ucd.Compose(src, dest, true); }$/;"	f	class:TUnicode
Compose	glib-core/unicode.h	/^	void Compose(const TSrcVec& src, TVec<TDestCh>& dest, bool clrDest = true) const {$/;"	f	class:TUniChDb
Compose	glib-core/unicode.h	/^void TUniChDb::Compose(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniChDb
CompressWs	glib-core/dt.cpp	/^void TChA::CompressWs(){$/;"	f	class:TChA
Compute	snap-core/util.h	/^  typedef enum {LoadTables, Preprocess, ConstructGraph, Compute, Postprocess, StoreOutputs,$/;"	e	enum:TStopwatch::__anon80
ComputeApxAdjLL	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeApxAdjLL() const {$/;"	f	class:TMAGFitBern
ComputeApxLL	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeApxLL() const {$/;"	f	class:TMAGFitBern
ComputeETypes	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
ComputeJointAdjLL	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeJointAdjLL(const TIntVV& AttrVV) const {$/;"	f	class:TMAGFitBern
ComputeJointLL	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeJointLL(int NSample) const {$/;"	f	class:TMAGFitBern
ComputeJointOneLL	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeJointOneLL(const TIntVV& AttrVV) const {$/;"	f	class:TMAGFitBern
ComputeMI	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeMI(const TFltVV& AttrV) {$/;"	f	class:TMAGFitBern
ComputeMI	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeMI(const TFltVV& AttrV, const int AId1, const int AId2) {$/;"	f	class:TMAGFitBern
ComputeMI	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeMI(const TIntVV& AttrV) {$/;"	f	class:TMAGFitBern
ComputeMI	snap-adv/mag.cpp	/^const double TMAGFitBern::ComputeMI(const TIntVV& AttrV, const int AId1, const int AId2) {$/;"	f	class:TMAGFitBern
ComputeOffset	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
ComputePerformanceNId	snap-adv/cascdynetinf.cpp	/^void TNIBs::ComputePerformanceNId(const int& NId, const int& t, const TFltV& Steps) {$/;"	f	class:TNIBs
ComputeSignature	snap-exp/lsh.cpp	/^TInt TLSHash::ComputeSignature(TFltV Datum, int Band) {$/;"	f	class:TLSHash
ConcatTable	snap-core/table.h	/^  void ConcatTable(const PTable& T) {AddTable(*T); Reindex(); }$/;"	f	class:TTable
ConnFldNm	glib-core/http.cpp	/^const TStr THttp::ConnFldNm="Connection";$/;"	m	class:THttp	file:
ConnFldNm	glib-core/http.h	/^  static const TStr ConnFldNm;$/;"	m	class:THttp
ConnKeepAliveFldVal	glib-core/http.cpp	/^const TStr THttp::ConnKeepAliveFldVal="keep-alive";$/;"	m	class:THttp	file:
ConnKeepAliveFldVal	glib-core/http.h	/^  static const TStr ConnKeepAliveFldVal;$/;"	m	class:THttp
ConnectCmtyVV	snap-adv/agm.cpp	/^void TAGMUtil::ConnectCmtyVV(TVec<TIntV>& CmtyVV, const TIntPrV& CIDSzPrV, const TIntPrV& NIDMemPrV, TRnd& Rnd) {$/;"	f	class:TAGMUtil
ConstructGraph	snap-core/util.h	/^  typedef enum {LoadTables, Preprocess, ConstructGraph, Compute, Postprocess, StoreOutputs,$/;"	e	enum:TStopwatch::__anon80
ContLenFldNm	glib-core/http.cpp	/^const TStr THttp::ContLenFldNm="Content-Length";$/;"	m	class:THttp	file:
ContLenFldNm	glib-core/http.h	/^  static const TStr ContLenFldNm;$/;"	m	class:THttp
ContTypeFldNm	glib-core/http.cpp	/^const TStr THttp::ContTypeFldNm="Content-Type";$/;"	m	class:THttp	file:
ContTypeFldNm	glib-core/http.h	/^  static const TStr ContTypeFldNm;$/;"	m	class:THttp
Contains	snap-adv/subgraphenum.h	/^		inline bool Contains(int nodeId) const {$/;"	f	class:TSubGraphEnum::TSVec
ContentStr	snap-exp/memes.h	/^  TChA ContentStr;$/;"	m	class:TMemesDataLoader
ContentStr	snap-exp/memes.h	/^  TChA ContentStr;$/;"	m	class:TQuoteLoader
ContentStr	snap-exp/spinn3r.h	/^  TChA ContentStr;$/;"	m	class:TSpinn3rFeedItem
ContentStr	snap-exp/spinn3r.h	/^  TChA ContentStr;$/;"	m	class:TSpinn3rFullItem
Context	snap-core/table.h	/^  TTableContext* Context;  \/\/\/< Execution Context. ##TTable::Context$/;"	m	class:TTable
Context	snap-exp/alternativetable.h	/^  PhysicalOrderTableContext& Context;  \/\/\/< Execution Context. ##PhysicalOrderTable::Context$/;"	m	class:PhysicalOrderTable
ConvUsFromYuAscii	glib-core/dt.cpp	/^TStr& TStr::ConvUsFromYuAscii(){$/;"	f	class:TStr
ConvUsFromYuAscii	glib-core/dt.cpp	/^void TRStr::ConvUsFromYuAscii(){$/;"	f	class:TRStr
ConvertESubGraph	snap-core/subgraph.h	/^POutGraph ConvertESubGraph(const PInGraph& InGraph, const TIntV& EIdV, const bool& RenumberNodes) {$/;"	f	namespace:TSnap
ConvertFeatureToMatrix	snap-adv/rolx.cpp	/^TFltVV ConvertFeatureToMatrix(const TIntFtrH& Features,$/;"	f
ConvertGraph	snap-core/subgraph.h	/^POutGraph ConvertGraph(const PInGraph& InGraph, const bool& RenumberNodes) {$/;"	f	namespace:TSnap
ConvertSubGraph	snap-core/subgraph.h	/^POutGraph ConvertSubGraph(const PInGraph& InGraph, const TIntV& NIdV, const bool& RenumberNodes) {$/;"	f	namespace:TSnap
ConvexComb	glib-core/linalg.cpp	/^void TLinAlg::ConvexComb(const double& p, const TFltV& x, const TFltV& y, TFltV& z) {$/;"	f	class:TLinAlg
CookieFldNm	glib-core/http.cpp	/^const TStr THttp::CookieFldNm="Cookie";$/;"	m	class:THttp	file:
CookieFldNm	glib-core/http.h	/^  static const TStr CookieFldNm;$/;"	m	class:THttp
Copy	glib-core/fl.cpp	/^void TFile::Copy(const TStr& SrcFNm, const TStr& DstFNm, $/;"	f	class:TFile
Copy	glib-core/fl.cpp	/^void TFile::Copy(const TStr& SrcFNm, const TStr& DstFNm,$/;"	f	class:TFile
CopyColumns	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
CopyFrom	glib-core/ds.h	/^void TVVec<TVal>::CopyFrom(const TVVec<TVal>& VVec){$/;"	f	class:TVVec
CopyFrom	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::CopyFrom(const TSparseHash& HT, const int& MnWanted) {$/;"	f	class:TSparseHash
CopyFrom	glib-core/shash.h	/^void TSparseSet<TKey, GroupSize>::CopyFrom(const TSparseSet& SSet, const int& MnWanted) {$/;"	f	class:TSparseSet
CopyNodes	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
CopyTree	glib-core/ds.h	/^void TTree<TVal>::CopyTree(const int& SrcNodeId, TTree& DstTree, const int& DstParentNodeId){$/;"	f	class:TTree
CopyUniqueFrom	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::CopyUniqueFrom(TVec<TVal, TSizeTy>& Vec, TInt Offset, TInt Sz){$/;"	f	class:TVec
CosineHash	snap-exp/lsh.cpp	/^TLSHash::CosineHash::CosineHash(TBoolV Hyperplane) : Hyperplane(Hyperplane) { }$/;"	f	class:TLSHash::CosineHash
CosineHash	snap-exp/lsh.cpp	/^TLSHash::CosineHash::CosineHash(TRnd &Gen, int Dim) {$/;"	f	class:TLSHash::CosineHash
CosineHash	snap-exp/lsh.h	/^  class CosineHash : public HashFunc {$/;"	c	class:TLSHash
Count	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::Count(const TVal& Val) const {$/;"	f	class:TVec
Count	snap-core/table.cpp	/^void TTable::Count(const TStr& CountColName, const TStr& Col) {$/;"	f	class:TTable
CountAttr	snap-adv/mag.cpp	/^void TMAGFitBern::CountAttr(TFltV& EstMuV) const {$/;"	f	class:TMAGFitBern
CountBalUnBal	snap-exp/signnet.cpp	/^void TSignNet::CountBalUnBal(const int& NId1, const int& NId2, int& BalTriads, int& UnBalTriads) const {$/;"	f	class:TSignNet
CountCh	glib-core/dt.cpp	/^int TChA::CountCh(const char& Ch, const int& BChN) const {$/;"	f	class:TChA
CountCh	glib-core/dt.cpp	/^int TStr::CountCh(const char& Ch, const int& BChN) const {$/;"	f	class:TStr
CountNewLinesInRange	glib-core/fl.cpp	/^uint64 TMIn::CountNewLinesInRange(uint64 Lb, uint64 Ub) {$/;"	f	class:TMIn
CountNewLinesInRange	glib-core/ssmp.cpp	/^uint64 TSsParserMP::CountNewLinesInRange(uint64 Lb, uint64 Ub) const {$/;"	f	class:TSsParserMP
CountOnes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	int CountOnes() {$/;"	f	class:TSBitSet
CountSignedTriads	snap-exp/signnet.cpp	/^void TSignNet::CountSignedTriads(const TStr& OutFNm) const {$/;"	f	class:TSignNet
CountStructBalance	snap-exp/signnet.cpp	/^void TSignNet::CountStructBalance() const {$/;"	f	class:TSignNet
CountStructBalance	snap-exp/wikinet.cpp	/^void TWikiTalkNet::CountStructBalance() const {$/;"	f	class:TWikiTalkNet
CountSupport	snap-exp/trawling.cpp	/^void TTrawling::CountSupport() {$/;"	f	class:TTrawling
CountTriad3to4Edges	snap-exp/signnet.cpp	/^void TSignMicroEvol::CountTriad3to4Edges(const int& SrcNId, const int& DstNId, const int& Sign, const double& SrcOutPlusProb, const double& DstInPlusProb) {$/;"	f	class:TSignMicroEvol
CountTriadClose	snap-exp/signnet.cpp	/^void TSignMicroEvol::CountTriadClose(const int& SrcNId, const int& DstNId, const int& Sign, const double& SrcOutPlusProb,$/;"	f	class:TSignMicroEvol
CountTriadCloseVec	snap-exp/signnet.cpp	/^void TSignMicroEvol::CountTriadCloseVec(const int& SrcNId, const int& DstNId, const int& Sign) {$/;"	f	class:TSignMicroEvol
CountTriangles	snap-core/triad.h	/^int64 CountTriangles(const PGraph& Graph) {$/;"	f	namespace:TSnap
CountWords	snap-core/util.cpp	/^int TStrUtil::CountWords(const TChA& ChA) {$/;"	f	class:TStrUtil
CountWords	snap-core/util.cpp	/^int TStrUtil::CountWords(const TChA& ChA, const TStrHash<TInt>& StopWordH) {$/;"	f	class:TStrUtil
CountWords	snap-core/util.cpp	/^int TStrUtil::CountWords(const char* CStr) {$/;"	f	class:TStrUtil
Coverage	snap-adv/ncp.h	/^  TInt KMin, KMax, Coverage;$/;"	m	class:TLocClustStat
CrCh	glib-core/dt.cpp	/^const char TCh::CrCh=char(13);$/;"	m	class:TCh	file:
CrWCh	glib-core/wch.h	/^  static const TWCh CrWCh;$/;"	m	class:TWCh
Crash	glib-core/bd.cpp	/^void Crash() {$/;"	f
CreateClusters	snap-exp/memes.cpp	/^void TQuoteBs::CreateClusters(const TVec<TIntV>& ClustV) {$/;"	f	class:TQuoteBs
CreateDirectory	glib-core/os.cpp	/^int CreateDirectory(const char *FNm, void *useless) {$/;"	f
CreateEmptyFeatures	snap-adv/rolx.cpp	/^TIntFtrH CreateEmptyFeatures(const PUNGraph Graph) {$/;"	f
CreateEmptyFeatures	snap-adv/rolx.cpp	/^TIntFtrH CreateEmptyFeatures(const TIntFtrH& Features) {$/;"	f
CreateIdHashes	snap-exp/multimodal-dev/benchmark-util.cpp	/^void CreateIdHashes(const TVec<TPair<PTable,TStr> >& NodeTblV, THash<TStr,TStrH>& NStrH, TIntStrH& NIdH) {$/;"	f
CreateNborList	snap-exp/multimodal-dev/benchmark-util.cpp	/^void CreateNborList(const TVec<TPair<PTable,TStr> >& NodeTblV, const TVec<TQuad<PTable,TStr,TStr,TBool> >& EdgeTblV,$/;"	f
CreateNodeIdMtxIdxHash	snap-adv/rolx.cpp	/^TIntIntH CreateNodeIdMtxIdxHash(const TIntFtrH& Features) {$/;"	f
CreatePlotFile	glib-core/gnuplot.cpp	/^void TGnuPlot::CreatePlotFile(const TStr& Comment) {$/;"	f	class:TGnuPlot
CreatePlots	examples/netstat/netstat.cpp	/^void CreatePlots(const PGraph& Graph, TStr OutFNm, TStr Desc, $/;"	f
CreateProc	glib-core/os.cpp	/^void TStdIOPipe::CreateProc(const TStr& Cmd) {$/;"	f	class:TStdIOPipe
CreateRandMatrix	snap-adv/rolx.cpp	/^TFltVV CreateRandMatrix(const int XDim, const int YDim) {$/;"	f
CreateZipProcess	glib-core/zipfl.cpp	/^void TZipIn::CreateZipProcess(const TStr& Cmd, const TStr& ZipFNm) {$/;"	f	class:TZipIn
CreateZipProcess	glib-core/zipfl.cpp	/^void TZipOut::CreateZipProcess(const TStr& Cmd, const TStr& ZipFNm) {$/;"	f	class:TZipOut
CrossH	snap-core/mmnet.h	/^  THash<TInt,TCrossEdge> CrossH; \/\/\/ The HashTable from Edge id to the corresponding Edge$/;"	m	class:TCrossNet
CrossHI	snap-core/mmnet.h	/^    THashIter CrossHI;$/;"	m	class:TCrossNet::TCrossEdgeI
CrossIdToNameH	snap-core/mmnet.h	/^  THash<TInt,TStr> CrossIdToNameH;$/;"	m	class:TMMNet
CrossNameToIdH	snap-core/mmnet.h	/^  THash<TStr,TInt> CrossNameToIdH;$/;"	m	class:TMMNet
CrossNetHI	snap-core/mmnet.h	/^    THashIter CrossNetHI;$/;"	m	class:TMMNet::TCrossNetI
CrossNetId	snap-core/mmnet.h	/^  TInt CrossNetId;$/;"	m	class:TCrossNet
Cs	glib-core/fl.h	/^  TCs Cs;$/;"	m	class:TSBase
CurEdge	snap-core/bignet.h	/^    int CurEdge;$/;"	m	class:TBigNet::TEdgeI
CurEdge	snap-core/graph.h	/^    int CurEdge;$/;"	m	class:TBPGraph::TEdgeI
CurEdge	snap-core/graph.h	/^    int CurEdge;$/;"	m	class:TNGraph::TEdgeI
CurEdge	snap-core/graph.h	/^    int CurEdge;$/;"	m	class:TUNGraph::TEdgeI
CurEdge	snap-core/graphmp.h	/^    int CurEdge;$/;"	m	class:TNGraphMP::TEdgeI
CurEdge	snap-core/network.h	/^    int CurEdge;$/;"	m	class:TDirNet::TEdgeI
CurEdge	snap-core/network.h	/^    int CurEdge;$/;"	m	class:TNodeEDatNet::TEdgeI
CurEdge	snap-core/network.h	/^    int CurEdge;$/;"	m	class:TNodeNet::TEdgeI
CurEdge	snap-core/network.h	/^    int CurEdge;$/;"	m	class:TUndirNet::TEdgeI
CurEdge	snap-exp/graphmp-exp.h	/^    int CurEdge;$/;"	m	class:TUNGraphMP::TEdgeI
CurErr	snap-exp/sir.h	/^  double CurErr, BestErr;$/;"	m	class:TEstEpidemParams
CurFNm	snap-exp/memes.h	/^  TStr CurFNm;$/;"	m	class:TQuoteLoader
CurFNm	snap-exp/spinn3r.h	/^  TStr CurFNm;$/;"	m	class:TSpinn3rFeedItem
CurFNm	snap-exp/spinn3r.h	/^  TStr CurFNm;$/;"	m	class:TSpinn3rFullItem
CurFPos	glib-core/zipfl.h	/^  uint64 FLen, CurFPos;$/;"	m	class:TZipIn
CurInFNm	snap-exp/spinn3r.h	/^  TStr CurInFNm;$/;"	m	class:TQuoteExtractor
CurItemH	snap-exp/trawling.h	/^  THash<TIntV, TInt, TIntVHashFunc> CandItemH, CurItemH;$/;"	m	class:TTrawling
CurK	snap-core/kcore.h	/^  TInt CurK;$/;"	m	class:TKCore
CurLn	snap-exp/memes.h	/^  TChA CurLn;$/;"	m	class:TMemesDataLoader
CurNode	snap-core/bignet.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TBigNet::TEdgeI
CurNode	snap-core/graph.h	/^    TNodeI CurNode, EndNode; \/\/ end node on the 'left'$/;"	m	class:TBPGraph::TEdgeI
CurNode	snap-core/graph.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNGraph::TEdgeI
CurNode	snap-core/graph.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TUNGraph::TEdgeI
CurNode	snap-core/graphmp.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNGraphMP::TEdgeI
CurNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TDirNet::TEdgeI
CurNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNodeEDatNet::TEdgeI
CurNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNodeNet::TEdgeI
CurNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TUndirNet::TEdgeI
CurNode	snap-exp/graphmp-exp.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TUNGraphMP::TEdgeI
CurOff	glib-core/shash.h	/^  int CurOff; \/\/ Offset in the current group$/;"	m	class:TSparseTableI
CurProb	snap-adv/cascnetinf.h	/^  TFlt CurProb, Alpha, Eps;$/;"	m	class:TCascade
CurrBucket	snap-core/table.h	/^  TInt CurrBucket; \/\/\/< Current row id bucket - used when generating a sequence of graphs using an iterator.$/;"	m	class:TTable
CurrRowIdx	snap-core/table.h	/^  TInt CurrRowIdx; \/\/\/< Physical row index of current row pointed by iterator.$/;"	m	class:TRowIterator
CurrRowIdx	snap-core/table.h	/^  TInt CurrRowIdx; \/\/\/< Physical row index of current row pointer by iterator.$/;"	m	class:TRowIteratorWithRemove
CurrRowIdx	snap-exp/alternativetable.h	/^  TInt CurrRowIdx; \/\/\/< Physical row index of current row pointed by iterator.$/;"	m	class:ExplicitStringRowIterator
CurrRowIdx	snap-exp/alternativetable.h	/^  TInt CurrRowIdx; \/\/\/< Physical row index of current row pointed by iterator.$/;"	m	class:RowBasedRowIterator
CurrRowIdx	snap-exp/alternativetable.h	/^  TInt CurrRowIdx; \/\/\/< Physical row index of current row pointer by iterator.$/;"	m	class:ExplicitStringRowIteratorWithRemove
CurrTableIdx	snap-core/table.h	/^  TInt CurrTableIdx; \/\/\/< Index of the current table pointed to by this iterator.$/;"	m	class:TTableIterator
CutBf	glib-core/fl.cpp	/^void TMOut::CutBf(const int& CutBfL){$/;"	f	class:TMOut
CutNIdV	snap-adv/ncp.h	/^    TIntV CutNIdV;            \/\/ node ids inside the cluster$/;"	m	class:TLocClustStat::TCutInfo
CutSz	snap-adv/ncp.h	/^    TInt Nodes, Edges, CutSz; \/\/ nodes inside, edges inside, edges cut$/;"	m	class:TLocClustStat::TCutInfo
CutV	snap-adv/ncp.h	/^  TIntV NIdV, VolV, CutV;  \/\/ Vol=2*edges_inside+cut (vol = sum of the degrees)$/;"	m	class:TLocClust
DATE	doxygen/Makefile	/^DATE := $(shell date +%Y%m%d)$/;"	m
DColonStr	glib-core/lx.cpp	/^const TStr TLxSymStr::DColonStr="::";$/;"	m	class:TLxSymStr	file:
DECLARE_FORWARDED_PROPERTY_METHODS	glib-core/unicode.h	1367;"	d
DECLARE_FORWARDED_PROPERTY_METHODS	glib-core/unicode.h	2016;"	d
DECOMP_SVD	glib-core/linalg.h	/^	typedef enum { DECOMP_SVD } TLinAlgInverseType;$/;"	e	enum:TLinAlg::__anon25
DEF_EXPAND_RATIO	snap-exp/mmgraph-exp.cpp	/^const int TCVNode::DEF_EXPAND_RATIO = 2;$/;"	m	class:TCVNode	file:
DEF_EXPAND_RATIO	snap-exp/mmgraph-exp.h	/^  static const int DEF_EXPAND_RATIO;$/;"	m	class:TCVNode
DEF_WEIGHT	snap-exp/mmgraph-exp.cpp	/^const int TCVNode::DEF_WEIGHT = 4;$/;"	m	class:TCVNode	file:
DEF_WEIGHT	snap-exp/mmgraph-exp.h	/^  static const int DEF_WEIGHT;$/;"	m	class:TCVNode
DEF_WEIGHT_COEFF	snap-exp/mmgraph-exp.cpp	/^const int TCVNode::DEF_WEIGHT_COEFF = 2;$/;"	m	class:TCVNode	file:
DEF_WEIGHT_COEFF	snap-exp/mmgraph-exp.h	/^  static const int DEF_WEIGHT_COEFF;$/;"	m	class:TCVNode
DEMOS	tutorials/Makefile	/^DEMOS = \\$/;"	m
DIM	examples/lshtest/lshtest.cpp	4;"	d	file:
DIRNAME	test/test-bfsdfs.cpp	7;"	d	file:
DIRNAME	test/test-cncom.cpp	7;"	d	file:
DIRNAME	test/test-gviz.cpp	12;"	d	file:
DIRNAME	tutorials/demo-bfsdfs.cpp	4;"	d	file:
DIRNAME	tutorials/demo-cncom.cpp	3;"	d	file:
DIRNAME	tutorials/demo-gviz.cpp	3;"	d	file:
DOXYGEN	doxygen/Makefile	/^	DOXYGEN = \/Applications\/Doxygen.app\/Contents\/Resources\/doxygen$/;"	m
DOXYGEN	doxygen/Makefile	/^DOXYGEN = doxygen$/;"	m
DPeriodStr	glib-core/lx.cpp	/^const TStr TLxSymStr::DPeriodStr="..";$/;"	m	class:TLxSymStr	file:
DST_ID_NAME	snap-core/gio.h	/^const TStr DST_ID_NAME = ("DstNId");$/;"	m	namespace:TSnap
Dat	glib-core/ds.h	/^  TDat Dat;$/;"	m	class:TKeyDat
Dat	glib-core/hash.h	/^  TDat Dat;$/;"	m	class:THashKeyDat
Dat	glib-core/hashmp.h	/^  TDat Dat;$/;"	m	class:THashMPKeyDat
Dat	glib-core/shash.h	/^  TDat Dat;$/;"	m	class:TKeyDatFl
Dat	glib-core/shash.h	/^  TDat Dat;$/;"	m	class:TSHashKeyDat
Dat	snap-core/bignet.h	/^    TNodeDat Dat;$/;"	m	class:TBigNet::TNode
DataFNm	glib-core/gnuplot.h	/^    TStr Label, WithStyle, DataFNm;$/;"	m	class:TGnuPlot::TGpSeries
DataFNm	glib-core/gnuplot.h	/^  TStr DataFNm, PlotFNm;$/;"	m	class:TGnuPlot
DataV	snap-exp/lsh.h	/^  TVec<TFltV> DataV;$/;"	m	class:TLSHash
Day	glib-core/tm.h	/^  TInt Year, Month, Day, DayOfWeek;$/;"	m	class:TTm
DayOfWeek	glib-core/tm.h	/^  TInt Year, Month, Day, DayOfWeek;$/;"	m	class:TTm
Debug	snap-adv/mag.h	/^	bool ESpeedUp, MSpeedUp, Debug;$/;"	m	class:TMAGFitBern
DebugMode	snap-adv/kronecker.h	/^  TBool DebugMode;		\/\/ Debug mode flag$/;"	m	class:TKroneckerLL
DecN	glib-core/tm.cpp	/^const int TTmInfo::NovN=11; const int TTmInfo::DecN=12;$/;"	m	class:TTmInfo	file:
DecN	glib-core/tm.h	/^  static const int NovN; static const int DecN;$/;"	m	class:TTmInfo
DecileV	glib-core/xmath.h	/^  TFltV DecileV; \/\/ 0=min 1=1.decile, ..., 9=9.decile, 10=max$/;"	v
Decode	glib-core/md5.cpp	/^void TMd5::Decode(uint4* output, uint1* input, uint4 len){$/;"	f	class:TMd5
DecodeUrlStr	glib-core/url.cpp	/^TStr TUrl::DecodeUrlStr(const TStr& UrlStr) {$/;"	f	class:TUrl
DecodeUtf16FromBytes	glib-core/unicode.h	/^	int DecodeUtf16FromBytes(const TIntV& src, TIntV& dest,$/;"	f	class:TUnicode
DecodeUtf16FromBytes	glib-core/unicode.h	/^size_t TUniCodec::DecodeUtf16FromBytes($/;"	f	class:TUniCodec
DecodeUtf16FromWords	glib-core/unicode.h	/^	int DecodeUtf16FromWords(const TIntV& src, TIntV& dest,$/;"	f	class:TUnicode
DecodeUtf16FromWords	glib-core/unicode.h	/^size_t TUniCodec::DecodeUtf16FromWords($/;"	f	class:TUniCodec
DecodeUtf8	glib-core/unicode.h	/^	int DecodeUtf8(const TIntV& src, TIntV& dest) const { return (int) codec.DecodeUtf8(src, dest); }$/;"	f	class:TUnicode
DecodeUtf8	glib-core/unicode.h	/^	int DecodeUtf8(const TStr& src, TIntV& dest) const { return (int) codec.DecodeUtf8(src, dest); }$/;"	f	class:TUnicode
DecodeUtf8	glib-core/unicode.h	/^	size_t DecodeUtf8(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true) const { return DecodeUtf8(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TUniCodec
DecodeUtf8	glib-core/unicode.h	/^size_t TUniCodec::DecodeUtf8($/;"	f	class:TUniCodec
Decompose	glib-core/unicode.h	/^	void Decompose(const TIntV& src, TIntV& dest, bool compatibility) const { ucd.Decompose(src, dest, compatibility, true); }$/;"	f	class:TUnicode
Decompose	glib-core/unicode.h	/^	void Decompose(const TSrcVec& src, TVec<TDestCh>& dest, bool compatibility, bool clrDest = true) const {$/;"	f	class:TUniChDb
Decompose	glib-core/unicode.h	/^void TUniChDb::Decompose(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniChDb
DecomposeAndCompose	glib-core/unicode.h	/^	void DecomposeAndCompose(const TIntV& src, TIntV& dest, bool compatibility) const { return ucd.DecomposeAndCompose(src, dest, compatibility); }$/;"	f	class:TUnicode
DecomposeAndCompose	glib-core/unicode.h	/^	void DecomposeAndCompose(const TSrcVec& src, TVec<TDestCh>& dest, bool compatibility, bool clrDest = true) const {$/;"	f	class:TUniChDb
DecomposeAndCompose	glib-core/unicode.h	/^void TUniChDb::DecomposeAndCompose(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniChDb
Def	glib-core/md5.cpp	/^void TMd5::Def(){$/;"	f	class:TMd5
Def	glib-core/xmath.cpp	/^void TMom::Def(){$/;"	f	class:TMom
DefDataFNm	glib-core/gnuplot.cpp	/^TStr TGnuPlot::DefDataFNm = "GnuPlot.tab";$/;"	m	class:TGnuPlot	file:
DefDataFNm	glib-core/gnuplot.h	/^  static TStr DefDataFNm;$/;"	m	class:TGnuPlot
DefFinalUrl	glib-core/url.cpp	/^void TUrl::DefFinalUrl(const TStr& _FinalHostNm){$/;"	f	class:TUrl
DefP	glib-core/md5.h	/^  bool DefP;$/;"	v
DefP	glib-core/xmath.h	/^  TBool DefP;$/;"	v
DefPlotFNm	glib-core/gnuplot.cpp	/^TStr TGnuPlot::DefPlotFNm = "GnuPlot.plt";$/;"	m	class:TGnuPlot	file:
DefPlotFNm	glib-core/gnuplot.h	/^  static TStr DefPlotFNm;$/;"	m	class:TGnuPlot
DefUrlAsFinal	glib-core/url.h	/^  void DefUrlAsFinal(){$/;"	f
DefV	glib-core/xmath.h	/^  static void DefV(TMomV& MomV){$/;"	f
DefVV	glib-core/xmath.h	/^  static void DefVV(TVVec<PMom>& MomVV){$/;"	f
DefVal	glib-core/shash.h	/^  const TVal& DefVal() const { static TVal DefValue = TVal();  return DefValue; }$/;"	f	class:TSparseGroup
DefaultConstructor	tutorials/demo-TDirNet.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TNEANet.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TNEGraph.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TNGraph.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TNodeEDatNet.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TNodeEdgeNet.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TNodeNet.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TUNGraph.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-TUndirNet.cpp	/^void DefaultConstructor() {$/;"	f
DefaultConstructor	tutorials/demo-multimodal.cpp	/^void DefaultConstructor() {$/;"	f
DefaultReplacementChar	glib-core/unicode.h	/^	enum { DefaultReplacementChar = 0xfffd };$/;"	e	enum:TUniCodec::__anon43
DefineByte	glib-core/unicode.h	/^		DefineByte(0, 0, 0, 0, 0, 0, 1, 1)$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(0, 0, 0, 0, 0, 1, 1, 1),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(0, 0, 0, 0, 1, 1, 1, 1),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(0, 0, 0, 1, 1, 1, 1, 1),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(0, 0, 1, 1, 1, 1, 1, 1),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(1, 0, 0, 0, 0, 0, 0, 0),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(1, 1, 0, 0, 0, 0, 0, 0),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(1, 1, 1, 0, 0, 0, 0, 0),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(1, 1, 1, 1, 0, 0, 0, 0),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(1, 1, 1, 1, 1, 0, 0, 0),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(1, 1, 1, 1, 1, 1, 0, 0),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	/^		DefineByte(1, 1, 1, 1, 1, 1, 1, 0),$/;"	e	enum:TUniCodec::__anon44
DefineByte	glib-core/unicode.h	102;"	d
DefineByte	glib-core/unicode.h	115;"	d
DefineUniCat	glib-core/unicode.h	/^	DefineUniCat(Letter, 'L'),             \/\/ ucLetter$/;"	e	enum:TUniChCategory_
DefineUniCat	glib-core/unicode.h	/^	DefineUniCat(Mark, 'M'),$/;"	e	enum:TUniChCategory_
DefineUniCat	glib-core/unicode.h	/^	DefineUniCat(Number, 'N'),$/;"	e	enum:TUniChCategory_
DefineUniCat	glib-core/unicode.h	/^	DefineUniCat(Other, 'C')$/;"	e	enum:TUniChCategory_
DefineUniCat	glib-core/unicode.h	/^	DefineUniCat(Punctuation, 'P'),$/;"	e	enum:TUniChCategory_
DefineUniCat	glib-core/unicode.h	/^	DefineUniCat(Separator, 'Z'),$/;"	e	enum:TUniChCategory_
DefineUniCat	glib-core/unicode.h	/^	DefineUniCat(Symbol, 'S'),$/;"	e	enum:TUniChCategory_
DefineUniCat	glib-core/unicode.h	664;"	d
DefineUniCat	glib-core/unicode.h	672;"	d
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Letter, Lowercase, 'l'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Letter, Modifier, 'm'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Letter, Other, 'o'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Letter, Titlecase, 't'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Letter, Uppercase, 'u'),            \/\/ ucLetterUppercase$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Mark, Enclosing, 'e'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Mark, Nonspacing, 'n'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Mark, SpacingCombining, 'c'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Number, DecimalDigit, 'd'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Number, Letter, 'l'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Number, Other, 'o'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Other, Control, 'c'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Other, Format, 'f'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Other, NotAssigned, 'n')$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Other, PrivateUse, 'o'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Other, Surrogate, 's'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Punctuation, Close, 'e'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Punctuation, Connector, 'c'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Punctuation, Dash, 'd'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Punctuation, FinalQuote, 'f'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Punctuation, InitialQuote, 'i'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Punctuation, Open, 's'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Punctuation, Other, 'o'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Separator, Line, 'l'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Separator, Paragraph, 'p'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Separator, Space, 's'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Symbol, Currency, 'c'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Symbol, Math, 'm'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Symbol, Modifier, 'k'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	/^	DefineUniSubCat(Symbol, Other, 'o'),$/;"	e	enum:TUniChSubCategory_
DefineUniSubCat	glib-core/unicode.h	678;"	d
Defrag	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::Defrag(){$/;"	f	class:THash
Defrag	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::Defrag() {$/;"	f	class:THashSet
Defrag	snap-core/bignet.h	/^  void Defrag(const bool& OnlyNodeLinks = false) { }$/;"	f	class:TBigNet
Defrag	snap-core/ghash.h	/^  void Defrag() { GraphH.Defrag(); }$/;"	f	class:TGHash
Defrag	snap-core/graph.cpp	/^void TBPGraph::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TBPGraph
Defrag	snap-core/graph.cpp	/^void TNEGraph::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNEGraph
Defrag	snap-core/graph.cpp	/^void TNGraph::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNGraph
Defrag	snap-core/graph.cpp	/^void TUNGraph::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TUNGraph
Defrag	snap-core/graphmp.cpp	/^void TNGraphMP::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNGraphMP
Defrag	snap-core/network.cpp	/^void TDirNet::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TDirNet
Defrag	snap-core/network.cpp	/^void TNEANet::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNEANet
Defrag	snap-core/network.cpp	/^void TUndirNet::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TUndirNet
Defrag	snap-core/network.h	/^void TNodeEDatNet<TNodeData, TEdgeData>::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNodeEDatNet
Defrag	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNodeEdgeNet
Defrag	snap-core/network.h	/^void TNodeNet<TNodeData>::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNodeNet
Defrag	snap-core/networkmp.cpp	/^void TNEANetMP::Defrag(const bool& OnlyNodeLinks) {$/;"	f	class:TNEANetMP
Defrag	snap-core/table.cpp	/^void TTable::Defrag() {$/;"	f	class:TTable
DegDStat	snap-core/gstat.cpp	/^TFSet TGStat::DegDStat() {$/;"	f	class:TGStat
DegFrac	snap-core/cmty.cpp	/^    double DegFrac;$/;"	m	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat	file:
DegH	snap-core/kcore.h	/^  TIntH DegH;$/;"	m	class:TKCore
DegreeOrdering	snap-adv/motifcluster.cpp	/^void MotifCluster::DegreeOrdering(PNGraph graph, TIntV& order) {$/;"	f	class:MotifCluster
Del	glib-core/ds.h	/^void TLst<TVal>::Del(const PLstNd& Nd){$/;"	f	class:TLst
Del	glib-core/ds.h	/^void TLst<TVal>::Del(const TVal& Val){$/;"	f	class:TLst
Del	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Del(const TSizeTy& MnValN, const TSizeTy& MxValN){$/;"	f	class:TVec
Del	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Del(const TSizeTy& ValN){$/;"	f	class:TVec
Del	glib-core/dt.cpp	/^void TChA::Del(const int& ChN){$/;"	f	class:TChA
Del	glib-core/dt.cpp	/^void TMem::Del(const int& BChN, const int& EChN){$/;"	f	class:TMem
Del	glib-core/fl.cpp	/^void TFile::Del(const TStr& FNm, const bool& ThrowExceptP){$/;"	f	class:TFile
Del	glib-core/shash.h	/^void TSparseGroup<TVal, GroupSize>::Del(const int& ValN) {$/;"	f	class:TSparseGroup
Del	glib-core/shash.h	/^void TSparseTable<TVal, GroupSize>::Del(const int& ValN) {$/;"	f	class:TSparseTable
Del	snap-adv/cascdynetinf.h	/^  void Del(const int& NId) { NIdHitH.DelKey(NId); }$/;"	f	class:TCascade
Del	snap-adv/cascnetinf.h	/^  void Del(const int& NId) { NIdHitH.DelKey(NId); }$/;"	f	class:TCascade
Del	snap-core/gstat.h	/^  void Del(const int& ValN) { GStatV.Del(ValN); }$/;"	f	class:TGStatVec
DelAfter	snap-core/gstat.cpp	/^void TGStatVec::DelAfter(const TSecTm& Tm) {$/;"	f	class:TGStatVec
DelAll	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::DelAll(const TVal& Val){$/;"	f	class:TVec
DelAttrDatE	snap-core/mmnet.cpp	/^int TCrossNet::DelAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TCrossNet
DelAttrDatE	snap-core/mmnet.h	/^  int DelAttrDatE(const TCrossEdgeI& EdgeI, const TStr& attr) { return DelAttrDatE(EdgeI.GetId(), attr); } $/;"	f	class:TCrossNet
DelAttrDatE	snap-core/network.cpp	/^int TNEANet::DelAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANet
DelAttrDatE	snap-core/network.h	/^  int DelAttrDatE(const TEdgeI& EdgeI, const TStr& attr) { return DelAttrDatE(EdgeI.GetId(), attr); } $/;"	f	class:TNEANet
DelAttrDatE	snap-core/networkmp.cpp	/^int TNEANetMP::DelAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANetMP
DelAttrDatE	snap-core/networkmp.h	/^  int DelAttrDatE(const TEdgeI& EdgeId, const TStr& attr) { return DelAttrDatE(EdgeId.GetId(), attr); }$/;"	f	class:TNEANetMP
DelAttrDatN	snap-core/network.cpp	/^int TNEANet::DelAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANet
DelAttrDatN	snap-core/network.h	/^  int DelAttrDatN(const TNodeI& NodeI, const TStr& attr) { return DelAttrDatN(NodeI.GetId(), attr); } $/;"	f	class:TNEANet
DelAttrDatN	snap-core/networkmp.cpp	/^int TNEANetMP::DelAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANetMP
DelAttrDatN	snap-core/networkmp.h	/^  int DelAttrDatN(const TNodeI& NodeId, const TStr& attr) { return DelAttrDatN(NodeId.GetId(), attr); }$/;"	f	class:TNEANetMP
DelAttrE	snap-core/mmnet.cpp	/^int TCrossNet::DelAttrE(const TStr& attr) {$/;"	f	class:TCrossNet
DelAttrE	snap-core/network.cpp	/^int TNEANet::DelAttrE(const TStr& attr) {$/;"	f	class:TNEANet
DelAttrN	snap-core/network.cpp	/^int TNEANet::DelAttrN(const TStr& attr) {$/;"	f	class:TNEANet
DelBefore	snap-core/gstat.cpp	/^void TGStatVec::DelBefore(const TSecTm& Tm) {$/;"	f	class:TGStatVec
DelBlob	glib-core/blobbs.cpp	/^void TGBlobBs::DelBlob(const TBlobPt& BlobPt){$/;"	f	class:TGBlobBs
DelBlob	glib-core/blobbs.cpp	/^void TMBlobBs::DelBlob(const TBlobPt& BlobPt){$/;"	f	class:TMBlobBs
DelChAll	glib-core/dt.cpp	/^void TStr::DelChAll(const char& Ch){$/;"	f	class:TStr
DelColType	snap-core/table.h	/^  void DelColType(const TStr& ColName) {$/;"	f	class:TTable
DelCom	snap-adv/agmattr.h	/^  void inline DelCom(const int& NID, const int& CID) {$/;"	f	class:TCesna
DelCom	snap-adv/agmdirected.h	/^  void inline DelCom(const bool IsOut, const int& NID, const int& CID) {$/;"	f	class:TCoda
DelCom	snap-adv/agmfast.h	/^  void inline DelCom(const int& NID, const int& CID) {$/;"	f	class:TAGMFast
DelComIn	snap-adv/agmdirected.h	/^  void inline DelComIn(const int& NID, const int& CID) {$/;"	f	class:TCoda
DelComOut	snap-adv/agmdirected.h	/^  void inline DelComOut(const int& NID, const int& CID) {$/;"	f	class:TCoda
DelCrossNet	snap-core/mmnet.cpp	/^int TMMNet::DelCrossNet(const TInt& CrossNetId) {$/;"	f	class:TMMNet
DelCrossNet	snap-core/mmnet.cpp	/^int TMMNet::DelCrossNet(const TStr& CrossNet) {$/;"	f	class:TMMNet
DelDegKNodes	snap-core/alg.h	/^void DelDegKNodes(PGraph& Graph, const int& OutDegK, const int& InDegK) {$/;"	f	namespace:TSnap
DelDir	glib-core/xfl.cpp	/^bool TDir::DelDir(const TStr& FPathFNm){$/;"	f	class:TDir
DelEdge	snap-core/graph.cpp	/^void TBPGraph::DelEdge(const int& LeftNId, const int& RightNId) {$/;"	f	class:TBPGraph
DelEdge	snap-core/graph.cpp	/^void TNEGraph::DelEdge(const int& EId) {$/;"	f	class:TNEGraph
DelEdge	snap-core/graph.cpp	/^void TNEGraph::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TNEGraph
DelEdge	snap-core/graph.cpp	/^void TNGraph::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TNGraph
DelEdge	snap-core/graph.cpp	/^void TUNGraph::DelEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TUNGraph
DelEdge	snap-core/graphmp.cpp	/^void TNGraphMP::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TNGraphMP
DelEdge	snap-core/mmnet.cpp	/^int TCrossNet::DelEdge(const int& EId) {$/;"	f	class:TCrossNet
DelEdge	snap-core/network.cpp	/^void TDirNet::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TDirNet
DelEdge	snap-core/network.cpp	/^void TNEANet::DelEdge(const int& EId) {$/;"	f	class:TNEANet
DelEdge	snap-core/network.cpp	/^void TNEANet::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TNEANet
DelEdge	snap-core/network.cpp	/^void TUndirNet::DelEdge(const int& SrcNId, const int& DstNId) {$/;"	f	class:TUndirNet
DelEdge	snap-core/network.h	/^void TNodeEDatNet<TNodeData, TEdgeData>::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TNodeEDatNet
DelEdge	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::DelEdge(const int& EId) {$/;"	f	class:TNodeEdgeNet
DelEdge	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TNodeEdgeNet
DelEdge	snap-core/network.h	/^void TNodeNet<TNodeData>::DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	class:TNodeNet
DelEdge	snap-exp/mmgraph-exp.h	/^  void DelEdge(const int& EId) {$/;"	f	class:TMNet
DelEdge	snap-exp/mmgraph-exp.h	/^  void DelEdge(const int& SrcNId, const int& DstNId, const bool& IsDir = true) {$/;"	f	class:TMNet
DelFirst	glib-core/ds.h	/^  void DelFirst() { PLstNd DelNd = FirstNd; Del(DelNd); }$/;"	f	class:TLst
DelFromIntVAttrDatN	snap-core/network.cpp	/^int TNEANet::DelFromIntVAttrDatN(const int& NId, const TInt& value, const TStr& attr) {$/;"	f	class:TNEANet
DelFromIntVAttrDatN	snap-core/network.h	/^  int DelFromIntVAttrDatN(const TNodeI& NodeI, const TInt& value, const TStr& attr) { return DelFromIntVAttrDatN(NodeI.GetId(), value, attr); }$/;"	f	class:TNEANet
DelIfIn	glib-core/ds.h	/^bool TVec<TVal, TSizeTy>::DelIfIn(const TVal& Val){$/;"	f	class:TVec
DelIfKey	glib-core/hash.h	/^  bool DelIfKey(const TKey& Key){$/;"	f	class:THash
DelIfKey	glib-core/shash.h	/^  bool DelIfKey(const TKey& Key) {$/;"	f	class:THashSet
DelInNbr	snap-exp/mmgraph-exp.h	/^  void DelInNbr(const int& ETypeId, const int& EId) { InEIdVV[ETypeId].DelIfIn(EId); InDeg--; }$/;"	f	class:TSVNode
DelInNbr	snap-exp/mmgraph-exp.h	/^  void DelInNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TCVNode
DelInNbr	snap-exp/mmgraph-exp.h	/^  void DelInNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TMVNode
DelKey	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::DelKey(const TKey& Key){$/;"	f	class:THash
DelKey	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::DelKey(const TKey& Key) {$/;"	f	class:THashSet
DelKeyId	glib-core/hash.h	/^  void DelKeyId(const int& KeyId){DelKey(GetKey(KeyId));}$/;"	f	class:THash
DelKeyId	glib-core/shash.h	/^  void DelKeyId(const int& KeyId) {DelKey(GetKey(KeyId)); }$/;"	f	class:THashSet
DelKeyIdV	glib-core/hash.h	/^  void DelKeyIdV(const TIntV& KeyIdV){$/;"	f	class:THash
DelKeyIdV	glib-core/shash.h	/^  void DelKeyIdV(const TIntV& KeyIdV) {$/;"	f	class:THashSet
DelKeywords	snap-adv/cascdynetinf.h	/^  void DelKeywords() { Keywords.Clr(); }$/;"	f	class:THitInfo
DelLast	glib-core/ds.h	/^  void DelLast() { PLstNd DelNd = LastNd; Del(DelNd); }$/;"	f	class:TLst
DelLast	glib-core/ds.h	/^  void DelLast(){Del(Len()-1);}$/;"	f	class:TVec
DelLast	snap-core/gstat.h	/^  void DelLast() { GStatV.DelLast(); }$/;"	f	class:TGStatVec
DelLink	snap-core/cmty.cpp	/^    void DelLink(const int& K) {$/;"	f	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat
DelMinWgtNodes	snap-exp/wgtnet.cpp	/^void TWgtNet::DelMinWgtNodes(const double MinWgt) {$/;"	f	class:TWgtNet
DelModeNet	snap-core/mmnet.cpp	/^int TMMNet::DelModeNet(const TInt& ModeId) {$/;"	f	class:TMMNet
DelModeNet	snap-core/mmnet.cpp	/^int TMMNet::DelModeNet(const TStr& ModeName) {$/;"	f	class:TMMNet
DelNId	snap-core/bignet.h	/^  enum { DelNId = INT_MAX }; \/\/ id of a deleted node$/;"	e	enum:TBigNet::__anon106
DelNbrType	snap-core/mmnet.cpp	/^int TModeNet::DelNbrType(const TStr& CrossName) {$/;"	f	class:TModeNet
DelNeighbor	snap-core/mmnet.cpp	/^int TModeNet::DelNeighbor(const int& NId, const int& EId, bool outEdge, const TInt& linkId, const bool sameMode, bool isDir){$/;"	f	class:TModeNet
DelNeighbor	snap-core/mmnet.cpp	/^int TModeNet::DelNeighbor(const int& NId, const int& EId, bool outEdge, const TStr& CrossName, const bool sameMode, bool isDir){$/;"	f	class:TModeNet
DelNode	glib-core/ds.h	/^void TTree<TVal>::DelNode(const int& NodeId){$/;"	f	class:TTree
DelNode	snap-core/bignet.h	/^int  TBigNet<TNodeData, IsDir>::DelNode(int NId) {$/;"	f	class:TBigNet
DelNode	snap-core/graph.cpp	/^void TBPGraph::DelNode(const int& NId) {$/;"	f	class:TBPGraph
DelNode	snap-core/graph.cpp	/^void TNEGraph::DelNode(const int& NId) {$/;"	f	class:TNEGraph
DelNode	snap-core/graph.cpp	/^void TNGraph::DelNode(const int& NId) {$/;"	f	class:TNGraph
DelNode	snap-core/graph.cpp	/^void TUNGraph::DelNode(const int& NId) {$/;"	f	class:TUNGraph
DelNode	snap-core/graph.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TBPGraph
DelNode	snap-core/graph.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TNEGraph
DelNode	snap-core/graph.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TNGraph
DelNode	snap-core/graph.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TUNGraph
DelNode	snap-core/graphmp.cpp	/^void TNGraphMP::DelNode(const int& NId) {$/;"	f	class:TNGraphMP
DelNode	snap-core/graphmp.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TNGraphMP
DelNode	snap-core/mmnet.cpp	/^void TModeNet::DelNode(const int& NId) {$/;"	f	class:TModeNet
DelNode	snap-core/network.cpp	/^void TDirNet::DelNode(const int& NId) {$/;"	f	class:TDirNet
DelNode	snap-core/network.cpp	/^void TNEANet::DelNode(const int& NId) {$/;"	f	class:TNEANet
DelNode	snap-core/network.cpp	/^void TUndirNet::DelNode(const int& NId) {$/;"	f	class:TUndirNet
DelNode	snap-core/network.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TDirNet
DelNode	snap-core/network.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TNEANet
DelNode	snap-core/network.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TNodeEDatNet
DelNode	snap-core/network.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TNodeEdgeNet
DelNode	snap-core/network.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TNodeNet
DelNode	snap-core/network.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TUndirNet
DelNode	snap-core/network.h	/^void TNodeEDatNet<TNodeData, TEdgeData>::DelNode(const int& NId) {$/;"	f	class:TNodeEDatNet
DelNode	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::DelNode(const int& NId) {$/;"	f	class:TNodeEdgeNet
DelNode	snap-core/network.h	/^void TNodeNet<TNodeData>::DelNode(const int& NId) {$/;"	f	class:TNodeNet
DelNode	snap-exp/graphmp-exp.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetId()); }$/;"	f	class:TUNGraphMP
DelNode	snap-exp/mmgraph-exp.h	/^  void DelNode(const TNode& NodeI) { DelNode(NodeI.GetTypeId(), NodeI.GetId()); }$/;"	f	class:TMNet
DelNode	snap-exp/mmgraph-exp.h	/^  void DelNode(const int& NId) { DelNode(GetNTypeId(NId), GetLocalNId(NId)); }$/;"	f	class:TMNet
DelNode	snap-exp/mmgraph-exp.h	/^  void DelNode(const int& NTypeId, const int& NId) {$/;"	f	class:TMNet
DelNodeExp	snap-exp/multimodal-dev/delete-exp.cpp	/^void DelNodeExp(const PGraph& Graph, const TStrV& DeletedNStrV, const TStrIntH& NStrH) {$/;"	f
DelNodes	snap-core/alg.h	/^void DelNodes(PGraph& Graph, const TIntV& NIdV) {$/;"	f	namespace:TSnap
DelOutNbr	snap-exp/mmgraph-exp.h	/^  void DelOutNbr(const int& ETypeId, const int& EId) { OutEIdVV[ETypeId].DelIfIn(EId); OutDeg--; }$/;"	f	class:TSVNode
DelOutNbr	snap-exp/mmgraph-exp.h	/^  void DelOutNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TCVNode
DelOutNbr	snap-exp/mmgraph-exp.h	/^  void DelOutNbr(const int& ETypeId, const int& EId) {$/;"	f	class:TMVNode
DelQtId	snap-exp/memes.h	/^  void DelQtId(const int& QtId) { return QuoteH.DelKey(QtId); }$/;"	f	class:TQuoteBs
DelSAttrDat	snap-core/attr.cpp	/^int TAttr::DelSAttrDat(const TInt& Id, const TInt& AttrId) {$/;"	f	class:TAttr
DelSAttrDat	snap-core/attr.cpp	/^int TAttr::DelSAttrDat(const TInt& Id, const TStr& AttrName) {$/;"	f	class:TAttr
DelSAttrDat	snap-core/attr.cpp	/^int TAttrPair::DelSAttrDat(const TIntPr& Id, const TInt& AttrId) {$/;"	f	class:TAttrPair
DelSAttrDat	snap-core/attr.cpp	/^int TAttrPair::DelSAttrDat(const TIntPr& Id, const TStr& AttrName) {$/;"	f	class:TAttrPair
DelSAttrDatE	snap-core/network.cpp	/^int TDirNet::DelSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId) {$/;"	f	class:TDirNet
DelSAttrDatE	snap-core/network.cpp	/^int TDirNet::DelSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName) {$/;"	f	class:TDirNet
DelSAttrDatE	snap-core/network.cpp	/^int TNEANet::DelSAttrDatE(const TInt& EId, const TInt& AttrId) {$/;"	f	class:TNEANet
DelSAttrDatE	snap-core/network.cpp	/^int TNEANet::DelSAttrDatE(const TInt& EId, const TStr& AttrName) {$/;"	f	class:TNEANet
DelSAttrDatE	snap-core/network.cpp	/^int TUndirNet::DelSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId) {$/;"	f	class:TUndirNet
DelSAttrDatE	snap-core/network.cpp	/^int TUndirNet::DelSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName) {$/;"	f	class:TUndirNet
DelSAttrDatE	snap-core/network.h	/^  int DelSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId) {$/;"	f	class:TDirNet
DelSAttrDatE	snap-core/network.h	/^  int DelSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId) {$/;"	f	class:TNEANet
DelSAttrDatE	snap-core/network.h	/^  int DelSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId) {$/;"	f	class:TUndirNet
DelSAttrDatE	snap-core/network.h	/^  int DelSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName) {$/;"	f	class:TDirNet
DelSAttrDatE	snap-core/network.h	/^  int DelSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName) {$/;"	f	class:TNEANet
DelSAttrDatE	snap-core/network.h	/^  int DelSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName) {$/;"	f	class:TUndirNet
DelSAttrDatN	snap-core/network.cpp	/^int TDirNet::DelSAttrDatN(const TInt& NId, const TInt& AttrId) {$/;"	f	class:TDirNet
DelSAttrDatN	snap-core/network.cpp	/^int TDirNet::DelSAttrDatN(const TInt& NId, const TStr& AttrName) {$/;"	f	class:TDirNet
DelSAttrDatN	snap-core/network.cpp	/^int TNEANet::DelSAttrDatN(const TInt& NId, const TInt& AttrId) {$/;"	f	class:TNEANet
DelSAttrDatN	snap-core/network.cpp	/^int TNEANet::DelSAttrDatN(const TInt& NId, const TStr& AttrName) {$/;"	f	class:TNEANet
DelSAttrDatN	snap-core/network.cpp	/^int TUndirNet::DelSAttrDatN(const TInt& NId, const TInt& AttrId) {$/;"	f	class:TUndirNet
DelSAttrDatN	snap-core/network.cpp	/^int TUndirNet::DelSAttrDatN(const TInt& NId, const TStr& AttrName) {$/;"	f	class:TUndirNet
DelSAttrDatN	snap-core/network.h	/^  int DelSAttrDatN(const TNodeI& NodeI, const TInt& AttrId) {$/;"	f	class:TDirNet
DelSAttrDatN	snap-core/network.h	/^  int DelSAttrDatN(const TNodeI& NodeI, const TInt& AttrId) {$/;"	f	class:TNEANet
DelSAttrDatN	snap-core/network.h	/^  int DelSAttrDatN(const TNodeI& NodeI, const TInt& AttrId) {$/;"	f	class:TUndirNet
DelSAttrDatN	snap-core/network.h	/^  int DelSAttrDatN(const TNodeI& NodeI, const TStr& AttrName) {$/;"	f	class:TDirNet
DelSAttrDatN	snap-core/network.h	/^  int DelSAttrDatN(const TNodeI& NodeI, const TStr& AttrName) {$/;"	f	class:TNEANet
DelSAttrDatN	snap-core/network.h	/^  int DelSAttrDatN(const TNodeI& NodeI, const TStr& AttrName) {$/;"	f	class:TUndirNet
DelSAttrId	snap-core/attr.cpp	/^void TAttr::DelSAttrId(const TInt& Id) {$/;"	f	class:TAttr
DelSAttrId	snap-core/attr.cpp	/^void TAttrPair::DelSAttrId(const TIntPr& Id) {$/;"	f	class:TAttrPair
DelSameDomLinks	snap-exp/memenet.cpp	/^void TMemeNet::DelSameDomLinks(const PMemeNetBs& NetBs) {$/;"	f	class:TMemeNet
DelSelfEdges	snap-core/alg.h	/^void DelSelfEdges(const PGraph& Graph) {$/;"	f	namespace:TSnap
DelSmallNodes	snap-core/gstat.cpp	/^void TGStatVec::DelSmallNodes(const int& MinNodes) {$/;"	f	class:TGStatVec
DelStr	glib-core/dt.cpp	/^bool TStr::DelStr(const TStr& Str){$/;"	f	class:TStr
DelSubStr	glib-core/dt.cpp	/^void TStr::DelSubStr(const int& _BChN, const int& _EChN){$/;"	f	class:TStr
DelWc	glib-core/fl.cpp	/^void TFile::DelWc(const TStr& WcStr, const bool& RecurseDirP){$/;"	f	class:TFile
DelX	glib-core/ds.h	/^void TVVec<TVal>::DelX(const int& X){$/;"	f	class:TVVec
DelX	glib-core/ss.cpp	/^void TSs::DelX(const int& X){$/;"	f	class:TSs
DelY	glib-core/ds.h	/^void TVVec<TVal>::DelY(const int& Y){$/;"	f	class:TVVec
DelY	glib-core/ss.cpp	/^void TSs::DelY(const int& Y){$/;"	f	class:TSs
DelZeroDegNodes	snap-core/alg.h	/^void DelZeroDegNodes(PGraph& Graph) {$/;"	f	namespace:TSnap
Delta	snap-adv/cascdynetinf.h	/^  TFlt Delta, K;$/;"	m	class:TNIBs
DeltaB	snap-exp/sir.h	/^  double DeltaM, DeltaB;$/;"	m	class:TSirSR2Model
DeltaM	snap-exp/sir.h	/^  double DeltaM, DeltaB;$/;"	m	class:TSirSR2Model
DemoBFSCompleteGraph	tutorials/demo-bfsdfs.cpp	/^void DemoBFSCompleteGraph() {$/;"	f
DemoBFSDirectedRandom	tutorials/demo-bfsdfs.cpp	/^void DemoBFSDirectedRandom() {$/;"	f
DemoBFSUndirectedRandom	tutorials/demo-bfsdfs.cpp	/^void DemoBFSUndirectedRandom() {$/;"	f
DemoFullBfsDfs	tutorials/demo-bfsdfs.cpp	/^void DemoFullBfsDfs() {$/;"	f
DenormalizeColName	snap-core/table.cpp	/^TStr TTable::DenormalizeColName(const TStr& ColName) const {$/;"	f	class:TTable
DenormalizeSchema	snap-core/table.cpp	/^Schema TTable::DenormalizeSchema() const {$/;"	f	class:TTable
DepthInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> DepthInf, DepthNet;   \/\/ average depth (avg. distance from leaves to the root)$/;"	m	class:TCascadeStat	file:
DepthNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> DepthInf, DepthNet;   \/\/ average depth (avg. distance from leaves to the root)$/;"	m	class:TCascadeStat	file:
Derivative	snap-adv/circles.h	/^  TFlt* Derivative; \/\/ Partial derivatives$/;"	m	class:TCluster
DfOnNotify	glib-core/ut.cpp	/^void TNotify::DfOnNotify(const TNotifyType& Type, const TStr& MsgStr){$/;"	f	class:TNotify
DfPortN	glib-core/http.cpp	/^const int THttp::DfPortN=80;$/;"	m	class:THttp	file:
DfPortN	glib-core/http.h	/^  static const int DfPortN;$/;"	m	class:THttp
Diff	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Diff(const TVec<TVal, TSizeTy>& ValV){$/;"	f	class:TVec
Diff	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Diff(const TVec<TVal, TSizeTy>& ValV, TVec<TVal, TSizeTy>& DstValV) const {$/;"	f	class:TVec
DiffAlphas	snap-adv/cascdynetinf.h	/^  THash<TInt, TIntFltH> DiffAlphas;$/;"	m	class:TNIBs
DigitChSet	glib-core/xml.h	/^  TBSet LetterChSet, DigitChSet, NameChSet, PubidChSet;$/;"	v
Dim	snap-adv/mag.h	/^	TInt Dim;$/;"	m	class:TMAGNodeBern
Dim	snap-adv/mag.h	/^	TInt Dim;$/;"	m	class:TMAGNodeBeta
Dim	snap-adv/mag.h	/^	TInt Dim;$/;"	m	class:TMAGNodeSimple
Dim	snap-exp/lsh.h	/^  int Dim;$/;"	m	class:TLSHash
Dirty	snap-adv/mag.h	/^	TBool Dirty;$/;"	m	class:TMAGNodeBeta
DisableLnTrunc	glib-core/fl.h	/^  void DisableLnTrunc(){MxLnLen=-1;}$/;"	f	class:TSOut
DiscoverNode	snap-core/cncom.h	/^  void DiscoverNode(int NId) { Time++; VnLowH.AddDat(NId, TIntPr(Time, Time)); }$/;"	f	class:TArtPointVisitor
DiscoverNode	snap-core/cncom.h	/^  void DiscoverNode(int NId) { Time++; VnLowH.AddDat(NId, TIntPr(Time, Time)); }$/;"	f	class:TBiConVisitor
DiscoverNode	snap-core/cncom.h	/^  void DiscoverNode(int NId) {$/;"	f	class:TSccVisitor
DisplayAttrs	snap-adv/agmattr.h	/^  void DisplayAttrs(const int TopK, const TStrHash<TInt>& NodeNameH) {$/;"	f	class:TCesna
DistMeasure	snap-exp/lsh.h	/^  enum DistMeasure {JACCARD, COSINE, EUCLIDEAN};$/;"	g	class:TLSHash
DistrStatH	snap-core/gstat.h	/^  THash<TInt, TFltPrV> DistrStatH; \/\/ distribution statistics$/;"	m	class:TGStat
Do	snap-core/alg.h	/^  static void Do(const PGraph& Graph) {$/;"	f	struct:TSnap::TSnapDetail::TDelSelfEdges
Do	snap-core/subgraph.h	/^  static PGraph Do(const PGraph& Graph, const TIntV& NIdV) {$/;"	f	struct:TSnap::TSnapDetail::TGetSubGraph
Do	snap-core/subgraph.h	/^  static POutGraph Do(const PInGraph& InGraph, const TIntV& NIdV, const bool& RenumberNodes) {$/;"	f	struct:TSnap::TSnapDetail::TConvertSubGraph
DoBfs	snap-core/bfsdfs.h	/^int TBreathFS<PGraph>::DoBfs(const int& StartNode, const bool& FollowOut, const bool& FollowIn, const int& TargetNId, const int& MxDist) {$/;"	f	class:TBreathFS
DoBfsHybrid	snap-core/bfsdfs.h	/^int TBreathFS<PGraph>::DoBfsHybrid(const int& StartNode, const bool& FollowOut, const bool& FollowIn, const int& TargetNId, const int& MxDist) {$/;"	f	class:TBreathFS
DoBfs_Hybrid	snap-exp/bfs-dev/bfs-hybrid.h	/^int TBreathFS_Hybrid<PGraph>::DoBfs_Hybrid(const int& StartNode, const bool& FollowOut, const bool& FollowIn, const int& TargetNId, const int& MxDist) {$/;"	f	class:TBreathFS_Hybrid
DoBfs_Hybrid_Test	snap-exp/bfs-dev/bfs-hybrid-test.h	/^int TBreathFS_Hybrid_Test<PGraph>::DoBfs_Hybrid_Test(const int& StartNode, const bool& FollowOut, const bool& FollowIn, const int& TargetNId, const int& MxDist) {$/;"	f	class:TBreathFS_Hybrid_Test
DoBfs_Parallel	snap-exp/bfs-dev/bfs-parallel.h	/^int TBreathFS_Parallel<PGraph>::DoBfs_Parallel(const int& StartNode, const bool& FollowOut, const bool& FollowIn, const int& TargetNId, const int& MxDist) {$/;"	f	class:TBreathFS_Parallel
DoBfs_test	snap-exp/bfs-dev/bfs-dev.h	/^int TBreathFS_Test<PGraph>::DoBfs_test(const int& StartNode, const bool& FollowOut, const bool& FollowIn, const int& TargetNId, const int& MxDist) {$/;"	f	class:TBreathFS_Test
DoBfs_test	snap-exp/bfs-dev/bfs-vector.h	/^int TBreathFS_Test<PGraph>::DoBfs_test(const int& StartNode, const bool& FollowOut, const bool& FollowIn, const int& TargetNId, const int& MxDist) {$/;"	f	class:TBreathFS_Test
DoEMAlg	snap-adv/mag.cpp	/^void TMAGFitBern::DoEMAlg(const int& NStep, const int& NEstep, const int& NMstep, const double& LrnRate, const double& MaxGrad, const double& Lambda, const double& ReInit, const int& NReal) {$/;"	f	class:TMAGFitBern
DoEStep	snap-adv/mag.cpp	/^double TMAGFitBern::DoEStep(const TFltV& TrueMuV, const int& NIter, double& LL, const double& Lambda) {$/;"	f	class:TMAGFitBern
DoEStepApxOneIter	snap-adv/mag.cpp	/^double TMAGFitBern::DoEStepApxOneIter(const TFltV& TrueMuV, TFltVV& NewPhiVV, const double& Lambda) {$/;"	f	class:TMAGFitBern
DoEStepOneIter	snap-adv/mag.cpp	/^double TMAGFitBern::DoEStepOneIter(const TFltV& TrueMuV, TFltVV& NewPhiVV, const double& Lambda) {$/;"	f	class:TMAGFitBern
DoFitLen	glib-core/dt.h	/^  bool DoFitLen(const int& LBfL) const {return BfL+LBfL<=MxBfL;}$/;"	f
DoFitStr	glib-core/dt.cpp	/^bool TMem::DoFitStr(const TStr& Str) const {$/;"	f	class:TMem
DoMStep	snap-adv/mag.cpp	/^void TMAGFitBern::DoMStep(const int& GradIter, const double& LrnRate, const double& MaxGrad, const double& Lambda, const int& NReal) {$/;"	f	class:TMAGFitBern
DoParallel	snap-adv/agmattr.h	/^  TBool DoParallel; \/\/ whether to use parallelism for computation$/;"	m	class:TCesna
DoParallel	snap-adv/agmdirected.h	/^  TBool DoParallel; \/\/ whether to use parallelism for computation$/;"	m	class:TCoda
DoParallel	snap-adv/agmfast.h	/^  TBool DoParallel; \/\/ whether to use parallelism for computation$/;"	m	class:TAGMFast
DoSave	snap-exp/spinn3r.h	/^  TBool DoSave;$/;"	m	class:TQuoteExtractor
Domains	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TSBitSet* Domains;$/;"	m	class:TMatchingMachine
Domains	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TSBitSet* Domains;$/;"	m	class:TSolver
DomainsIdH	snap-adv/cascdynetinf.h	/^  TStrIntH DomainsIdH; \/\/ domain, DomainId hash table$/;"	m	class:TNIBs
DomainsSize	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	int* DomainsSize;$/;"	m	class:TMatchingMachine
DomainsSize	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* DomainsSize;$/;"	m	class:TSolver
DotProduct	glib-core/linalg.cpp	/^double TLinAlg::DotProduct(const TFltV& x, const TFltV& y) {$/;"	f	class:TLinAlg
DotProduct	glib-core/linalg.cpp	/^double TLinAlg::DotProduct(const TFltV& x, const TIntFltKdV& y) {$/;"	f	class:TLinAlg
DotProduct	glib-core/linalg.cpp	/^double TLinAlg::DotProduct(const TFltVV& X, int ColId, const TFltV& Vec) {$/;"	f	class:TLinAlg
DotProduct	glib-core/linalg.cpp	/^double TLinAlg::DotProduct(const TFltVV& X, int ColId, const TIntFltKdV& y) {$/;"	f	class:TLinAlg
DotProduct	glib-core/linalg.cpp	/^double TLinAlg::DotProduct(const TFltVV& X, int ColIdX, const TFltVV& Y, int ColIdY) {$/;"	f	class:TLinAlg
DotProduct	glib-core/linalg.cpp	/^double TLinAlg::DotProduct(const TIntFltKdV& x, const TIntFltKdV& y) {$/;"	f	class:TLinAlg
DotProduct	snap-adv/agmattr.h	/^  double inline DotProduct(const TIntFltH& UV, const TIntFltH& VV) {$/;"	f	class:TCesna
DotProduct	snap-adv/agmattr.h	/^  double inline DotProduct(const int& UID, const int& VID) {$/;"	f	class:TCesna
DotProduct	snap-adv/agmdirected.h	/^  double inline DotProduct(const TIntFltH& UV, const TIntFltH& VV) {$/;"	f	class:TCoda
DotProduct	snap-adv/agmfast.h	/^  double inline DotProduct(const TIntFltH& UV, const TIntFltH& VV) {$/;"	f	class:TAGMFast
DotProduct	snap-adv/agmfast.h	/^  double inline DotProduct(const int& UID, const int& VID) {$/;"	f	class:TAGMFast
DotProductUtoV	snap-adv/agmdirected.h	/^  double inline DotProductUtoV(const int& UID, const int& VID) {$/;"	f	class:TCoda
Draw2ModeCommunity	snap-adv/agmdirected.h	/^  void Draw2ModeCommunity(const int CID, const TStr& OutFNm, const TIntStrH& NIDNameH, const THash<TInt, TIntTr>& NIDColorH) {$/;"	f	class:TCodaAnalyzer
DrawCloseTriad	snap-exp/signnet.cpp	/^void TSignMicroEvol::DrawCloseTriad(const TStr& FNmPref, const int& OpnTriadId, const TStr& Label) {$/;"	f	class:TSignMicroEvol
DrawElecTree	snap-exp/wikinet.cpp	/^void TWikiElecBs::DrawElecTree(const TStr& OutFNm, const int& MinVotes) const {$/;"	f	class:TWikiElecBs
DrawGViz	snap-core/ghash.cpp	/^void TGraphKey::DrawGViz(const TStr& OutFNm, const TStr& Desc, const TStr& NodeAttrs, const int& Size) const {$/;"	f	class:TGraphKey
DrawGViz	snap-core/ghash.h	/^void TGHash<TDat>::DrawGViz(const TIntV& KeyIdV, const TStr& OutFNmPref, const TStr& OutputType) const {$/;"	f	class:TGHash
DrawGViz	snap-core/ghash.h	/^void TGHash<TDat>::DrawGViz(const int& KeyId, const TStr& OutFNmPref, const TStr& OutputType, TStr Desc) const {$/;"	f	class:TGHash
DrawGViz	snap-core/gviz.h	/^void DrawGViz(const PGraph& Graph, const TGVizLayout& Layout, const TStr& PltFNm, const TStr& Desc, const TIntStrH& NodeLabelH) {$/;"	f	namespace:TSnap
DrawGViz	snap-core/gviz.h	/^void DrawGViz(const PGraph& Graph, const TGVizLayout& Layout, const TStr& PltFNm, const TStr& Desc, const bool& NodeLabels, const TIntStrH& NIdColorH) {$/;"	f	namespace:TSnap
DrawGVizColorDemo	tutorials/demo-gviz.cpp	/^void DrawGVizColorDemo() {$/;"	f
DrawGVizDemo	tutorials/demo-gviz.cpp	/^void DrawGVizDemo() {$/;"	f
DrawGraphViz	snap-exp/signnet.cpp	/^void TSignNet::DrawGraphViz(const TStr& OutFNm, const TStr& Desc, const bool& NodeLabels, const bool& EdgeLabels, const bool& SaveDir) {$/;"	f	class:TSignNet
DrawNet	snap-exp/memenet.cpp	/^void TMemeNet::DrawNet(const TStr& OutFNm) const {$/;"	f	class:TMemeNet
DrawNet	snap-exp/memenet.cpp	/^void TMemeNet::DrawNet(const TStr& OutFNm, const PMemeNetBs& MemeNetBs, const int& MinCcSize) const {$/;"	f	class:TMemeNet
DrawNet	snap-exp/memes.cpp	/^void TClustNet::DrawNet(const TStr& OutFNm, const int& SaveTopN) const {$/;"	f	class:TClustNet
DrawWhiskers	snap-adv/ncp.cpp	/^void TLocClust::DrawWhiskers(const PUNGraph& Graph, TStr FNmPref, const int& PlotN=10) {$/;"	f	class:TLocClust
DstCol	snap-core/table.h	/^  TStr DstCol; \/\/\/< Column (attribute) to serve as dst nodes when constructing the graph.$/;"	m	class:TTable
DstNId	snap-core/graph.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEGraph::TEdge
DstNId	snap-core/mmnet.h	/^    TInt SrcNId, DstNId;$/;"	m	class:TCrossNet::TCrossEdge
DstNId	snap-core/network.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEANet::TEdge
DstNId	snap-core/network.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNodeEdgeNet::TEdge
DstNId	snap-core/networkmp.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEANetMP::TEdge
DstNId	snap-exp/mmgraph-exp.h	/^    TInt TypeId, Id, SrcNId, DstNId;$/;"	m	class:TMNet::TEdge
DstNIdV	snap-exp/linkpred.h	/^  TIntV DstNIdV, NolNIdV;              \/\/ destination and no-link nodes$/;"	m	class:TLpExample
DstNIdV	snap-exp/linkpred.h	/^  TIntV DstNIdV, NolNIdV;$/;"	m	class:__OLD__::TLpExample
DstNodeAttrV	snap-core/table.h	/^  TStrV DstNodeAttrV; \/\/\/< List of columns (attributes) to serve as destination node attributes.$/;"	m	class:TTable
DummyNI	snap-exp/linkpred.h	/^  TNodeI DummyNI() const { return GetNI(DummyNId); }$/;"	f	class:TLpExample
DummyNId	snap-exp/linkpred.h	/^  TInt DummyNId;                       \/\/ random jump node (last node)$/;"	m	class:TLpExample
DummyNId	snap-exp/linkpred.h	/^  int DummyNId;$/;"	m	class:__OLD__::TQGraph
Dump	snap-adv/kronecker.cpp	/^void TKronMtx::Dump(const TStr& MtxNm, const bool& Sort) const {$/;"	f	class:TKronMtx
Dump	snap-adv/mag.cpp	/^void TMAGAffMtx::Dump(const TStr& MtxNm, const bool& Sort) const {$/;"	f	class:TMAGAffMtx
Dump	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::Dump(const TStr& Desc) const {$/;"	f	class:TBigNet
Dump	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::TNodeI::Dump() const {$/;"	f	class:TBigNet::TNodeI
Dump	snap-core/cncom.cpp	/^void TCnCom::Dump(const TCnComV& CnComV, const TStr& Desc) {$/;"	f	class:TCnCom
Dump	snap-core/gbase.cpp	/^void TUnionFind::Dump() {$/;"	f	class:TUnionFind
Dump	snap-core/ghash.cpp	/^void TSimpleGraph::Dump(const TStr& Desc) const {$/;"	f	class:TSimpleGraph
Dump	snap-core/graph.cpp	/^void TBPGraph::Dump(FILE *OutF) const {$/;"	f	class:TBPGraph
Dump	snap-core/graph.cpp	/^void TNEGraph::Dump(FILE *OutF) const {$/;"	f	class:TNEGraph
Dump	snap-core/graph.cpp	/^void TNGraph::Dump(FILE *OutF) const {$/;"	f	class:TNGraph
Dump	snap-core/graph.cpp	/^void TUNGraph::Dump(FILE *OutF) const {$/;"	f	class:TUNGraph
Dump	snap-core/graphmp.cpp	/^void TNGraphMP::Dump(FILE *OutF) const {$/;"	f	class:TNGraphMP
Dump	snap-core/network.cpp	/^void TDirNet::Dump(FILE *OutF) const {$/;"	f	class:TDirNet
Dump	snap-core/network.cpp	/^void TNEANet::Dump(FILE *OutF) const {$/;"	f	class:TNEANet
Dump	snap-core/network.cpp	/^void TUndirNet::Dump(FILE *OutF) const {$/;"	f	class:TUndirNet
Dump	snap-core/networkmp.cpp	/^void TNEANetMP::Dump(FILE *OutF) const {$/;"	f	class:TNEANetMP
Dump	snap-core/table.cpp	/^void TTable::Dump(FILE *OutF) const {$/;"	f	class:TTable
Dump	snap-core/triad.h	/^void TNetConstraint<PGraph>::Dump() const {$/;"	f	class:TNetConstraint
Dump	snap-exp/linkpred.cpp	/^void TLpExample::Dump(const bool& DumpPRank, const bool& DumpGrad, const bool& DumpNet) const {$/;"	f	class:TLpExample
Dump	snap-exp/linkpred.cpp	/^void TQGraph::Dump(const bool& OnlyPRank) const {$/;"	f	class:__OLD__::TQGraph
Dump	snap-exp/memes.cpp	/^void TMemesDataLoader::Dump(const bool& DumpAll) const {$/;"	f	class:TMemesDataLoader
Dump	snap-exp/memes.cpp	/^void TQuoteBs::Dump(const bool& Fast) const {$/;"	f	class:TQuoteBs
Dump	snap-exp/signnet.cpp	/^void TSignNet::Dump() const {$/;"	f	class:TSignNet
Dump	snap-exp/trawling.cpp	/^void Dump(const TIntV& V, TStr Desc="") {$/;"	f
Dump	snap-exp/wikinet.cpp	/^void TWikiElec::Dump(const TStrHash<TInt>& UsrH) const {$/;"	f	class:TWikiElec
Dump	snap-exp/wikinet.cpp	/^void TWikiElecBs::Dump() const {$/;"	f	class:TWikiElecBs
Dump	snap-exp/wikinet.cpp	/^void TWikiMetaHist::Dump(const bool& AlsoText) const {$/;"	f	class:TWikiMetaHist
Dump	snap-exp/wikinet.h	/^  void Dump() const { TIntH ElecLen; int v=0;for (int e=0;e<UsrElecH.Len();e++) {ElecLen.AddDat(UsrElecH[e].Last().Len())++; v+=UsrElecH[e].Last().Len();}$/;"	f	class:TWikiElecBsOLD
Dump	snap-exp/wikinet.h	/^  void Dump() const {$/;"	f	class:TWikiUsr
Dump2ModeCommunities	snap-adv/agmdirected.h	/^  void Dump2ModeCommunities(const TStr& OutFNm, const double MaxJac, const TIntStrH& NIDNameH) {$/;"	f	class:TCodaAnalyzer
DumpClusters	snap-exp/memes.cpp	/^void TClustNet::DumpClusters(const TStr& OutFNm, int SaveTopN) const {$/;"	f	class:TClustNet
DumpClustersByVol	snap-exp/memes.cpp	/^void TClustNet::DumpClustersByVol(const TStr& OutFNm, const int& MinClustSz, const int& MinVolume) const {$/;"	f	class:TClustNet
DumpCmtyVV	snap-adv/agm.cpp	/^void TAGMUtil::DumpCmtyVV(const TStr OutFNm, TVec<TIntV>& CmtyVV, TIntStrH& NIDNmH) {$/;"	f	class:TAGMUtil
DumpCmtyVV	snap-adv/agm.cpp	/^void TAGMUtil::DumpCmtyVV(const TStr& OutFNm, const TVec<TIntV>& CmtyVV) {$/;"	f	class:TAGMUtil
DumpEdgeStat	snap-exp/wikinet.cpp	/^void TWikiTalkNet::DumpEdgeStat() const {$/;"	f	class:TWikiTalkNet
DumpFlags	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::DumpFlags() const {$/;"	f	class:TBigNet
DumpMemberships	snap-adv/agmdirected.cpp	/^void TCoda::DumpMemberships(const TStr& OutFNm, const TStrHash<TInt>& NodeNameH, const double Thres) {$/;"	f	class:TCoda
DumpMemberships	snap-adv/agmdirected.cpp	/^void TCoda::DumpMemberships(const TStr& OutFNm, const double Thres) {$/;"	f	class:TCoda
DumpMemberships	snap-adv/agmdirected.h	/^  void DumpMemberships(const TStr& OutFNm) { DumpMemberships(OutFNm, sqrt(PNoCom)); }$/;"	f	class:TCoda
DumpMemberships	snap-adv/agmdirected.h	/^  void DumpMemberships(const TStr& OutFNm, const TStrHash<TInt>& NodeNameH) { DumpMemberships(OutFNm, NodeNameH, sqrt(PNoCom)); }$/;"	f	class:TCoda
DumpNIDAttrHToMetis	snap-adv/agmattr.h	/^  static void DumpNIDAttrHToMetis(const TStr& FNm, const THash<TInt, TIntV>& NIDAttrH, const TIntV& NIDV) {$/;"	f	class:TCesnaUtil
DumpNIDAttrHToNIDK	snap-adv/agmattr.h	/^  static void DumpNIDAttrHToNIDK(const TStr& FNm, const THash<TInt, TIntSet>& NIDAttrH) {$/;"	f	class:TCesnaUtil
DumpNIDAttrHToNIDK	snap-adv/agmattr.h	/^  static void DumpNIDAttrHToNIDK(const TStr& FNm, const THash<TInt, TIntSet>& NIDAttrH, const TStrHash<TInt>& FeatNameH) {$/;"	f	class:TCesnaUtil
DumpNIDAttrHToNIDK	snap-adv/agmattr.h	/^  static void DumpNIDAttrHToNIDK(const TStr& FNm, const THash<TInt, TIntSet>& NIDAttrH, const TStrHash<TInt>& FeatNameH, const TStrHash<TInt>& NodeNameH) {$/;"	f	class:TCesnaUtil
DumpNIDAttrHToNIDK	snap-adv/agmattr.h	/^  static void DumpNIDAttrHToNIDK(const TStr& FNm, const THash<TInt, TIntV>& NIDAttrH) {$/;"	f	class:TCesnaUtil
DumpNIDAttrHToNIDK	snap-adv/agmattr.h	/^  static void DumpNIDAttrHToNIDK(const TStr& FNm, const THash<TInt, TIntV>& NIDAttrH, const TStrHash<TInt>& FeatNameH) {$/;"	f	class:TCesnaUtil
DumpNIDAttrHToNIDK	snap-adv/agmattr.h	/^  static void DumpNIDAttrHToNIDK(const TStr& FNm, const THash<TInt, TIntV>& NIDAttrH, const TStrHash<TInt>& FeatNameH, const TStrHash<TInt>& NodeNameH) {$/;"	f	class:TCesnaUtil
DumpNextXmlTags	snap-exp/wikinet.cpp	/^void TWikiMetaHist::DumpNextXmlTags(const int& DumpN) {$/;"	f	class:TWikiMetaHist
DumpNodes	snap-exp/memes.cpp	/^void TClustNet::DumpNodes(const TStr& OutFNm, const int& SaveTopN) const {$/;"	f	class:TClustNet
DumpPartStat	snap-exp/signnet.cpp	/^void THopfield::DumpPartStat() const {$/;"	f	class:THopfield
DumpStat	snap-exp/spinn3r.cpp	/^void TQuoteExtractor::DumpStat() {$/;"	f	class:TQuoteExtractor
DumpStr	glib-core/ss.cpp	/^const char* TSsParser::DumpStr() const {$/;"	f	class:TSsParser
DumpStr	glib-core/ssmp.cpp	/^const char* TSsParserMP::DumpStr() const {$/;"	f	class:TSsParserMP
DumpTimeStat	snap-core/timenet.cpp	/^void TTimeNENet::DumpTimeStat() const {$/;"	f	class:TTimeNENet
DumpValStat	snap-core/gstat.cpp	/^void TGStat::DumpValStat() {$/;"	f	class:TGStat
E	glib-core/xmath.cpp	/^double TMath::E=2.71828182845904523536;$/;"	m	class:TMath	file:
E	glib-core/xmath.h	/^  static double E;$/;"	m	class:TMath
EAssert	glib-core/bd.h	280;"	d
EAssertR	glib-core/bd.h	283;"	d
EAssertRA	glib-core/bd.h	286;"	d
EAssertRAA	glib-core/bd.h	289;"	d
EAttrV	snap-exp/linkpred.h	/^  THash<TIntPr, TFltV> EAttrV;$/;"	m	class:__OLD__::TLpExample
EDGES_START	snap-core/gio.h	/^const TStr EDGES_START = ("#EDGES");$/;"	m	namespace:TSnap
EFail	glib-core/bd.h	244;"	d
EFailR	glib-core/bd.h	246;"	d
EId	snap-core/mmnet.h	/^    TInt EId;$/;"	m	class:TCrossNet::TCrossEdge
EMType	snap-adv/kronecker.h	/^  TKronEMType EMType;	\/\/ Latent setting type for EM$/;"	m	class:TKroneckerLL
END_SENTINEL	snap-core/gio.h	/^const TStr END_SENTINEL = ("#END");$/;"	m	namespace:TSnap
EPOCH_DIFFERENCE	glib-core/os.cpp	573;"	d	file:
EPSILON	test/test-bfsdfs.cpp	6;"	d	file:
EPSILON	test/test-cncom.cpp	6;"	d	file:
EPSILON	tutorials/demo-bfsdfs.cpp	3;"	d	file:
EQ	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
ESAssert	glib-core/bd.h	292;"	d
ESpeedUp	snap-adv/mag.h	/^	bool ESpeedUp, MSpeedUp, Debug;$/;"	m	class:TMAGFitBern
EThrow	glib-core/xml.cpp	/^void TXmlLx::EThrow(const TStr& MsgStr) const {$/;"	f	class:TXmlLx
ETypeH	snap-exp/mmgraph-exp.h	/^  THash<TStr, int> ETypeH;$/;"	m	class:TMNet
EUCLIDEAN	snap-exp/lsh.h	/^  enum DistMeasure {JACCARD, COSINE, EUCLIDEAN};$/;"	e	enum:TLSHash::DistMeasure
EXECUTABLE	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^EXECUTABLE=risnapds$/;"	m
EXECUTABLE	contrib/unict_univr-risnap/RiToSnap/Makefile	/^EXECUTABLE=risnap$/;"	m
EXP	snap-adv/cascdynetinf.h	/^  EXP, \/\/ exponential$/;"	e	enum:__anon58
EXPONENTIAL	snap-adv/cascdynetinf.h	/^  EXPONENTIAL, \/\/ exponential trend$/;"	e	enum:__anon59
EXP_SAMPLING	snap-adv/cascdynetinf.h	/^  EXP_SAMPLING,$/;"	e	enum:__anon61
EdgeAttrIsDeleted	snap-core/mmnet.cpp	/^bool TCrossNet::EdgeAttrIsDeleted(const int& EId, const TStrIntPrH::TIter& CrossHI) const {$/;"	f	class:TCrossNet
EdgeAttrIsDeleted	snap-core/network.cpp	/^bool TNEANet::EdgeAttrIsDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANet
EdgeAttrIsDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::EdgeAttrIsDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANetMP
EdgeAttrIsFltDeleted	snap-core/mmnet.cpp	/^bool TCrossNet::EdgeAttrIsFltDeleted(const int& EId, const TStrIntPrH::TIter& CrossHI) const {$/;"	f	class:TCrossNet
EdgeAttrIsFltDeleted	snap-core/network.cpp	/^bool TNEANet::EdgeAttrIsFltDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANet
EdgeAttrIsFltDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::EdgeAttrIsFltDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANetMP
EdgeAttrIsIntDeleted	snap-core/mmnet.cpp	/^bool TCrossNet::EdgeAttrIsIntDeleted(const int& EId, const TStrIntPrH::TIter& CrossHI) const {$/;"	f	class:TCrossNet
EdgeAttrIsIntDeleted	snap-core/network.cpp	/^bool TNEANet::EdgeAttrIsIntDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANet
EdgeAttrIsIntDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::EdgeAttrIsIntDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANetMP
EdgeAttrIsIntVDeleted	snap-core/network.cpp	/^bool TNEANet::EdgeAttrIsIntVDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANet
EdgeAttrIsStrDeleted	snap-core/mmnet.cpp	/^bool TCrossNet::EdgeAttrIsStrDeleted(const int& EId, const TStrIntPrH::TIter& CrossHI) const {$/;"	f	class:TCrossNet
EdgeAttrIsStrDeleted	snap-core/network.cpp	/^bool TNEANet::EdgeAttrIsStrDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANet
EdgeAttrIsStrDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::EdgeAttrIsStrDeleted(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANetMP
EdgeAttrV	snap-core/table.h	/^  TStrV EdgeAttrV; \/\/\/< List of columns (attributes) to serve as edge attributes.$/;"	m	class:TTable
EdgeComVH	snap-adv/agmfit.h	/^  THash<TIntPr,TIntSet> EdgeComVH; \/\/\/< Edge -> Shared Community ID Set.$/;"	m	class:TAGMFit
EdgeDat	snap-core/network.h	/^    TEdgeData EdgeDat;$/;"	m	class:TNodeEdgeNet::TEdge
EdgeFeatures	snap-adv/circles.h	/^  THash<TIntPr, TIntIntH> EdgeFeatures;$/;"	m	class:TGraphAttributes
EdgeGainV	snap-adv/cascnetinf.h	/^  TVec<TPair<TFlt, TIntPr> > EdgeGainV;$/;"	m	class:TNetInfBs
EdgeGradH	snap-exp/linkpred.h	/^  THash<TIntPr, TEdgeGrad> EdgeGradH;  \/\/ f and f' for each edge$/;"	m	class:__OLD__::TQGraph
EdgeH	snap-core/ghash.h	/^  THash<TIntPr, TIntH> EdgeH;$/;"	m	class:TSubGraphsEnum
EdgeH	snap-core/graph.h	/^  THash<TInt, TEdge> EdgeH;$/;"	m	class:TNEGraph
EdgeH	snap-core/network.h	/^  THash<TInt, TEdge> EdgeH;$/;"	m	class:TNEANet
EdgeH	snap-core/network.h	/^  THash<TInt, TEdge> EdgeH;$/;"	m	class:TNodeEdgeNet
EdgeH	snap-core/networkmp.h	/^  THashMP<TInt, TEdge> EdgeH;$/;"	m	class:TNEANetMP
EdgeH	snap-exp/mmgraph-exp.h	/^  THash<TInt, TEdge> EdgeH;$/;"	m	class:TMNet
EdgeHI	snap-core/graph.h	/^    THashIter EdgeHI;$/;"	m	class:TNEGraph::TEdgeI
EdgeHI	snap-core/network.h	/^    THashIter EdgeHI;$/;"	m	class:TNEANet::TEdgeI
EdgeHI	snap-core/network.h	/^    THashIter EdgeHI;$/;"	m	class:TNodeEdgeNet::TEdgeI
EdgeHI	snap-core/networkmp.h	/^    THashIter EdgeHI;$/;"	m	class:TNEANetMP::TEdgeI
EdgeHI	snap-exp/mmgraph-exp.h	/^    THashIter EdgeHI;$/;"	m	class:TMNet::TEdgeI
EdgeInfoH	snap-adv/cascnetinf.h	/^  THash<TIntPr, TEdgeInfo> EdgeInfoH;$/;"	m	class:TNetInfBs
EdgeMotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::EdgeMotifAdjacency(PNGraph graph, WeightVH& weights) {$/;"	f	class:MotifCluster
EdgeMotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::EdgeMotifAdjacency(PUNGraph graph, WeightVH& weights) {$/;"	f	class:MotifCluster
EdgeNum	snap-core/flow.cpp	/^  int &EdgeNum (int NId) {$/;"	f	class:TSnap::TPRManager
EdgeNumsV	snap-core/flow.cpp	/^  TIntV EdgeNumsV;$/;"	m	class:TSnap::TPRManager	file:
EdgeSignStat	snap-exp/signnet.cpp	/^void TSignNet::EdgeSignStat() const {$/;"	f	class:TSignNet
EdgeSzV	snap-exp/mmgraph-exp.h	/^  TIntV EdgeSzV; \/\/ maintain the number of edges of each type$/;"	m	class:TMNet
EdgeV	snap-core/ghash.h	/^  TIntPrV EdgeV;  \/\/ renumbers the graph (node Ids 0..nodes-1)$/;"	m	class:TGraphKey
EdgeV	snap-core/ghash.h	/^  TIntPrV EdgeV;$/;"	m	class:TSimpleGraph
Edges	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMaMaEdge** Edges;$/;"	m	class:TMatchingMachine
Edges	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMaMaEdge** Edges;$/;"	m	class:TMatchingMachine
Edges	snap-adv/kronecker.h	/^  double Edges, Hairpins, Tripins, Triads;$/;"	m	class:TKronMomentsFit
Edges	snap-adv/ncp.h	/^    TInt Nodes, Edges, CutSz; \/\/ nodes inside, edges inside, edges cut$/;"	m	class:TLocClustStat::TCutInfo
Edges2	snap-adv/ncp.h	/^  int Nodes, Edges2;       \/\/ Nodes, 2*edges in Graph$/;"	m	class:TLocClust
EdgesCheck	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual bool EdgesCheck(int SId, int CId, int* Solution, bool* Matched) {$/;"	f	class:SubGISolver
EdgesCheck	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual bool EdgesCheck(int SId, int CId, int* Solution, bool* Matched) {$/;"	f	class:TInducedSubGISolver
EdgesCheck	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  bool EdgesCheck(int SId, int CId, int* Solution, bool* Matched) {$/;"	f	class:TInducedSubGISolver
EdgesCheck	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  bool EdgesCheck(int SId, int CId, int* Solution, bool* Matched) {$/;"	f	class:TIsoGISolver
EdgesCheck	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  bool EdgesCheck(int SId, int CId, int* Solution, bool* Matched) {$/;"	f	class:TSubGISolver
EdgesSizes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* EdgesSizes;$/;"	m	class:TMatchingMachine
EdgesSizes	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* EdgesSizes;$/;"	m	class:TMatchingMachine
EigSymmetricTridiag	glib-core/linalg.cpp	/^void TNumericalStuff::EigSymmetricTridiag(TFltV& d, TFltV& e, int n, TFltVV& z) {$/;"	f	class:TNumericalStuff
ElecTm	snap-exp/wikinet.h	/^  TSecTm ElecTm;               \/\/ time of election$/;"	m	class:TWikiUsr
ElecTm	snap-exp/wikinet.h	/^  TSecTm ElecTm;$/;"	m	class:TWikiElec
ElecV	snap-exp/wikinet.h	/^  TVec<TWikiElec> ElecV;    \/\/ Vector of elections$/;"	m	class:TWikiElecBs
ElemCnt	glib-core/shash.h	/^  TInt ElemCnt;$/;"	m	class:TKeyDatFl
Empty	glib-core/bd.h	/^  bool Empty() const { return Addr==NULL;}$/;"	f	class:TPt
Empty	glib-core/bd.h	/^  bool Empty() const {return Bf[0]==0;}$/;"	f	class:TSStr
Empty	glib-core/bits.h	/^  bool Empty() const {$/;"	f	class:TFSet
Empty	glib-core/bits.h	/^  bool Empty() const {return B1==0;}$/;"	f	class:TB8Set
Empty	glib-core/bits.h	/^  bool Empty() const {return B4==0;}$/;"	f	class:TB32Set
Empty	glib-core/blobbs.h	/^  bool Empty() const {return Addr==TUInt::Mx;}$/;"	f
Empty	glib-core/ds.h	/^  bool Empty() const {return Addr==NULL;}$/;"	f	class:TAPt
Empty	glib-core/ds.h	/^  bool Empty() const {return First==Last;}$/;"	f	class:TQQueue
Empty	glib-core/ds.h	/^  bool Empty() const {return Nds==0;}$/;"	f	class:TLst
Empty	glib-core/ds.h	/^  bool Empty() const {return V.Empty();}$/;"	f	class:PVec
Empty	glib-core/ds.h	/^  bool Empty() const {return ValV.Len()==0;}$/;"	f	class:TVVVec
Empty	glib-core/ds.h	/^  bool Empty() const {return ValV.Len()==0;}$/;"	f	class:TVVec
Empty	glib-core/ds.h	/^  bool Empty() const {return Vals==0;}$/;"	f	class:TVec
Empty	glib-core/ds.h	/^  bool Empty(){return ValV.Len()==0;}$/;"	f	class:TSStack
Empty	glib-core/dt.h	/^  bool Empty() const {return BfL==0;}$/;"	f
Empty	glib-core/fl.h	/^  bool Empty(){return GetFLen()==0;}$/;"	f
Empty	glib-core/hash.h	/^  bool Empty() const { return ! Len(); }$/;"	f
Empty	glib-core/hash.h	/^  bool Empty() const {return Len()==0;}$/;"	f	class:THash
Empty	glib-core/hashmp.h	/^  bool Empty() const {return Len()==0;}$/;"	f	class:THashMP
Empty	glib-core/shash.h	/^  bool Empty() const { return Buckets == 0; }$/;"	f	class:TSparseGroup
Empty	glib-core/shash.h	/^  bool Empty() const { return Len() == 0; }$/;"	f	class:TSparseHash
Empty	glib-core/shash.h	/^  bool Empty() const { return Len() == 0; }$/;"	f	class:TSparseSet
Empty	glib-core/shash.h	/^  bool Empty() const { return Vals == 0; }$/;"	f	class:TSparseTable
Empty	glib-core/shash.h	/^  bool Empty() const {return Len()==0; }$/;"	f	class:THashSet
Empty	glib-core/shash.h	/^  bool Empty() const {return Vals==0; }$/;"	f	class:TPackVec
Empty	glib-core/unicode.h	/^	bool Empty() const { return singles.Empty() && pairs.Empty() && roots.Empty(); }$/;"	f	class:TUniTrie
Empty	glib-core/unicodestring.h	/^  bool Empty() const {return UniChV.Empty();}$/;"	f	class:TUStr
Empty	glib-core/wch.h	/^  bool Empty() const {return WChV.Empty();}$/;"	f	class:TWChA
Empty	snap-adv/kronecker.h	/^  bool Empty() const { return SeedMtx.Empty(); }$/;"	f	class:TKronMtx
Empty	snap-adv/mag.h	/^  bool Empty() const { return SeedMtx.Empty(); }$/;"	f	class:TMAGAffMtx
Empty	snap-core/bignet.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TBigNet
Empty	snap-core/cncom.h	/^  bool Empty() const { return NIdV.Empty(); }$/;"	f	class:TCnCom
Empty	snap-core/gbase.h	/^  bool Empty() const { return HeapV.Empty(); }$/;"	f	class:THeap
Empty	snap-core/gbase.h	/^  bool Empty() const {return First==Last;}$/;"	f	class:TSnapQueue
Empty	snap-core/ghash.h	/^  bool Empty() const { return GraphH.Empty(); }$/;"	f	class:TGHash
Empty	snap-core/graph.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TBPGraph
Empty	snap-core/graph.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNEGraph
Empty	snap-core/graph.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNGraph
Empty	snap-core/graph.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TUNGraph
Empty	snap-core/graphmp.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNGraphMP
Empty	snap-core/gstat.h	/^  bool Empty() const { return GStatV.Empty(); }$/;"	f	class:TGStatVec
Empty	snap-core/network.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TDirNet
Empty	snap-core/network.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNEANet
Empty	snap-core/network.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNodeEDatNet
Empty	snap-core/network.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNodeEdgeNet
Empty	snap-core/network.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNodeNet
Empty	snap-core/network.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TUndirNet
Empty	snap-core/networkmp.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TNEANetMP
Empty	snap-exp/graphmp-exp.h	/^  bool Empty() const { return GetNodes()==0; }$/;"	f	class:TUNGraphMP
EmptyAND	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	bool EmptyAND(TSBitSet &b){$/;"	f	class:TSBitSet
EmptyFSet	glib-core/bits.cpp	/^const TFSet TFSet::EmptyFSet;$/;"	m	class:TFSet	file:
EmptyFSet	glib-core/bits.h	/^  static const TFSet EmptyFSet;$/;"	m	class:TFSet
EmptyV	snap-core/gstat.cpp	/^const TFltPrV TGStat::EmptyV = TFltPrV();$/;"	m	class:TGStat	file:
EmptyV	snap-core/gstat.h	/^  static const TFltPrV EmptyV;$/;"	m	class:TGStat
EmptyVal	glib-core/ds.h	/^  TVal EmptyVal;                \/\/ Empty value\/vector$/;"	m	class:TVecPool
EmptyVal	glib-core/ds.h	/^  TVal EmptyVal;           \/\/ empty vector$/;"	m	class:TGLib_OLD::TVecPool
EmptyWChA	glib-core/wch.cpp	/^TWChA TWChA::EmptyWChA;$/;"	m	class:TWChA	file:
EmptyWChA	glib-core/wch.h	/^  static TWChA EmptyWChA;$/;"	m	class:TWChA
EnableLnTrunc	glib-core/fl.h	/^  void EnableLnTrunc(const int& _MxLnLen){MxLnLen=_MxLnLen;}$/;"	f	class:TSOut
Encode	glib-core/md5.cpp	/^void TMd5::Encode(uint1 *output, uint4 *input, uint4 len){$/;"	f	class:TMd5
EncodeUrlStr	glib-core/url.h	/^  static TStr EncodeUrlStr(const TStr& Str){return GetUrlSearchStr(Str);}$/;"	f
EncodeUtf16ToBytes	glib-core/unicode.h	/^	int EncodeUtf16ToBytes(const TIntV& src, TIntV& dest, const bool insertBom,$/;"	f	class:TUnicode
EncodeUtf16ToBytes	glib-core/unicode.h	/^size_t TUniCodec::EncodeUtf16ToBytes($/;"	f	class:TUniCodec
EncodeUtf16ToWords	glib-core/unicode.h	/^	int EncodeUtf16ToWords(const TIntV& src, TIntV& dest, const bool insertBom,$/;"	f	class:TUnicode
EncodeUtf16ToWords	glib-core/unicode.h	/^size_t TUniCodec::EncodeUtf16ToWords($/;"	f	class:TUniCodec
EncodeUtf8	glib-core/unicode.cpp	/^TStr TUnicode::EncodeUtf8(const uint& Ch) {$/;"	f	class:TUnicode
EncodeUtf8	glib-core/unicode.cpp	/^void TUnicode::EncodeUtf8(const uint& c, TChA& dest) {$/;"	f	class:TUnicode
EncodeUtf8	glib-core/unicode.h	/^	int EncodeUtf8(const TIntV& src, TIntV& dest) const { return (int) codec.EncodeUtf8(src, dest); }$/;"	f	class:TUnicode
EncodeUtf8	glib-core/unicode.h	/^	size_t EncodeUtf8(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true) const { return EncodeUtf8(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TUniCodec
EncodeUtf8	glib-core/unicode.h	/^size_t TUniCodec::EncodeUtf8($/;"	f	class:TUniCodec
EncodeUtf8	glib-core/unicodestring.cpp	/^TStr TUStr::EncodeUtf8(const int& UniCh) {$/;"	f	class:TUStr
EncodeUtf8Str	glib-core/unicode.h	/^	TStr EncodeUtf8Str(const TIntV& src) const { return codec.EncodeUtf8Str(src); }$/;"	f	class:TUnicode
EncodeUtf8Str	glib-core/unicode.h	/^	template<typename TSrcVec> TStr EncodeUtf8Str(const TSrcVec& src) const { TVec<char> temp; EncodeUtf8(src, temp); temp.Add(0); TStr retVal = &(temp[0]); return retVal; }$/;"	f	class:TUniCodec
EncodeUtf8Str	glib-core/unicode.h	/^	template<typename TSrcVec> TStr EncodeUtf8Str(const TSrcVec& src, size_t srcIdx, const size_t srcCount) const { TVec<char> temp; EncodeUtf8(src, srcIdx, srcCount, temp); TStr retVal = &(temp[0]); return retVal; }$/;"	f	class:TUniCodec
End	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TIterator End() {$/;"	f	class:TSBitSet
EndCrossNetI	snap-core/mmnet.h	/^  TCrossNetI EndCrossNetI() const { return TCrossNetI(TCrossNetH.EndI(), this); }$/;"	f	class:TMMNet
EndEAFltI	snap-core/mmnet.h	/^  TAFltI EndEAFltI(const TStr& attr) const {$/;"	f	class:TCrossNet
EndEAFltI	snap-core/network.h	/^  TAFltI EndEAFltI(const TStr& attr) const {$/;"	f	class:TNEANet
EndEAFltI	snap-core/networkmp.h	/^  TAFltI EndEAFltI(const TStr& attr) const {$/;"	f	class:TNEANetMP
EndEAIntI	snap-core/mmnet.h	/^  TAIntI EndEAIntI(const TStr& attr) const {$/;"	f	class:TCrossNet
EndEAIntI	snap-core/network.h	/^  TAIntI EndEAIntI(const TStr& attr) const {$/;"	f	class:TNEANet
EndEAIntI	snap-core/networkmp.h	/^  TAIntI EndEAIntI(const TStr& attr) const {$/;"	f	class:TNEANetMP
EndEAIntVI	snap-core/network.h	/^  TAIntVI EndEAIntVI(const TStr& attr) const {$/;"	f	class:TNEANet
EndEAStrI	snap-core/mmnet.h	/^  TAStrI EndEAStrI(const TStr& attr) const {$/;"	f	class:TCrossNet
EndEAStrI	snap-core/network.h	/^  TAStrI EndEAStrI(const TStr& attr) const {$/;"	f	class:TNEANet
EndEAStrI	snap-core/networkmp.h	/^  TAStrI EndEAStrI(const TStr& attr) const {$/;"	f	class:TNEANetMP
EndEI	snap-core/bignet.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TBigNet
EndEI	snap-core/graph.h	/^  TEdgeI EndEI() const { return TEdgeI(EdgeH.EndI(), this); }$/;"	f	class:TNEGraph
EndEI	snap-core/graph.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TBPGraph
EndEI	snap-core/graph.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TNGraph
EndEI	snap-core/graph.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TUNGraph
EndEI	snap-core/graphmp.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TNGraphMP
EndEI	snap-core/network.h	/^  TEdgeI EndEI() const { return TEdgeI(EdgeH.EndI(), this); }$/;"	f	class:TNEANet
EndEI	snap-core/network.h	/^  TEdgeI EndEI() const { return TEdgeI(EdgeH.EndI(), this); }$/;"	f	class:TNodeEdgeNet
EndEI	snap-core/network.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TDirNet
EndEI	snap-core/network.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TNodeEDatNet
EndEI	snap-core/network.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TNodeNet
EndEI	snap-core/network.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TUndirNet
EndEI	snap-core/networkmp.h	/^  TEdgeI EndEI() const { return TEdgeI(EdgeH.EndI(), this); }$/;"	f	class:TNEANetMP
EndEI	snap-exp/graphmp-exp.h	/^  TEdgeI EndEI() const { return TEdgeI(EndNI(), EndNI()); }$/;"	f	class:TUNGraphMP
EndEI	snap-exp/mmgraph-exp.h	/^  TEdgeI EndEI() const { return TEdgeI(EdgeH.EndI(), this); }$/;"	f	class:TMNet
EndEdgeI	snap-core/mmnet.h	/^  TCrossEdgeI EndEdgeI() const { return TCrossEdgeI(CrossH.EndI(), this); }$/;"	f	class:TCrossNet
EndI	glib-core/ds.h	/^  TIter EndI() const {return ValT+Vals;}$/;"	f	class:TVec
EndI	glib-core/hash.h	/^  THKeyDat* EndI;$/;"	m	class:THashKeyDatI
EndI	glib-core/hash.h	/^  TIter EndI() const {return TIter(KeyDatV.EndI(), KeyDatV.EndI());}$/;"	f	class:THash
EndI	glib-core/hashmp.h	/^  TIter EndI() const {return TIter(Table.EndI(), Table.EndI());}$/;"	f	class:THashMP
EndI	glib-core/hashmp.h	/^  TPHKeyDat* EndI;$/;"	m	class:THashMPKeyDatI
EndI	glib-core/shash.h	/^  TGroupVI BegI, GroupI, EndI;$/;"	m	class:TSparseTableI
EndI	glib-core/shash.h	/^  TIter EndI() const { return TIter(GroupV.BegI(), GroupV.EndI(), GroupV.EndI()); }$/;"	f	class:TSparseTable
EndI	glib-core/shash.h	/^  TIter EndI() const { return Table.EndI(); }$/;"	f	class:TSparseHash
EndI	glib-core/shash.h	/^  TIter EndI() const { return Table.EndI(); }$/;"	f	class:TSparseSet
EndI	glib-core/shash.h	/^  TIter EndI() const {return TIter(KeyV.EndI(), KeyV.EndI()); }$/;"	f	class:THashSet
EndI	glib-core/shash.h	/^  TIter EndI() const {return ValT+Vals; }$/;"	f	class:TPackVec
EndI	glib-core/shash.h	/^  TSetKey* EndI;$/;"	m	class:THashSetKeyI
EndI	snap-adv/cascdynetinf.h	/^  THash<TInt, THitInfo>::TIter EndI() const { return NIdHitH.EndI(); }$/;"	f	class:TCascade
EndI	snap-core/ghash.h	/^  TIter EndI() const { return GraphH.EndI(); }$/;"	f	class:TGHash
EndLNI	snap-core/graph.h	/^  TNodeI EndLNI() const { return EndNI(); }$/;"	f	class:TBPGraph
EndMMNI	snap-core/mmnet.h	/^  TNodeI EndMMNI() const { return TNodeI(NodeH.EndI(), this); }$/;"	f	class:TModeNet
EndModeNetI	snap-core/mmnet.h	/^  TModeNetI EndModeNetI() const { return TModeNetI(TModeNetH.EndI(), this); }$/;"	f	class:TMMNet
EndNAFltI	snap-core/network.h	/^  TAFltI EndNAFltI(const TStr& attr) const {$/;"	f	class:TNEANet
EndNAFltI	snap-core/networkmp.h	/^  TAFltI EndNAFltI(const TStr& attr) const {$/;"	f	class:TNEANetMP
EndNAIntI	snap-core/network.h	/^  TAIntI EndNAIntI(const TStr& attr) const {$/;"	f	class:TNEANet
EndNAIntI	snap-core/networkmp.h	/^  TAIntI EndNAIntI(const TStr& attr) const {$/;"	f	class:TNEANetMP
EndNAIntVI	snap-core/network.h	/^  TAIntVI EndNAIntVI(const TStr& attr) const {$/;"	f	class:TNEANet
EndNAStrI	snap-core/network.h	/^  TAStrI EndNAStrI(const TStr& attr) const {$/;"	f	class:TNEANet
EndNAStrI	snap-core/networkmp.h	/^  TAStrI EndNAStrI(const TStr& attr) const {$/;"	f	class:TNEANetMP
EndNI	snap-core/bignet.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI(), (TVPool *)&Pool); }$/;"	f	class:TBigNet
EndNI	snap-core/graph.h	/^  TNodeI EndNI() const { return TNodeI(LeftH.EndI(), RightH.EndI()); }$/;"	f	class:TBPGraph
EndNI	snap-core/graph.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI()); }$/;"	f	class:TNGraph
EndNI	snap-core/graph.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI()); }$/;"	f	class:TUNGraph
EndNI	snap-core/graph.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI(), this); }$/;"	f	class:TNEGraph
EndNI	snap-core/graphmp.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI()); }$/;"	f	class:TNGraphMP
EndNI	snap-core/network.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI()); }$/;"	f	class:TDirNet
EndNI	snap-core/network.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI()); }$/;"	f	class:TUndirNet
EndNI	snap-core/network.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI(), this); }$/;"	f	class:TNEANet
EndNI	snap-core/network.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI(), this); }$/;"	f	class:TNodeEDatNet
EndNI	snap-core/network.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI(), this); }$/;"	f	class:TNodeEdgeNet
EndNI	snap-core/network.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI(), this); }$/;"	f	class:TNodeNet
EndNI	snap-core/networkmp.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI(), this); }$/;"	f	class:TNEANetMP
EndNI	snap-exp/graphmp-exp.h	/^  TNodeI EndNI() const { return TNodeI(NodeH.EndI()); }$/;"	f	class:TUNGraphMP
EndNI	snap-exp/mmgraph-exp.h	/^  TNodeI EndNI() const { return TNodeI(TypeNodeV.EndI(), this); }$/;"	f	class:TMNet
EndNI	snap-exp/mmgraph-exp.h	/^  TNodeI EndNI(const int& NTypeId) const { return TNodeI(TypeNodeV.GetI(NTypeId), TypeNodeV[NTypeId].NodeH.EndI(), this); }$/;"	f	class:TMNet
EndNode	snap-core/bignet.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TBigNet::TEdgeI
EndNode	snap-core/graph.h	/^    TNodeI CurNode, EndNode; \/\/ end node on the 'left'$/;"	m	class:TBPGraph::TEdgeI
EndNode	snap-core/graph.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNGraph::TEdgeI
EndNode	snap-core/graph.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TUNGraph::TEdgeI
EndNode	snap-core/graphmp.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNGraphMP::TEdgeI
EndNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TDirNet::TEdgeI
EndNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNodeEDatNet::TEdgeI
EndNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TNodeNet::TEdgeI
EndNode	snap-core/network.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TUndirNet::TEdgeI
EndNode	snap-exp/graphmp-exp.h	/^    TNodeI CurNode, EndNode;$/;"	m	class:TUNGraphMP::TEdgeI
EndOfSection	snap-exp/wikinet.cpp	/^bool EndOfSection(char* Line, const TStr& WhatStr) {$/;"	f
EndProcFile	snap-exp/memes.h	/^  virtual void EndProcFile(const TStr& FNm) { }$/;"	f	class:TQuoteLoader
EndProcFile	snap-exp/spinn3r.h	/^  virtual void EndProcFile(const TStr& FNm) { }$/;"	f	class:TSpinn3rFeedItem
EndProcFile	snap-exp/spinn3r.h	/^  virtual void EndProcFile(const TStr& FNm) { }$/;"	f	class:TSpinn3rFullItem
EndProcess	snap-exp/memes.h	/^  virtual void EndProcess(const int& PostCnt) { }$/;"	f	class:TQuoteLoader
EndProcess	snap-exp/spinn3r.h	/^  virtual void EndProcess() { }$/;"	f	class:TSpinn3rFeedItem
EndProcess	snap-exp/spinn3r.h	/^  virtual void EndProcess() { }$/;"	f	class:TSpinn3rFullItem
EndRI	snap-core/table.h	/^  TRowIterator EndRI() const { return TRowIterator(TTable::Last, this);}$/;"	f	class:TTable
EndRI	snap-exp/alternativetable.h	/^  	RowBasedRowIterator EndRI() const { return RowBasedRowIterator(RowBasedTable::Last, this);}$/;"	f	class:RowBasedTable
EndRI	snap-exp/alternativetable.h	/^  ExplicitStringRowIterator EndRI() const { return ExplicitStringRowIterator(ExplicitStringTable::Last, this);}$/;"	f	class:ExplicitStringTable
EndRIWR	snap-core/table.h	/^  TRowIteratorWithRemove EndRIWR(){ return TRowIteratorWithRemove(TTable::Last, this);}$/;"	f	class:TTable
EndRIWR	snap-exp/alternativetable.h	/^  ExplicitStringRowIteratorWithRemove EndRIWR(){ return ExplicitStringRowIteratorWithRemove(ExplicitStringTable::Last, this);}$/;"	f	class:ExplicitStringTable
EndRNI	snap-core/graph.h	/^  TNodeI EndRNI() const { return EndNI(); }$/;"	f	class:TBPGraph
EnergDistr	snap-exp/signnet.h	/^  TIntH EnergDistr;$/;"	m	class:THopfield
EnsureInit	glib-core/tm.h	/^  static void EnsureInit(){$/;"	f	class:TTmInfo
EntityNmToValH	glib-core/xml.h	/^  TStrStrH EntityNmToValH;$/;"	v
Entropy	glib-core/xmath.cpp	/^double TSpecFunc::Entropy(const TFltV& ValV) {$/;"	f	class:TSpecFunc
Entropy	glib-core/xmath.cpp	/^double TSpecFunc::Entropy(const TIntV& ValV) {$/;"	f	class:TSpecFunc
EntropyBias	glib-core/xmath.cpp	/^double TSpecFunc::EntropyBias(const double& B){$/;"	f	class:TSpecFunc
EntropyFracDim	glib-core/xmath.cpp	/^void TSpecFunc::EntropyFracDim(const TFltV& ValV, TFltV& EntropyV) {$/;"	f	class:TSpecFunc
EntropyFracDim	glib-core/xmath.cpp	/^void TSpecFunc::EntropyFracDim(const TIntV& ValV, TFltV& EntropyV) {$/;"	f	class:TSpecFunc
EnumSubGraphs	snap-core/ghash.cpp	/^void TSubGraphsEnum::EnumSubGraphs(const int& MaxEdges) {$/;"	f	class:TSubGraphsEnum
Env	glib-core/env.cpp	/^TEnv Env;$/;"	v
Eof	glib-core/fl.h	/^  bool Eof() const {return Ch==EofCh;}$/;"	f	class:TChRet
Eof	glib-core/fl.h	/^  bool Eof(){ return feof(FileId) != 0; }$/;"	f	class:TFInOut
Eof	glib-core/fl.h	/^  bool Eof(){$/;"	f	class:TFIn
Eof	glib-core/fl.h	/^  bool Eof(){return BfC==BfL;}$/;"	f	class:TMIn
Eof	glib-core/fl.h	/^  bool Eof(){return GetFPos()==GetFLen();}$/;"	f
Eof	glib-core/fl.h	/^  bool Eof(){return feof(stdin)!=0;}$/;"	f	class:TStdIn
Eof	glib-core/http.cpp	/^  bool Eof(){return AtEof;}$/;"	f	class:THttpLx
Eof	glib-core/http.cpp	/^  bool Eof(){return ChN==Chs;}$/;"	f	class:THttpChRet
Eof	glib-core/ssmp.h	/^  bool Eof() const { return FInPt->Eof(); }$/;"	f
Eof	glib-core/url.cpp	/^  bool Eof() const {return BfC==Bf.Len();};$/;"	f	class:TUrlLx
Eof	glib-core/zipfl.h	/^  bool Eof() { return CurFPos==FLen && BfC==BfL; }$/;"	f	class:TZipIn
EofCh	glib-core/dt.cpp	/^const char TCh::EofCh=char(26);$/;"	m	class:TCh	file:
EofCh	glib-core/fl.h	/^  char EofCh;$/;"	m	class:TChRet
EofCh	glib-core/url.cpp	/^  static const char EofCh;$/;"	m	class:TUrlLx	file:
EofCh	glib-core/url.cpp	/^  static const char EofCh;$/;"	m	class:TUrlLxChDef	file:
EofCh	glib-core/url.cpp	/^const char TUrlLx::EofCh=TUrlLxChDef::EofCh;$/;"	m	class:TUrlLx	file:
EofCh	glib-core/url.cpp	/^const char TUrlLxChDef::EofCh=0;$/;"	m	class:TUrlLxChDef	file:
EofChPrS	glib-core/http.cpp	/^  TBoolChS EofChPrS;$/;"	m	class:THttpLx	file:
EofStr	glib-core/lx.cpp	/^const TStr TLxSymStr::EofStr="<end-of-file>";$/;"	m	class:TLxSymStr	file:
EolnStr	glib-core/lx.cpp	/^const TStr TLxSymStr::EolnStr="<end-of-line>";$/;"	m	class:TLxSymStr	file:
EpinionsStat	snap-exp/signnet.cpp	/^void TSignMicroEvol::EpinionsStat() {$/;"	f	class:TSignMicroEvol
EpinionsTriadEvolution	snap-exp/signnet.cpp	/^void TSignMicroEvol::EpinionsTriadEvolution(const bool& OnlySimpleTriads) {$/;"	f	class:TSignMicroEvol
Epoch2Ft	glib-core/os.cpp	/^uint64 Epoch2Ft(time_t Epoch){$/;"	f
Eps	glib-core/dt.cpp	/^const double TFlt::Eps=1e-16;$/;"	m	class:TFlt	file:
Eps	snap-adv/cascnetinf.h	/^  TFlt CurProb, Alpha, Eps;$/;"	m	class:TCascade
EpsHalf	glib-core/dt.cpp	/^const double TFlt::EpsHalf  =1e-7;$/;"	m	class:TFlt	file:
EqStr	glib-core/lx.cpp	/^const TStr TLxSymStr::EqStr="=";$/;"	m	class:TLxSymStr	file:
Equation	snap-core/cmty.cpp	/^double Equation(TIntFltH& PAlpha, double& SumPAlphaLogPAlpha, TIntFltH& Qi){$/;"	f	namespace:TSnap::TSnapDetail
ErrNotFoundStatusCd	glib-core/http.cpp	/^const int THttp::ErrNotFoundStatusCd=404;$/;"	m	class:THttp	file:
ErrNotFoundStatusCd	glib-core/http.h	/^  static const int ErrNotFoundStatusCd;$/;"	m	class:THttp
ErrNotify	glib-core/bd.h	/^inline void ErrNotify(const char* NotifyCStr){$/;"	f
ErrNotify	glib-core/ut.h	/^inline void ErrNotify(const TStr& MsgStr){ErrNotify(MsgStr.CStr());}$/;"	f
ErrStatusCd	glib-core/http.cpp	/^const int THttp::ErrStatusCd=400;$/;"	m	class:THttp	file:
ErrStatusCd	glib-core/http.h	/^  static const int ErrStatusCd;$/;"	m	class:THttp
EscCh	glib-core/url.cpp	/^  static const char EscCh;$/;"	m	class:TUrlLxChDef	file:
EscCh	glib-core/url.cpp	/^const char TUrlLxChDef::EscCh='%';$/;"	m	class:TUrlLxChDef	file:
EscStrH	glib-core/html.h	/^  TStrStrH EscStrH;$/;"	v
EstABC	snap-adv/kronecker.h	/^  TFltQu EstABC(const int& R) {$/;"	f	class:TKronMomentsFit
EstParams	snap-exp/sir.h	/^void TEstEpidemParams<TEpiModel>::EstParams(const int& NIter) {$/;"	f	class:TEstEpidemParams
EstimateSizes	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
EuclDist	glib-core/linalg.cpp	/^double TLinAlg::EuclDist(const TFltPr& x, const TFltPr& y) {$/;"	f	class:TLinAlg
EuclDist	glib-core/linalg.cpp	/^double TLinAlg::EuclDist(const TFltV& x, const TFltV& y) {$/;"	f	class:TLinAlg
EuclDist2	glib-core/linalg.cpp	/^double TLinAlg::EuclDist2(const TFltPr& x, const TFltPr& y) {$/;"	f	class:TLinAlg
EuclDist2	glib-core/linalg.cpp	/^double TLinAlg::EuclDist2(const TFltV& x, const TFltV& y) {$/;"	f	class:TLinAlg
EuclideanHash	snap-exp/lsh.cpp	/^TLSHash::EuclideanHash::EuclideanHash(TFltV Line) : Line(Line) { }$/;"	f	class:TLSHash::EuclideanHash
EuclideanHash	snap-exp/lsh.cpp	/^TLSHash::EuclideanHash::EuclideanHash(TRnd &Gen, int Dim) {$/;"	f	class:TLSHash::EuclideanHash
EuclideanHash	snap-exp/lsh.h	/^  class EuclideanHash : public HashFunc {$/;"	c	class:TLSHash
Eval	snap-core/table.cpp	/^TBool TPredicate::Eval() {$/;"	f	class:TPredicate
EvalAtom	snap-core/table.h	/^		static TBool EvalAtom(T Val1, T Val2, TPredComp Cmp) {$/;"	f	class:TPredicate
EvalAtomicPredicate	snap-core/table.cpp	/^TBool TPredicate::EvalAtomicPredicate(const TAtomicPredicate& Atom) {$/;"	f	class:TPredicate
EvalMxDagNodeSwap	snap-exp/mxdag.cpp	/^int EvalMxDagNodeSwap(const PNGraph& Graph, const TIntH& NIdPosH, const int& NId1, const int& NId2) {$/;"	f	namespace:TSnap
EvalMxDagOrdering	snap-exp/mxdag.cpp	/^int EvalMxDagOrdering(const PNGraph& Graph, const TIntH& NIdPosH) {$/;"	f	namespace:TSnap
EvalMxDagOrdering	snap-exp/mxdag.cpp	/^int EvalMxDagOrdering(const PNGraph& Graph, const TIntV& NIdV) {$/;"	f	namespace:TSnap
EvalPhraseClusters	snap-exp/memes.cpp	/^int TClustNet::EvalPhraseClusters(const TIntPrV& KeepEdgeV, const bool& dump) const {$/;"	f	class:TClustNet
EvalStrAtom	snap-core/table.h	/^		static TBool EvalStrAtom(const TStr& Val1, const TStr& Val2, TPredComp Cmp) {$/;"	f	class:TPredicate
EvaluateFit	glib-core/linalg.cpp	/^double TSigmoid::EvaluateFit(const TFltIntKdV& data, const double A, const double B)$/;"	f	class:TSigmoid
EvaluateFit	glib-core/linalg.cpp	/^void TSigmoid::EvaluateFit(const TFltIntKdV& data, const double A, const double B, const double U,$/;"	f	class:TSigmoid
EvaluateFit	glib-core/linalg.cpp	/^void TSigmoid::EvaluateFit(const TFltIntKdV& data, const double A, const double B, double& J, double& JA, double& JB)$/;"	f	class:TSigmoid
EventImportance	snap-core/centr.cpp	/^TIntFltH EventImportance(const PNGraph& Graph, const int k) {$/;"	f	namespace:TSnap
EventImportance1	snap-core/centr.cpp	/^TIntFltH EventImportance1 (const PNGraph& Graph, const int k) {$/;"	f	namespace:TSnap
ExamineEdge	snap-core/cncom.h	/^  void ExamineEdge(const int& NId1, const int& NId2) { }$/;"	f	class:TArtPointVisitor
ExamineEdge	snap-core/cncom.h	/^  void ExamineEdge(const int& NId1, const int& NId2) { }$/;"	f	class:TBiConVisitor
ExamineEdge	snap-core/cncom.h	/^  void ExamineEdge(const int& NId1, const int& NId2) { }$/;"	f	class:TSccVisitor
Excess	snap-core/flow.cpp	/^  int &Excess (int NId) {$/;"	f	class:TSnap::TPRManager
ExcessV	snap-core/flow.cpp	/^  TIntV ExcessV;$/;"	m	class:TSnap::TPRManager	file:
Excl	glib-core/bits.h	/^  void Excl(const int& BitN){$/;"	f
Excl	glib-core/bits.h	/^  void Excl(const int& BitN){$/;"	f	class:TB32Set
Excl	glib-core/bits.h	/^  void Excl(const int& BitN){$/;"	f	class:TB8Set
ExclamationStr	glib-core/lx.cpp	/^const TStr TLxSymStr::ExclamationStr="!";$/;"	m	class:TLxSymStr	file:
ExeProc	glib-core/os.cpp	/^bool TSysProc::ExeProc(const TStr& ExeFNm, TStr& ParamStr) {$/;"	f	class:TSysProc
ExeProc	glib-core/os.cpp	/^bool TSysProc::ExeProc(const TStr& ExeFNm, TStr& ParamStr){$/;"	f	class:TSysProc
ExeStop	glib-core/bd.cpp	/^void ExeStop($/;"	f
ExeTm	glib-core/tm.h	/^    TExeTm ExeTm;$/;"	m	class:TTmStopWatch
ExeTm	snap-exp/memes.h	/^  TExeTm ExeTm;$/;"	m	class:TQuoteLoader
ExeTm	snap-exp/spinn3r.h	/^  TExeTm ExeTm;$/;"	m	class:TQuoteExtractor
ExeTm	snap-exp/spinn3r.h	/^  TExeTm ExeTm;$/;"	m	class:TSpinn3rFeedItem
ExeTm	snap-exp/spinn3r.h	/^  TExeTm ExeTm;$/;"	m	class:TSpinn3rFullItem
ExeTm	snap-exp/wikinet.h	/^  int PageCnt;  TExeTm ExeTm;$/;"	m	class:TWikiMetaHist
Exists	glib-core/blobbs.cpp	/^bool TGBlobBs::Exists(const TStr& BlobBsFNm){$/;"	f	class:TGBlobBs
Exists	glib-core/blobbs.cpp	/^bool TMBlobBs::Exists(const TStr& BlobBsFNm){$/;"	f	class:TMBlobBs
Exists	glib-core/fl.cpp	/^bool TFile::Exists(const TStr& FNm){$/;"	f	class:TFile
Exists	glib-core/xfl.cpp	/^bool TDir::Exists(const TStr& FPathFNm) {$/;"	f	class:TDir
ExpFit	glib-core/xmath.cpp	/^void TSpecFunc::ExpFit(const TVec<TFltPr>& XY, double& A, double& B,$/;"	f	class:TSpecFunc
Expand	snap-adv/cliques.cpp	/^void TCliqueOverlap::Expand(const THashSet<TInt>& SUBG, THashSet<TInt>& CAND) {$/;"	f	class:TCliqueOverlap
ExpandThresh	glib-core/shash.h	/^  TInt ShrinkThresh, ExpandThresh;$/;"	m	class:TSparseHash
ExpandThresh	glib-core/shash.h	/^  TInt ShrinkThresh, ExpandThresh;$/;"	m	class:TSparseSet
ExpectedSz	snap-exp/lsh.h	/^  int ExpectedSz;$/;"	m	class:TLSHash
ExplicitStringRowIterator	snap-exp/alternativetable.h	/^  ExplicitStringRowIterator(): CurrRowIdx(0), Table(NULL) {}$/;"	f	class:ExplicitStringRowIterator
ExplicitStringRowIterator	snap-exp/alternativetable.h	/^  ExplicitStringRowIterator(TInt RowIdx, const ExplicitStringTable* TablePtr): CurrRowIdx(RowIdx), Table(TablePtr) {}$/;"	f	class:ExplicitStringRowIterator
ExplicitStringRowIterator	snap-exp/alternativetable.h	/^  ExplicitStringRowIterator(const ExplicitStringRowIterator& RowI): CurrRowIdx(RowI.CurrRowIdx), Table(RowI.Table) {}$/;"	f	class:ExplicitStringRowIterator
ExplicitStringRowIterator	snap-exp/alternativetable.h	/^class ExplicitStringRowIterator{$/;"	c
ExplicitStringRowIteratorWithRemove	snap-exp/alternativetable.cpp	/^ExplicitStringRowIteratorWithRemove::ExplicitStringRowIteratorWithRemove(TInt RowIdx, ExplicitStringTable* TablePtr) :$/;"	f	class:ExplicitStringRowIteratorWithRemove
ExplicitStringRowIteratorWithRemove	snap-exp/alternativetable.h	/^  ExplicitStringRowIteratorWithRemove(): CurrRowIdx(0), Table(NULL), Start(true) {}$/;"	f	class:ExplicitStringRowIteratorWithRemove
ExplicitStringRowIteratorWithRemove	snap-exp/alternativetable.h	/^  ExplicitStringRowIteratorWithRemove(TInt RowIdx, ExplicitStringTable* TablePtr, TBool IsStart) : CurrRowIdx(RowIdx), $/;"	f	class:ExplicitStringRowIteratorWithRemove
ExplicitStringRowIteratorWithRemove	snap-exp/alternativetable.h	/^class ExplicitStringRowIteratorWithRemove {$/;"	c
ExplicitStringTable	snap-exp/alternativetable.cpp	/^ExplicitStringTable::ExplicitStringTable():$/;"	f	class:ExplicitStringTable
ExplicitStringTable	snap-exp/alternativetable.cpp	/^ExplicitStringTable::ExplicitStringTable(const Schema& TableSchema):$/;"	f	class:ExplicitStringTable
ExplicitStringTable	snap-exp/alternativetable.h	/^class ExplicitStringTable {$/;"	c
ExtChSet	glib-core/xml.h	/^  TBSet CharChSet, CombChSet, ExtChSet;$/;"	v
ExternalLStr	snap-exp/wikinet.h	/^  TChA MainLStr, TalkLStr, UserLStr, UserTalkLStr, OtherLStr, ExternalLStr; \/\/ links to other namespaces and external links$/;"	m	class:TWikiMetaLoader
ExtractEdges	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
ExtractFeatures	snap-adv/rolx.cpp	/^TIntFtrH ExtractFeatures(const PUNGraph Graph) {$/;"	f
ExtractNbrETypes	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
ExtractStarters	glib-core/unicode.h	/^	int ExtractStarters(TIntV& src) const { return (int) ucd.ExtractStarters(src); }$/;"	f	class:TUnicode
ExtractStarters	glib-core/unicode.h	/^	int ExtractStarters(const TIntV& src, TIntV& dest) const { return (int) ucd.ExtractStarters(src, dest); }$/;"	f	class:TUnicode
ExtractStarters	glib-core/unicode.h	/^	size_t ExtractStarters(TSrcVec& src) const {$/;"	f	class:TUniChDb
ExtractStarters	glib-core/unicode.h	/^	size_t ExtractStarters(const TSrcVec& src, TVec<TDestCh>& dest, bool clrDest = true) const {$/;"	f	class:TUniChDb
ExtractStarters	glib-core/unicode.h	/^size_t TUniChDb::ExtractStarters(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniChDb
F	glib-core/md5.h	/^  static uint4 F(uint4 x, uint4 y, uint4 z){return (x&y)|(~x&z);}$/;"	f
F	snap-adv/agmattr.h	/^  TVec<TIntFltH> F; \/\/ membership for each user (Size: Nodes * Coms)$/;"	m	class:TCesna
F	snap-adv/agmdirected.h	/^  TVec<TIntFltH> F; \/\/ outdegree membership for each user (Size: Nodes * Coms)$/;"	m	class:TCoda
F	snap-adv/agmfast.h	/^  TVec<TIntFltH> F; \/\/ membership for each user (Size: Nodes * Coms)$/;"	m	class:TAGMFast
F77_NAME	snap-adv/motifcluster.cpp	5;"	d	file:
F77_NAME	snap-adv/motifcluster.cpp	7;"	d	file:
FAssert	glib-core/bd.h	274;"	d
FDesc	glib-core/xfl.h	/^  WIN32_FIND_DATA FDesc;$/;"	v
FEvalH	snap-adv/kronecker.h	/^  THash<TKronMtx, TFEval> FEvalH; \/\/ cached gradients$/;"	m	class:TKronMaxLL
FExtToCmdH	glib-core/zipfl.cpp	/^TStrStrH TZipIn::FExtToCmdH;$/;"	m	class:TZipIn	file:
FExtToCmdH	glib-core/zipfl.cpp	/^TStrStrH TZipOut::FExtToCmdH;$/;"	m	class:TZipOut	file:
FExtToCmdH	glib-core/zipfl.h	/^  static TStrStrH FExtToCmdH;$/;"	m	class:TZipIn
FExtToCmdH	glib-core/zipfl.h	/^  static TStrStrH FExtToCmdH;$/;"	m	class:TZipOut
FF	glib-core/md5.h	/^  static void FF(uint4& a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac){$/;"	f
FFile	snap-exp/memes.h	/^  PFFile FFile;$/;"	m	class:TMemesDataLoader
FFile	snap-exp/memes.h	/^  TFFile FFile;$/;"	m	class:TQuoteLoader
FFile	snap-exp/spinn3r.h	/^  PFFile FFile;$/;"	m	class:TSpinn3rFullItem
FFile	snap-exp/spinn3r.h	/^  TFFile FFile;$/;"	m	class:TSpinn3rFeedItem
FFileH	glib-core/xfl.h	/^  HANDLE FFileH;$/;"	v
FFirstBlobPt	glib-core/blobbs.cpp	/^TBlobPt TGBlobBs::FFirstBlobPt(){$/;"	f	class:TGBlobBs
FFirstBlobPt	glib-core/blobbs.cpp	/^TBlobPt TMBlobBs::FFirstBlobPt(){$/;"	f	class:TMBlobBs
FFirstKeyId	glib-core/hash.h	/^  int FFirstKeyId() const {return 0-1;}$/;"	f	class:THash
FFirstKeyId	glib-core/hashmp.h	/^  int FFirstKeyId() const {return 0-1;}$/;"	f	class:THashMP
FFirstKeyId	glib-core/shash.h	/^  int FFirstKeyId() const {return 0-1; }$/;"	f	class:THashSet
FFirstKeyId	snap-core/ghash.h	/^  int FFirstKeyId() const { return 0-1; }$/;"	f	class:TGHash
FFreeBlobPtVNm	glib-core/blobbs.cpp	/^const TStr TBlobBs::FFreeBlobPtVNm="FFreeBlobPtV";$/;"	m	class:TBlobBs	file:
FFreeKeyId	glib-core/hash.h	/^  TInt FFreeKeyId, FreeKeys;$/;"	m	class:THash
FFreeKeyId	glib-core/shash.h	/^  TInt FFreeKeyId, FreeKeys;$/;"	m	class:THashSet
FG	snap-adv/cascdynetinf.cpp	/^void TNIBs::FG(const int& NId, const int& Iters, const TFltV& Steps) {$/;"	f	class:TNIBs
FIn	glib-core/shash.h	/^  TFIn FIn;$/;"	m	class:TKeyDatFl
FInPt	glib-core/ssmp.h	/^  TPt<TMIn> FInPt;      \/\/\/< Pointer to the input file stream.$/;"	v
FLT_TYPE_PREFIX	snap-core/gio.h	/^const TStr FLT_TYPE_PREFIX = ("Flt");$/;"	m	namespace:TSnap
FLen	glib-core/zipfl.h	/^  uint64 FLen, CurFPos;$/;"	m	class:TZipIn
FNextBlobPt	glib-core/blobbs.cpp	/^bool TGBlobBs::FNextBlobPt(TBlobPt& TrvBlobPt, TBlobPt& BlobPt, PSIn& BlobSIn){$/;"	f	class:TGBlobBs
FNextBlobPt	glib-core/blobbs.cpp	/^bool TMBlobBs::FNextBlobPt(TBlobPt& TrvBlobPt, TBlobPt& BlobPt, PSIn& BlobSIn){$/;"	f	class:TMBlobBs
FNextKeyId	glib-core/hash.h	/^bool THash<TKey, TDat, THashFunc>::FNextKeyId(int& KeyId) const {$/;"	f	class:THash
FNextKeyId	glib-core/hashmp.h	/^bool THashMP<TKey, TDat, THashFunc>::FNextKeyId(int& KeyId) const {$/;"	f	class:THashMP
FNextKeyId	glib-core/shash.h	/^bool THashSet<TKey, THashFunc>::FNextKeyId(int& KeyId) const {$/;"	f	class:THashSet
FNextKeyId	snap-core/ghash.h	/^  bool FNextKeyId(int& KeyId) const { return GraphH.FNextKeyId(KeyId); }$/;"	f	class:TGHash
FNm	glib-core/fl.h	/^  TSStr FNm;$/;"	v
FOut	snap-exp/spinn3r.h	/^  FILE *FOut;$/;"	m	class:TQuoteExtractor
FPrintMatrix	snap-adv/rolx.cpp	/^void FPrintMatrix(const TFltVV& Matrix, const TStr& Path) {$/;"	f
FPrintRoles	snap-adv/rolx.cpp	/^void FPrintRoles(const TIntIntH& Roles, const TStr& Path) {$/;"	f
FRnd	glib-core/ds.h	/^  PFRnd FRnd;$/;"	m	class:TFRec
FSAssert	glib-core/bd.h	277;"	d
FSet1	glib-core/blobbs.h	/^  TB8Set FSet1, FSet2, FSet3;$/;"	v
FSet2	glib-core/blobbs.h	/^  TB8Set FSet1, FSet2, FSet3;$/;"	v
FSet3	glib-core/blobbs.h	/^  TB8Set FSet1, FSet2, FSet3;$/;"	v
Fac	glib-core/xmath.h	/^  static int Fac(const int& Val){$/;"	f	class:TMath
Fail	glib-core/bd.h	238;"	d
FailR	glib-core/bd.h	240;"	d
FailRA	glib-core/bd.h	241;"	d
FalseStr	glib-core/dt.cpp	/^const TStr TBool::FalseStr="F";$/;"	m	class:TBool	file:
FastCopy	glib-core/ds.h	/^  TBool FastCopy;$/;"	m	class:TGLib_OLD::TVecPool
FastCopy	glib-core/ds.h	/^  TBool FastCopy;$/;"	m	class:TVecPool
FastCorePeriphery	snap-core/coreper.cpp	/^  int FastCorePeriphery(PUNGraph& Graph, TIntIntH& out){$/;"	f	namespace:TSnap
FastCorePeripheryGC	snap-core/coreper.cpp	/^  int FastCorePeripheryGC(PUNGraph& Graph, TIntIntH& out){$/;"	f	namespace:TSnap
FastMode	glib-core/fl.h	/^  bool FastMode;$/;"	m	class:TSIn
FebN	glib-core/tm.cpp	/^const int TTmInfo::JanN=1; const int TTmInfo::FebN=2;$/;"	m	class:TTmInfo	file:
FebN	glib-core/tm.h	/^  static const int JanN; static const int FebN;$/;"	m	class:TTmInfo
FetchIdFldNm	glib-core/http.cpp	/^const TStr THttp::FetchIdFldNm="FetchId";$/;"	m	class:THttp	file:
FetchIdFldNm	glib-core/http.h	/^  static const TStr FetchIdFldNm;$/;"	m	class:THttp
FileId	glib-core/fl.h	/^  TFileId FileId;$/;"	m	class:TFIn
FileId	glib-core/fl.h	/^  TFileId FileId;$/;"	m	class:TFInOut
FileId	glib-core/fl.h	/^  TFileId FileId;$/;"	m	class:TFOut
FileId	glib-core/fl.h	/^  TFileId FileId;$/;"	v
Fill	glib-core/bits.cpp	/^void TBSet::Fill(){$/;"	f	class:TBSet
Fill	glib-core/bits.h	/^  TB32Set& Fill(){B4=TB4Def::B4Def.MxB4; return *this;}$/;"	f	class:TB32Set
Fill	glib-core/bits.h	/^  TB8Set& Fill(){B1=TB1Def::B1Def.MxB1; return *this;}$/;"	f	class:TB8Set
FillBf	glib-core/fl.cpp	/^void TFIn::FillBf(){$/;"	f	class:TFIn
FillBf	glib-core/zipfl.cpp	/^void TZipIn::FillBf(){$/;"	f	class:TZipIn
FillBucketsByInterval	snap-core/table.cpp	/^void TTable::FillBucketsByInterval(TStr SplitAttr, TIntPrV SplitIntervals) {$/;"	f	class:TTable
FillBucketsByWindow	snap-core/table.cpp	/^void TTable::FillBucketsByWindow(TStr SplitAttr, TInt JumpSize, TInt WindowSize, TInt StartVal, TInt EndVal) {$/;"	f	class:TTable
FillFExtToCmdH	glib-core/zipfl.cpp	/^void TZipIn::FillFExtToCmdH() {$/;"	f	class:TZipIn
FillFExtToCmdH	glib-core/zipfl.cpp	/^void TZipOut::FillFExtToCmdH() {$/;"	f	class:TZipOut
FillIdentity	glib-core/linalg.cpp	/^void TLAMisc::FillIdentity(TFltVV& M) {$/;"	f	class:TLAMisc
FillIdentity	glib-core/linalg.cpp	/^void TLAMisc::FillIdentity(TFltVV& M, const double& Elt) {$/;"	f	class:TLAMisc
FillRnd	glib-core/linalg.cpp	/^void TLAMisc::FillRnd(TFltV& Vec, TRnd& Rnd) {$/;"	f	class:TLAMisc
FillRnd	glib-core/linalg.h	/^    static void FillRnd(TFltV& Vec) { TRnd Rnd(0); FillRnd(Vec, Rnd); }$/;"	f	class:TLAMisc
FillZero	glib-core/linalg.h	/^    static void FillZero(TFltV& Vec) { Vec.PutAll(0.0); }$/;"	f	class:TLAMisc
FillZero	glib-core/linalg.h	/^    static void FillZero(TFltVV& M) { Fill(M, 0.0); }$/;"	f	class:TLAMisc
FilterLowEntropy	snap-adv/agmattr.h	/^  static void FilterLowEntropy(const THash<TInt, TIntV>& OldNIDAttrH, THash<TInt, TIntV>& NewNIDAttrH, const TIntStrH& OldNameH, TIntStrH& NewNameH, const double MinFrac = 0.00001, const double MaxFrac = 0.95, const int MinCnt = 3) {$/;"	f	class:TCesnaUtil
FilterLowEntropy	snap-adv/agmattr.h	/^  static void FilterLowEntropy(const THash<TInt, TIntV>& OldNIDAttrH, THash<TInt, TIntV>& NewNIDAttrH, const double MinFrac = 0.00001, const double MaxFrac = 0.95, const int MinCnt = 3) {$/;"	f	class:TCesnaUtil
FinalHostNm	glib-core/url.h	/^  TStr FinalUrlStr, FinalHostNm;$/;"	v
FinalUrlStr	glib-core/url.h	/^  TStr FinalUrlStr, FinalHostNm;$/;"	v
Find	snap-core/gbase.cpp	/^int TUnionFind::Find(const int& Key) {$/;"	f	class:TUnionFind
FindAugV	snap-core/flow.cpp	/^int FindAugV (const PNEANet &Net, const int& CapIndex, TIntV &Flow, TIntQ &FwdNodeQ, TIntH &PredEdgeH, TIntQ &BwdNodeQ, TIntH &SuccEdgeH, TIntV &MidToSrcAugV, TIntV &MidToSnkAugV, const int& SrcNId, const int& SnkNId) {$/;"	f	namespace:TSnap
FindBestCut	snap-adv/ncp.cpp	/^const TLocClustStat::TCutInfo& TLocClustStat::FindBestCut(const int& Nodes) const {$/;"	f	class:TLocClustStat
FindBestCut	snap-adv/ncp.cpp	/^double TLocClustStat::FindBestCut(const int& Nodes, TIntV& ClustNIdV) const {$/;"	f	class:TLocClustStat
FindBestCut	snap-adv/ncp.cpp	/^double TLocClustStat::FindBestCut(const int& Nodes, const TIntSet& TabuNIdSet, int& BestCutId) const {$/;"	f	class:TLocClustStat
FindBestCut	snap-adv/ncp.cpp	/^int TLocClustStat::FindBestCut(const int& Nodes, int& Vol, int& Cut, double& Phi) const {$/;"	f	class:TLocClustStat
FindBestCut	snap-adv/ncp.cpp	/^void TLocClust::FindBestCut(const int& SeedNode, const int& ClustSz, const double& MinSizeFrac) {$/;"	f	class:TLocClust
FindCascadeRoot	examples/cascades/cascades.cpp	/^  int FindCascadeRoot(const PGraph& G, const TIntH& NIdInfTmH) { \/\/ earliest infected node$/;"	f	class:TCascadeStat
FindComs	snap-adv/agmattr.cpp	/^int TCesna::FindComs(TIntV& ComsV, const bool UseBIC, const double HOFrac, const int NumThreads, const TStr PlotLFNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCesna
FindComs	snap-adv/agmattr.cpp	/^int TCesna::FindComs(const int NumThreads, const int MaxComs, const int MinComs, const int DivComs, const TStr OutFNm, const bool UseBIC, const double HOFrac, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCesna
FindComsByAGM	snap-adv/agm.cpp	/^int TAGMUtil::FindComsByAGM(const PUNGraph& Graph, const int InitComs, const int MaxIter, const int RndSeed, const double RegGap, const double PNoCom, const TStr PltFPrx) {$/;"	f	class:TAGMUtil
FindComsByCV	snap-adv/agmdirected.cpp	/^int TCoda::FindComsByCV(TIntV& ComsV, const double HOFrac, const int NumThreads, const TStr PlotLFNm, const int EdgesForCV, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCoda
FindComsByCV	snap-adv/agmdirected.cpp	/^int TCoda::FindComsByCV(const int NumThreads, const int MaxComs, const int MinComs, const int DivComs, const TStr OutFNm, const int EdgesForCV, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCoda
FindComsByCV	snap-adv/agmfast.cpp	/^int TAGMFast::FindComsByCV(TIntV& ComsV, const double HOFrac, const int NumThreads, const TStr& PlotLFNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TAGMFast
FindComsByCV	snap-adv/agmfast.cpp	/^int TAGMFast::FindComsByCV(const int NumThreads, const int MaxComs, const int MinComs, const int DivComs, const TStr& OutFNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TAGMFast
FindEol	glib-core/fl.cpp	/^int TFIn::FindEol(int& BfN, bool& CrEnd) {$/;"	f	class:TFIn
FindEol	glib-core/fl.cpp	/^int TMIn::FindEol(uint64& BfN, bool& CrEnd) {$/;"	f	class:TMIn
FindEol	glib-core/zipfl.cpp	/^int TZipIn::FindEol(int& BfN) {$/;"	f	class:TZipIn
FindMn	glib-core/ds.h	/^int TTuple<TVal, NVals>::FindMn() const {$/;"	f	class:TTuple
FindMx	glib-core/ds.h	/^int TTuple<TVal, NVals>::FindMx() const {$/;"	f	class:TTuple
FindMxQEdge	snap-core/cmty.cpp	/^  TFltIntIntTr FindMxQEdge() {$/;"	f	class:TSnap::TSnapDetail::TCNMQMatrix
FindNextNonEmptyHashI	snap-exp/mmgraph-exp.h	/^    void FindNextNonEmptyHashI() {$/;"	f	class:TMNet::TMNodeI
FindNextSentenceBoundary	glib-core/unicode.h	/^	bool FindNextSentenceBoundary(const TIntV& src, int &position) const {$/;"	f	class:TUnicode
FindNextSentenceBoundary	glib-core/unicode.h	/^bool TUniChDb::FindNextSentenceBoundary(const TSrcVec& src, const size_t srcIdx, const size_t srcCount, size_t &position) const$/;"	f	class:TUniChDb
FindNextWordBoundary	glib-core/unicode.h	/^	bool FindNextWordBoundary(const TIntV& src, int &position) const {$/;"	f	class:TUnicode
FindNextWordBoundary	glib-core/unicode.h	/^bool TUniChDb::FindNextWordBoundary(const TSrcVec& src, const size_t srcIdx, const size_t srcCount, size_t &position) const$/;"	f	class:TUniChDb
FindPartitions	snap-exp/wikinet.cpp	/^void TWikiTalkNet::FindPartitions(const int& NPart, const bool& OnlyMinus) const {$/;"	f	class:TWikiTalkNet
FindPos	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::FindPos(const TKey& Key, int& Pos, int& PosToIns) const {$/;"	f	class:TSparseHash
FindPos	glib-core/shash.h	/^void TSparseSet<TKey, GroupSize>::FindPos(const TKey& Key, int& Pos, int& PosToIns) const {$/;"	f	class:TSparseSet
FindQtInTxtQBs	snap-exp/memes.cpp	/^PQuoteBs TQuoteBs::FindQtInTxtQBs(const TStr& InBinFNmWc, const TStrV& QuoteStrV) {$/;"	f	class:TQuoteBs
FindRoles	snap-adv/rolx.cpp	/^TIntIntH FindRoles(const TFltVV& G, const TIntIntH& NodeIdMtxIdxH) {$/;"	f
FindSentenceBoundaries	glib-core/unicode.h	/^	void FindSentenceBoundaries(const TIntV& src, TBoolV& dest) const { ucd.FindSentenceBoundaries(src, 0, src.Len(), dest); }$/;"	f	class:TUnicode
FindSentenceBoundaries	glib-core/unicode.h	/^void TUniChDb::FindSentenceBoundaries(const TSrcVec& src, const size_t srcIdx, const size_t srcCount, TBoolV& dest) const$/;"	f	class:TUniChDb
FindStableSet	snap-exp/signnet.cpp	/^int THopfield::FindStableSet(const int& NPart, const int& NRuns) {$/;"	f	class:THopfield
FindWordBoundaries	glib-core/unicode.h	/^	void FindWordBoundaries(const TIntV& src, TBoolV& dest) const { ucd.FindWordBoundaries(src, 0, src.Len(), dest); }$/;"	f	class:TUnicode
FindWordBoundaries	glib-core/unicode.h	/^void TUniChDb::FindWordBoundaries(const TSrcVec& src, const size_t srcIdx, const size_t srcCount, TBoolV& dest) const$/;"	f	class:TUniChDb
FinishNode	snap-core/cncom.h	/^  void FinishNode(const int& NId) {$/;"	f	class:TArtPointVisitor
FinishNode	snap-core/cncom.h	/^  void FinishNode(const int& NId) {$/;"	f	class:TBiConVisitor
FinishNode	snap-core/cncom.h	/^  void FinishNode(const int& NId) {$/;"	f	class:TSccVisitor
First	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			u_size_t First;	\/\/position$/;"	m	class:TSBitSet::TIterator
First	glib-core/ds.h	/^  PLstNd First() const {return FirstNd;}$/;"	f	class:TLst
First	glib-core/ds.h	/^  TInt First, Last;$/;"	m	class:TQQueue
First	snap-core/gbase.h	/^  TInt First, Last;$/;"	m	class:TSnapQueue
FirstNd	glib-core/ds.h	/^  PLstNd FirstNd;$/;"	m	class:TLst
FirstOnes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TIterator FirstOnes() {$/;"	f	class:TSBitSet
FirstTalk	snap-exp/wikinet.h	/^  TSecTm FirstTalk, LastTalk, VoteTm;$/;"	m	class:TWikiTalkEdge
FirstVal	glib-core/ds.h	/^  TVal& FirstVal() const {return FirstNd->GetVal();}$/;"	f	class:TLst
FirstValidRow	snap-core/table.h	/^  TInt FirstValidRow; \/\/\/< Physical index of first valid row.$/;"	m	class:TTable
FirstValidRow	snap-exp/alternativetable.h	/^    TInt FirstValidRow; $/;"	m	class:RowBasedTable
FirstValidRow	snap-exp/alternativetable.h	/^  TInt FirstValidRow; \/\/\/< Physical index of first valid row.$/;"	m	class:ExplicitStringTable
FixedVecBench	tutorials/demo-hashvec-benchmark.cpp	/^void FixedVecBench(const int& n) {$/;"	f
Flags	glib-core/blobbs.cpp	/^const int TBlobPt::Flags=24;$/;"	m	class:TBlobPt	file:
Flags	glib-core/blobbs.h	/^  static const int Flags;$/;"	v
Flags	snap-core/bignet.h	/^  TB32Set Flags;$/;"	m	class:TBigNet
FldNmToValH	glib-core/http.h	/^  TStrStrH FldNmToValH;$/;"	v
FldV	glib-core/ssmp.h	/^  TVec<char*> FldV;     \/\/\/< Pointers to fields of the current line.$/;"	v
FlipEdgeNoise	snap-adv/kronecker.cpp	/^int TKronNoise::FlipEdgeNoise(PNGraph& Graph, const double& Rate, const bool Random) {$/;"	f	class:TKronNoise
FlipEdgeNoise	snap-adv/kronecker.cpp	/^int TKronNoise::FlipEdgeNoise(PNGraph& Graph, const int& NEdges, const bool Random) {$/;"	f	class:TKronNoise
FlipMinusEdges	snap-exp/signnet.cpp	/^void TSignNet::FlipMinusEdges(const int&  OldSign, const int& NewSign) {$/;"	f	class:TSignNet
Flow	snap-core/flow.cpp	/^  int &Flow (int EId) {$/;"	f	class:TSnap::TPRManager
FlowV	snap-core/flow.cpp	/^  TIntV FlowV;$/;"	m	class:TSnap::TPRManager	file:
FltAttrNameEI	snap-core/mmnet.cpp	/^void TCrossNet::FltAttrNameEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TStrV& Names) const {$/;"	f	class:TCrossNet
FltAttrNameEI	snap-core/mmnet.h	/^  void FltAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TCrossNet
FltAttrNameEI	snap-core/network.cpp	/^void TNEANet::FltAttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANet
FltAttrNameEI	snap-core/network.h	/^  void FltAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANet
FltAttrNameEI	snap-core/networkmp.cpp	/^void TNEANetMP::FltAttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
FltAttrNameEI	snap-core/networkmp.h	/^  void FltAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANetMP
FltAttrNameNI	snap-core/network.cpp	/^void TNEANet::FltAttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANet
FltAttrNameNI	snap-core/network.h	/^  void FltAttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANet
FltAttrNameNI	snap-core/networkmp.cpp	/^void TNEANetMP::FltAttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
FltAttrNameNI	snap-core/networkmp.h	/^  void FltAttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANetMP
FltAttrVals	snap-core/attr.h	/^  TIntIntPrPrFltH FltAttrVals;$/;"	m	class:TAttrPair
FltAttrVals	snap-core/attr.h	/^  TIntPrFltH FltAttrVals;$/;"	m	class:TAttr
FltAttrValueEI	snap-core/mmnet.cpp	/^void TCrossNet::FltAttrValueEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TFltV& Values) const {$/;"	f	class:TCrossNet
FltAttrValueEI	snap-core/mmnet.h	/^  void FltAttrValueEI(const TInt& EId, TFltV& Values) const {$/;"	f	class:TCrossNet
FltAttrValueEI	snap-core/network.cpp	/^void TNEANet::FltAttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TFltV& Values) const {$/;"	f	class:TNEANet
FltAttrValueEI	snap-core/network.h	/^  void FltAttrValueEI(const TInt& EId, TFltV& Values) const {$/;"	f	class:TNEANet
FltAttrValueEI	snap-core/networkmp.cpp	/^void TNEANetMP::FltAttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TFltV& Values) const {$/;"	f	class:TNEANetMP
FltAttrValueEI	snap-core/networkmp.h	/^  void FltAttrValueEI(const TInt& EId, TFltV& Values) const {$/;"	f	class:TNEANetMP
FltAttrValueNI	snap-core/network.cpp	/^void TNEANet::FltAttrValueNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TFltV& Values) const {$/;"	f	class:TNEANet
FltAttrValueNI	snap-core/network.h	/^  void FltAttrValueNI(const TInt& NId, TFltV& Values) const {$/;"	f	class:TNEANet
FltAttrValueNI	snap-core/networkmp.cpp	/^void TNEANetMP::FltAttrValueNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TFltV& Values) const {$/;"	f	class:TNEANetMP
FltAttrValueNI	snap-core/networkmp.h	/^  void FltAttrValueNI(const TInt& NId, TFltV& Values) const {$/;"	f	class:TNEANetMP
FltColIndexes	snap-core/table.h	/^  THash<TStr, THash<TFlt, TIntV> > FltColIndexes; \/\/\/< Indexes for Float  Columns.$/;"	m	class:TTable
FltCols	snap-core/table.h	/^  TVec<TFltV> FltCols; \/\/\/< Data columns of floating point attributes.$/;"	m	class:TTable
FltCols	snap-exp/alternativetable.h	/^  TVec<TFltV> FltCols; \/\/\/< Data columns of floating point attributes.$/;"	m	class:ExplicitStringTable
FltCols	snap-exp/alternativetable.h	/^  TVec<TFltV> FltCols; \/\/\/< Data columns of floating point attributes.$/;"	m	class:PhysicalOrderTable
FltConst	snap-core/table.h	/^    TFlt FltConst; \/\/\/< Flt const value if this object is a float constant$/;"	m	class:TAtomicPredicate
FltDefaultsE	snap-core/mmnet.h	/^  THash<TStr, TFlt> FltDefaultsE;$/;"	m	class:TCrossNet
FltDefaultsE	snap-core/network.h	/^  THash<TStr, TFlt> FltDefaultsN, FltDefaultsE;$/;"	m	class:TNEANet
FltDefaultsE	snap-core/networkmp.h	/^  THashMP<TStr, TFlt> FltDefaultsN, FltDefaultsE;$/;"	m	class:TNEANetMP
FltDefaultsN	snap-core/network.h	/^  THash<TStr, TFlt> FltDefaultsN, FltDefaultsE;$/;"	m	class:TNEANet
FltDefaultsN	snap-core/networkmp.h	/^  THashMP<TStr, TFlt> FltDefaultsN, FltDefaultsE;$/;"	m	class:TNEANetMP
FltIsZero	snap-adv/rolx.cpp	/^bool FltIsZero(const TFlt Number) {$/;"	f
FltStr	glib-core/lx.cpp	/^const TStr TLxSymStr::FltStr="<float>";$/;"	m	class:TLxSymStr	file:
FltType	snap-core/mmnet.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TCrossNet::__anon110
FltType	snap-core/network.h	/^  enum { IntType, StrType, FltType, IntVType };$/;"	e	enum:TNEANet::__anon96
FltType	snap-core/networkmp.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TNEANetMP::__anon77
FltType	snap-exp/mmgraph-exp.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TMNet::__anon2
FltVal	snap-core/table.h	/^  TFlt FltVal;$/;"	m	class:TPrimitive
FltVals	snap-core/table.h	/^  TFltV FltVals; \/\/\/< Values of the flt columns for this row.$/;"	m	class:TTableRow
FltVars	snap-core/table.h	/^		THash<TStr, TFlt> FltVars; \/\/\/< Float variables in the current predicate tree$/;"	m	class:TPredicate
Flush	glib-core/fl.cpp	/^void TFOut::Flush(){$/;"	f	class:TFOut
Flush	glib-core/fl.cpp	/^void TFRnd::Flush(){$/;"	f	class:TFRnd
Flush	glib-core/fl.h	/^  void Flush() { IAssert(fflush(FileId) == 0); }$/;"	f	class:TFInOut
Flush	glib-core/fl.h	/^  void Flush(){fflush(stdout);}$/;"	f	class:TStdOut
Flush	glib-core/fl.h	/^  void Flush(){}$/;"	f	class:TMOut
Flush	glib-core/zipfl.cpp	/^void TZipOut::Flush(){$/;"	f	class:TZipOut
FlushBf	glib-core/fl.cpp	/^void TFOut::FlushBf(){$/;"	f	class:TFOut
FlushBf	glib-core/zipfl.cpp	/^void TZipOut::FlushBf() {$/;"	f	class:TZipOut
FlushCliques	snap-adv/motifcluster.cpp	/^void ChibaNishizekiWeighter::FlushCliques(const TIntV& U) {$/;"	f	class:ChibaNishizekiWeighter
Fmt	glib-core/dt.cpp	/^TStr TStr::Fmt(const char *FmtStr, ...){$/;"	f	class:TStr
Fold	glib-core/unicode.h	/^	void Fold(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniCaseFolding
FoldInPlace	glib-core/unicode.h	/^	void FoldInPlace(TSrcVec& src, size_t srcIdx, const size_t srcCount, const bool turkic) const$/;"	f	class:TUniCaseFolding
Forest	test/test-alg.cpp	/^  PNGraph Forest;$/;"	m	class:TreeTest	file:
FragIdStr	glib-core/url.h	/^  TStr PortStr, PathStr, SearchStr, FragIdStr;$/;"	v
FrameTagNm	glib-core/html.cpp	/^const TStr THtmlTok::FrameTagNm="<FRAME>";$/;"	m	class:THtmlTok	file:
FreeKeys	glib-core/hash.h	/^  TInt FFreeKeyId, FreeKeys;$/;"	m	class:THash
FreeKeys	glib-core/shash.h	/^  TInt FFreeKeyId, FreeKeys;$/;"	m	class:THashSet
FriN	glib-core/tm.cpp	/^const int TTmInfo::ThuN=5; const int TTmInfo::FriN=6;$/;"	m	class:TTmInfo	file:
FriN	glib-core/tm.h	/^  static const int ThuN; static const int FriN;$/;"	m	class:TTmInfo
FromHex	glib-core/dt.cpp	/^TStr& TStr::FromHex(){$/;"	f	class:TStr
FromUnicode	glib-core/unicode.h	/^	size_t FromUnicode($/;"	f	class:T8BitCodec
FromUnicode	glib-core/unicode.h	/^	size_t FromUnicode(const TIntV& src, TChA& dest, const bool clrDest = true) const { return FromUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TCodecBase
FromUnicode	glib-core/unicode.h	/^	size_t FromUnicode(const TIntV& src, TIntV& dest, const bool clrDest = true) const { return FromUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TCodecBase
FromUnicode	glib-core/unicode.h	/^	size_t FromUnicode(const TIntV& src, TStr& dest, const bool clrDest = true) const { return FromUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TCodecBase
FromUnicode	glib-core/unicode.h	/^	size_t FromUnicode(const TSrcVec& src, TDestVec& dest, const bool clrDest = true) const { return FromUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:T8BitCodec
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) { if (0 <= c && c <= 255) return c; else return -1; }$/;"	f	class:TEncoding_ISO8859_1
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) {$/;"	f	class:TEncoding_CP1250
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) {$/;"	f	class:TEncoding_CP437
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) {$/;"	f	class:TEncoding_CP852
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) {$/;"	f	class:TEncoding_ISO8859_2
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) {$/;"	f	class:TEncoding_ISO8859_3
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) {$/;"	f	class:TEncoding_ISO8859_4
FromUnicode	glib-core/unicode.h	/^	static int FromUnicode(int c) {$/;"	f	class:TEncoding_YuAscii
FromUnicode	glib-core/unicode.h	/^	virtual size_t FromUnicode(const TIntV& src, size_t srcIdx, const size_t srcCount, TChA& dest, const bool clrDest = true) const {$/;"	f	class:TCodecWrapper
FromUnicode	glib-core/unicode.h	/^	virtual size_t FromUnicode(const TIntV& src, size_t srcIdx, const size_t srcCount, TIntV& dest, const bool clrDest = true) const {$/;"	f	class:TCodecWrapper
FromUnicode	glib-core/unicode.h	/^	virtual size_t FromUnicode(const TIntV& src, size_t srcIdx, const size_t srcCount, TStr& dest, const bool clrDest = true) const {$/;"	f	class:TCodecWrapper
FrontierOutDegrees	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  unsigned int FrontierOutDegrees;$/;"	m	class:TBreathFS_Hybrid_Test
Ft2Epoch	glib-core/os.cpp	/^time_t Ft2Epoch(uint64 Ft){$/;"	f
FuncPt	glib-core/ds.h	/^  TFuncPt FuncPt;$/;"	m	class:TFunc
FuncPt	glib-core/fl.h	/^  TSOut& operator<<(TSOut&(*FuncPt)(TSOut&)){return FuncPt(*this);}$/;"	f	class:TSOut
FwdBurnProb	snap-core/ff.h	/^  TFlt FwdBurnProb, BckBurnProb, ProbDecay; \/\/ Forest Fire parameters$/;"	m	class:TFfGGen
FwdBurnProb	snap-core/ff.h	/^  TFlt FwdBurnProb, BckBurnProb, ProbDecay;$/;"	m	class:TForestFire
FwdEdge	snap-core/cncom.h	/^  void FwdEdge(const int& NId1, const int& NId2) { }$/;"	f	class:TBiConVisitor
FwdEdge	snap-core/cncom.h	/^  void FwdEdge(const int& NId1, const int& NId2) { }$/;"	f	class:TSccVisitor
FwdEdge	snap-core/cncom.h	/^  void FwdEdge(const int& NId1, const int& NId2) {$/;"	f	class:TArtPointVisitor
G	glib-core/md5.h	/^  static uint4 G(uint4 x, uint4 y, uint4 z){return (x&z)|(y&~z);}$/;"	f
G	snap-adv/agmattr.h	/^  PUNGraph G; \/\/graph to fit$/;"	m	class:TCesna
G	snap-adv/agmdirected.h	/^  PNGraph G; \/\/graph to fit$/;"	m	class:TCoda
G	snap-adv/agmdirected.h	/^  PNGraph G;$/;"	m	class:TCodaAnalyzer
G	snap-adv/agmfast.h	/^  PUNGraph G; \/\/graph to fit$/;"	m	class:TAGMFast
G	snap-adv/agmfit.h	/^  PUNGraph G; \/\/\/< Graph to fit.$/;"	m	class:TAGMFit
G	snap-adv/circles.h	/^  PUNGraph G;$/;"	m	class:TGraphAttributes
G	snap-exp/circles/circles.h	/^  PUNGraph G;$/;"	m	class:TGraphAttributes
GCC_ATOMIC	glib-core/base.h	159;"	d
GEMM_A_T	glib-core/linalg.h	/^	typedef enum { GEMM_NO_T = 0, GEMM_A_T = 1, GEMM_B_T = 2, GEMM_C_T = 4 } TLinAlgGemmTranspose;$/;"	e	enum:TLinAlg::__anon24
GEMM_B_T	glib-core/linalg.h	/^	typedef enum { GEMM_NO_T = 0, GEMM_A_T = 1, GEMM_B_T = 2, GEMM_C_T = 4 } TLinAlgGemmTranspose;$/;"	e	enum:TLinAlg::__anon24
GEMM_C_T	glib-core/linalg.h	/^	typedef enum { GEMM_NO_T = 0, GEMM_A_T = 1, GEMM_B_T = 2, GEMM_C_T = 4 } TLinAlgGemmTranspose;$/;"	e	enum:TLinAlg::__anon24
GEMM_NO_T	glib-core/linalg.h	/^	typedef enum { GEMM_NO_T = 0, GEMM_A_T = 1, GEMM_B_T = 2, GEMM_C_T = 4 } TLinAlgGemmTranspose;$/;"	e	enum:TLinAlg::__anon24
GEdgeV	snap-adv/kronecker.h	/^  TIntTrV GEdgeV;        \/\/ edge vector (for swap edge permutation proposal) \/\/\/ !!!!! MYUNGHWAN, CHECK!$/;"	m	class:TKroneckerLL
GEqStr	glib-core/lx.cpp	/^const TStr TLxSymStr::GEqStr=">=";$/;"	m	class:TLxSymStr	file:
GG	glib-core/md5.h	/^  static void GG(uint4& a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac){$/;"	f
GGenTest	test/test-ggen.cpp	/^class GGenTest { };  \/\/ For gtest highlighting$/;"	c	file:
GIOTest	test/test-gio.cpp	/^class GIOTest { };  \/\/ For gtest highlighting$/;"	c	file:
GLib_32Bit	glib-core/base.h	89;"	d
GLib_64Bit	glib-core/base.h	91;"	d
GLib_BCB	glib-core/base.h	37;"	d
GLib_BSD	glib-core/base.h	22;"	d
GLib_CYGWIN	glib-core/base.h	25;"	d
GLib_Console	glib-core/bd.h	102;"	d
GLib_CreateConsole	glib-core/bd.h	107;"	d
GLib_GCC	glib-core/base.h	40;"	d
GLib_GLIBC	glib-core/base.h	122;"	d
GLib_LINUX	glib-core/base.h	14;"	d
GLib_MACOSX	glib-core/base.h	28;"	d
GLib_MSC	glib-core/base.h	34;"	d
GLib_POSIX_1j	glib-core/base.h	126;"	d
GLib_SOLARIS	glib-core/base.h	17;"	d
GLib_UNIX	glib-core/base.h	13;"	d
GLib_UNIX	glib-core/base.h	16;"	d
GLib_UNIX	glib-core/base.h	21;"	d
GLib_UNIX	glib-core/base.h	24;"	d
GLib_UNIX	glib-core/base.h	27;"	d
GLib_WIN	glib-core/base.h	10;"	d
GLib_WIN	glib-core/base.h	7;"	d
GLib_WIN32	glib-core/base.h	8;"	d
GLib_WIN64	glib-core/base.h	11;"	d
GNmV	snap-adv/ncp.h	/^  TStrV GNmV;$/;"	m	class:TNcpGraphsBase
GS	glib-core/linalg.cpp	/^void TLinAlg::GS(TFltVV& Q) {$/;"	f	class:TLinAlg
GS	glib-core/linalg.cpp	/^void TLinAlg::GS(TVec<TFltV>& Q) {$/;"	f	class:TLinAlg
GSizeV	snap-adv/ncp.h	/^  TIntPrV GSizeV;$/;"	m	class:TNcpGraphsBase
GStatV	snap-core/gstat.h	/^  TGStatV GStatV; \/\/ each snapshot (TVec<PGStat>)$/;"	m	class:TGStatVec
GSzToPermH	snap-core/ghash.h	/^  THash<TInt, TVec<TIntV> > GSzToPermH; \/\/ Graph size to a vector of all node permutations (for graphs of up to MxIsoCkeck nodes)$/;"	m	class:TGHash
GT	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
GTE	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
GVizComGraph	snap-adv/agm.h	/^  static void GVizComGraph(const PGraph& Graph,const TVec<TIntV >& CmtyVV, const TStr& OutFNm, const TStr& Desc = TStr()){$/;"	f	class:TAGMUtil
GVizDoLayout	snap-core/gviz.cpp	/^void GVizDoLayout(const TStr& GraphInFNm, TStr OutFNm, const TGVizLayout& Layout) {$/;"	f	namespace:TSnap::TSnapDetail
GVizGetLayoutStr	snap-core/gviz.cpp	/^TStr GVizGetLayoutStr(const TGVizLayout& Layout) {$/;"	f	namespace:TSnap::TSnapDetail
GVizTest	test/test-gviz.cpp	/^class GVizTest { };  \/\/ For gtest highlighting$/;"	c	file:
Gamma	snap-adv/cascdynetinf.h	/^  TFlt Gamma, Mu, Aging;$/;"	m	class:TNIBs
Gamma	snap-exp/sir.h	/^  double Beta, Gamma;$/;"	m	class:TSirModel
GammaB	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSir2Model
GammaB	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSirSR2Model
GammaM	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSir2Model
GammaM	snap-exp/sir.h	/^  double BetaM, GammaM, BetaB, GammaB, BetaMB, BetaBM;$/;"	m	class:TSirSR2Model
GammaPSeries	glib-core/xmath.cpp	/^void TSpecFunc::GammaPSeries\/*gser*\/($/;"	f	class:TSpecFunc
GammaQ	glib-core/xmath.cpp	/^double TSpecFunc::GammaQ\/*gammq*\/(const double& a, const double& x){$/;"	f	class:TSpecFunc
GammaQContFrac	glib-core/xmath.cpp	/^void TSpecFunc::GammaQContFrac\/*gcf*\/($/;"	f	class:TSpecFunc
Gap	snap-exp/lsh.cpp	/^const int TLSHash::EuclideanHash::Gap = 4;$/;"	m	class:TLSHash::EuclideanHash	file:
Gap	snap-exp/lsh.h	/^    static const int Gap;$/;"	m	class:TLSHash::EuclideanHash
Gemm	glib-core/linalg.cpp	/^void TLinAlg::Gemm(const double& Alpha, const TFltVV& A, const TFltVV& B, const double& Beta, $/;"	f	class:TLinAlg
Gen	glib-core/bits.cpp	/^void TBSet::Gen(const int& _Bits){$/;"	f	class:TBSet
Gen	glib-core/ds.h	/^  void Gen(const TSizeTy& _MxVals, const TSizeTy& _Vals){ IAssert((0<=_Vals)&&(_Vals<=_MxVals));$/;"	f	class:TVec
Gen	glib-core/ds.h	/^  void Gen(const TSizeTy& _Vals){ IAssert(0<=_Vals);$/;"	f	class:TVec
Gen	glib-core/ds.h	/^  void Gen(const int& _MxLast=64, const int& _MxLen=-1){$/;"	f	class:TQQueue
Gen	glib-core/ds.h	/^  void Gen(const int& _XDim, const int& _YDim){$/;"	f	class:TVVec
Gen	glib-core/ds.h	/^  void Gen(const int& _XDim, const int& _YDim, const int& _ZDim){$/;"	f	class:TVVVec
Gen	glib-core/dt.h	/^  void Gen(const int& _BfL){$/;"	f
Gen	glib-core/hash.h	/^  void Gen(const int& ExpectVals){$/;"	f	class:THash
Gen	glib-core/hashmp.h	/^  void Gen(const int& ExpectVals){$/;"	f	class:THashMP
Gen	glib-core/shash.h	/^  void Gen(const int& ExpectVals) {$/;"	f	class:THashSet
Gen	glib-core/shash.h	/^  void Gen(const int& _Vals) {$/;"	f	class:TPackVec
Gen	snap-core/gbase.h	/^  void Gen(const int& MxVals, const int& MaxFirst=1024) {$/;"	f	class:TSnapQueue
Gen	snap-core/ghash.h	/^  void Gen(const int& ExpectVals) { GraphH.Gen(ExpectVals); }$/;"	f	class:TGHash
Gen2Graphs	snap-core/ghash.cpp	/^void TSubGraphsEnum::Gen2Graphs() {$/;"	f	class:TSubGraphsEnum
GenAGM	snap-adv/agm.cpp	/^PUNGraph TAGM::GenAGM(TVec<TIntV>& CmtyVV, const TFltV& CProbV, TRnd& Rnd, const double PNoCom){$/;"	f	class:TAGM
GenAGM	snap-adv/agm.cpp	/^PUNGraph TAGM::GenAGM(TVec<TIntV>& CmtyVV, const double& DensityCoef, const double& ScaleCoef, TRnd& Rnd){$/;"	f	class:TAGM
GenAGM	snap-adv/agm.cpp	/^PUNGraph TAGM::GenAGM(TVec<TIntV>& CmtyVV, const double& DensityCoef, const int TargetEdges, TRnd& Rnd){$/;"	f	class:TAGM
GenAttrMAG	snap-adv/mag.h	/^PNGraph TMAGParam<TNodeAttr>::GenAttrMAG(const TIntVV& AttrVV, const bool& IsDir, const int& Seed) {$/;"	f	class:TMAGParam
GenBaraHierar	snap-core/ggen.h	/^PGraph GenBaraHierar(const int& Levels, const bool& IsDir) {$/;"	f	namespace:TSnap
GenBlockLenV	glib-core/blobbs.cpp	/^void TBlobBs::GenBlockLenV(TIntV& BlockLenV){$/;"	f	class:TBlobBs
GenCandAndCntSupp	snap-exp/trawling.cpp	/^void TTrawling::GenCandAndCntSupp(const int& FqItemsetLen) {$/;"	f	class:TTrawling
GenCandidates	snap-exp/trawling.cpp	/^void TTrawling::GenCandidates() {$/;"	f	class:TTrawling
GenCascade	snap-adv/cascdynetinf.cpp	/^void TNIBs::GenCascade(TCascade& C) {$/;"	f	class:TNIBs
GenCascade	snap-adv/cascnetinf.cpp	/^void TNetInfBs::GenCascade(TCascade& C, const int& TModel, const double &window, TIntPrIntH& EdgesUsed, const double& delta,$/;"	f	class:TNetInfBs
GenCircle	snap-core/ggen.h	/^PGraph GenCircle(const int& Nodes, const int& NodeOutDeg, const bool& IsDir) {$/;"	f	namespace:TSnap
GenCmtyVVFromPL	snap-adv/agm.cpp	/^void TAGMUtil::GenCmtyVVFromPL(TVec<TIntV>& CmtyVV, const PUNGraph& Graph, const int& Nodes, const int& Coms, const double& ComSzAlpha, const double& MemAlpha, const int& MinSz, const int& MaxSz, const int& MinK, const int& MaxK, TRnd& Rnd){$/;"	f	class:TAGMUtil
GenCmtyVVFromPL	snap-adv/agm.cpp	/^void TAGMUtil::GenCmtyVVFromPL(TVec<TIntV>& CmtyVV, const TIntV& NIDV, const int& Nodes, const int& Coms, const double& ComSzAlpha, const double& MemAlpha, const int& MinSz, const int& MaxSz, const int& MinK, const int& MaxK, TRnd& Rnd){$/;"	f	class:TAGMUtil
GenCmtyVVFromPL	snap-adv/agm.cpp	/^void TAGMUtil::GenCmtyVVFromPL(TVec<TIntV>& CmtyVV, const int& Nodes, const int& Coms, const double& ComSzAlpha, const double& MemAlpha, const int& MinSz, const int& MaxSz, const int& MinK, const int& MaxK, TRnd& Rnd){$/;"	f	class:TAGMUtil
GenConfModel	snap-core/ggen.cpp	/^PUNGraph GenConfModel(const PUNGraph& G) {$/;"	f	namespace:TSnap
GenConfModel	snap-core/ggen.cpp	/^PUNGraph GenConfModel(const TIntV& DegSeqV, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenCopyModel	snap-core/ggen.cpp	/^PNGraph GenCopyModel(const int& Nodes, const double& Beta, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenDegSeq	snap-core/ggen.cpp	/^PUNGraph GenDegSeq(const TIntV& DegSeqV, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenDetKronecker	snap-adv/kronecker.cpp	/^PNGraph TKronMtx::GenDetKronecker(const TKronMtx& SeedMtx, const int& NIter, const bool& IsDir) {$/;"	f	class:TKronMtx
GenDir	glib-core/xfl.cpp	/^bool TDir::GenDir(const TStr& FPathFNm){$/;"	f	class:TDir
GenExt	glib-core/ds.h	/^  void GenExt(TVal *_ValT, const TSizeTy& _Vals){$/;"	f	class:TVec
GenFFGraphs	snap-core/ff.cpp	/^void TFfGGen::GenFFGraphs(const double& FProb, const double& BProb, const TStr& FNm) {$/;"	f	class:TFfGGen
GenFFreeBlobPtV	glib-core/blobbs.cpp	/^void TBlobBs::GenFFreeBlobPtV(const TIntV& BlockLenV, TBlobPtV& FFreeBlobPtV){$/;"	f	class:TBlobBs
GenFastKronecker	snap-adv/kronecker.cpp	/^PNGraph TKronMtx::GenFastKronecker(const TKronMtx& SeedMtx, const int& NIter, const bool& IsDir, const int& Seed) {$/;"	f	class:TKronMtx
GenFastKronecker	snap-adv/kronecker.cpp	/^PNGraph TKronMtx::GenFastKronecker(const TKronMtx& SeedMtx, const int& NIter, const int& Edges, const bool& IsDir, const int& Seed) {$/;"	f	class:TKronMtx
GenForestFire	snap-core/ggen.cpp	/^PNGraph GenForestFire(const int& Nodes, const double& FwdProb, const double& BckProb) {$/;"	f	namespace:TSnap
GenFull	snap-core/ggen.h	/^PGraph GenFull(const int& Nodes) {$/;"	f	namespace:TSnap
GenGeoPrefAttach	snap-core/ggen.cpp	/^PUNGraph GenGeoPrefAttach(const int& Nodes, const int& OutDeg, const double& Beta, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenGraph	snap-core/ff.cpp	/^PNGraph TForestFire::GenGraph(const int& Nodes, const double& FwdProb, const double& BckProb) {$/;"	f	class:TForestFire
GenGraph	snap-core/ff.cpp	/^TFfGGen::TStopReason TFfGGen::GenGraph(const int& GraphNodes, PGStatVec& EvolStat, const bool& FloodStop) {$/;"	f	class:TFfGGen
GenGraph	snap-core/ff.cpp	/^TFfGGen::TStopReason TFfGGen::GenGraph(const int& GraphNodes, const bool& FloodStop) {$/;"	f	class:TFfGGen
GenGrid	snap-core/ggen.h	/^PGraph GenGrid(const int& Rows, const int& Cols, const bool& IsDir) {$/;"	f	namespace:TSnap
GenHoldOutAttr	snap-adv/agmattr.h	/^  void GenHoldOutAttr(const double HOFrac, TVec<TIntSet>& HOSetV) {$/;"	f	class:TCesna
GenHoldOutPairs	snap-adv/agmattr.h	/^  static void GenHoldOutPairs(const PGraph& G, TVec<TIntSet>& HoldOutSet, double HOFrac, TRnd& Rnd)  {$/;"	f	class:TCesnaUtil
GenHoldOutPairs	snap-adv/agmfast.h	/^  static void GenHoldOutPairs(const PGraph& G, TVec<TIntSet>& HoldOutSet, double HOFrac, TRnd& Rnd)  {$/;"	f	class:TAGMFastUtil
GenKronecker	snap-adv/kronecker.cpp	/^PNGraph TKronMtx::GenKronecker(const TKronMtx& SeedMtx, const int& NIter, const bool& IsDir, const int& Seed) {$/;"	f	class:TKronMtx
GenMAG	snap-adv/mag.h	/^PNGraph TMAGParam<TNodeAttr>::GenMAG(TIntVV& AttrVV, const bool& IsDir, const int& Seed) {$/;"	f	class:TMAGParam
GenMtx	snap-adv/kronecker.h	/^  void GenMtx(const int& Dim) { MtxDim=Dim;  SeedMtx.Gen(Dim*Dim); }$/;"	f	class:TKronMtx
GenMtx	snap-adv/mag.h	/^  void GenMtx(const int& Dim) { MtxDim=Dim;  SeedMtx.Gen(Dim*Dim); }$/;"	f	class:TMAGAffMtx
GenPLSeq	snap-adv/agm.cpp	/^void TAGMUtil::GenPLSeq(TIntV& SzSeq, const int& SeqLen, const double& Alpha, TRnd& Rnd, const int& Min, const int& Max) {$/;"	f	class:TAGMUtil
GenPrefAttach	snap-core/ggen.cpp	/^PUNGraph GenPrefAttach(const int& Nodes, const int& NodeOutDeg, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRMat	snap-core/ggen.cpp	/^PNGraph GenRMat(const int& Nodes, const int& Edges, const double& A, const double& B, const double& C, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRMatEpinions	snap-core/ggen.cpp	/^PNGraph GenRMatEpinions() {$/;"	f	namespace:TSnap
GenRandomTree	glib-core/ds.h	/^void TTree<TVal>::GenRandomTree(const int& Nodes, TRnd& Rnd){$/;"	f	class:TTree
GenRewire	snap-core/ggen.cpp	/^PBPGraph GenRewire(const PBPGraph& OrigGraph, const int& NSwitch, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRewire	snap-core/ggen.cpp	/^PNGraph GenRewire(const PNGraph& OrigGraph, const int& NSwitch, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRewire	snap-core/ggen.cpp	/^PUNGraph GenRewire(const PUNGraph& OrigGraph, const int& NSwitch, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRndBipart	snap-core/ggen.cpp	/^PBPGraph GenRndBipart(const int& LeftNodes, const int& RightNodes, const int& Edges, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRndDegK	snap-core/ggen.cpp	/^PUNGraph GenRndDegK(const int& Nodes, const int& NodeDeg, const int& NSwitch, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRndGnm	snap-core/ggen.h	/^PGraph GenRndGnm(const int& Nodes, const int& Edges, const bool& IsDir, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenRndGnm	tutorials/demo-topology-benchmark.cpp	/^PGraph GenRndGnm(const int& Nodes, const int& Edges, const bool& IsDir, TRnd& Rnd) {$/;"	f
GenRndGraph	snap-adv/kronecker.cpp	/^PNGraph TKronMtx::GenRndGraph(const double& RndFact) const {$/;"	f	class:TKronMtx
GenRndPowerLaw	snap-core/ggen.cpp	/^PUNGraph GenRndPowerLaw(const int& Nodes, const double& PowerExp, const bool& ConfModel, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenSmallExample1	snap-exp/linkpred.cpp	/^void TLpExample::GenSmallExample1() {$/;"	f	class:TLpExample
GenSmallExample1	snap-exp/linkpred.cpp	/^void TLpExample::GenSmallExample1() {$/;"	f	class:__OLD__::TLpExample
GenSmallExample2	snap-exp/linkpred.cpp	/^void TLpExample::GenSmallExample2() {$/;"	f	class:TLpExample
GenSmallExample2	snap-exp/linkpred.cpp	/^void TLpExample::GenSmallExample2() {$/;"	f	class:__OLD__::TLpExample
GenSmallWorld	snap-core/ggen.cpp	/^PUNGraph GenSmallWorld(const int& Nodes, const int& NodeOutDeg, const double& RewireProb, TRnd& Rnd) {$/;"	f	namespace:TSnap
GenStar	snap-core/ggen.h	/^PGraph GenStar(const int& Nodes, const bool& IsDir) {$/;"	f	namespace:TSnap
GenThreshGraph	snap-adv/kronecker.cpp	/^PNGraph TKronMtx::GenThreshGraph(const double& Thresh) const {$/;"	f	class:TKronMtx
GenTree	snap-core/ggen.h	/^PGraph GenTree(const int& Fanout, const int& Levels, const bool& IsDir, const bool& ChildPointsToParent) {$/;"	f	namespace:TSnap
GenZeros	glib-core/dt.h	/^  void GenZeros(const int& _BfL){$/;"	f
GenerateBaraHierarGraph	tutorials/demo-ggen.cpp	/^void GenerateBaraHierarGraph() {$/;"	f
GenerateCircleGraph	tutorials/demo-ggen.cpp	/^void GenerateCircleGraph() {$/;"	f
GenerateComplicatedGraph	test/test-alg.cpp	/^  PGraph GenerateComplicatedGraph(const PGraph& Graph) {$/;"	f	class:GraphTest
GenerateComplicatedGraphWithLoop	test/test-alg.cpp	/^  PGraph GenerateComplicatedGraphWithLoop(const PGraph& Graph) {$/;"	f	class:GraphTest
GenerateCopyModelGraph	tutorials/demo-ggen.cpp	/^void GenerateCopyModelGraph() {$/;"	f
GenerateDegSeqGraph	tutorials/demo-ggen.cpp	/^void GenerateDegSeqGraph() {$/;"	f
GenerateForestFireGraph	tutorials/demo-ggen.cpp	/^void GenerateForestFireGraph() {$/;"	f
GenerateFullGraph	tutorials/demo-ggen.cpp	/^void GenerateFullGraph() {$/;"	f
GenerateGeoPrefAttachGraph	tutorials/demo-ggen.cpp	/^void GenerateGeoPrefAttachGraph() {$/;"	f
GenerateGridGraph	tutorials/demo-ggen.cpp	/^void GenerateGridGraph() {$/;"	f
GenerateLoopGraph	test/test-alg.cpp	/^  PGraph GenerateLoopGraph(const PGraph& Graph) {$/;"	f	class:GraphTest
GenerateLoopGraph	tutorials/demo-alg.cpp	/^PNGraph GenerateLoopGraph(const PNGraph& Graph) {$/;"	f
GenerateNodes	test/test-alg.cpp	/^  void GenerateNodes(const PGraph& Graph, int NumNodes = 5) {$/;"	f	class:GraphTest
GenerateNodes	tutorials/demo-alg.cpp	/^void GenerateNodes(const PNGraph& Graph, int NumNodes = 5) {$/;"	f
GeneratePrefAttachGraph	tutorials/demo-ggen.cpp	/^void GeneratePrefAttachGraph() {$/;"	f
GenerateRMatGraph	tutorials/demo-ggen.cpp	/^void GenerateRMatGraph() {$/;"	f
GenerateRecursiveFeatures	snap-adv/rolx.cpp	/^TIntFtrH GenerateRecursiveFeatures(const PUNGraph Graph,$/;"	f
GenerateReverseTree	test/test-alg.cpp	/^  PGraph GenerateReverseTree(const PGraph& Graph) {$/;"	f	class:GraphTest
GenerateRndBipartGraph	tutorials/demo-ggen.cpp	/^void GenerateRndBipartGraph() {$/;"	f
GenerateRndGnmGraph	tutorials/demo-ggen.cpp	/^void GenerateRndGnmGraph() {$/;"	f
GenerateRndPowerLawGraph	tutorials/demo-ggen.cpp	/^void GenerateRndPowerLawGraph() {$/;"	f
GenerateSmallWorldGraph	tutorials/demo-ggen.cpp	/^void GenerateSmallWorldGraph() {$/;"	f
GenerateStarGraph	tutorials/demo-ggen.cpp	/^void GenerateStarGraph() {$/;"	f
GenerateTreeGraph	tutorials/demo-ggen.cpp	/^void GenerateTreeGraph() {$/;"	f
Get	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	bool Get(size_t Pos) {$/;"	f	class:TSBitSet
Get	glib-core/fl.h	/^  int Get() const {return Val;}$/;"	f	class:TCs
Get	glib-core/shash.h	/^  const TVal& Get(const int& ValN) const { return GroupV[GroupNum(ValN)].Get(PosInGroup(ValN)); }$/;"	f	class:TSparseTable
Get	glib-core/shash.h	/^  const TVal& Get(const int& ValN) const {$/;"	f	class:TSparseGroup
Get0s	glib-core/bits.h	/^  int Get0s() const {return Bits-Get1s();}$/;"	f	class:TB32Set
Get0s	glib-core/bits.h	/^  int Get0s() const {return Bits-Get1s();}$/;"	f	class:TB8Set
Get0s	glib-core/bits.h	/^  int Get0s(){return Bits-Get1s();}$/;"	f
Get1CnCom	snap-core/cncom.cpp	/^void Get1CnCom(const PUNGraph& Graph, TCnComV& Cn1ComV) {$/;"	f	namespace:TSnap
Get1CnComSzCnt	snap-core/cncom.cpp	/^void Get1CnComSzCnt(const PUNGraph& Graph, TIntPrV& SzCntV) {$/;"	f	namespace:TSnap
Get1DVec	glib-core/ds.h	/^  TVec<TVal>& Get1DVec(){return ValV;}$/;"	f	class:TVVec
Get1s	glib-core/bits.cpp	/^int TBSet::Get1s(){$/;"	f	class:TBSet
Get1s	glib-core/bits.h	/^  int Get1s() const {return TB1Def::B1Def.GetB1Bits(B1);}$/;"	f	class:TB8Set
Get1s	glib-core/bits.h	/^  int Get1s() const {return TB4Def::B4Def.GetB4Bits(B4);}$/;"	f	class:TB32Set
Get1stEdgeNet	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::Get1stEdgeNet() const {$/;"	f	class:TTimeNENet
Get3GramRoot	glib-core/unicode.h	/^	int Get3GramRoot(const TItem& last, const TItem& butLast, const TItem& butButLast) const {$/;"	f	class:TUniTrie
GetAbs	glib-core/url.cpp	/^void TUrl::GetAbs(const TStr& AbsUrlStr){$/;"	f	class:TUrl
GetAbsErr	snap-adv/kronecker.h	/^  double GetAbsErr() const { return fabs(pow((double)Graph->GetEdges(), 1.0\/double(KronIters)) - ProbMtx.GetMtxSum()); }$/;"	f	class:TKroneckerLL
GetAbsFromBase	glib-core/url.cpp	/^void TUrl::GetAbsFromBase(const TStr& RelUrlStr, const TStr& BaseUrlStr){$/;"	f	class:TUrl
GetAbsSecs	glib-core/tm.h	/^  uint GetAbsSecs() const {return AbsSecs();}$/;"	f	class:TSecTm
GetActorGraph	snap-exp/imdbnet.cpp	/^PUNGraph TImdbNet::GetActorGraph() const  { $/;"	f	class:TImdbNet
GetAdamicAdar	snap-exp/linkpred.cpp	/^double GetAdamicAdar(const PGraph& Graph, const int& SrcNId, const int& DstNId) {$/;"	f
GetAdamicAdar	snap-exp/linkpred.cpp	/^void GetAdamicAdar(const PGraph& Graph, const int& SrcNId, THash<TInt, TFlt>& AaNIdH) {$/;"	f
GetAddDat	glib-core/ds.h	/^  TVal& GetAddDat(const TVal& Val){ AssertR(MxVals!=-1, "This vector was obtained from TVecPool. Such vectors cannot change its size!");$/;"	f	class:TVec
GetAddWIdV	snap-core/util.cpp	/^void TStrUtil::GetAddWIdV(TStrHash<TInt>& StrH, const char *CStr, TIntV& WIdV) {$/;"	f	class:TStrUtil
GetAddr	glib-core/blobbs.h	/^  uint GetAddr() const {return Addr;}$/;"	f
GetAddrStr	glib-core/blobbs.h	/^  TStr GetAddrStr() const {$/;"	f
GetAdjSize	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int GetAdjSize(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int Id) {$/;"	f
GetAdjSize	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^int GetAdjSize(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int Id) {$/;"	f
GetAdminSet	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetAdminSet(TIntSet& AdminSet) const {$/;"	f	class:TWikiElecBs
GetAdminTmSet	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetAdminTmSet(THash<TInt, TSecTm>& AdminSet) const {$/;"	f	class:TWikiElecBs
GetAdminUsrVoteNet	snap-exp/wikinet.cpp	/^PSignNet TWikiElecBs::GetAdminUsrVoteNet() const {$/;"	f	class:TWikiElecBs
GetAllCandidatePairs	snap-exp/lsh.cpp	/^TVec<TPair<TFltV, TFltV> > TLSHash::GetAllCandidatePairs() {$/;"	f	class:TLSHash
GetAllCascProb	snap-adv/cascnetinf.cpp	/^double TNetInfBs::GetAllCascProb(const int& EdgeN1, const int& EdgeN2) {$/;"	f	class:TNetInfBs
GetAllCmtyVV	snap-adv/agmdirected.h	/^  void GetAllCmtyVV(TVec<TIntV>& CmtyVV, const int MinSz) {$/;"	f	class:TCodaAnalyzer
GetAllCodecs	glib-core/unicode.h	/^	void GetAllCodecs(TCodecBaseV& dest) const {$/;"	f	class:TUnicode
GetAllEdCnt	snap-exp/wikinet.h	/^  int GetAllEdCnt() const { return MnEdCnt+WkEdCnt+MnTkEdCnt+WkTkEdCnt; }$/;"	f	class:TWikiUsr
GetAllNearPairs	snap-exp/lsh.cpp	/^TVec<TPair<TFltV, TFltV> > TLSHash::GetAllNearPairs() {$/;"	f	class:TLSHash
GetAllUsrVoteNet	snap-exp/wikinet.cpp	/^PSignNet TWikiElecBs::GetAllUsrVoteNet() const {$/;"	f	class:TWikiElecBs
GetAllWrdCnt	snap-exp/wikinet.h	/^  int GetAllWrdCnt() const { return MnEdWrds+WkEdWrds+MnTkEdWrds+WkTkEdWrds; }$/;"	f	class:TWikiUsr
GetAllocInfo	glib-core/blobbs.cpp	/^void TBlobBs::GetAllocInfo($/;"	f	class:TBlobBs
GetAlpha	snap-adv/cascnetinf.h	/^  double GetAlpha() const { return Alpha; }$/;"	f	class:TCascade
GetAnf	snap-core/anf.h	/^void GetAnf(const PGraph& Graph, TIntFltKdV& DistNbrsV, const int& MxDist, const bool& IsDir, const int& NApprox) {$/;"	f	namespace:TSnap
GetAnf	snap-core/anf.h	/^void GetAnf(const PGraph& Graph, const int& SrcNId, TIntFltKdV& DistNbrsV, const int& MxDist, const bool& IsDir, const int& NApprox) {$/;"	f	namespace:TSnap
GetAnfEffDiam	snap-core/anf.h	/^double GetAnfEffDiam(const PGraph& Graph, const bool& IsDir, const double& Percentile, const int& NApprox) {$/;"	f	namespace:TSnap
GetAnfEffDiam	snap-core/anf.h	/^double GetAnfEffDiam(const PGraph& Graph, const int NRuns, int NApprox) {$/;"	f	namespace:TSnap
GetApxEmptyGraphDLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::GetApxEmptyGraphDLL(const int& ParamId) const {$/;"	f	class:TKroneckerLL
GetApxEmptyGraphLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::GetApxEmptyGraphLL() const {$/;"	f	class:TKroneckerLL
GetApxNoEdgeDLL	snap-adv/kronecker.cpp	/^double TKronMtx::GetApxNoEdgeDLL(const int& ParamId, int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetApxNoEdgeLL	snap-adv/kronecker.cpp	/^double TKronMtx::GetApxNoEdgeLL(int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetArg	glib-core/env.h	/^  TStr GetArg(const int& ArgN) const {$/;"	f	class:TEnv
GetArgPostfix	glib-core/env.cpp	/^TStr TEnv::GetArgPostfix(const TStr& PrefixStr) const {$/;"	f	class:TEnv
GetArgs	glib-core/env.h	/^  int GetArgs() const {return ArgV.Len();}$/;"	f	class:TEnv
GetArrVal	glib-core/json.h	/^  PJsonVal GetArrVal(const int& ValN) const {return ValV[ValN];}$/;"	f
GetArrVals	glib-core/json.h	/^  int GetArrVals() const {EAssert(IsArr()); return ValV.Len();}$/;"	f
GetArtPoints	snap-core/cncom.cpp	/^void GetArtPoints(const PUNGraph& Graph, TIntV& ArtNIdV) {$/;"	f	namespace:TSnap
GetAsFinalHostNm	glib-core/url.h	/^  TStr GetAsFinalHostNm() const {$/;"	f
GetAsFinalUrlStr	glib-core/url.h	/^  TStr GetAsFinalUrlStr() const {$/;"	f
GetAsMem	glib-core/http.h	/^  void GetAsMem(TMem& Mem) const {Mem.Clr(); Mem+=HdStr; Mem+=BodyMem;}$/;"	f
GetAsStr	glib-core/dt.cpp	/^TStr TMem::GetAsStr(const char& NewNullCh) const {$/;"	f	class:TMem
GetAsStr	glib-core/fl.cpp	/^TStr TMOut::GetAsStr() const {$/;"	f	class:TMOut
GetAsciiStr	glib-core/html.cpp	/^TStr THtmlLx::GetAsciiStr(const TChA& ChA, const char& GenericCh){$/;"	f	class:THtmlLx
GetAttList	glib-core/xml.cpp	/^void TXmlLx::GetAttList(){$/;"	f	class:TXmlLx
GetAttValue	glib-core/xml.cpp	/^TStr TXmlLx::GetAttValue(){$/;"	f	class:TXmlLx
GetAttr	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    TEdgeData* GetAttr() const { return Attr; }$/;"	f	class:TMatchingMachine::TMaMaEdge
GetAttr	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    TEdgeData* GetAttr() const { return Attr; }$/;"	f	class:TMatchingMachine::TMaMaEdge
GetAttr	snap-adv/agmattr.h	/^  double inline GetAttr(const int& NID, const int& K) {$/;"	f	class:TCesna
GetAttrENames	snap-core/network.cpp	/^void TNEANet::GetAttrENames(TStrV& IntAttrNames, TStrV& FltAttrNames, TStrV& StrAttrNames) const {$/;"	f	class:TNEANet
GetAttrIndE	snap-core/network.cpp	/^int TNEANet::GetAttrIndE(const TStr& attr) {$/;"	f	class:TNEANet
GetAttrIndN	snap-core/network.cpp	/^int TNEANet::GetAttrIndN(const TStr& attr) {$/;"	f	class:TNEANet
GetAttrNNames	snap-core/network.cpp	/^void TNEANet::GetAttrNNames(TStrV& IntAttrNames, TStrV& FltAttrNames, TStrV& StrAttrNames) const {$/;"	f	class:TNEANet
GetAttrNames	snap-core/network.h	/^    void GetAttrNames(TStrV& Names) const { Graph->AttrNameEI(GetId(), Names); }$/;"	f	class:TNEANet::TEdgeI
GetAttrNames	snap-core/network.h	/^    void GetAttrNames(TStrV& Names) const { Graph->AttrNameNI(GetId(), Names); }$/;"	f	class:TNEANet::TNodeI
GetAttrNames	snap-core/networkmp.h	/^    void GetAttrNames(TStrV& Names) const { Graph->AttrNameEI(GetId(), Names); }$/;"	f	class:TNEANetMP::TEdgeI
GetAttrNames	snap-core/networkmp.h	/^    void GetAttrNames(TStrV& Names) const { Graph->AttrNameNI(GetId(), Names); }$/;"	f	class:TNEANetMP::TNodeI
GetAttrTypeE	snap-core/mmnet.cpp	/^int TCrossNet::GetAttrTypeE(const TStr& attr) const {$/;"	f	class:TCrossNet
GetAttrTypeN	snap-core/mmnet.cpp	/^int TModeNet::GetAttrTypeN(const TStr& attr) const {$/;"	f	class:TModeNet
GetAttrVal	snap-core/network.h	/^    void GetAttrVal(TStrV& Val) const { Graph->AttrValueEI(GetId(), Val); }$/;"	f	class:TNEANet::TEdgeI
GetAttrVal	snap-core/network.h	/^    void GetAttrVal(TStrV& Val) const { Graph->AttrValueNI(GetId(), Val); }$/;"	f	class:TNEANet::TNodeI
GetAttrVal	snap-core/networkmp.h	/^    void GetAttrVal(TStrV& Val) const { Graph->AttrValueEI(GetId(), Val); }$/;"	f	class:TNEANetMP::TEdgeI
GetAttrVal	snap-core/networkmp.h	/^    void GetAttrVal(TStrV& Val) const { Graph->AttrValueNI(GetId(), Val); }$/;"	f	class:TNEANetMP::TNodeI
GetAttrs	snap-adv/agmattr.h	/^  int GetAttrs() { return Attrs; }$/;"	f	class:TCesna
GetAttrs	snap-adv/agmattr.h	/^  static int GetAttrs(const THash<TInt, TIntV>& NIDAttrH) {$/;"	f	class:TCesnaUtil
GetAttrs	snap-adv/mag.h	/^	const int GetAttrs() const {  return NAttrs;  }$/;"	f	class:TMAGParam
GetAttrs	snap-adv/mag.h	/^	const int GetAttrs() const { return Param.GetAttrs(); }$/;"	f	class:TMAGFitBern
GetAuxiliaryDir	glib-core/unicode.h	/^	static TStr GetAuxiliaryDir() { return "auxiliary"; }$/;"	f	class:TUniChDb
GetAvailPageFile	glib-core/os.h	/^  uint64 GetAvailPageFile(){ \/\/ free bytes of paging file$/;"	f
GetAvailPhys	glib-core/os.h	/^  uint64 GetAvailPhys(){ \/\/ free physical memory bytes$/;"	f
GetAvailVirtual	glib-core/os.h	/^  uint64 GetAvailVirtual(){ \/\/ free user bytes$/;"	f
GetAvgAbsErr	snap-adv/kronecker.cpp	/^double TKronMtx::GetAvgAbsErr(const TKronMtx& Kron1, const TKronMtx& Kron2) {$/;"	f	class:TKronMtx
GetAvgAbsErr	snap-adv/mag.cpp	/^double TMAGAffMtx::GetAvgAbsErr(const TMAGAffMtx& Mtx1, const TMAGAffMtx& Mtx2) {$/;"	f	class:TMAGAffMtx
GetAvgDepthFromRoot	examples/cascades/cascades.cpp	/^  double GetAvgDepthFromRoot(const PGraph& G) {$/;"	f	class:TCascadeStat
GetAvgFroErr	snap-adv/kronecker.cpp	/^double TKronMtx::GetAvgFroErr(const TKronMtx& Kron1, const TKronMtx& Kron2) {$/;"	f	class:TKronMtx
GetAvgFroErr	snap-adv/mag.cpp	/^double TMAGAffMtx::GetAvgFroErr(const TMAGAffMtx& Mtx1, const TMAGAffMtx& Mtx2) {$/;"	f	class:TMAGAffMtx
GetAvgGStat	snap-core/gstat.cpp	/^PGStat TGStatVec::GetAvgGStat(const bool& ClipAt1) {$/;"	f	class:TGStatVec
GetAvgInCoeff	snap-adv/mag.cpp	/^const double TMAGFitBern::GetAvgInCoeff(const int& i, const int& AId, const int& A, const TMAGAffMtx& Theta) const {$/;"	f	class:TMAGFitBern
GetAvgOutCoeff	snap-adv/mag.cpp	/^const double TMAGFitBern::GetAvgOutCoeff(const int& i, const int& AId, const int& A, const TMAGAffMtx& Theta) const {$/;"	f	class:TMAGFitBern
GetAvgProdLinWeight	snap-adv/mag.cpp	/^const double TMAGFitBern::GetAvgProdLinWeight(const int& NId1, const int& NId2, const bool Left, const bool Right) const {$/;"	f	class:TMAGFitBern
GetAvgProdSqWeight	snap-adv/mag.cpp	/^const double TMAGFitBern::GetAvgProdSqWeight(const int& NId1, const int& NId2, const bool Left, const bool Right) const {$/;"	f	class:TMAGFitBern
GetAvgSDevV	snap-exp/wgtnet.cpp	/^void TTop2FriendNet::GetAvgSDevV(const THash<TFlt, TMom>& MomH, TFltTrV& ValAvgSDevV) {$/;"	f	class:TTop2FriendNet
GetAvgSqThetaLL	snap-adv/mag.cpp	/^const double TMAGFitBern::GetAvgSqThetaLL(const int& NId1, const int& NId2, const int& AId, const bool Left, const bool Right) const {$/;"	f	class:TMAGFitBern
GetAvgThetaLL	snap-adv/mag.cpp	/^const double TMAGFitBern::GetAvgThetaLL(const int& NId1, const int& NId2, const int& AId, const bool Left, const bool Right) const {$/;"	f	class:TMAGFitBern
GetAvgVoteDevOt	snap-exp/wikinet.cpp	/^int TWikiElec::GetAvgVoteDevOt(TFltV& AvgVoteV, const bool& OnlyVotes) const {$/;"	f	class:TWikiElec
GetAvgVoteOt	snap-exp/wikinet.cpp	/^int TWikiElec::GetAvgVoteOt(TFltV& AvgVoteV, const bool& OnlyVotes) const {$/;"	f	class:TWikiElec
GetB1Bits	glib-core/bits.cpp	/^int TB1Def::GetB1Bits(const TB1& B1){$/;"	f	class:TB1Def
GetB2Bits	glib-core/bits.cpp	/^int TB2Def::GetB2Bits(const TB2& B2){$/;"	f	class:TB2Def
GetB4Bits	glib-core/bits.cpp	/^int TB4Def::GetB4Bits(const TB4& B4){$/;"	f	class:TB4Def
GetBagOfWhiskersV	snap-adv/ncp.h	/^  const TFltPrV& GetBagOfWhiskersV() const { return BagOfWhiskerV; }$/;"	f	class:TLocClustStat
GetBarnStars	snap-exp/wikinet.h	/^  int GetBarnStars(const TStr& Usr, const TSecTm& Tm = TSecTm()) {$/;"	f	class:TBarnStars
GetBaseUrlStr	glib-core/url.h	/^  TStr GetBaseUrlStr() const {return BaseUrlStr;}$/;"	f
GetBeforeTimeG	snap-exp/wikinet.cpp	/^PNGraph TWikiTimeTalkNet::GetBeforeTimeG(const TSecTm& EdgeTm) const {$/;"	f	class:TWikiTimeTalkNet
GetBeforeTimeNet	snap-exp/wikinet.cpp	/^PSignNet TWikiTimeTalkNet::GetBeforeTimeNet(const TSecTm& EdgeTm) const {$/;"	f	class:TWikiTimeTalkNet
GetBestCut	snap-adv/ncp.h	/^  const TCutInfo& GetBestCut() const { return BestCut; } \/\/ overall best cut$/;"	f	class:TLocClustStat
GetBestEdge	snap-adv/cascnetinf.cpp	/^TIntPr TNetInfBs::GetBestEdge(double& CurProb, double& LastGain, bool& msort, int &attempts) {$/;"	f	class:TNetInfBs
GetBestWhisk	snap-adv/ncp.h	/^  TFltPr GetBestWhisk() const { return BestWhisk; }$/;"	f	class:TLocClustStat
GetBeta	snap-adv/mag.h	/^	void GetBeta(const int& Attr, double& Alpha, double& Beta) const {  IAssert(Attr < Dim);  Alpha = AlphaV[Attr];  Beta = BetaV[Attr];  }$/;"	f	class:TMAGNodeBeta
GetBetaV	snap-adv/mag.h	/^	void GetBetaV(TFltV& _AlphaV, TFltV& _BetaV) const {  _AlphaV = AlphaV;  _BetaV = BetaV;  }$/;"	f	class:TMAGNodeBeta
GetBetweennessCentr	snap-core/centr.h	/^void GetBetweennessCentr(const PGraph& Graph, TIntFltH& NodeBtwH, TIntPrFltH& EdgeBtwH, const bool& IsDir, const double& NodeFrac) {$/;"	f	namespace:TSnap
GetBetweennessCentr	snap-core/centr.h	/^void GetBetweennessCentr(const PGraph& Graph, TIntFltH& NodeBtwH, const bool& IsDir, const double& NodeFrac) {$/;"	f	namespace:TSnap
GetBetweennessCentr	snap-core/centr.h	/^void GetBetweennessCentr(const PGraph& Graph, TIntPrFltH& EdgeBtwH, const bool& IsDir, const double& NodeFrac) {$/;"	f	namespace:TSnap
GetBetweennessCentr	snap-core/centr.h	/^void GetBetweennessCentr(const PGraph& Graph, const TIntV& BtwNIdV, TIntFltH& NodeBtwH, const bool& IsDir, const bool& DoNodeCent, TIntPrFltH& EdgeBtwH, const bool& DoEdgeCent) {$/;"	f	namespace:TSnap
GetBf	glib-core/dt.cpp	/^int TChAIn::GetBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TChAIn
GetBf	glib-core/dt.cpp	/^int TMemIn::GetBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TMemIn
GetBf	glib-core/dt.cpp	/^int TStrIn::GetBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TStrIn
GetBf	glib-core/dt.h	/^  char* GetBf() const {return Bf;}$/;"	f
GetBf	glib-core/fl.cpp	/^int TFIn::GetBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TFIn
GetBf	glib-core/fl.cpp	/^int TFInOut::GetBf(const void* LBf, const TSize& LBfL) {$/;"	f	class:TFInOut
GetBf	glib-core/fl.cpp	/^int TMIn::GetBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TMIn
GetBf	glib-core/fl.cpp	/^int TStdIn::GetBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TStdIn
GetBf	glib-core/fl.cpp	/^void TFRnd::GetBf(void* Bf, const TSize& BfL){$/;"	f	class:TFRnd
GetBf	glib-core/zipfl.cpp	/^int TZipIn::GetBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TZipIn
GetBfAddr	glib-core/fl.h	/^  char* GetBfAddr() const {return Bf;}$/;"	f	class:TMOut
GetBfAddr	glib-core/fl.h	/^  char* GetBfAddr(){return Bf;}$/;"	f	class:TMIn
GetBfC	glib-core/fl.cpp	/^uint64 TMIn::GetBfC() {$/;"	f	class:TMIn
GetBfL	glib-core/fl.cpp	/^uint64 TMIn::GetBfL() {$/;"	f	class:TMIn
GetBfsEffDiam	snap-core/bfsdfs.h	/^double GetBfsEffDiam(const PGraph& Graph, const int& NTestNodes, const TIntV& SubGraphNIdV, const bool& IsDir, double& EffDiam, int& FullDiam) {$/;"	f	namespace:TSnap
GetBfsEffDiam	snap-core/bfsdfs.h	/^double GetBfsEffDiam(const PGraph& Graph, const int& NTestNodes, const bool& IsDir) {$/;"	f	namespace:TSnap
GetBfsEffDiam	snap-core/bfsdfs.h	/^double GetBfsEffDiam(const PGraph& Graph, const int& NTestNodes, const bool& IsDir, double& EffDiam, int& FullDiam) {$/;"	f	namespace:TSnap
GetBfsEffDiam	snap-core/bfsdfs.h	/^double GetBfsEffDiam(const PGraph& Graph, const int& NTestNodes, const bool& IsDir, double& EffDiam, int& FullDiam, double& AvgSPL) {$/;"	f	namespace:TSnap
GetBfsFullDiam	snap-core/bfsdfs.h	/^int GetBfsFullDiam(const PGraph& Graph, const int& NTestNodes, const bool& IsDir) {$/;"	f	namespace:TSnap
GetBfsTree	snap-core/bfsdfs.h	/^PNGraph GetBfsTree(const PGraph& Graph, const int& StartNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	namespace:TSnap
GetBiCon	snap-core/cncom.cpp	/^void GetBiCon(const PUNGraph& Graph, TCnComV& BiCnComV) {$/;"	f	namespace:TSnap
GetBiConSzCnt	snap-core/cncom.cpp	/^void GetBiConSzCnt(const PUNGraph& Graph, TIntPrV& SzCntV) {$/;"	f	namespace:TSnap
GetBinFn	glib-core/unicode.h	/^	static TStr GetBinFn() { return "UniChDb.bin"; } \/\/ used only by Test()$/;"	f	class:TUniChDb
GetBinomialDev	glib-core/dt.cpp	/^double TRnd::GetBinomialDev(const double& Prb, const int& Trials){$/;"	f	class:TRnd
GetBit	glib-core/bits.cpp	/^bool TB1Def::GetBit(const int& BitN, const uchar& Val){$/;"	f	class:TB1Def
GetBit	glib-core/bits.h	/^  bool GetBit(const int& BitN) const {$/;"	f
GetBit	glib-core/bits.h	/^  bool GetBit(const int& BitN) const {$/;"	f	class:TB32Set
GetBit	glib-core/bits.h	/^  bool GetBit(const int& BitN) const {$/;"	f	class:TB8Set
GetBits	glib-core/bits.h	/^  int GetBits() const {return Bits;}$/;"	f
GetBits	glib-core/bits.h	/^  int GetBits() const {return Bits;}$/;"	f	class:TB32Set
GetBits	glib-core/bits.h	/^  int GetBits() const {return Bits;}$/;"	f	class:TB8Set
GetBlob	glib-core/blobbs.cpp	/^PSIn TGBlobBs::GetBlob(const TBlobPt& BlobPt){$/;"	f	class:TGBlobBs
GetBlob	glib-core/blobbs.cpp	/^PSIn TMBlobBs::GetBlob(const TBlobPt& BlobPt){$/;"	f	class:TMBlobBs
GetBlobBsStateStr	glib-core/blobbs.cpp	/^TStr TBlobBs::GetBlobBsStateStr(const TBlobBsState& BlobBsState){$/;"	f	class:TBlobBs
GetBlobState	glib-core/blobbs.cpp	/^TBlobState TBlobBs::GetBlobState(const PFRnd& FBlobBs){$/;"	f	class:TBlobBs
GetBlockLenV	glib-core/blobbs.cpp	/^void TBlobBs::GetBlockLenV(const PFRnd& FBlobBs, TIntV& BlockLenV){$/;"	f	class:TBlobBs
GetBodyAsMem	glib-core/http.h	/^  void GetBodyAsMem(TMem& Mem) const {Mem.Clr(); Mem += BodyMem;}$/;"	f
GetBodyAsSIn	glib-core/http.h	/^  PSIn GetBodyAsSIn() const { return TMemIn::New(BodyMem); }$/;"	f
GetBodyAsStr	glib-core/http.h	/^  TStr GetBodyAsStr() const { return BodyMem.GetAsStr(' ');}$/;"	f
GetBodyLen	glib-core/http.h	/^  int GetBodyLen() const { return BodyMem.Len(); }$/;"	f
GetBoltzmanCurveStat	snap-adv/ncp.cpp	/^void TLocClustStat::GetBoltzmanCurveStat(const TFltV& TempV, TVec<TFltPrV>& NcpV) const {$/;"	f	class:TLocClustStat
GetBool	glib-core/json.h	/^  bool GetBool() const {EAssert(IsBool()); return Bool;}$/;"	f
GetBoolArg	glib-core/xml.cpp	/^bool TXmlObjSer::GetBoolArg(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TXmlObjSer
GetBoolArgVal	glib-core/xml.cpp	/^bool TXmlTok::GetBoolArgVal($/;"	f	class:TXmlTok
GetBoolArgVal	glib-core/xml.cpp	/^bool TXmlTok::GetBoolArgVal(const TStr& ArgNm, const bool& DfVal) const {$/;"	f	class:TXmlTok
GetBoolArgVal	glib-core/xml.cpp	/^bool TXmlTok::GetBoolArgVal(const TStr& ArgNm,$/;"	f	class:TXmlTok
GetBound	snap-adv/cascnetinf.cpp	/^double TNetInfBs::GetBound(const TIntPr& Edge, double& CurProb) {$/;"	f	class:TNetInfBs
GetBurned	snap-core/ff.h	/^  int GetBurned() const { return BurnedNIdV.Len(); }$/;"	f	class:TForestFire
GetBurnedNId	snap-core/ff.h	/^  int GetBurnedNId(const int& NIdN) const { return BurnedNIdV[NIdN]; }$/;"	f	class:TForestFire
GetBurnedNId	snap-core/ff.h	/^  int GetBurnedNId(const int& n) const { return BurnedSet[n]; }$/;"	f	class:TUndirFFire
GetBurnedNIdV	snap-core/ff.h	/^  const TIntV& GetBurnedNIdV() const { return BurnedNIdV; }$/;"	f	class:TForestFire
GetBurnedNIdV	snap-core/ff.h	/^  void GetBurnedNIdV(TIntV& NIdV) const { NIdV = BurnedNIdV; }$/;"	f	class:TForestFire
GetByNm	glib-core/xmath.cpp	/^double TMom::GetByNm(const TStr& MomNm) const {$/;"	f	class:TMom
GetC	snap-core/triad.h	/^  double GetC(const int& ConstraintN) const { return NodePrCH[ConstraintN]; }$/;"	f	class:TNetConstraint
GetCCdf	snap-core/util.cpp	/^TFltPrV TGUtil::GetCCdf(const TFltPrV& PdfV) {$/;"	f	class:TGUtil
GetCCdf	snap-core/util.cpp	/^TIntPrV TGUtil::GetCCdf(const TIntPrV& PdfV) {$/;"	f	class:TGUtil
GetCCdf	snap-core/util.cpp	/^void TGUtil::GetCCdf(const TFltPrV& PdfV, TFltPrV& CCdfV) {$/;"	f	class:TGUtil
GetCCdf	snap-core/util.cpp	/^void TGUtil::GetCCdf(const TIntFltKdV& PdfV, TIntFltKdV& CCdfV) {$/;"	f	class:TGUtil
GetCCdf	snap-core/util.cpp	/^void TGUtil::GetCCdf(const TIntPrV& PdfV, TIntPrV& CCdfV) {$/;"	f	class:TGUtil
GetCDSect	glib-core/xml.cpp	/^void TXmlLx::GetCDSect(){$/;"	f	class:TXmlLx
GetCId	snap-exp/memes.h	/^  int GetCId() const { return QtCIdTy.Id; }$/;"	f	class:TQuote
GetCId	snap-exp/memes.h	/^  int GetCId(const int& ClustN) const { return ClustQtIdVH.GetKey(ClustN); }$/;"	f	class:TQuoteBs
GetCIdVByFq	snap-exp/memes.cpp	/^void TQuoteBs::GetCIdVByFq(TIntV& CIdV, const int& MinClFq, const TStr& RootHasWord, const TUrlTy& OnlyCountTy, const bool& OnlyAfterRoot, const TSecTm& BegTm, const TSecTm& EndTm) const {$/;"	f	class:TQuoteBs
GetCPMCommunities	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetCPMCommunities(const PUNGraph& G, int MinMaxCliqueSize, TVec<TIntV>& NIdCmtyVV) {$/;"	f	class:TCliqueOverlap
GetCPUTime	tutorials/demo-hashvec-benchmark.cpp	/^float GetCPUTime() {$/;"	f
GetCPUTimeUsage	snap-exp/multimodal-dev/benchmark-util.cpp	/^double GetCPUTimeUsage(double tick1, double tick2) {$/;"	f
GetCSZFromWin1250	glib-core/html.cpp	/^TStr THtmlLxChDef::GetCSZFromWin1250(const TChA& ChA){$/;"	f	class:THtmlLxChDef
GetCSZFromYuascii	glib-core/html.cpp	/^TStr THtmlLxChDef::GetCSZFromYuascii(const TChA& ChA){$/;"	f	class:THtmlLxChDef
GetCStr	glib-core/hash.h	/^  const char *GetCStr(const int& StrId) const { Assert(StrId < GetStrs());$/;"	f
GetCStrFromOffset	glib-core/hash.h	/^  const char *GetCStrFromOffset(const TSize& Offset) const { Assert(Offset < BfL);$/;"	f
GetCalendarDate	glib-core/tm.cpp	/^void TJulianDate::GetCalendarDate(int jdn, int& dd, int& mm, int& yy){$/;"	f	class:TJulianDate
GetCandidates	snap-exp/lsh.cpp	/^TVec<TFltV> TLSHash::GetCandidates(TFltV Datum) {$/;"	f	class:TLSHash
GetCasc	snap-adv/cascdynetinf.h	/^  TCascade & GetCasc(int c) { return CascH.GetDat(c); }$/;"	f	class:TNIBs
GetCasc	snap-adv/cascnetinf.h	/^  TCascade & GetCasc(int c) { return CascV[c]; }$/;"	f	class:TNetInfBs
GetCascadeId	snap-adv/cascdynetinf.h	/^  int GetCascadeId(const TStr& Cascade) { return CascadeIdH.GetDat(Cascade); }$/;"	f	class:TNIBs
GetCascs	snap-adv/cascdynetinf.h	/^  int GetCascs() { return CascH.Len(); }$/;"	f	class:TNIBs
GetCascs	snap-adv/cascnetinf.h	/^  int GetCascs() { return CascV.Len(); }$/;"	f	class:TNetInfBs
GetCaseConverted	glib-core/unicode.h	/^void TUniChDb::GetCaseConverted(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniChDb
GetCaseFolded	glib-core/unicode.h	/^	void GetCaseFolded(const TIntV& src, TIntV& dest, const bool full = true) const { return ucd.GetCaseFolded(src, dest, true, full, false); }$/;"	f	class:TUnicode
GetCaseFolded	glib-core/unicode.h	/^	void GetCaseFolded(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true, const bool full = true, const bool turkic = false) const {$/;"	f	class:TUniChDb
GetCaseFolded	glib-core/unicode.h	/^	void GetCaseFolded(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniChDb
GetCaseFoldingFn	glib-core/unicode.h	/^	static TStr GetCaseFoldingFn() { return "CaseFolding.txt"; }$/;"	f	class:TUniChDb
GetCat	glib-core/unicode.h	/^	TUniChCategory GetCat() const { return (TUniChCategory) cat; }$/;"	f	class:TUniChInfo
GetCat	glib-core/unicode.h	/^	TUniChCategory GetCat(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return ucOther; else return h[i].cat; }$/;"	f	class:TUniChDb
GetCat	glib-core/unicode.h	/^	TUniChCategory GetCat(const int cp) const { return ucd.GetCat(cp); }$/;"	f	class:TUnicode
GetCdf	snap-core/util.cpp	/^TFltPrV TGUtil::GetCdf(const TFltPrV& PdfV) {$/;"	f	class:TGUtil
GetCdf	snap-core/util.cpp	/^TIntPrV TGUtil::GetCdf(const TIntPrV& PdfV) {$/;"	f	class:TGUtil
GetCdf	snap-core/util.cpp	/^void TGUtil::GetCdf(const TFltPrV& PdfV, TFltPrV& CdfV) {$/;"	f	class:TGUtil
GetCdf	snap-core/util.cpp	/^void TGUtil::GetCdf(const TIntFltKdV& PdfV, TIntFltKdV& CdfV) {$/;"	f	class:TGUtil
GetCdf	snap-core/util.cpp	/^void TGUtil::GetCdf(const TIntPrV& PdfV, TIntPrV& CdfV) {$/;"	f	class:TGUtil
GetCentrQtId	snap-exp/memes.cpp	/^int TQuoteBs::GetCentrQtId(const TIntV& ClustV) const {$/;"	f	class:TQuoteBs
GetCentrQtId	snap-exp/memes.cpp	/^int TQuoteBs::GetCentrQtId(const int& CId) const {$/;"	f	class:TQuoteBs
GetCfUncerV	glib-core/xmath.cpp	/^void TSvd::GetCfUncerV(TFltV& CfUncerV){$/;"	f	class:TSvd
GetCfV	glib-core/xmath.cpp	/^void TSvd::GetCfV(TFltV& _CfV){$/;"	f	class:TSvd
GetCfy	snap-adv/agm.cpp	/^double TLogRegPredict::GetCfy(const TFltV& AttrV, const TFltV& NewTheta) {$/;"	f	class:TLogRegPredict
GetCfy	snap-adv/agm.cpp	/^void TLogRegPredict::GetCfy(const TVec<TFltV>& X, TFltV& OutV, const TFltV& NewTheta) {$/;"	f	class:TLogRegPredict
GetCfy	snap-adv/agm.h	/^  double GetCfy(const TFltV& AttrV) { return GetCfy(AttrV, Theta); }$/;"	f	class:TLogRegPredict
GetCfy	snap-adv/agm.h	/^  void GetCfy(const TVec<TFltV>& X, TFltV& OutV) { GetCfy(X, OutV, Theta); }$/;"	f	class:TLogRegPredict
GetCh	glib-core/fl.cpp	/^char TMIn::GetCh(){$/;"	f	class:TMIn
GetCh	glib-core/fl.h	/^  char GetCh() { return char(fgetc(FileId)); }$/;"	f	class:TFInOut
GetCh	glib-core/fl.h	/^  char GetCh(){$/;"	f	class:TChRet
GetCh	glib-core/fl.h	/^  char GetCh(){$/;"	f	class:TFIn
GetCh	glib-core/fl.h	/^  char GetCh(){char Ch; GetBf(&Ch, sizeof(Ch)); return Ch;}$/;"	f
GetCh	glib-core/fl.h	/^  char GetCh(){return char(getchar());}$/;"	f	class:TStdIn
GetCh	glib-core/fl.h	/^  char GetCh(const int& ChN) const {$/;"	f	class:TMOut
GetCh	glib-core/http.cpp	/^  char GetCh(){$/;"	f	class:THttpChRet
GetCh	glib-core/http.cpp	/^char THttpLx::GetCh(){$/;"	f	class:THttpLx
GetCh	glib-core/lx.cpp	/^char TPreproc::GetCh(){$/;"	f	class:TPreproc
GetCh	glib-core/unicode.h	/^		int GetCh() {$/;"	f	class:TUniChDb::TUcdFileReader
GetCh	glib-core/url.cpp	/^  char GetCh(){if (Eof()){return EofCh;} else {return Bf[BfC++];}}$/;"	f	class:TUrlLx
GetCh	glib-core/url.cpp	/^  char GetCh(const char& Ch){EAssertR(GetCh()==Ch, ""); return Ch;}$/;"	f	class:TUrlLx
GetCh	glib-core/wch.h	/^  char GetCh() const {$/;"	f	class:TWCh
GetCh	glib-core/xml.cpp	/^uchar TXmlLx::GetCh(){$/;"	f	class:TXmlLx
GetCh	glib-core/zipfl.h	/^  char GetCh() { if (BfC==BfL){FillBf();} return Bf[BfC++]; }$/;"	f	class:TZipIn
GetChAFromVal	glib-core/json.cpp	/^void TJsonVal::GetChAFromVal(const PJsonVal& Val, TChA& ChA){$/;"	f	class:TJsonVal
GetChDef	glib-core/html.h	/^  static PHtmlLxChDef GetChDef(){IAssert(!ChDef.Empty()); return ChDef;}$/;"	f
GetChDef	glib-core/lx.cpp	/^PLxChDef TLxChDef::GetChDef(const TLxChDefTy& ChDefTy){$/;"	f	class:TLxChDef
GetChDefRef	glib-core/html.h	/^  static THtmlLxChDef& GetChDefRef(){IAssert(!ChDef.Empty()); return *ChDef;}$/;"	f
GetChNm	glib-core/unicodestring.cpp	/^TStr TUStr::GetChNm(const int& UniCh){$/;"	f	class:TUStr
GetChRefFromYuEntRef	glib-core/xml.cpp	/^TStr TXmlLx::GetChRefFromYuEntRef(const TStr& YuEntRefStr){$/;"	f	class:TXmlLx
GetChScriptId	glib-core/unicodestring.cpp	/^int TUStr::GetChScriptId(const int& UniCh){$/;"	f	class:TUStr
GetChScriptNm	glib-core/unicodestring.cpp	/^TStr TUStr::GetChScriptNm(const int& UniCh){$/;"	f	class:TUStr
GetChStr	glib-core/dt.cpp	/^TStr& TStr::GetChStr(const char& Ch){$/;"	f	class:TStr
GetChTy	glib-core/html.h	/^  int GetChTy(const char& Ch) const {return ChTyV[Ch-TCh::Mn];}$/;"	f
GetChTy	glib-core/http.cpp	/^  int GetChTy(const char& Ch){return ChTyV[Ch-TCh::Mn];}$/;"	f	class:THttpChDef
GetChTy	glib-core/lx.h	/^  int GetChTy(const char& Ch) const {return ChTyV[Ch-TCh::Mn];}$/;"	f
GetChTypeStr	glib-core/unicodestring.cpp	/^TStr TUStr::GetChTypeStr(const int& UniCh){$/;"	f	class:TUStr
GetCharName	glib-core/unicode.h	/^	const char *GetCharName(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return 0; int ofs = h[i].nameOffset; return ofs < 0 ? 0 : charNames.GetCStr(ofs); }$/;"	f	class:TUniChDb
GetCharName	glib-core/unicode.h	/^	const char *GetCharName(const int cp) const { return ucd.GetCharName(cp); }$/;"	f	class:TUnicode
GetCharNameS	glib-core/unicode.h	/^	TStr GetCharNameS(const int cp) const { return ucd.GetCharNameS(cp); }$/;"	f	class:TUnicode
GetCharNameS	glib-core/unicode.h	/^	TStr GetCharNameS(const int cp) const {$/;"	f	class:TUniChDb
GetChild	glib-core/unicode.h	/^	int GetChild(const int parentIdx, const TItem& item) const {$/;"	f	class:TUniTrie
GetChildNodeId	glib-core/ds.h	/^  int GetChildNodeId(const int& NodeId, const int& ChildN) const {return NodeV[NodeId].Val2[ChildN];}$/;"	f	class:TTree
GetChildren	glib-core/ds.h	/^  int GetChildren(const int& NodeId) const {return NodeV[NodeId].Val2.Len();}$/;"	f	class:TTree
GetCircle	test/test-alg.cpp	/^  PNGraph GetCircle() {$/;"	f	class:TreeTest
GetCircles	snap-adv/circles.h	/^  TVec<TIntSet> GetCircles(void) {$/;"	f	class:TCluster
GetCleanStr	snap-core/util.cpp	/^TChA TStrUtil::GetCleanStr(const TChA& ChA) {$/;"	f	class:TStrUtil
GetCleanWrdStr	snap-core/util.cpp	/^TChA TStrUtil::GetCleanWrdStr(const TChA& ChA) {$/;"	f	class:TStrUtil
GetClosenessCentr	snap-core/centr.h	/^double GetClosenessCentr(const PGraph& Graph, const int& NId, const bool& IsDir, const bool& Normalized) {$/;"	f	namespace:TSnap
GetClosenessCentrMP	snap-core/centr.h	/^double GetClosenessCentrMP(const PGraph& Graph, const int& NId, const bool& IsDir, const bool& Normalized) {$/;"	f	namespace:TSnap
GetClust	snap-exp/memes.h	/^  const TIntV& GetClust(const int& CId) const { return ClustQtIdVH.GetDat(CId); } \/\/ CId == RootQtId$/;"	f	class:TQuoteBs
GetClustBegTm	snap-exp/memes.cpp	/^TSecTm TQuoteBs::GetClustBegTm(const TIntV& ClustV, const int& CentrQtId) const {$/;"	f	class:TQuoteBs
GetClustBegTm	snap-exp/memes.cpp	/^TSecTm TQuoteBs::GetClustBegTm(const int& CId, const int& CentrQtId) const {$/;"	f	class:TQuoteBs
GetClustCf	snap-core/triad.h	/^double GetClustCf(const PGraph& Graph, TFltPrV& DegToCCfV, int64& ClosedTriads, int64& OpenTriads, int SampleNodes) {$/;"	f	namespace:TSnap
GetClustCf	snap-core/triad.h	/^template <class PGraph> double GetClustCf(const PGraph& Graph, TFltPrV& DegToCCfV, int SampleNodes) {$/;"	f	namespace:TSnap
GetClustCf	snap-core/triad.h	/^template <class PGraph> double GetClustCf(const PGraph& Graph, int SampleNodes) {$/;"	f	namespace:TSnap
GetClustFq	snap-exp/memes.cpp	/^int TQuoteBs::GetClustFq(const int& CId) const {$/;"	f	class:TQuoteBs
GetClustFq	snap-exp/memes.cpp	/^int TQuoteBs::GetClustFq(const int& CId, const TUrlTy& UrlTy) const {$/;"	f	class:TQuoteBs
GetClustN	snap-exp/memes.h	/^  const TIntV& GetClustN(const int& N) const { return ClustQtIdVH[N]; } \/\/ CId == RootQtId$/;"	f	class:TQuoteBs
GetClustNet	snap-exp/memes.cpp	/^PClustNet TQuoteBs::GetClustNet(const int& MinQtFq, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
GetClusters	snap-exp/memes.cpp	/^void TClustNet::GetClusters(TVec<TIntV>& QtNIdV) const {$/;"	f	class:TClustNet
GetClusts	snap-exp/memes.h	/^  int GetClusts() const { return ClustQtIdVH.Len(); }$/;"	f	class:TQuoteBs
GetCmLn	glib-core/env.cpp	/^TStr TEnv::GetCmLn(const int& FromArgN) const {$/;"	f	class:TEnv
GetCmLn	glib-core/os.cpp	/^TStr TSysStr::GetCmLn(){$/;"	f	class:TSysStr
GetCmd	glib-core/zipfl.cpp	/^TStr TZipIn::GetCmd(const TStr& ZipFNm) {$/;"	f	class:TZipIn
GetCmd	glib-core/zipfl.cpp	/^TStr TZipOut::GetCmd(const TStr& ZipFNm) {$/;"	f	class:TZipOut
GetCmnNbrs	snap-core/triad.h	/^inline int GetCmnNbrs<PUNGraph>(const PUNGraph& Graph, const int& NId1, const int& NId2, TIntV& NbrV) {$/;"	f	namespace:TSnap
GetCmnNbrs	snap-core/triad.h	/^int GetCmnNbrs(const PGraph& Graph, const int& NId1, const int& NId2) {$/;"	f	namespace:TSnap
GetCmnNbrs	snap-core/triad.h	/^int GetCmnNbrs(const PGraph& Graph, const int& NId1, const int& NId2, TIntV& NbrV) {$/;"	f	namespace:TSnap
GetCmtyS	snap-adv/agmdirected.cpp	/^void TCoda::GetCmtyS(TIntSet& CmtySOut, TIntSet& CmtySIn, const int CID, const double Thres) {$/;"	f	class:TCoda
GetCmtyVAll	snap-adv/agmdirected.h	/^  void GetCmtyVAll(TIntV& CmtyVAll, const int CID) {$/;"	f	class:TCodaAnalyzer
GetCmtyVV	snap-adv/agmattr.cpp	/^void TCesna::GetCmtyVV(TVec<TIntV>& CmtyVV) {$/;"	f	class:TCesna
GetCmtyVV	snap-adv/agmattr.cpp	/^void TCesna::GetCmtyVV(TVec<TIntV>& CmtyVV, TVec<TFltV>& Wck, const double Thres, const int MinSz) {$/;"	f	class:TCesna
GetCmtyVV	snap-adv/agmattr.h	/^  void GetCmtyVV(TVec<TIntV>& CmtyVV, TVec<TFltV>& Wck) {$/;"	f	class:TCesna
GetCmtyVV	snap-adv/agmattr.h	/^  void GetCmtyVV(TVec<TIntV>& CmtyVV, const double Thres, const int MinSz = 3) {$/;"	f	class:TCesna
GetCmtyVV	snap-adv/agmdirected.cpp	/^void TCoda::GetCmtyVV(TVec<TIntV>& CmtyVVOut, TVec<TIntV>& CmtyVVIn, const double ThresOut, const double ThresIn, const int MinSz) {$/;"	f	class:TCoda
GetCmtyVV	snap-adv/agmdirected.cpp	/^void TCoda::GetCmtyVV(TVec<TIntV>& CmtyVVOut, TVec<TIntV>& CmtyVVIn, const int MinSz) {$/;"	f	class:TCoda
GetCmtyVV	snap-adv/agmdirected.cpp	/^void TCoda::GetCmtyVV(const bool IsOut, TVec<TIntV>& CmtyVV) {$/;"	f	class:TCoda
GetCmtyVV	snap-adv/agmdirected.cpp	/^void TCoda::GetCmtyVV(const bool IsOut, TVec<TIntV>& CmtyVV, const double Thres, const int MinSz) {$/;"	f	class:TCoda
GetCmtyVV	snap-adv/agmfast.cpp	/^void TAGMFast::GetCmtyVV(TVec<TIntV>& CmtyVV) {$/;"	f	class:TAGMFast
GetCmtyVV	snap-adv/agmfast.cpp	/^void TAGMFast::GetCmtyVV(TVec<TIntV>& CmtyVV, const double Thres, const int MinSz) {$/;"	f	class:TAGMFast
GetCmtyVV	snap-adv/agmfit.cpp	/^void TAGMFit::GetCmtyVV(TVec<TIntV>& CmtyVV, TFltV& QV, const double QMax) {$/;"	f	class:TAGMFit
GetCmtyVV	snap-adv/agmfit.cpp	/^void TAGMFit::GetCmtyVV(TVec<TIntV>& CmtyVV, const double QMax) {$/;"	f	class:TAGMFit
GetCmtyVVUnSorted	snap-adv/agmattr.cpp	/^void TCesna::GetCmtyVVUnSorted(TVec<TIntV>& CmtyVV) {$/;"	f	class:TCesna
GetCmtyVVUnSorted	snap-adv/agmattr.cpp	/^void TCesna::GetCmtyVVUnSorted(TVec<TIntV>& CmtyVV, const double Thres, const int MinSz) {$/;"	f	class:TCesna
GetCmtyVVUnSorted	snap-adv/agmdirected.cpp	/^void TCoda::GetCmtyVVUnSorted(TVec<TIntV>& CmtyVVOut, TVec<TIntV>& CmtyVVIn) {$/;"	f	class:TCoda
GetCmtyVVUnSorted	snap-adv/agmdirected.cpp	/^void TCoda::GetCmtyVVUnSorted(const bool IsOut, TVec<TIntV>& CmtyVV, const double Thres, const int MinSz) {$/;"	f	class:TCoda
GetCnCom	tutorials/demo-cncom1.cpp	/^void GetCnCom() {$/;"	f
GetCnComCompleteGraph	tutorials/demo-cncom.cpp	/^void GetCnComCompleteGraph() {$/;"	f
GetCnComDirectedDisconnected	tutorials/demo-cncom.cpp	/^void GetCnComDirectedDisconnected() {$/;"	f
GetCnComFull	tutorials/demo-cncom.cpp	/^void GetCnComFull() {$/;"	f
GetCnComUndirectedDisconnected	tutorials/demo-cncom.cpp	/^void GetCnComUndirectedDisconnected() {$/;"	f
GetCnt	snap-adv/graphcounter.h	/^  uint64 GetCnt(const  int& GraphId) const { return m_graphCounters.GetDat(GraphId); }$/;"	f	class:TD34GraphCounter
GetCnt	snap-exp/memes.h	/^  int GetCnt(const int& t) const { return TmUrlCntV[t].Cnt(); }$/;"	f	class:TQuote
GetCntry	snap-exp/imdbnet.h	/^  int GetCntry() const { return Cntry; }$/;"	f	class:TImdbNode
GetCodec	glib-core/unicode.h	/^	PCodecBase GetCodec(const TStr& name) const {$/;"	f	class:TUnicode
GetCol	glib-core/ds.h	/^void TVVec<TVal>::GetCol(const int& ColN, TVec<TVal>& Vec) const {$/;"	f	class:TVVec
GetColIdx	snap-core/table.h	/^  TInt GetColIdx(const TStr& ColName) const {$/;"	f	class:TTable
GetColIdx	snap-exp/alternativetable.h	/^  TInt GetColIdx(const TStr& ColName) const { $/;"	f	class:ExplicitStringTable
GetColIdx	snap-exp/alternativetable.h	/^  TInt GetColIdx(const TStr& ColName) const { $/;"	f	class:PhysicalOrderTable
GetColSum	snap-adv/kronecker.cpp	/^double TKronMtx::GetColSum(const int& ColId) const {$/;"	f	class:TKronMtx
GetColSum	snap-adv/mag.cpp	/^double TMAGAffMtx::GetColSum(const int& ColId) const {$/;"	f	class:TMAGAffMtx
GetColType	snap-core/table.h	/^	TAttrType GetColType(const TStr& ColName) const {$/;"	f	class:TTable
GetColType	snap-exp/alternativetable.h	/^  TAttrType GetColType(const TStr& ColName) const { $/;"	f	class:ExplicitStringTable
GetColType	snap-exp/alternativetable.h	/^  TAttrType GetColType(const TStr& ColName) const { $/;"	f	class:PhysicalOrderTable
GetColTypeMap	snap-core/table.h	/^  TPair<TAttrType, TInt> GetColTypeMap(const TStr& ColName) const {$/;"	f	class:TTable
GetColTypeMap	snap-exp/alternativetable.h	/^  TPair<TAttrType, TInt> GetColTypeMap(const TStr& ColName) const { $/;"	f	class:ExplicitStringTable
GetCollidingRows	snap-core/table.cpp	/^void TTable::GetCollidingRows(const TTable& Table, THashSet<TInt>& Collisions) {$/;"	f	class:TTable
GetCols	glib-core/ds.h	/^  int GetCols() const {return YDim;}$/;"	f	class:TVVec
GetCols	glib-core/linalg.h	/^    int GetCols() const { return Transposed ? PGetRows() : PGetCols(); }$/;"	f	class:TMatrix
GetCom	snap-adv/agmattr.h	/^  double inline GetCom(const int& NID, const int& CID) {$/;"	f	class:TCesna
GetCom	snap-adv/agmdirected.h	/^  double inline GetCom(const bool IsOut, const int& NID, const int& CID) {$/;"	f	class:TCoda
GetCom	snap-adv/agmfast.h	/^  double inline GetCom(const int& NID, const int& CID) {$/;"	f	class:TAGMFast
GetComFromNID	snap-adv/agmattr.h	/^  double GetComFromNID(const int& NID, const int& CID) {$/;"	f	class:TCesna
GetComIn	snap-adv/agmdirected.h	/^  double inline GetComIn(const int& NID, const int& CID) {$/;"	f	class:TCoda
GetComOut	snap-adv/agmdirected.h	/^  double inline GetComOut(const int& NID, const int& CID) {$/;"	f	class:TCoda
GetCombiningClass	glib-core/unicode.h	/^	int GetCombiningClass(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return TUniChInfo::ccStarter; else return h[i].combClass; }$/;"	f	class:TUniChDb
GetCombs	glib-core/xmath.cpp	/^int TComb::GetCombs() const {$/;"	f	class:TComb
GetComment	glib-core/xml.cpp	/^void TXmlLx::GetComment(){$/;"	f	class:TXmlLx
GetCommon	snap-core/triad.cpp	/^int GetCommon(TIntV& A, TIntV& B) {$/;"	f	namespace:TSnap
GetCommunity	snap-adv/agmdirected.cpp	/^void TCoda::GetCommunity(TIntV& CmtyVIn, TIntV& CmtyVOut, const int CID, const double Thres) {$/;"	f	class:TCoda
GetCommunity	snap-adv/agmdirected.h	/^  void GetCommunity(TIntV& CmtyVIn, TIntV& CmtyVOut, const int CID) { GetCommunity(CmtyVIn, CmtyVOut, CID, sqrt(PNoCom)); }$/;"	f	class:TCoda
GetCompositionExclusionsFn	glib-core/unicode.h	/^	static TStr GetCompositionExclusionsFn() { return "CompositionExclusions.txt"; }$/;"	f	class:TUniChDb
GetComps	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			void GetComps() {$/;"	f	class:TSBitSet::TIterator
GetComps	glib-core/tm.cpp	/^void TSecTm::GetComps(int& Year, int& Month, int& Day, int& Hour, int& Min, int& Sec) const {$/;"	f	class:TSecTm
GetConductance	snap-adv/agm.cpp	/^double TAGMUtil::GetConductance(const PUNGraph& Graph, const TIntSet& CmtyS, const int Edges) {$/;"	f	class:TAGMUtil
GetConductance	snap-adv/agmattr.h	/^static double GetConductance(const PGraph& Graph, const TIntSet& CmtyS, const int Edges) {$/;"	f	class:TCesnaUtil
GetConductance	snap-adv/agmfast.h	/^static double GetConductance(const PGraph& Graph, const TIntSet& CmtyS, const int Edges) {$/;"	f	class:TAGMFastUtil
GetContext	snap-core/table.h	/^  TTableContext* GetContext() {$/;"	f	class:TTable
GetContextKey	snap-core/table.h	/^  const char* GetContextKey(TInt Val) const {$/;"	f	class:TTable
GetContextMemUsedKB	snap-core/table.cpp	/^TSize TTable::GetContextMemUsedKB(){$/;"	f	class:TTable
GetCookieKeyValDmPathQuV	glib-core/http.cpp	/^void THttpResp::GetCookieKeyValDmPathQuV(TStrQuV& CookieKeyValDmPathQuV){$/;"	f	class:THttpResp
GetCoreEdges	snap-core/kcore.h	/^int TKCore<PGraph>::GetCoreEdges() const {$/;"	f	class:TKCore
GetCoreG	snap-core/kcore.h	/^  PGraph GetCoreG() const { return TSnap::GetSubGraph(Graph, NIdV); }$/;"	f	class:TKCore
GetCoreK	snap-core/kcore.h	/^int TKCore<PGraph>::GetCoreK(const int& K) {$/;"	f	class:TKCore
GetCoreNodes	snap-core/kcore.h	/^  int GetCoreNodes() const { return NIdV.Len(); }$/;"	f	class:TKCore
GetCount	snap-core/anf.h	/^  double GetCount(const TAnfBitV& BitV, const uint64& NIdOffset) const {$/;"	f	class:TGraphAnf
GetCrLf	glib-core/http.cpp	/^void THttpLx::GetCrLf(){$/;"	f	class:THttpLx
GetCrLfLn	glib-core/fl.cpp	/^TStr TMOut::GetCrLfLn(){$/;"	f	class:TMOut
GetCreateTm	glib-core/fl.cpp	/^uint64 TFile::GetCreateTm(const TStr& FNm) {$/;"	f	class:TFile
GetCrossId	snap-core/mmnet.h	/^    int GetCrossId() { return CrossNetHI.GetKey(); }$/;"	f	class:TMMNet::TCrossNetI
GetCrossId	snap-core/mmnet.h	/^  int GetCrossId(const TStr& CrossName) const { if (CrossNameToIdH.IsKey(CrossName)) { return CrossNameToIdH.GetDat(CrossName); } else { return -1; }   }$/;"	f	class:TMMNet
GetCrossName	snap-core/mmnet.h	/^    TStr GetCrossName() { return Graph->GetCrossName(CrossNetHI.GetKey()); }$/;"	f	class:TMMNet::TCrossNetI
GetCrossName	snap-core/mmnet.h	/^  TStr GetCrossName(const TInt& CrossId) const { if (CrossIdToNameH.IsKey(CrossId)) { return CrossIdToNameH.GetDat(CrossId); } else { return TStr::GetNullStr(); }  }$/;"	f	class:TMMNet
GetCrossNet	snap-core/mmnet.h	/^    TCrossNet& GetCrossNet() { return Graph->GetCrossNetById(GetCrossId()); }$/;"	f	class:TMMNet::TCrossNetI
GetCrossNetById	snap-core/mmnet.cpp	/^TCrossNet& TMMNet::GetCrossNetById(const TInt& CrossId) const{$/;"	f	class:TMMNet
GetCrossNetByName	snap-core/mmnet.cpp	/^TCrossNet& TMMNet::GetCrossNetByName(const TStr& CrossName) const{$/;"	f	class:TMMNet
GetCrossNetI	snap-core/mmnet.h	/^  TCrossNetI GetCrossNetI(const int& Id) const { return TCrossNetI(TCrossNetH.GetI(Id), this); }$/;"	f	class:TMMNet
GetCrossNetNames	snap-core/mmnet.h	/^    void GetCrossNetNames(TStrV& Names) { const TModeNet *TMGraph = static_cast<const TModeNet *>(Graph); TMGraph->GetCrossNetNames(Names); }$/;"	f	class:TModeNet::TNodeI
GetCrossNetNames	snap-core/mmnet.h	/^  void GetCrossNetNames(TStrV& Names) const { NeighborTypes.GetKeyV(Names); }$/;"	f	class:TModeNet
GetCrossNets	snap-core/mmnet.h	/^  int GetCrossNets() { return TCrossNetH.Len(); }$/;"	f	class:TMMNet
GetCs	glib-core/fl.h	/^  TCs GetCs(){TCs Cs; GetBf(&Cs, sizeof(Cs)); return Cs;}$/;"	f
GetCsFromBf	glib-core/fl.cpp	/^TCs TCs::GetCsFromBf(char* Bf, const int& BfL){$/;"	f	class:TCs
GetCurDir	glib-core/xfl.cpp	/^TStr TDir::GetCurDir(){$/;"	f	class:TDir
GetCurDtTm	glib-core/tm.h	/^  static TSecTm GetCurDtTm(){return GetDtTm(GetCurTm());}$/;"	f	class:TSecTm
GetCurFPos	glib-core/zipfl.h	/^  uint64 GetCurFPos() const { return CurFPos; }$/;"	f	class:TZipIn
GetCurK	snap-core/kcore.h	/^  int GetCurK() const { return CurK; } $/;"	f	class:TKCore
GetCurLocMSecs	glib-core/os.cpp	/^uint64 TSysTm::GetCurLocMSecs(){$/;"	f	class:TSysTm
GetCurLocMSecs	glib-core/tm.cpp	/^uint64 TTm::GetCurLocMSecs(){$/;"	f	class:TTm
GetCurLocTm	glib-core/os.cpp	/^TTm TSysTm::GetCurLocTm(){$/;"	f	class:TSysTm
GetCurLocTm	glib-core/tm.cpp	/^TTm TTm::GetCurLocTm(){$/;"	f	class:TTm
GetCurTm	glib-core/tm.cpp	/^TSecTm TSecTm::GetCurTm(){$/;"	f	class:TSecTm
GetCurTm	glib-core/tm.h	/^  static char* GetCurTm(){ static TStr TmStr; TmStr=TSecTm::GetCurTm().GetTmStr(); return TmStr.CStr(); }$/;"	f	class:TExeTm
GetCurUniMSecs	glib-core/os.cpp	/^uint64 TSysTm::GetCurUniMSecs(){$/;"	f	class:TSysTm
GetCurUniMSecs	glib-core/tm.cpp	/^uint64 TTm::GetCurUniMSecs(){$/;"	f	class:TTm
GetCurUniTm	glib-core/os.cpp	/^TTm TSysTm::GetCurUniTm(){$/;"	f	class:TSysTm
GetCurUniTm	glib-core/tm.cpp	/^TTm TTm::GetCurUniTm(){$/;"	f	class:TTm
GetCurrentDirectory	glib-core/os.cpp	/^int GetCurrentDirectory(const int MxBfL, char *Bf) {$/;"	f
GetCurveStat	snap-adv/ncp.cpp	/^void TLocClustStat::GetCurveStat(TFltPrV& MeanV, TFltPrV& MedV, TFltPrV& Dec1V, TFltPrV& MinV, TFltPrV& MaxV) const {$/;"	f	class:TLocClustStat
GetCut	snap-adv/ncp.h	/^  int GetCut(const int& Nodes) const { return CutV[Nodes]; }$/;"	f	class:TLocClust
GetCutEdges	snap-adv/ncp.h	/^  int GetCutEdges() const { return GetCut(BestCut()); }$/;"	f	class:TLocClust
GetCutN	snap-adv/ncp.h	/^  const TCutInfo& GetCutN(const int& N) const { return BestCutH[N]; }$/;"	f	class:TLocClustStat
GetCutPhi	snap-adv/ncp.h	/^  double GetCutPhi() const { return GetPhi(BestCut()); }$/;"	f	class:TLocClust
GetCutRatio	snap-adv/ncp.h	/^    double GetCutRatio(const int& GNodes) const { return double(CutSz)\/double(Nodes*(GNodes-Nodes)); }        \/\/ cut ratio (external density)$/;"	f	class:TLocClustStat::TCutInfo
GetCutStat	snap-adv/ncp.cpp	/^void TLocClust::GetCutStat(const PUNGraph& Graph, const TIntSet& NIdSet, int& Vol, int& Cut, double& Phi, int GraphEdges) {$/;"	f	class:TLocClust
GetCutStat	snap-adv/ncp.cpp	/^void TLocClust::GetCutStat(const PUNGraph& Graph, const TIntV& NIdV, int& Vol, int& Cut, double& Phi, int GraphEdges) {$/;"	f	class:TLocClust
GetCutSz	snap-adv/ncp.h	/^    int GetCutSz() const { return CutSz; }$/;"	f	class:TLocClustStat::TCutInfo
GetCutV	snap-adv/ncp.h	/^  const TIntV& GetCutV() const { return CutV; } $/;"	f	class:TLocClust
GetCutVol	snap-adv/ncp.h	/^  int GetCutVol() const { return GetVol(BestCut()); }$/;"	f	class:TLocClust
GetCuts	snap-adv/ncp.h	/^  int GetCuts() const { return BestCutH.Len(); }$/;"	f	class:TLocClustStat
GetDChStr	glib-core/dt.cpp	/^TStr& TStr::GetDChStr(const char& Ch1, const char& Ch2){$/;"	f	class:TStr
GetDLL	snap-adv/kronecker.h	/^  const TFltV& GetDLL() const { return GradV; }$/;"	f	class:TKroneckerLL
GetDLL	snap-adv/kronecker.h	/^  double GetDLL(const int& ParamId) const { return GradV[ParamId]; }$/;"	f	class:TKroneckerLL
GetDSecs	glib-core/tm.cpp	/^uint TSecTm::GetDSecs(const TSecTm& SecTm1, const TSecTm& SecTm2){$/;"	f	class:TSecTm
GetDat	glib-core/ds.h	/^  const TVal& GetDat(const TVal& Val) const { return GetVal(SearchForw(Val));}$/;"	f	class:TVec
GetDat	glib-core/hash.h	/^  TDat& GetDat() {Assert((KeyDatI!=NULL)&&(KeyDatI->HashCd!=-1)); return KeyDatI->Dat;}$/;"	f	class:THashKeyDatI
GetDat	glib-core/hash.h	/^  TDat& GetDat(const TKey& Key){return KeyDatV[GetKeyId(Key)].Dat;}$/;"	f	class:THash
GetDat	glib-core/hash.h	/^  const TDat& GetDat() const {Assert((KeyDatI!=NULL)&&(KeyDatI->HashCd!=-1)); return KeyDatI->Dat;}$/;"	f	class:THashKeyDatI
GetDat	glib-core/hash.h	/^  const TDat& GetDat(const TKey& Key) const {return KeyDatV[GetKeyId(Key)].Dat;}$/;"	f	class:THash
GetDat	glib-core/hashmp.h	/^  TDat& GetDat() {Assert((KeyDatI!=NULL)&&(KeyDatI->HashCd!=-1)); return KeyDatI->Dat;}$/;"	f	class:THashMPKeyDatI
GetDat	glib-core/hashmp.h	/^  TDat& GetDat(const TKey& Key){return Table[GetKeyId(Key)].Dat;}$/;"	f	class:THashMP
GetDat	glib-core/hashmp.h	/^  const TDat& GetDat() const {\/*Assert((KeyDatI!=NULL)&&(KeyDatI->HashCd!=-1));*\/ return KeyDatI->Dat;}$/;"	f	class:THashMPKeyDatI
GetDat	glib-core/hashmp.h	/^  const TDat& GetDat(const TKey& Key) const {return Table[GetKeyId(Key)].Dat;}$/;"	f	class:THashMP
GetDat	glib-core/shash.h	/^  TDat& GetDat() { return Dat; }$/;"	f	class:TKeyDatFl
GetDat	glib-core/shash.h	/^  const TDat& GetDat() const { return Dat; }$/;"	f	class:TKeyDatFl
GetDat	glib-core/shash.h	/^TDat& TSparseHash<TKey, TDat, GroupSize>::GetDat(const TKey& Key) {$/;"	f	class:TSparseHash
GetDat	glib-core/shash.h	/^const TDat& TSparseHash<TKey, TDat, GroupSize>::GetDat(const TKey& Key) const {$/;"	f	class:TSparseHash
GetDat	snap-core/bignet.h	/^    TNodeData& GetDat() { return NodeHI->Dat.Dat; }$/;"	f	class:TBigNet::TNodeI
GetDat	snap-core/bignet.h	/^    const TNodeData& GetDat() const { return NodeHI->Dat.Dat; }$/;"	f	class:TBigNet::TNodeI
GetDat	snap-core/ghash.h	/^  TDat& GetDat(const PNGraph& Graph) { return GraphH[GetKeyId(Graph)]; }$/;"	f	class:TGHash
GetDat	snap-core/ghash.h	/^  TDat& GetDat(const TGraphKey& Key) { return GraphH.GetDat(Key); }$/;"	f	class:TGHash
GetDat	snap-core/ghash.h	/^  const TDat& GetDat(const PNGraph& Graph) const { return GraphH[GetKeyId(Graph)]; }$/;"	f	class:TGHash
GetDat	snap-core/ghash.h	/^  const TDat& GetDat(const TGraphKey& Key) const { return GraphH.GetDat(Key); }$/;"	f	class:TGHash
GetDat	snap-core/mmnet.h	/^    TFlt GetDat() const { return HI[0]; }$/;"	f	class:TCrossNet::TAFltI
GetDat	snap-core/mmnet.h	/^    TInt GetDat() const { return HI[0]; }$/;"	f	class:TCrossNet::TAIntI
GetDat	snap-core/mmnet.h	/^    TStr GetDat() const { return HI[0]; }$/;"	f	class:TCrossNet::TAStrI
GetDat	snap-core/network.h	/^    TEdgeData& GetDat() { return CurNode.GetOutEDat(CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetDat	snap-core/network.h	/^    TEdgeData& GetDat() { return EdgeDat; }$/;"	f	class:TNodeEdgeNet::TEdge
GetDat	snap-core/network.h	/^    TEdgeData& GetDat() { return EdgeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetDat	snap-core/network.h	/^    TFlt GetDat() const { return HI[0]; }$/;"	f	class:TNEANet::TAFltI
GetDat	snap-core/network.h	/^    TInt GetDat() const { return HI[0]; }$/;"	f	class:TNEANet::TAIntI
GetDat	snap-core/network.h	/^    TIntV GetDat() const { return HI[0]; }$/;"	f	class:TNEANet::TAIntVI
GetDat	snap-core/network.h	/^    TNodeData& GetDat() { return NodeDat; }$/;"	f	class:TNodeEDatNet::TNode
GetDat	snap-core/network.h	/^    TNodeData& GetDat() { return NodeDat; }$/;"	f	class:TNodeEdgeNet::TNode
GetDat	snap-core/network.h	/^    TNodeData& GetDat() { return NodeDat; }$/;"	f	class:TNodeNet::TNode
GetDat	snap-core/network.h	/^    TNodeData& GetDat() { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEDatNet::TNodeI
GetDat	snap-core/network.h	/^    TNodeData& GetDat() { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetDat	snap-core/network.h	/^    TNodeData& GetDat() { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeNet::TNodeI
GetDat	snap-core/network.h	/^    TStr GetDat() const { return HI[0]; }$/;"	f	class:TNEANet::TAStrI
GetDat	snap-core/network.h	/^    const TEdgeData& GetDat() const { return CurNode.GetOutEDat(CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetDat	snap-core/network.h	/^    const TEdgeData& GetDat() const { return EdgeDat; }$/;"	f	class:TNodeEdgeNet::TEdge
GetDat	snap-core/network.h	/^    const TEdgeData& GetDat() const { return EdgeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetDat	snap-core/network.h	/^    const TNodeData& GetDat() const { return NodeDat; }$/;"	f	class:TNodeEDatNet::TNode
GetDat	snap-core/network.h	/^    const TNodeData& GetDat() const { return NodeDat; }$/;"	f	class:TNodeEdgeNet::TNode
GetDat	snap-core/network.h	/^    const TNodeData& GetDat() const { return NodeDat; }$/;"	f	class:TNodeNet::TNode
GetDat	snap-core/network.h	/^    const TNodeData& GetDat() const { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEDatNet::TNodeI
GetDat	snap-core/network.h	/^    const TNodeData& GetDat() const { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetDat	snap-core/network.h	/^    const TNodeData& GetDat() const { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeNet::TNodeI
GetDat	snap-core/networkmp.h	/^    TFlt GetDat() const { return HI[0]; }$/;"	f	class:TNEANetMP::TAFltI
GetDat	snap-core/networkmp.h	/^    TInt GetDat() const { return HI[0]; }$/;"	f	class:TNEANetMP::TAIntI
GetDat	snap-core/networkmp.h	/^    TStr GetDat() const { return HI[0]; }$/;"	f	class:TNEANetMP::TAStrI
GetDatId	snap-core/ghash.h	/^  TDat& GetDatId(const int& KeyId) { return GraphH[KeyId]; }$/;"	f	class:TGHash
GetDatId	snap-core/ghash.h	/^  const TDat& GetDatId(const int& KeyId) const { return GraphH[KeyId]; }$/;"	f	class:TGHash
GetDatKeyId	glib-core/shash.h	/^  TDat& GetDatKeyId(const int& KeyId) { return Table.Set(KeyId).Dat; }$/;"	f	class:TSparseHash
GetDatKeyId	glib-core/shash.h	/^  const TDat& GetDatKeyId(const int& KeyId) const { return Table.Get(KeyId).Dat; }$/;"	f	class:TSparseHash
GetDatKeyKdV	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::GetDatKeyKdV(TVec<TKeyDat<TDat, TKey> >& DatKeyKdV) const {$/;"	f	class:THash
GetDatKeyKdV	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::GetDatKeyKdV(TVec<TKeyDat<TDat, TKey> >& DatKeyKdV) const {$/;"	f	class:THashMP
GetDatKeyPrV	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::GetDatKeyPrV(TVec<TPair<TDat, TKey> >& DatKeyPrV) const {$/;"	f	class:THash
GetDatKeyPrV	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::GetDatKeyPrV(TVec<TPair<TDat, TKey> >& DatKeyPrV) const {$/;"	f	class:THashMP
GetDatKeyPrV	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::GetDatKeyPrV(TVec<TPair<TDat, TKey> >& DatKeyPrV) const {$/;"	f	class:TSparseHash
GetDatKeyPrV	snap-core/ghash.h	/^  void GetDatKeyPrV(TVec<TPair<TDat, TGraphKey> >& DatKeyPrV) const { GraphH.GetDatKeyPrV(DatKeyPrV); }$/;"	f	class:TGHash
GetDatV	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::GetDatV(TVec<TDat>& DatV) const {$/;"	f	class:THash
GetDatV	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::GetDatV(TVec<TDat>& DatV) const {$/;"	f	class:THashMP
GetDatV	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::GetDatV(TVec<TDat>& DatV) const {$/;"	f	class:TSparseHash
GetDatV	snap-core/ghash.h	/^  void GetDatV(TVec<TDat>& DatV) const { GraphH.GetDatV(DatV); }$/;"	f	class:TGHash
GetDatWithDefault	glib-core/hash.h	/^  TDat GetDatWithDefault(const TKey& Key, TDat DefaultValue) {$/;"	f	class:THash
GetDateIntFromTm	glib-core/tm.cpp	/^uint TTm::GetDateIntFromTm(const TTm& Tm) {$/;"	f	class:TTm
GetDateTimeInt	glib-core/tm.cpp	/^uint TTm::GetDateTimeInt(const int& Year, const int& Month,$/;"	f	class:TTm
GetDateTimeIntFromTm	glib-core/tm.cpp	/^uint TTm::GetDateTimeIntFromTm(const TTm& Tm) {$/;"	f	class:TTm
GetDay	glib-core/tm.h	/^  int GetDay() const {return Day;}$/;"	f	class:TTm
GetDay	snap-core/gstat.h	/^  int GetDay() const { return Time.GetDayN(); }$/;"	f	class:TGStat
GetDayMSecs	glib-core/tm.h	/^  static uint64 GetDayMSecs(){return 24*60*60*1000;}$/;"	f	class:TTmInfo
GetDayN	glib-core/tm.cpp	/^int TSecTm::GetDayN() const {$/;"	f	class:TSecTm
GetDayOfWeek	glib-core/tm.h	/^  int GetDayOfWeek() const {return DayOfWeek;}$/;"	f	class:TTm
GetDayOfWeekN	glib-core/tm.cpp	/^int TSecTm::GetDayOfWeekN() const {$/;"	f	class:TSecTm
GetDayOfWeekN	glib-core/tm.cpp	/^int TTmInfo::GetDayOfWeekN(const TStr& DayOfWeekNm, const TLoc& Loc){$/;"	f	class:TTmInfo
GetDayOfWeekNm	glib-core/tm.cpp	/^TStr TSecTm::GetDayOfWeekNm(const TLoc& Loc) const {$/;"	f	class:TSecTm
GetDayOfWeekNm	glib-core/tm.cpp	/^TStr TTmInfo::GetDayOfWeekNm(const int& DayOfWeekN, const TLoc& Loc){$/;"	f	class:TTmInfo
GetDayOfWeekNm	glib-core/tm.h	/^  TStr GetDayOfWeekNm() const {return TTmInfo::GetDayOfWeekNm(DayOfWeek);}$/;"	f	class:TTm
GetDayPart	glib-core/tm.cpp	/^TStr TSecTm::GetDayPart() const {$/;"	f	class:TSecTm
GetDecile	glib-core/xmath.h	/^  double GetDecile(const int& DecileN) const {$/;"	f
GetDef	glib-core/unicodestring.h	/^  static TUnicode* GetDef(){$/;"	f	class:TUnicodeDef
GetDeg	snap-core/bignet.h	/^    int GetDeg() const { return GetInDeg()+(InNIdV!=OutNIdV?GetOutDeg():0); }$/;"	f	class:TBigNet::TNodeI
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNEGraph::TNode
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNGraph::TNode
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return HI().GetDat().GetDeg(); }$/;"	f	class:TBPGraph::TNodeI
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return NIdV.Len(); }$/;"	f	class:TBPGraph::TNode
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return NIdV.Len(); }$/;"	f	class:TUNGraph::TNode
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNEGraph::TNodeI
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNGraph::TNodeI
GetDeg	snap-core/graph.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TUNGraph::TNodeI
GetDeg	snap-core/graphmp.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNGraphMP::TNode
GetDeg	snap-core/graphmp.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNGraphMP::TNodeI
GetDeg	snap-core/network.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TDirNet::TNode
GetDeg	snap-core/network.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNEANet::TNode
GetDeg	snap-core/network.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNodeEDatNet::TNode
GetDeg	snap-core/network.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNodeEdgeNet::TNode
GetDeg	snap-core/network.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNodeNet::TNode
GetDeg	snap-core/network.h	/^    int GetDeg() const { return NIdV.Len(); }$/;"	f	class:TUndirNet::TNode
GetDeg	snap-core/network.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TDirNet::TNodeI
GetDeg	snap-core/network.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNEANet::TNodeI
GetDeg	snap-core/network.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNodeEDatNet::TNodeI
GetDeg	snap-core/network.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetDeg	snap-core/network.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNodeNet::TNodeI
GetDeg	snap-core/network.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TUndirNet::TNodeI
GetDeg	snap-core/networkmp.h	/^    int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TNEANetMP::TNode
GetDeg	snap-core/networkmp.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TNEANetMP::TNodeI
GetDeg	snap-exp/graphmp-exp.h	/^    int GetDeg() const { return NIdV.Len(); }$/;"	f	class:TUNGraphMP::TNode
GetDeg	snap-exp/graphmp-exp.h	/^    int GetDeg() const { return NodeHI.GetDat().GetDeg(); }$/;"	f	class:TUNGraphMP::TNodeI
GetDeg	snap-exp/mmgraph-exp.h	/^    int GetDeg() const { return HashI.GetDat().GetDeg(); }$/;"	f	class:TMNet::TMNodeI
GetDeg	snap-exp/mmgraph-exp.h	/^  int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TMVNode
GetDeg	snap-exp/mmgraph-exp.h	/^  int GetDeg() const { return GetInDeg() + GetOutDeg(); }$/;"	f	class:TSVNode
GetDeg	snap-exp/mmgraph-exp.h	/^  int GetDeg() const { return InDeg + OutDeg; }$/;"	f	class:TCVNode
GetDegCnt	snap-core/alg.h	/^void GetDegCnt(const PGraph& Graph, TFltPrV& DegToCntV) {$/;"	f	namespace:TSnap
GetDegCnt	snap-core/alg.h	/^void GetDegCnt(const PGraph& Graph, TIntPrV& DegToCntV) {$/;"	f	namespace:TSnap
GetDegSeqV	snap-core/alg.h	/^void GetDegSeqV(const PGraph& Graph, TIntV& DegV) {$/;"	f	namespace:TSnap
GetDegSeqV	snap-core/alg.h	/^void GetDegSeqV(const PGraph& Graph, TIntV& InDegV, TIntV& OutDegV) {$/;"	f	namespace:TSnap
GetDegreeCentr	snap-core/centr.cpp	/^double GetDegreeCentr(const PUNGraph& Graph, const int& NId) {$/;"	f	namespace:TSnap
GetDelEdges	snap-core/bignet.h	/^uint TBigNet<TNodeData, IsDir>::GetDelEdges() {$/;"	f	class:TBigNet
GetDerivedCorePropsFn	glib-core/unicode.h	/^	static TStr GetDerivedCorePropsFn() { return "DerivedCoreProperties.txt"; }$/;"	f	class:TUniChDb
GetDerivs	snap-exp/sir.cpp	/^void TSir2Model::GetDerivs(const double& T, const TFltV& SirValV, TFltV& dxdyV) {$/;"	f	class:TSir2Model
GetDerivs	snap-exp/sir.cpp	/^void TSirModel::GetDerivs(const double& T, const TFltV& SirValV, TFltV& dxdyV) {$/;"	f	class:TSirModel
GetDerivs	snap-exp/sir.cpp	/^void TSirSR2Model::GetDerivs(const double& T, const TFltV& SirValV, TFltV& dxdyV) {$/;"	f	class:TSirSR2Model
GetDesc	snap-exp/memes.cpp	/^TStr TQuote::GetDesc() const {$/;"	f	class:TQuote
GetDfFNm	glib-core/unicodestring.cpp	/^TStr TUnicodeDef::GetDfFNm(){$/;"	f	class:TUnicodeDef
GetDfsVisitor	snap-core/cncom.h	/^void TCnCom::GetDfsVisitor(const PGraph& Graph, TVisitor& Visitor) {$/;"	f	class:TCnCom
GetDiff	glib-core/tm.cpp	/^void TTm::GetDiff(const TTm& Tm1, const TTm& Tm2, int& Days, $/;"	f	class:TTm
GetDiffDays	glib-core/tm.h	/^  static uint64 GetDiffDays(const TTm& Tm1, const TTm& Tm2){$/;"	f	class:TTm
GetDiffHrs	glib-core/tm.h	/^  static uint64 GetDiffHrs(const TTm& Tm1, const TTm& Tm2){$/;"	f	class:TTm
GetDiffMSecs	glib-core/tm.cpp	/^uint64 TTm::GetDiffMSecs(const TTm& Tm1, const TTm& Tm2){$/;"	f	class:TTm
GetDiffMins	glib-core/tm.h	/^  static uint64 GetDiffMins(const TTm& Tm1, const TTm& Tm2){$/;"	f	class:TTm
GetDiffSecs	glib-core/tm.h	/^  static uint64 GetDiffSecs(const TTm& Tm1, const TTm& Tm2){$/;"	f	class:TTm
GetDigitCh	glib-core/url.cpp	/^  char GetDigitCh(){EAssertR(IsDigitCh(), ""); return GetCh();}$/;"	f	class:TUrlLx
GetDigits	glib-core/url.cpp	/^  TStr GetDigits(){TChA Str;$/;"	f	class:TUrlLx
GetDim	snap-adv/kronecker.h	/^  int GetDim() const { return MtxDim; }$/;"	f	class:TKronMtx
GetDim	snap-adv/kronecker.h	/^  int GetDim() const { return ProbMtx.GetDim(); }$/;"	f	class:TKroneckerLL
GetDim	snap-adv/mag.h	/^	const int GetDim(const int& Attr) const {  return AffMtxV[Attr].GetDim();  }$/;"	f	class:TMAGParam
GetDim	snap-adv/mag.h	/^  int GetDim() const { return MtxDim; }$/;"	f	class:TMAGAffMtx
GetDimV	snap-adv/mag.h	/^void TMAGParam<TNodeAttr>::GetDimV(TIntV& DimV) const {$/;"	f	class:TMAGParam
GetDiskSz	glib-core/shash.h	/^  uint GetDiskSz() const { return 2*sizeof(TInt) + Table.GetDiskSz(); }$/;"	f	class:TSparseHash
GetDiskSz	glib-core/shash.h	/^  uint GetDiskSz() const { return 2*sizeof(TInt) + Table.GetDiskSz(); }$/;"	f	class:TSparseSet
GetDiskSz	glib-core/shash.h	/^  uint GetDiskSz() const { return sizeof(BitSet) + sizeof(uint16) + Buckets*sizeof(TVal); }$/;"	f	class:TSparseGroup
GetDiskSz	glib-core/shash.h	/^  uint GetDiskSz() const {$/;"	f	class:TSparseTable
GetDistr	snap-core/gstat.cpp	/^const TFltPrV& TGStat::GetDistr(const TGStatDistr& Distr) const {$/;"	f	class:TGStat
GetDistr	snap-core/gstat.cpp	/^void TGStat::GetDistr(const TGStatDistr& Distr, TFltPrV& FltPrV) const {$/;"	f	class:TGStat
GetDistrStr	snap-core/gstat.cpp	/^TStr TGStat::GetDistrStr(const TGStatDistr& Distr) {$/;"	f	class:TGStat
GetDistrs	snap-core/gstat.h	/^  int GetDistrs() const { return DistrStatH.Len(); }$/;"	f	class:TGStat
GetDmNm	glib-core/url.cpp	/^TStr TUrl::GetDmNm(const int& MxDmSegs) const {$/;"	f	class:TUrl
GetDocStrFromUrlStr	glib-core/url.cpp	/^TStr TUrl::GetDocStrFromUrlStr(const TStr& UrlStr, const int& Copies){$/;"	f	class:TUrl
GetDocTypeDecl	glib-core/xml.cpp	/^void TXmlLx::GetDocTypeDecl(){$/;"	f	class:TXmlLx
GetDomNm	snap-core/util.cpp	/^TChA TStrUtil::GetDomNm(const TChA& UrlChA) {$/;"	f	class:TStrUtil
GetDomNm	snap-exp/memenet.h	/^  TChA GetDomNm(const int& UrlId) const { return TStrUtil::GetDomNm2(UrlH.GetKey(UrlId)); }$/;"	f	class:TMemeNetBs
GetDomNm2	snap-core/util.cpp	/^TChA TStrUtil::GetDomNm2(const TChA& UrlChA) {$/;"	f	class:TStrUtil
GetDomainId	snap-adv/cascdynetinf.h	/^  int GetDomainId(const TStr& Domain) { return DomainsIdH.GetDat(Domain); }$/;"	f	class:TNIBs
GetDoms	snap-exp/memes.cpp	/^int TQuote::GetDoms(const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
GetDstCol	snap-core/table.h	/^	TStr GetDstCol() const { return DstCol; }$/;"	f	class:TTable
GetDstModeId	snap-core/mmnet.h	/^    int GetDstModeId() const { return Graph->GetMode2(); }$/;"	f	class:TCrossNet::TCrossEdgeI
GetDstNDat	snap-core/bignet.h	/^    TNodeData& GetDstNDat() { return CurNode.GetOutNDat(CurEdge); }$/;"	f	class:TBigNet::TEdgeI
GetDstNDat	snap-core/network.h	/^    TNodeData& GetDstNDat() { return CurNode.GetOutNDat(CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetDstNDat	snap-core/network.h	/^    TNodeData& GetDstNDat() { return CurNode.GetOutNDat(CurEdge); }$/;"	f	class:TNodeNet::TEdgeI
GetDstNDat	snap-core/network.h	/^    TNodeData& GetDstNDat() { return Net->GetNDat(GetDstNId()); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetDstNDat	snap-core/network.h	/^    const TNodeData& GetDstNDat() const { return CurNode.GetOutNDat(CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetDstNDat	snap-core/network.h	/^    const TNodeData& GetDstNDat() const { return Net->GetNDat(GetDstNId()); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetDstNId	snap-core/bignet.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TBigNet::TEdgeI
GetDstNId	snap-core/graph.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TBPGraph::TEdgeI
GetDstNId	snap-core/graph.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TNGraph::TEdgeI
GetDstNId	snap-core/graph.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TUNGraph::TEdgeI
GetDstNId	snap-core/graph.h	/^    int GetDstNId() const { return DstNId; }$/;"	f	class:TNEGraph::TEdge
GetDstNId	snap-core/graph.h	/^    int GetDstNId() const { return EdgeHI.GetDat().GetDstNId(); }$/;"	f	class:TNEGraph::TEdgeI
GetDstNId	snap-core/graphmp.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TNGraphMP::TEdgeI
GetDstNId	snap-core/mmnet.h	/^    int GetDstNId() const { return CrossHI.GetDat().GetDstNId(); }$/;"	f	class:TCrossNet::TCrossEdgeI
GetDstNId	snap-core/mmnet.h	/^    int GetDstNId() const { return DstNId; }$/;"	f	class:TCrossNet::TCrossEdge
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TDirNet::TEdgeI
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TNodeNet::TEdgeI
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TUndirNet::TEdgeI
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return DstNId; }$/;"	f	class:TNEANet::TEdge
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return DstNId; }$/;"	f	class:TNodeEdgeNet::TEdge
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return EdgeHI.GetDat().GetDstNId(); }$/;"	f	class:TNEANet::TEdgeI
GetDstNId	snap-core/network.h	/^    int GetDstNId() const { return EdgeHI.GetDat().GetDstNId(); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetDstNId	snap-core/networkmp.h	/^    int GetDstNId() const { return DstNId; }$/;"	f	class:TNEANetMP::TEdge
GetDstNId	snap-core/networkmp.h	/^    int GetDstNId() const { return EdgeHI.GetDat().GetDstNId(); }$/;"	f	class:TNEANetMP::TEdgeI
GetDstNId	snap-exp/graphmp-exp.h	/^    int GetDstNId() const { return CurNode.GetOutNId(CurEdge); }$/;"	f	class:TUNGraphMP::TEdgeI
GetDstNId	snap-exp/mmgraph-exp.h	/^    int GetDstNId() const { return DstNId; }$/;"	f	class:TMNet::TEdge
GetDstNId	snap-exp/mmgraph-exp.h	/^    int GetDstNId() const { return EdgeHI.GetDat().GetDstNId(); }$/;"	f	class:TMNet::TEdgeI
GetDstNodeFltAttrV	snap-core/table.cpp	/^TStrV TTable::GetDstNodeFltAttrV() const {$/;"	f	class:TTable
GetDstNodeIntAttrV	snap-core/table.cpp	/^TStrV TTable::GetDstNodeIntAttrV() const {$/;"	f	class:TTable
GetDstNodeStrAttrV	snap-core/table.cpp	/^TStrV TTable::GetDstNodeStrAttrV() const {$/;"	f	class:TTable
GetDtMdyStr	glib-core/tm.cpp	/^TStr TSecTm::GetDtMdyStr() const {$/;"	f	class:TSecTm
GetDtStr	glib-core/tm.cpp	/^TStr TSecTm::GetDtStr(const TLoc& Loc) const {$/;"	f	class:TSecTm
GetDtTm	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTm(const TSecTm& Tm){$/;"	f	class:TSecTm
GetDtTm	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTm(const int& YearN, const int& MonthN, const int& DayN){$/;"	f	class:TSecTm
GetDtTmFromDmyStr	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTmFromDmyStr(const TStr& DmyStr){$/;"	f	class:TSecTm
GetDtTmFromHmsStr	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTmFromHmsStr(const TStr& HmsStr){$/;"	f	class:TSecTm
GetDtTmFromMdyHmsPmStr	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTmFromMdyHmsPmStr(const TStr& MdyHmsPmStr,$/;"	f	class:TSecTm
GetDtTmFromMdyStr	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTmFromMdyStr(const TStr& MdyStr){$/;"	f	class:TSecTm
GetDtTmFromStr	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTmFromStr(const TChA& YmdHmsPmStr, const int& YearId, const int& MonId,$/;"	f	class:TSecTm
GetDtTmFromYmdHmsStr	glib-core/tm.cpp	/^TSecTm TSecTm::GetDtTmFromYmdHmsStr(const TStr& YmdHmsPmStr,$/;"	f	class:TSecTm
GetDtTmSortFNmStr	glib-core/tm.cpp	/^TStr TSecTm::GetDtTmSortFNmStr() const {$/;"	f	class:TSecTm
GetDtTmSortStr	glib-core/tm.cpp	/^TStr TSecTm::GetDtTmSortStr() const {$/;"	f	class:TSecTm
GetDtYmdStr	glib-core/tm.cpp	/^TStr TSecTm::GetDtYmdStr() const {$/;"	f	class:TSecTm
GetDummy	snap-exp/linkpred.h	/^  int GetDummy() const { return DummyNId; }$/;"	f	class:__OLD__::TQGraph
GetEAFltI	snap-core/mmnet.h	/^  TAFltI GetEAFltI(const TStr& attr, const int& EId) const {$/;"	f	class:TCrossNet
GetEAFltI	snap-core/network.h	/^  TAFltI GetEAFltI(const TStr& attr, const int& EId) const {$/;"	f	class:TNEANet
GetEAFltI	snap-core/networkmp.h	/^  TAFltI GetEAFltI(const TStr& attr, const int& EId) const {$/;"	f	class:TNEANetMP
GetEAIntI	snap-core/mmnet.h	/^  TAIntI GetEAIntI(const TStr& attr, const int& EId) const {$/;"	f	class:TCrossNet
GetEAIntI	snap-core/network.h	/^  TAIntI GetEAIntI(const TStr& attr, const int& EId) const {$/;"	f	class:TNEANet
GetEAIntI	snap-core/networkmp.h	/^  TAIntI GetEAIntI(const TStr& attr, const int& EId) const {$/;"	f	class:TNEANetMP
GetEAIntVI	snap-core/network.h	/^  TAIntVI GetEAIntVI(const TStr& attr, const int& EId) const {$/;"	f	class:TNEANet
GetEAStrI	snap-core/mmnet.h	/^  TAStrI GetEAStrI(const TStr& attr, const int& EId) const {$/;"	f	class:TCrossNet
GetEAStrI	snap-core/network.h	/^  TAStrI GetEAStrI(const TStr& attr, const int& EId) const {$/;"	f	class:TNEANet
GetEAStrI	snap-core/networkmp.h	/^  TAStrI GetEAStrI(const TStr& attr, const int& EId) const {$/;"	f	class:TNEANetMP
GetEAttrV	snap-exp/linkpred.h	/^  const TFltV& GetEAttrV(const TIntPr& Edge) const { return EAttrV.GetDat(Edge); }$/;"	f	class:__OLD__::TLpExample
GetEDat	snap-core/network.h	/^  TEdgeData& GetEDat(const int& EId) { return EdgeH.GetDat(EId).EdgeDat; }$/;"	f	class:TNodeEdgeNet
GetEDat	snap-core/network.h	/^  const TEdgeData& GetEDat(const int& EId) const { return EdgeH.GetDat(EId).EdgeDat; }$/;"	f	class:TNodeEdgeNet
GetEDat	snap-core/network.h	/^TEdgeData& TNodeEDatNet<TNodeData, TEdgeData>::GetEDat(const int& SrcNId, const int& DstNId) {$/;"	f	class:TNodeEDatNet
GetEDat	snap-core/network.h	/^bool TNodeEDatNet<TNodeData, TEdgeData>::GetEDat(const int& SrcNId, const int& DstNId, TEdgeData& EdgeDat) const {$/;"	f	class:TNodeEDatNet
GetEDat	snap-core/network.h	/^const TEdgeData& TNodeEDatNet<TNodeData, TEdgeData>::GetEDat(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TNodeEDatNet
GetEDatSubGraph	snap-core/subgraph.h	/^PGraph GetEDatSubGraph(const PGraph& Graph, const TEdgeDat& EDat, const int& Cmp) {$/;"	f	namespace:TSnap
GetEDatSubGraph	snap-core/subgraph.h	/^PGraph GetEDatSubGraph(const PGraph& Graph, const TIntV& NIdV, const TEdgeDat& EDat, const int& Cmp) {$/;"	f	namespace:TSnap
GetEI	snap-core/graph.cpp	/^TBPGraph::TEdgeI TBPGraph::GetEI(const int& LeftNId, const int& RightNId) const {$/;"	f	class:TBPGraph
GetEI	snap-core/graph.cpp	/^TNGraph::TEdgeI TNGraph::GetEI(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TNGraph
GetEI	snap-core/graph.cpp	/^TUNGraph::TEdgeI TUNGraph::GetEI(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TUNGraph
GetEI	snap-core/graph.h	/^  TEdgeI GetEI(const int& EId) const { return TEdgeI(EdgeH.GetI(EId), this); }$/;"	f	class:TNEGraph
GetEI	snap-core/graph.h	/^  TEdgeI GetEI(const int& SrcNId, const int& DstNId) const { return GetEI(GetEId(SrcNId, DstNId)); }$/;"	f	class:TNEGraph
GetEI	snap-core/graphmp.cpp	/^TNGraphMP::TEdgeI TNGraphMP::GetEI(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TNGraphMP
GetEI	snap-core/network.cpp	/^TDirNet::TEdgeI TDirNet::GetEI(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TDirNet
GetEI	snap-core/network.cpp	/^TUndirNet::TEdgeI TUndirNet::GetEI(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TUndirNet
GetEI	snap-core/network.h	/^  TEdgeI GetEI(const int& EId) const { return TEdgeI(EdgeH.GetI(EId), this); }$/;"	f	class:TNEANet
GetEI	snap-core/network.h	/^  TEdgeI GetEI(const int& EId) const { return TEdgeI(EdgeH.GetI(EId), this); }$/;"	f	class:TNodeEdgeNet
GetEI	snap-core/network.h	/^  TEdgeI GetEI(const int& SrcNId, const int& DstNId) const { return GetEI(GetEId(SrcNId, DstNId)); }$/;"	f	class:TNEANet
GetEI	snap-core/network.h	/^  TEdgeI GetEI(const int& SrcNId, const int& DstNId) const { return GetEI(GetEId(SrcNId, DstNId)); }$/;"	f	class:TNodeEdgeNet
GetEI	snap-core/network.h	/^typename TNodeEDatNet<TNodeData, TEdgeData>::TEdgeI  TNodeEDatNet<TNodeData, TEdgeData>::GetEI(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TNodeEDatNet
GetEI	snap-core/network.h	/^typename TNodeNet<TNodeData>::TEdgeI  TNodeNet<TNodeData>::GetEI(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TNodeNet
GetEI	snap-core/networkmp.h	/^  TEdgeI GetEI(const int& EId) const { return TEdgeI(EdgeH.GetI(EId), this); }$/;"	f	class:TNEANetMP
GetEI	snap-core/networkmp.h	/^  TEdgeI GetEI(const int& SrcNId, const int& DstNId) const { return GetEI(GetEId(SrcNId, DstNId)); }$/;"	f	class:TNEANetMP
GetEI	snap-exp/mmgraph-exp.h	/^  TEdgeI GetEI(const int& EId) const { return TEdgeI(EdgeH.GetI(EId), this); }$/;"	f	class:TMNet
GetEI	snap-exp/mmgraph-exp.h	/^  TEdgeI GetEI(const int& SrcNId, const int& DstNId) const { return GetEI(GetEId(SrcNId, DstNId)); }$/;"	f	class:TMNet
GetEId	snap-core/graph.h	/^  int GetEId(const int& SrcNId, const int& DstNId) const { int EId; return IsEdge(SrcNId, DstNId, EId)?EId:-1; }$/;"	f	class:TNEGraph
GetEId	snap-core/network.h	/^  int GetEId(const int& SrcNId, const int& DstNId) const { int EId; return IsEdge(SrcNId, DstNId, EId)?EId:-1; }$/;"	f	class:TNEANet
GetEId	snap-core/network.h	/^  int GetEId(const int& SrcNId, const int& DstNId) const { int EId; return IsEdge(SrcNId, DstNId, EId)?EId:-1; }$/;"	f	class:TNodeEdgeNet
GetEId	snap-core/networkmp.h	/^  int GetEId(const int& SrcNId, const int& DstNId) const { int EId; return IsEdge(SrcNId, DstNId, EId)?EId:-1; }$/;"	f	class:TNEANetMP
GetEId	snap-exp/mmgraph-exp.h	/^  int GetEId(const int& SrcNId, const int& DstNId) const { int EId; return IsEdge(SrcNId, DstNId, EId)?EId:-1; }$/;"	f	class:TMNet
GetEIdByFrac	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetEIdByFrac(TIntV& EIdV, const int& MinLen, const double& MnFracSup, const double& MxFracSup) const {$/;"	f	class:TWikiElecBs
GetEIdByTm	snap-core/timenet.cpp	/^void TTimeNENet::GetEIdByTm(TIntV& EIdV) const {$/;"	f	class:TTimeNENet
GetEIdByVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetEIdByVotes(TIntV& EIdV, const bool& AscNumVotes) const {$/;"	f	class:TWikiElecBs
GetEIdByVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetEIdByVotes(TIntV& EIdV, const int& MinLen, const double& FracPos, const double AboveFrac, const bool& AscNumVotes) const {$/;"	f	class:TWikiElecBs
GetEIdV	snap-core/graph.cpp	/^void TNEGraph::GetEIdV(TIntV& EIdV) const {$/;"	f	class:TNEGraph
GetEIdV	snap-core/network.cpp	/^void TNEANet::GetEIdV(TIntV& EIdV) const {$/;"	f	class:TNEANet
GetEIdV	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::GetEIdV(TIntV& EIdV) const {$/;"	f	class:TNodeEdgeNet
GetEIdV	snap-core/networkmp.cpp	/^void TNEANetMP::GetEIdV(TIntV& EIdV) const {$/;"	f	class:TNEANetMP
GetESubGraph	snap-core/subgraph.h	/^PGraph GetESubGraph(const PGraph& Graph, const TIntPrV& EdgeV) {$/;"	f	namespace:TSnap
GetESubGraph	snap-core/subgraph.h	/^PGraph GetESubGraph(const PGraph& Graph, const TIntV& EIdV) {$/;"	f	namespace:TSnap
GetESubGraph	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::GetESubGraph(const TIntV& EIdV) const {$/;"	f	class:TTimeNENet
GetETypeId	snap-exp/mmgraph-exp.h	/^  int GetETypeId(const TStr& ETypeStr) { return ETypeH.GetDat(ETypeStr); }$/;"	f	class:TMNet
GetEZero	snap-adv/kronecker.cpp	/^double TKronMtx::GetEZero(const int& Edges, const int& KronIters) const {$/;"	f	class:TKronMtx
GetEdCnt	snap-exp/wikinet.h	/^  int GetEdCnt() const { return MnEdCnt+WkEdCnt; }$/;"	f	class:TWikiUsr
GetEdge	snap-core/graph.h	/^  TEdge& GetEdge(const int& EId) { return EdgeH.GetDat(EId); }$/;"	f	class:TNEGraph
GetEdge	snap-core/graph.h	/^  const TEdge& GetEdge(const int& EId) const { return EdgeH.GetDat(EId); }$/;"	f	class:TNEGraph
GetEdge	snap-core/mmnet.h	/^  TCrossEdge& GetEdge(int eid) { return CrossH[eid]; }$/;"	f	class:TCrossNet
GetEdge	snap-core/network.h	/^  TEdge& GetEdge(const int& EId) { return EdgeH.GetDat(EId); }$/;"	f	class:TNEANet
GetEdge	snap-core/network.h	/^  TEdge& GetEdge(const int& EId) { return EdgeH.GetDat(EId); }$/;"	f	class:TNodeEdgeNet
GetEdge	snap-core/network.h	/^  const TEdge& GetEdge(const int& EId) const { return EdgeH.GetDat(EId); }$/;"	f	class:TNEANet
GetEdge	snap-core/network.h	/^  const TEdge& GetEdge(const int& EId) const { return EdgeH.GetDat(EId); }$/;"	f	class:TNodeEdgeNet
GetEdge	snap-core/networkmp.h	/^  TEdge& GetEdge(const int& EId) { return EdgeH.GetDat(EId); }$/;"	f	class:TNEANetMP
GetEdge	snap-core/networkmp.h	/^  const TEdge& GetEdge(const int& EId) const { return EdgeH.GetDat(EId); }$/;"	f	class:TNEANetMP
GetEdge	snap-exp/mmgraph-exp.h	/^  TEdge& GetEdge(const int& EId) { return EdgeH.GetDat(EId); }$/;"	f	class:TMNet
GetEdge	snap-exp/mmgraph-exp.h	/^  const TEdge& GetEdge(const int& EId) const { return EdgeH.GetDat(EId); }$/;"	f	class:TMNet
GetEdgeAttrValue	snap-core/mmnet.cpp	/^TStr TCrossNet::GetEdgeAttrValue(const int& EId, const TStrIntPrH::TIter& CrossHI) const {$/;"	f	class:TCrossNet
GetEdgeAttrValue	snap-core/network.cpp	/^TStr TNEANet::GetEdgeAttrValue(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANet
GetEdgeAttrValue	snap-core/networkmp.cpp	/^TStr TNEANetMP::GetEdgeAttrValue(const int& EId, const TStrIntPrH::TIter& EdgeHI) const {$/;"	f	class:TNEANetMP
GetEdgeBridges	snap-core/cncom.cpp	/^void GetEdgeBridges(const PUNGraph& Graph, TIntPrV& EdgeV) {$/;"	f	namespace:TSnap
GetEdgeBuckets	snap-core/timenet.cpp	/^void TTimeNENet::GetEdgeBuckets(const int EdgesPerBucket, TTimeNet::TTmBucketV& TmBucketV) const {$/;"	f	class:TTimeNENet
GetEdgeC	snap-core/triad.h	/^double TNetConstraint<PGraph>::GetEdgeC(const int& NId1, const int& NId2) const {$/;"	f	class:TNetConstraint
GetEdgeChar	snap-exp/signnet.cpp	/^char TSignMicroEvol::GetEdgeChar(const PSignNet& Network, const int& n1, const int& n2) {$/;"	f	class:TSignMicroEvol
GetEdgeDLL	snap-adv/kronecker.cpp	/^double TKronMtx::GetEdgeDLL(const int& ParamId, int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetEdgeFltAttrV	snap-core/table.cpp	/^TStrV TTable::GetEdgeFltAttrV() const {$/;"	f	class:TTable
GetEdgeI	snap-core/mmnet.h	/^  TCrossEdgeI GetEdgeI(const int& EId) const { return TCrossEdgeI(CrossH.GetI(EId), this); }$/;"	f	class:TCrossNet
GetEdgeId	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int GetEdgeId(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int NId, int N) {$/;"	f
GetEdgeIntAttrV	snap-core/table.cpp	/^TStrV TTable::GetEdgeIntAttrV() const {$/;"	f	class:TTable
GetEdgeJointCom	snap-adv/agmfit.cpp	/^void TAGMFit::GetEdgeJointCom() {$/;"	f	class:TAGMFit
GetEdgeKId	snap-core/network.h	/^  const TEdge& GetEdgeKId(const int& EdgeKeyId) const { return EdgeH[EdgeKeyId]; }$/;"	f	class:TNodeEdgeNet
GetEdgeLL	snap-adv/kronecker.cpp	/^double TKronMtx::GetEdgeLL(int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetEdgeProb	snap-adv/kronecker.cpp	/^double TKronMtx::GetEdgeProb(const uint& NId1Sig, const uint& NId2Sig, const int& NIter) const {$/;"	f	class:TKronMtx
GetEdgeProb	snap-adv/kronecker.cpp	/^double TKronMtx::GetEdgeProb(int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetEdgeSig	snap-exp/signnet.cpp	/^int TSignNet::GetEdgeSig(const int& nid1, const int& nid2) const {$/;"	f	class:TSignNet
GetEdgeStr	snap-exp/signnet.cpp	/^TChA TSignNet::GetEdgeStr(const int& EdgeSig) {$/;"	f	class:TSignNet
GetEdgeStr	snap-exp/signnet.cpp	/^TChA TSignNet::GetEdgeStr(const int& nid1, const int& nid2) const {$/;"	f	class:TSignNet
GetEdgeStrAttrV	snap-core/table.cpp	/^TStrV TTable::GetEdgeStrAttrV() const {$/;"	f	class:TTable
GetEdgeSubNet	snap-exp/signnet.cpp	/^PSignNet TSignNet::GetEdgeSubNet(const int& EDat1, const int& EDat2, const int& EDat3) const {$/;"	f	class:TSignNet
GetEdgeTable	snap-core/table.cpp	/^PTable TTable::GetEdgeTable(const PNEANet& Network, TTableContext* Context) {$/;"	f	class:TTable
GetEdgeTablePN	snap-core/table.cpp	/^PTable TTable::GetEdgeTablePN(const PNGraphMP& Network, TTableContext* Context){$/;"	f	class:TTable
GetEdgeTmBuckets	snap-core/timenet.cpp	/^void TTimeNENet::GetEdgeTmBuckets(const TTmUnit& TmUnit, TTimeNet::TTmBucketV& TmBucketV) const {$/;"	f	class:TTimeNENet
GetEdgeV	snap-core/ghash.h	/^  TIntPrV& GetEdgeV() { return EdgeV; }$/;"	f	class:TSimpleGraph
GetEdgeWgt	snap-exp/wgtnet.cpp	/^double TWgtNet::GetEdgeWgt() const {$/;"	f	class:TWgtNet
GetEdges	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMaMaEdge** GetEdges() const { return Edges; }$/;"	f	class:TMatchingMachine
GetEdges	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMaMaEdge** GetEdges() const { return Edges; }$/;"	f	class:TMatchingMachine
GetEdges	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetEdges(uint64 graphId, int nodes, TVec<TPair<int,int> > &edges) {$/;"	f	class:TGraphEnumUtils
GetEdges	snap-adv/kronecker.cpp	/^int TKronMtx::GetEdges(const int& NIter) const {$/;"	f	class:TKronMtx
GetEdges	snap-adv/ncp.h	/^    int GetEdges() const { return Edges; }$/;"	f	class:TLocClustStat::TCutInfo
GetEdges	snap-core/bignet.h	/^  ::TSize GetEdges() const { return Pool.GetVals(); }$/;"	f	class:TBigNet
GetEdges	snap-core/ghash.h	/^  int GetEdges() const { return EdgeV.Len(); }$/;"	f	class:TGraphKey
GetEdges	snap-core/ghash.h	/^  int GetEdges() const { return EdgeV.Len(); }$/;"	f	class:TSimpleGraph
GetEdges	snap-core/graph.cpp	/^int TBPGraph::GetEdges() const {$/;"	f	class:TBPGraph
GetEdges	snap-core/graph.cpp	/^int TNGraph::GetEdges() const {$/;"	f	class:TNGraph
GetEdges	snap-core/graph.cpp	/^int TUNGraph::GetEdges() const {$/;"	f	class:TUNGraph
GetEdges	snap-core/graph.h	/^  int GetEdges() const { return EdgeH.Len(); }$/;"	f	class:TNEGraph
GetEdges	snap-core/graphmp.cpp	/^int TNGraphMP::GetEdges() const {$/;"	f	class:TNGraphMP
GetEdges	snap-core/gstat.h	/^  int GetEdges() const { return (int) GetVal(gsvEdges); }$/;"	f	class:TGStat
GetEdges	snap-core/mmnet.h	/^  int GetEdges() const { return CrossH.Len(); }$/;"	f	class:TCrossNet
GetEdges	snap-core/network.cpp	/^int TDirNet::GetEdges() const {$/;"	f	class:TDirNet
GetEdges	snap-core/network.cpp	/^int TUndirNet::GetEdges() const {$/;"	f	class:TUndirNet
GetEdges	snap-core/network.h	/^  int GetEdges() const { return EdgeH.Len(); }$/;"	f	class:TNEANet
GetEdges	snap-core/network.h	/^  int GetEdges() const { return EdgeH.Len(); }$/;"	f	class:TNodeEdgeNet
GetEdges	snap-core/network.h	/^int TNodeEDatNet<TNodeData, TEdgeData>::GetEdges() const {$/;"	f	class:TNodeEDatNet
GetEdges	snap-core/network.h	/^int TNodeNet<TNodeData>::GetEdges() const {$/;"	f	class:TNodeNet
GetEdges	snap-core/networkmp.h	/^  int GetEdges() const { return EdgeH.Len(); }$/;"	f	class:TNEANetMP
GetEdges	snap-exp/mmgraph-exp.h	/^  int GetEdges() const { return EdgeH.Len(); }$/;"	f	class:TMNet
GetEdges	snap-exp/mmgraph-exp.h	/^  int GetEdges(const int& ETypeId) const { return EdgeSzV[ETypeId].Val; }$/;"	f	class:TMNet
GetEdgesInOut	snap-core/cmty.h	/^void GetEdgesInOut(const PGraph& Graph, const TIntV& NIdV, int& EdgesIn, int& EdgesOut) {$/;"	f	namespace:TSnap
GetEdgesSizes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* GetEdgesSizes() const { return EdgesSizes; }$/;"	f	class:TMatchingMachine
GetEdgesSizes	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* GetEdgesSizes() const { return EdgesSizes; }$/;"	f	class:TMatchingMachine
GetEgonet	snap-core/subgraph.cpp	/^PNGraph GetEgonet(const PNGraph& Graph, const int CtrNId, int& InEdges, int& OutEdges) {$/;"	f	namespace:TSnap
GetEgonet	snap-core/subgraph.cpp	/^PUNGraph GetEgonet(const PUNGraph& Graph, const int CtrNId, int& ArndEdges) {$/;"	f	namespace:TSnap
GetEigVals	snap-core/gsvd.cpp	/^void GetEigVals(const PUNGraph& Graph, const int& EigVals, TFltV& EigValV) {$/;"	f	namespace:TSnap
GetEigVec	snap-core/gsvd.cpp	/^void GetEigVec(const PUNGraph& Graph, TFltV& EigVecV) {$/;"	f	namespace:TSnap
GetEigVec	snap-core/gsvd.cpp	/^void GetEigVec(const PUNGraph& Graph, const int& EigVecs, TFltV& EigValV, TVec<TFltV>& EigVecV) {$/;"	f	namespace:TSnap
GetEigenVectorCentr	snap-core/centr.cpp	/^void GetEigenVectorCentr(const PUNGraph& Graph, TIntFltH& NIdEigenH, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetElec	snap-exp/wikinet.h	/^  TWikiElec& GetElec(const int& EId) { return ElecV[EId]; }$/;"	f	class:TWikiElecBs
GetElec	snap-exp/wikinet.h	/^  const TWikiElec& GetElec(const int& EId) const { return ElecV[EId]; }$/;"	f	class:TWikiElecBs
GetElecAdminUsrV	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetElecAdminUsrV(TIntV& ElecAdminUsrV) const {$/;"	f	class:TWikiElecBs
GetElecNonAdminUsrV	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetElecNonAdminUsrV(TIntV& ElecNonAdminUsrV) const {$/;"	f	class:TWikiElecBs
GetElecUsrV	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetElecUsrV(TIntV& ElecUsrV) const {$/;"	f	class:TWikiElecBs
GetElecUsrVoteNet	snap-exp/wikinet.cpp	/^PSignNet TWikiElecBs::GetElecUsrVoteNet() const {$/;"	f	class:TWikiElecBs
GetElement	glib-core/xml.cpp	/^void TXmlLx::GetElement(){$/;"	f	class:TXmlLx
GetEmptyGraphDLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::GetEmptyGraphDLL(const int& ParamId) const {$/;"	f	class:TKroneckerLL
GetEmptyGraphLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::GetEmptyGraphLL() const {$/;"	f	class:TKroneckerLL
GetEmptyRowsStart	snap-core/table.cpp	/^int TTable::GetEmptyRowsStart(int NewRows) {$/;"	f	class:TTable
GetEmptyVal	glib-core/ds.h	/^  const TVal& GetEmptyVal() const { return EmptyVal; }$/;"	f	class:TGLib_OLD::TVecPool
GetEmptyVal	glib-core/ds.h	/^  const TVal& GetEmptyVal() const { return EmptyVal; }$/;"	f	class:TVecPool
GetEncName	glib-core/xml.cpp	/^TStr TXmlLx::GetEncName(){$/;"	f	class:TXmlLx
GetEntity	glib-core/xml.cpp	/^void TXmlLx::GetEntity(){$/;"	f	class:TXmlLx
GetEntityValue	glib-core/xml.cpp	/^TStr TXmlLx::GetEntityValue(){$/;"	f	class:TXmlLx
GetEolnLn	glib-core/fl.cpp	/^TStr TMOut::GetEolnLn(const bool& DoAddEoln, const bool& DoCutBf){$/;"	f	class:TMOut
GetEq	glib-core/xml.cpp	/^void TXmlLx::GetEq(){$/;"	f	class:TXmlLx
GetErr	snap-exp/sir.cpp	/^double TEpidemModel::GetErr(const TFltV& TrueV, const TFltV& SimV, const int& SimT0) { $/;"	f	class:TEpidemModel
GetErr	snap-exp/sir.cpp	/^double TSir2Model::GetErr() const { $/;"	f	class:TSir2Model
GetErr	snap-exp/sir.cpp	/^double TSirModel::GetErr() const { $/;"	f	class:TSirModel
GetErr	snap-exp/sir.cpp	/^double TSirSR2Model::GetErr() const { $/;"	f	class:TSirSR2Model
GetEscCh	glib-core/html.cpp	/^void THtmlLx::GetEscCh(){$/;"	f	class:THtmlLx
GetEscStr	glib-core/html.cpp	/^TStr THtmlLxChDef::GetEscStr(const TStr& Str) const {$/;"	f	class:THtmlLxChDef
GetEscapedStr	glib-core/html.cpp	/^TStr THtmlLx::GetEscapedStr(const TChA& ChA){$/;"	f	class:THtmlLx
GetEstNoEdgeLL	snap-adv/mag.cpp	/^const double TMAGFitBern::GetEstNoEdgeLL(const int& NId, const int& AId) const {$/;"	f	class:TMAGFitBern
GetExeDir	glib-core/xfl.cpp	/^TStr TDir::GetExeDir(){$/;"	f	class:TDir
GetExeFNm	glib-core/env.cpp	/^TStr TEnv::GetExeFNm() const {$/;"	f	class:TEnv
GetExeFNm	glib-core/os.cpp	/^TStr TSysProc::GetExeFNm() {$/;"	f	class:TSysProc
GetExeFNm	glib-core/os.cpp	/^TStr TSysProc::GetExeFNm(){$/;"	f	class:TSysProc
GetExeFPath	glib-core/env.h	/^  TStr GetExeFPath() const {return GetExeFNm().GetFPath();}$/;"	f	class:TEnv
GetExpDev	glib-core/dt.cpp	/^double TRnd::GetExpDev(){$/;"	f	class:TRnd
GetExpDev	glib-core/dt.cpp	/^double TRnd::GetExpDev(const double& Lambda) {$/;"	f	class:TRnd
GetExpDevStep	glib-core/dt.h	/^  static double GetExpDevStep(const int& Seed, const int& Steps){$/;"	f	class:TRnd
GetExpEdgesIn	snap-adv/ncp.h	/^    double GetExpEdgesIn(const int& GEdges) const { return TMath::Sqr(2.0*Edges+CutSz)\/(2.0*GEdges); }        \/\/ expected edges inside (sum of degrees on nodes inside)^2\/(2*E)$/;"	f	class:TLocClustStat::TCutInfo
GetExpansion	snap-adv/ncp.h	/^    double GetExpansion() const { return Nodes<2 ? 1.0 : double(CutSz)\/double(Nodes); }                       \/\/ expansion$/;"	f	class:TLocClustStat::TCutInfo
GetExtent	glib-core/xmath.h	/^  double GetExtent() const {Assert(DefP&&UsableP); return Mx-Mn;}$/;"	f
GetExternalId	glib-core/xml.cpp	/^void TXmlLx::GetExternalId(){$/;"	f	class:TXmlLx
GetFAccessFromStr	glib-core/fl.cpp	/^TFAccess TFRnd::GetFAccessFromStr(const TStr& Str){$/;"	f	class:TFRnd
GetFBase	glib-core/dt.cpp	/^TStr TStr::GetFBase() const {$/;"	f	class:TStr
GetFBase	glib-core/xfl.cpp	/^TStr TFFileDesc::GetFBase() const {$/;"	f	class:TFFileDesc
GetFExt	glib-core/dt.cpp	/^TStr TStr::GetFExt() const {$/;"	f	class:TStr
GetFFreeBlobPtV	glib-core/blobbs.cpp	/^void TBlobBs::GetFFreeBlobPtV(const PFRnd& FBlobBs, TBlobPtV& FFreeBlobPtV){$/;"	f	class:TBlobBs
GetFGrad	snap-exp/linkpred.cpp	/^void TLpPredictor::GetFGrad(const TFltV& AttrV, TFltV& GradV) const {$/;"	f	class:TLpPredictor
GetFGrad	snap-exp/linkpred.cpp	/^void TLpPredictor::GetFGrad(const TFltV& WgtV, const TFltV& AttrV, TFltV& GradV) const {$/;"	f	class:__OLD__::TLpPredictor
GetFLen	glib-core/fl.cpp	/^int TFIn::GetFLen() const {$/;"	f	class:TFIn
GetFLen	glib-core/fl.cpp	/^int TFRnd::GetFLen(){$/;"	f	class:TFRnd
GetFLen	glib-core/zipfl.cpp	/^uint64 TZipIn::GetFLen(const TStr& ZipFNm) {$/;"	f	class:TZipIn
GetFLen	glib-core/zipfl.h	/^  uint64 GetFLen() const { return FLen; }$/;"	f	class:TZipIn
GetFMid	glib-core/dt.cpp	/^TStr TStr::GetFMid() const {$/;"	f	class:TStr
GetFNm	glib-core/fl.cpp	/^TStr TFInOut::GetFNm() const {$/;"	f	class:TFInOut
GetFNm	glib-core/fl.cpp	/^TStr TFRnd::GetFNm() const {$/;"	f	class:TFRnd
GetFNmStr	glib-core/dt.cpp	/^TStr TStr::GetFNmStr(const TStr& Str, const bool& AlNumOnlyP){$/;"	f	class:TStr
GetFNmV	glib-core/xfl.cpp	/^void TFFile::GetFNmV($/;"	f	class:TFFile
GetFPath	glib-core/dt.cpp	/^TStr TStr::GetFPath() const {$/;"	f	class:TStr
GetFPos	glib-core/fl.cpp	/^int TFIn::GetFPos() const {$/;"	f	class:TFIn
GetFPos	glib-core/fl.cpp	/^int TFRnd::GetFPos(){$/;"	f	class:TFRnd
GetFPosStr	glib-core/lx.cpp	/^TStr TILx::GetFPosStr() const {$/;"	f	class:TILx
GetFPosStr	glib-core/xml.cpp	/^TStr TXmlLx::GetFPosStr() const {$/;"	f	class:TXmlLx
GetFPosStr	snap-exp/dblp.h	/^  TStr GetFPosStr() const { return XmlLx.GetFPosStr(); }$/;"	f	class:TDblpLoader
GetFSet	glib-core/blobbs.cpp	/^TB8Set TBlobPt::GetFSet(const int& FSetN){$/;"	f	class:TBlobPt
GetFTalk	snap-exp/wikinet.h	/^  TSecTm GetFTalk() const { return FirstTalk; }$/;"	f	class:TWikiTalkEdge
GetFVal	snap-exp/linkpred.cpp	/^double TLpPredictor::GetFVal(const TFltV& AttrV) const {$/;"	f	class:TLpPredictor
GetFVal	snap-exp/linkpred.cpp	/^double TLpPredictor::GetFVal(const TFltV& WgtV, const TFltV& AttrV) const {$/;"	f	class:__OLD__::TLpPredictor
GetFarnessCentr	snap-core/centr.h	/^double GetFarnessCentr(const PGraph& Graph, const int& NId, const bool& IsDir, const bool& Normalized) {$/;"	f	namespace:TSnap
GetFarnessCentrMP	snap-core/centr.h	/^double GetFarnessCentrMP(const PGraph& Graph, const int& NId, const bool& IsDir, const bool& Normalized) {$/;"	f	namespace:TSnap
GetFileId	glib-core/fl.h	/^  TFileId GetFileId() const {return FileId;}$/;"	f	class:TFInOut
GetFileId	glib-core/fl.h	/^  TFileId GetFileId() const {return FileId;}$/;"	f	class:TFOut
GetFileId	glib-core/fl.h	/^  virtual TFileId GetFileId() const {return NULL;}$/;"	f	class:TSOut
GetFinalHostNm	glib-core/url.h	/^  TStr GetFinalHostNm() const {$/;"	f
GetFinalUrlStr	glib-core/url.h	/^  TStr GetFinalUrlStr() const {$/;"	f
GetFireTm	snap-core/ff.h	/^  int GetFireTm() const { return NBurnedTmV.Len(); } \/\/ time of fire$/;"	f	class:TForestFire
GetFirst	snap-core/gbase.h	/^  int GetFirst() const { return First; }$/;"	f	class:TSnapQueue
GetFirstBlobPt	glib-core/blobbs.cpp	/^TBlobPt TMBlobBs::GetFirstBlobPt(){$/;"	f	class:TMBlobBs
GetFirstCh	glib-core/http.cpp	/^char THttpLx::GetFirstCh(){$/;"	f	class:THttpLx
GetFirstGraphFromSequence	snap-core/table.cpp	/^PNEANet TTable::GetFirstGraphFromSequence(TAttrAggr AggrPolicy) {$/;"	f	class:TTable
GetFlagStr	snap-core/gbase.cpp	/^TStr GetFlagStr(const TGraphFlag& GraphFlag) {$/;"	f	namespace:TSnap
GetFld	glib-core/ssmp.h	/^  char* GetFld(const int& FldN) { return FldV[FldN]; }$/;"	f
GetFld	glib-core/ssmp.h	/^  const char* GetFld(const int& FldN) const { return FldV[FldN]; }$/;"	f
GetFldNm	glib-core/ss.h	/^  TStr GetFldNm(const int& FldX) const {return GetVal(FldX, 0);}$/;"	f
GetFldVal	glib-core/http.cpp	/^TStr THttpLx::GetFldVal(){$/;"	f	class:THttpLx
GetFldVal	glib-core/http.cpp	/^TStr THttpResp::GetFldVal(const TStr& FldNm, const int& ValN) const {$/;"	f	class:THttpResp
GetFldVal	glib-core/http.cpp	/^TStr THttpRq::GetFldVal(const TStr& FldNm) const {$/;"	f	class:THttpRq
GetFldValH	glib-core/http.cpp	/^const TStrStrH& THttpRq::GetFldValH() const {$/;"	f	class:THttpRq
GetFldValV	glib-core/http.cpp	/^void THttpResp::GetFldValV(const TStr& FldNm, TStrV& FldValV) const {$/;"	f	class:THttpResp
GetFldX	glib-core/ss.cpp	/^int TSs::GetFldX(const TStr& FldNm, const TStr& NewFldNm, const int& Y) const {$/;"	f	class:TSs
GetFldY	glib-core/ss.cpp	/^int TSs::GetFldY(const TStr& FldNm, const TStr& NewFldNm, const int& X) const {$/;"	f	class:TSs
GetFlds	glib-core/ss.h	/^  int GetFlds() const {return GetXLen(0);}$/;"	f
GetFlds	glib-core/ssmp.h	/^  int GetFlds() const { return Len(); }$/;"	f
GetFlt	glib-core/ss.cpp	/^bool TSsParser::GetFlt(const int& FldN, double& Val) const {$/;"	f	class:TSsParser
GetFlt	glib-core/ssmp.cpp	/^bool TSsParserMP::GetFlt(const int& FldN, double& Val) const {$/;"	f	class:TSsParserMP
GetFlt	glib-core/ssmp.h	/^  double GetFlt(const int& FldN) const {$/;"	f
GetFlt	snap-core/table.h	/^  TFlt GetFlt() const { return FltVal; }$/;"	f	class:TPrimitive
GetFltArg	glib-core/xml.cpp	/^double TXmlObjSer::GetFltArg(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TXmlObjSer
GetFltArgVal	glib-core/xml.cpp	/^double TXmlTok::GetFltArgVal(const TStr& ArgNm, const double& DfVal) const {$/;"	f	class:TXmlTok
GetFltAttr	snap-core/table.cpp	/^TFlt TRowIterator::GetFltAttr(TInt ColIdx) const {$/;"	f	class:TRowIterator
GetFltAttr	snap-core/table.cpp	/^TFlt TRowIterator::GetFltAttr(const TStr& Col) const {$/;"	f	class:TRowIterator
GetFltAttr	snap-exp/alternativetable.cpp	/^TFlt ExplicitStringRowIterator::GetFltAttr(TInt ColIdx) const{$/;"	f	class:ExplicitStringRowIterator
GetFltAttr	snap-exp/alternativetable.cpp	/^TFlt ExplicitStringRowIterator::GetFltAttr(const TStr& Col) const {$/;"	f	class:ExplicitStringRowIterator
GetFltAttrDatE	snap-core/mmnet.cpp	/^TFlt TCrossNet::GetFltAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TCrossNet
GetFltAttrDatE	snap-core/mmnet.h	/^  TFlt GetFltAttrDatE(const TCrossEdgeI& EdgeI, const TStr& attr) { return GetFltAttrDatE(EdgeI.GetId(), attr); }$/;"	f	class:TCrossNet
GetFltAttrDatE	snap-core/network.cpp	/^TFlt TNEANet::GetFltAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANet
GetFltAttrDatE	snap-core/network.h	/^  TFlt GetFltAttrDatE(const TEdgeI& EdgeI, const TStr& attr) { return GetFltAttrDatE(EdgeI.GetId(), attr); }$/;"	f	class:TNEANet
GetFltAttrDatE	snap-core/networkmp.cpp	/^TFlt TNEANetMP::GetFltAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANetMP
GetFltAttrDatE	snap-core/networkmp.h	/^  TFlt GetFltAttrDatE(const TEdgeI& EdgeId, const TStr& attr) { return GetFltAttrDatE(EdgeId.GetId(), attr); }$/;"	f	class:TNEANetMP
GetFltAttrDatN	snap-core/network.cpp	/^TFlt TNEANet::GetFltAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANet
GetFltAttrDatN	snap-core/network.h	/^  TFlt GetFltAttrDatN(const TNodeI& NodeI, const TStr& attr) { return GetFltAttrDatN(NodeI.GetId(), attr); }$/;"	f	class:TNEANet
GetFltAttrDatN	snap-core/networkmp.cpp	/^TFlt TNEANetMP::GetFltAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANetMP
GetFltAttrDatN	snap-core/networkmp.h	/^  TFlt GetFltAttrDatN(const TNodeI& NodeId, const TStr& attr) { return GetFltAttrDatN(NodeId.GetId(), attr); }$/;"	f	class:TNEANetMP
GetFltAttrDefaultE	snap-core/mmnet.h	/^  TFlt GetFltAttrDefaultE(const TStr& attribute) const { return FltDefaultsE.IsKey(attribute) ? FltDefaultsE.GetDat(attribute) : (TFlt) TFlt::Mn; }$/;"	f	class:TCrossNet
GetFltAttrDefaultE	snap-core/network.h	/^  TFlt GetFltAttrDefaultE(const TStr& attribute) const { return FltDefaultsE.IsKey(attribute) ? FltDefaultsE.GetDat(attribute) : (TFlt) TFlt::Mn; }$/;"	f	class:TNEANet
GetFltAttrDefaultE	snap-core/networkmp.h	/^  TFlt GetFltAttrDefaultE(const TStr& attribute) const { return FltDefaultsE.IsKey(attribute) ? FltDefaultsE.GetDat(attribute) : (TFlt) TFlt::Mn; }$/;"	f	class:TNEANetMP
GetFltAttrDefaultN	snap-core/network.h	/^  TFlt GetFltAttrDefaultN(const TStr& attribute) const { return FltDefaultsN.IsKey(attribute) ? FltDefaultsN.GetDat(attribute) : (TFlt) TFlt::Mn; }$/;"	f	class:TNEANet
GetFltAttrDefaultN	snap-core/networkmp.h	/^  TFlt GetFltAttrDefaultN(const TStr& attribute) const { return FltDefaultsN.IsKey(attribute) ? FltDefaultsN.GetDat(attribute) : (TFlt) TFlt::Mn; }$/;"	f	class:TNEANetMP
GetFltAttrIndDatE	snap-core/network.cpp	/^TFlt TNEANet::GetFltAttrIndDatE(const int& EId, const int& index) {$/;"	f	class:TNEANet
GetFltAttrIndDatE	snap-core/network.h	/^  TFlt GetFltAttrIndDatE(const TEdgeI& EdgeI, const int& index) { return GetFltAttrIndDatE(EdgeI.GetId(), index); }$/;"	f	class:TNEANet
GetFltAttrIndDatN	snap-core/network.cpp	/^TFlt TNEANet::GetFltAttrIndDatN(const int& NId, const int& index) {$/;"	f	class:TNEANet
GetFltAttrIndDatN	snap-core/network.h	/^  TFlt GetFltAttrIndDatN(const TNodeI& NodeI, const int& index) { return GetFltAttrIndDatN(NodeI.GetId(), index); }$/;"	f	class:TNEANet
GetFltAttrNames	snap-core/network.h	/^    void GetFltAttrNames(TStrV& Names) const { Graph->FltAttrNameEI(GetId(), Names); }$/;"	f	class:TNEANet::TEdgeI
GetFltAttrNames	snap-core/network.h	/^    void GetFltAttrNames(TStrV& Names) const { Graph->FltAttrNameNI(GetId(), Names); }$/;"	f	class:TNEANet::TNodeI
GetFltAttrNames	snap-core/networkmp.h	/^    void GetFltAttrNames(TStrV& Names) const { Graph->FltAttrNameEI(GetId(), Names); }$/;"	f	class:TNEANetMP::TEdgeI
GetFltAttrNames	snap-core/networkmp.h	/^    void GetFltAttrNames(TStrV& Names) const { Graph->FltAttrNameNI(GetId(), Names); }$/;"	f	class:TNEANetMP::TNodeI
GetFltAttrVal	snap-core/network.h	/^    void GetFltAttrVal(TFltV& Val) const { Graph->FltAttrValueEI(GetId(), Val); }$/;"	f	class:TNEANet::TEdgeI
GetFltAttrVal	snap-core/network.h	/^    void GetFltAttrVal(TFltV& Val) const { Graph->FltAttrValueNI(GetId(), Val); }$/;"	f	class:TNEANet::TNodeI
GetFltAttrVal	snap-core/networkmp.h	/^    void GetFltAttrVal(TFltV& Val) const { Graph->FltAttrValueEI(GetId(), Val); }$/;"	f	class:TNEANetMP::TEdgeI
GetFltAttrVal	snap-core/networkmp.h	/^    void GetFltAttrVal(TFltV& Val) const { Graph->FltAttrValueNI(GetId(), Val); }$/;"	f	class:TNEANetMP::TNodeI
GetFltAttrVecE	snap-core/network.cpp	/^TVec<TFlt>& TNEANet::GetFltAttrVecE(const TStr& attr) {$/;"	f	class:TNEANet
GetFltAttrVecE	snap-core/networkmp.cpp	/^TVec<TFlt>& TNEANetMP::GetFltAttrVecE(const TStr& attr) {$/;"	f	class:TNEANetMP
GetFltFromFldV	glib-core/ssmp.cpp	/^double TSsParserMP::GetFltFromFldV(TVec<char*>& FieldsV, const int& FldN) {$/;"	f	class:TSsParserMP
GetFltKeyIdE	snap-core/network.cpp	/^int TNEANet::GetFltKeyIdE(const int& EId) {$/;"	f	class:TNEANet
GetFltKeyIdE	snap-core/networkmp.cpp	/^int TNEANetMP::GetFltKeyIdE(const int& EId) {$/;"	f	class:TNEANetMP
GetFltNodePropertyTable	snap-core/table.cpp	/^PTable TTable::GetFltNodePropertyTable(const PNEANet& Network, const TIntFltH& Property, $/;"	f	class:TTable
GetFltRowIdxByVal	snap-core/table.cpp	/^TIntV TTable::GetFltRowIdxByVal(const TStr& ColName, const TFlt& Val) const {$/;"	f	class:TTable
GetFltVal	snap-core/table.h	/^  TFlt GetFltVal(const TStr& ColName, const TInt& RowIdx) {$/;"	f	class:TTable
GetFltValAtRowIdx	snap-core/table.h	/^  TFlt GetFltValAtRowIdx(const TInt& ColIdx, const TInt& RowIdx) {$/;"	f	class:TTable
GetFltVals	snap-core/table.h	/^  TFltV GetFltVals() const { return FltVals; }$/;"	f	class:TTableRow
GetForest	test/test-alg.cpp	/^  PNGraph GetForest() {$/;"	f	class:TreeTest
GetFq	snap-exp/memes.cpp	/^int TQuote::GetFq() const {$/;"	f	class:TQuote
GetFq	snap-exp/memes.cpp	/^int TQuote::GetFq(const TSecTm& BegTm, const TSecTm& EndTm) const {$/;"	f	class:TQuote
GetFq	snap-exp/memes.cpp	/^int TQuote::GetFq(const TSecTm& BegTm, const TSecTm& EndTm, const TUrlTy& UrlTy, const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
GetFq	snap-exp/memes.cpp	/^int TQuote::GetFq(const TUrlTy& UrlTy, const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
GetFqItems	snap-exp/trawling.h	/^  int GetFqItems() const { return MxFqItemSetV.Len(); }$/;"	f	class:TTrawling
GetFqOt	snap-exp/memes.cpp	/^void TQuote::GetFqOt(TTmFltPrV& RawFqOtV, const TTmUnit& TmUnit) const {$/;"	f	class:TQuote
GetFqOt	snap-exp/memes.cpp	/^void TQuote::GetFqOt(TTmFltPrV& RawFqOtV, const TTmUnit& TmUnit, const TSecTm& BegTm, const TSecTm& EndTm) const {$/;"	f	class:TQuote
GetFqOt	snap-exp/memes.cpp	/^void TQuote::GetFqOt(TTmFltPrV& RawFqOtV, const TTmUnit& TmUnit, const TSecTm& BegTm, const TSecTm& EndTm, const TUrlTy& UrlTy, const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
GetFqOt	snap-exp/memes.cpp	/^void TQuote::GetFqOt(TTmFltPrV& RawFqOtV, const TTmUnit& TmUnit, const TUrlTy& UrlTy, const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
GetFqVoterSet	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetFqVoterSet(TIntSet& FqVoterSet) const {$/;"	f	class:TWikiElecBs
GetFqVoters	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetFqVoters(TIntSet& FqVoterSet, const int& MinVotes, const int& MinElecLen, const bool& OnlyAdmins) const {$/;"	f	class:TWikiElecBs
GetFrac2Mode	snap-adv/agmdirected.h	/^  double GetFrac2Mode(const double Thres2Mode = 0.2, const int MinSzEach = 2) {$/;"	f	class:TCodaAnalyzer
GetFracDegOut	snap-adv/ncp.cpp	/^double TLocClustStat::TCutInfo::GetFracDegOut(const PUNGraph& Graph, double& MxFrac, double& AvgFrac, double& MedianFrac, double& Pct9Frac, double& Flake) const {$/;"	f	class:TLocClustStat::TCutInfo
GetFracSup	snap-exp/wikinet.cpp	/^double TWikiElec::GetFracSup(const bool& OnlyVotes) const {$/;"	f	class:TWikiElec
GetFracSup	snap-exp/wikinet.cpp	/^double TWikiElec::GetFracSup(int VoteId1, int VoteId2) const {$/;"	f	class:TWikiElec
GetFragIdStr	glib-core/url.h	/^  TStr GetFragIdStr() const {EAssert(IsOk()); return FragIdStr;}$/;"	f
GetFromQtBs	snap-exp/memes.cpp	/^PClustNet TClustNet::GetFromQtBs(const PQuoteBs& QtBs, int MinQtFq, int MnWrdLen) {$/;"	f	class:TClustNet
GetFullBTagStr	glib-core/html.cpp	/^TStr THtmlLx::GetFullBTagStr() const {$/;"	f	class:THtmlLx
GetFullColLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::GetFullColLL(int ColId) const {$/;"	f	class:TKroneckerLL
GetFullGraphLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::GetFullGraphLL() const {$/;"	f	class:TKroneckerLL
GetFullRowLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::GetFullRowLL(int RowId) const {$/;"	f	class:TKroneckerLL
GetFullStr	glib-core/html.cpp	/^TStr THtmlTok::GetFullStr() const {$/;"	f	class:THtmlTok
GetFullUrlStr	glib-core/url.cpp	/^TStr TUrlEnv::GetFullUrlStr() const {$/;"	f	class:TUrlEnv
GetGStatV	snap-core/gstat.h	/^  const TGStatV& GetGStatV() const { return GStatV; }$/;"	f	class:TGStatVec
GetGammaDev	glib-core/dt.cpp	/^double TRnd::GetGammaDev(const int& Order){$/;"	f	class:TRnd
GetGeoDev	glib-core/dt.h	/^  int GetGeoDev(const double& Prb){$/;"	f	class:TRnd
GetGlobalNId	snap-exp/mmgraph-exp.h	/^  static int GetGlobalNId(const int& NTypeId, const int& NId) { return (NId << NTYPEID_NBITS) + NTypeId;}$/;"	f	class:TMNet
GetGnmRndNet	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::GetGnmRndNet(const int& Nodes, const int& Edges) {$/;"	f	class:TTimeNENet
GetGradient	snap-exp/linkpred.cpp	/^double TQGraph::GetGradient(const TLpExample& Example, const TLpPredictor& Prd, TFltV& GradV) const {$/;"	f	class:__OLD__::TQGraph
GetGraph	snap-adv/agmdirected.h	/^  PNGraph GetGraph() { return G; }$/;"	f	class:TCoda
GetGraph	snap-adv/graphcounter.cpp	/^PNGraph TD34GraphCounter::GetGraph(const int& GraphId) const {$/;"	f	class:TD34GraphCounter
GetGraph	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetGraph(uint64 graphId, int nodes, PNGraph &G) {$/;"	f	class:TGraphEnumUtils
GetGraph	snap-adv/kronecker.h	/^  PNGraph GetGraph() const { return Graph; }$/;"	f	class:TKroneckerLL
GetGraph	snap-adv/mag.h	/^	PNGraph GetGraph() {  return Graph;  }$/;"	f	class:TMAGFitBern
GetGraph	snap-core/ff.h	/^  PNGraph GetGraph() const { return Graph; }$/;"	f	class:TFfGGen
GetGraph	snap-core/ff.h	/^  PNGraph GetGraph() const { return Graph; }$/;"	f	class:TForestFire
GetGraph	snap-core/ff.h	/^  PUNGraph GetGraph() const { return Graph; }$/;"	f	class:TUndirFFire
GetGraph	snap-exp/linkpred.h	/^  PNGraph GetGraph() const { return Graph; }$/;"	f	class:__OLD__::TLpExample
GetGraphAnf	snap-core/anf.h	/^void TGraphAnf<PGraph>::GetGraphAnf(TIntFltKdV& DistNbrsV, const int& MxDist, const bool& IsDir) {$/;"	f	class:TGraphAnf
GetGraphRawNID	snap-adv/agmdirected.cpp	/^PNGraph TCoda::GetGraphRawNID() {$/;"	f	class:TCoda
GetGraphUpToTm	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::GetGraphUpToTm(const TSecTm& MaxEdgeTm) const {$/;"	f	class:TTimeNENet
GetGraphsFromSequence	snap-core/table.cpp	/^TVec<PNEANet> TTable::GetGraphsFromSequence(TAttrAggr AggrPolicy) {$/;"	f	class:TTable
GetGreedyMxDag	snap-exp/mxdag.cpp	/^int GetGreedyMxDag(const PNGraph& Graph, const int& NIters) {$/;"	f	namespace:TSnap
GetGreedyMxDag	snap-exp/mxdag.cpp	/^int GetGreedyMxDag(const PNGraph& Graph, const int& NIters, TIntV& NIdOrderV) {$/;"	f	namespace:TSnap
GetGroundTruthGraphAtT	snap-adv/cascdynetinf.cpp	/^void TNIBs::GetGroundTruthGraphAtT(const double& Step, PNGraph &GraphAtT) {$/;"	f	class:TNIBs
GetGroundTruthNetworkAtT	snap-adv/cascdynetinf.cpp	/^void TNIBs::GetGroundTruthNetworkAtT(const double& Step, PStrFltNEDNet& NetworkAtT) {$/;"	f	class:TNIBs
GetGroup	glib-core/shash.h	/^  TSGroup& GetGroup(const int& GroupN) { return GroupV[GroupN]; }$/;"	f	class:TSparseTable
GetGroup	glib-core/shash.h	/^  const TSGroup& GetGroup(const int& GroupN) const { return GroupV[GroupN]; }$/;"	f	class:TSparseTable
GetGroupClosenessCentr	snap-core/centr.cpp	/^double GetGroupClosenessCentr(const PUNGraph& Graph, const TIntH& GroupNodes) {$/;"	f	namespace:TSnap
GetGroupDegreeCentr	snap-core/centr.cpp	/^double GetGroupDegreeCentr(const PUNGraph& Graph, const PUNGraph& Group) {$/;"	f	namespace:TSnap
GetGroupDegreeCentr	snap-core/centr.cpp	/^double GetGroupDegreeCentr(const PUNGraph& Graph, const TIntH& GroupNodes) {$/;"	f	namespace:TSnap
GetGroupDegreeCentr0	snap-core/centr.cpp	/^double GetGroupDegreeCentr0(const PUNGraph& Graph, const TIntH& GroupNodes) {$/;"	f	namespace:TSnap
GetGroupFarnessCentr	snap-core/centr.cpp	/^double GetGroupFarnessCentr(const PUNGraph& Graph, const TIntH& GroupNodes) {$/;"	f	namespace:TSnap
GetGroupSet	test/test-triad.cpp	/^void GetGroupSet(int NId, TIntSet& GroupSet) {$/;"	f
GetGroupSet	tutorials/demo-triad.cpp	/^void GetGroupSet(int NId, TIntSet& GroupSet) {$/;"	f
GetGroupSize	glib-core/shash.h	/^  int GetGroupSize() const { return GroupSize; }$/;"	f	class:TSparseGroup
GetGroups	glib-core/shash.h	/^  static int GetGroups(const int& Vals) { return Vals == 0 ? 0 : ((Vals-1) \/ GroupSize) + 1; }$/;"	f	class:TSparseTable
GetGrp1	glib-core/shash.h	/^  TSGroup& GetGrp1(const int& ValN) { return GroupV[GroupNum(ValN)]; }$/;"	f	class:TSparseTable
GetGrp1	glib-core/shash.h	/^  const TSGroup& GetGrp1(const int& ValN) const { return GroupV[GroupNum(ValN)]; }$/;"	f	class:TSparseTable
GetHMSTColonDotStr	glib-core/tm.cpp	/^TStr TTm::GetHMSTColonDotStr(const bool& FullP, const bool& MSecP) const {$/;"	f	class:TTm
GetHPath	glib-core/url.cpp	/^TStr TUrlLx::GetHPath(TStrV& PathSegV){TChA Str; TChA HSegStr; bool Cont;$/;"	f	class:TUrlLx
GetHRefBeforeStr	glib-core/html.cpp	/^TStr THtmlLx::GetHRefBeforeStr(const TStr& Str){$/;"	f	class:THtmlLx
GetHSegmentCh	glib-core/url.cpp	/^  char GetHSegmentCh(){EAssertR(IsHSegmentCh(), ""); return GetCh();}$/;"	f	class:TUrlLx
GetHTok	glib-core/html.cpp	/^PHtmlTok THtmlTok::GetHTok(const bool& IsBTag, const int& HTagN){$/;"	f	class:THtmlTok
GetHashCd	glib-core/bd.h	/^  static inline int GetHashCd(const int hc1, const int hc2) {$/;"	f	class:TPairHashImpl1
GetHashCd	glib-core/bd.h	/^  static inline int GetHashCd(const int hc1, const int hc2) {$/;"	f	class:TPairHashImpl2
GetHashKeyDat	glib-core/hash.h	/^  THKeyDat& GetHashKeyDat(const int& KeyId){$/;"	f	class:THash
GetHashKeyDat	glib-core/hash.h	/^  const THKeyDat& GetHashKeyDat(const int& KeyId) const {$/;"	f	class:THash
GetHd	glib-core/ds.h	/^  void GetHd(THd& Hd){FRnd->GetHd(&Hd);}$/;"	f	class:TFRec
GetHd	glib-core/fl.h	/^  void GetHd(void* Hd){IAssert(RecAct);$/;"	f
GetHdStr	glib-core/env.h	/^  TStr GetHdStr() const {return HdStr;}$/;"	f	class:TEnv
GetHdStr	glib-core/http.h	/^  TStr GetHdStr() const {return HdStr;}$/;"	f
GetHits	snap-core/centr.h	/^void GetHits(const PGraph& Graph, TIntFltH& NIdHubH, TIntFltH& NIdAuthH, const int& MaxIter) {$/;"	f	namespace:TSnap
GetHitsMP	snap-core/centr.h	/^void GetHitsMP(const PGraph& Graph, TIntFltH& NIdHubH, TIntFltH& NIdAuthH, const int& MaxIter) {$/;"	f	namespace:TSnap
GetHmFromMins	glib-core/tm.cpp	/^TStr TTmInfo::GetHmFromMins(const int& Mins){$/;"	f	class:TTmInfo
GetHops	snap-core/bfsdfs.h	/^int TBreathFS<PGraph>::GetHops(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TBreathFS
GetHost	glib-core/url.cpp	/^TStr TUrlLx::GetHost(){TChA Str;$/;"	f	class:TUrlLx
GetHostNm	glib-core/url.h	/^  TStr GetHostNm() const {EAssert(IsOk()); return HostNm;}$/;"	f
GetHostPort	glib-core/url.cpp	/^TStr TUrlLx::GetHostPort(TStr& HostNm, TStr& PortStr, int& PortN){TChA Str;$/;"	f	class:TUrlLx
GetHour	glib-core/tm.h	/^  int GetHour() const {return Hour;}$/;"	f	class:TTm
GetHour	snap-core/gstat.h	/^  int GetHour() const { return Time.GetHourN(); }$/;"	f	class:TGStat
GetHourMSecs	glib-core/tm.h	/^  static uint64 GetHourMSecs(){return 60*60*1000;}$/;"	f	class:TTmInfo
GetHourN	glib-core/tm.cpp	/^int TSecTm::GetHourN() const {$/;"	f	class:TSecTm
GetHttpRqStr	glib-core/url.h	/^  TStr GetHttpRqStr() const {return HttpRqStr;}$/;"	f
GetI	glib-core/ds.h	/^  TIter GetI(const TSizeTy& ValN) const {return ValT+ValN;}$/;"	f	class:TVec
GetI	glib-core/hash.h	/^  TIter GetI(const TKey& Key) const {return TIter(&KeyDatV[GetKeyId(Key)], KeyDatV.EndI());}$/;"	f	class:THash
GetI	glib-core/hashmp.h	/^  TIter GetI(const TKey& Key) const {return TIter(&Table[GetKeyId(Key)], Table.EndI());}$/;"	f	class:THashMP
GetI	glib-core/shash.h	/^  TIter GetI(const TKey& Key) const { Assert(IsKey(Key));  return Table.GetI(GetKeyId(Key)); }$/;"	f	class:TSparseHash
GetI	glib-core/shash.h	/^  TIter GetI(const TKey& Key) const {return TIter(&KeyV[GetKeyId(Key)], KeyV.EndI()); }$/;"	f	class:THashSet
GetI	glib-core/shash.h	/^  TIter GetI(const int& KeyId) const { Assert(IsKeyId(KeyId));  return Table.GetI(KeyId); }$/;"	f	class:TSparseSet
GetI	glib-core/shash.h	/^  TIter GetI(const int& ValN) const { Assert(! IsEmpty(ValN));$/;"	f	class:TSparseTable
GetI	glib-core/shash.h	/^  TIter GetI(const int& ValN) const { return ValT+ValN; }$/;"	f	class:TPackVec
GetI	snap-core/ghash.h	/^  TIter GetI(const int& KeyId) const  { return GraphH.GetI(KeyId); }$/;"	f	class:TGHash
GetId	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    int GetId() const { return Id; }$/;"	f	class:TMatchingMachine::TMaMaEdge
GetId	snap-adv/cascdynetinf.h	/^  int GetId() { return CId; }$/;"	f	class:TCascade
GetId	snap-adv/graphcounter.h	/^  int GetId(const int& i) const { return m_graphCounters.GetKey(i); }$/;"	f	class:TD34GraphCounter
GetId	snap-core/bignet.h	/^    int GetId() const { return -1; }$/;"	f	class:TBigNet::TEdgeI
GetId	snap-core/bignet.h	/^    int GetId() const { return NodeHI->Key(); }$/;"	f	class:TBigNet::TNodeI
GetId	snap-core/graph.h	/^    int GetId() const { return -1; }$/;"	f	class:TBPGraph::TEdgeI
GetId	snap-core/graph.h	/^    int GetId() const { return -1; }$/;"	f	class:TNGraph::TEdgeI
GetId	snap-core/graph.h	/^    int GetId() const { return -1; }$/;"	f	class:TUNGraph::TEdgeI
GetId	snap-core/graph.h	/^    int GetId() const { return EdgeHI.GetDat().GetId(); }$/;"	f	class:TNEGraph::TEdgeI
GetId	snap-core/graph.h	/^    int GetId() const { return HI().GetDat().GetId(); }$/;"	f	class:TBPGraph::TNodeI
GetId	snap-core/graph.h	/^    int GetId() const { return Id; }$/;"	f	class:TBPGraph::TNode
GetId	snap-core/graph.h	/^    int GetId() const { return Id; }$/;"	f	class:TNEGraph::TEdge
GetId	snap-core/graph.h	/^    int GetId() const { return Id; }$/;"	f	class:TNEGraph::TNode
GetId	snap-core/graph.h	/^    int GetId() const { return Id; }$/;"	f	class:TNGraph::TNode
GetId	snap-core/graph.h	/^    int GetId() const { return Id; }$/;"	f	class:TUNGraph::TNode
GetId	snap-core/graph.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNEGraph::TNodeI
GetId	snap-core/graph.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNGraph::TNodeI
GetId	snap-core/graph.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TUNGraph::TNodeI
GetId	snap-core/graphmp.h	/^    int GetId() const { return -1; }$/;"	f	class:TNGraphMP::TEdgeI
GetId	snap-core/graphmp.h	/^    int GetId() const { return Id; }$/;"	f	class:TNGraphMP::TNode
GetId	snap-core/graphmp.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNGraphMP::TNodeI
GetId	snap-core/mmnet.h	/^    int GetId() const { return CrossHI.GetDat().GetId(); }$/;"	f	class:TCrossNet::TCrossEdgeI
GetId	snap-core/mmnet.h	/^    int GetId() const { return EId; }$/;"	f	class:TCrossNet::TCrossEdge
GetId	snap-core/network.h	/^    int GetId() const { return -1; }$/;"	f	class:TDirNet::TEdgeI
GetId	snap-core/network.h	/^    int GetId() const { return -1; }$/;"	f	class:TNodeEDatNet::TEdgeI
GetId	snap-core/network.h	/^    int GetId() const { return -1; }$/;"	f	class:TNodeNet::TEdgeI
GetId	snap-core/network.h	/^    int GetId() const { return -1; }$/;"	f	class:TUndirNet::TEdgeI
GetId	snap-core/network.h	/^    int GetId() const { return EdgeHI.GetDat().GetId(); }$/;"	f	class:TNEANet::TEdgeI
GetId	snap-core/network.h	/^    int GetId() const { return EdgeHI.GetDat().GetId(); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TDirNet::TNode
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TNEANet::TEdge
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TNEANet::TNode
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TNodeEDatNet::TNode
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TNodeEdgeNet::TEdge
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TNodeEdgeNet::TNode
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TNodeNet::TNode
GetId	snap-core/network.h	/^    int GetId() const { return Id; }$/;"	f	class:TUndirNet::TNode
GetId	snap-core/network.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TDirNet::TNodeI
GetId	snap-core/network.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNEANet::TNodeI
GetId	snap-core/network.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNodeEDatNet::TNodeI
GetId	snap-core/network.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetId	snap-core/network.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNodeNet::TNodeI
GetId	snap-core/network.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TUndirNet::TNodeI
GetId	snap-core/networkmp.h	/^    int GetId() const { return EdgeHI.GetDat().GetId(); }$/;"	f	class:TNEANetMP::TEdgeI
GetId	snap-core/networkmp.h	/^    int GetId() const { return Id; }$/;"	f	class:TNEANetMP::TEdge
GetId	snap-core/networkmp.h	/^    int GetId() const { return Id; }$/;"	f	class:TNEANetMP::TNode
GetId	snap-core/networkmp.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TNEANetMP::TNodeI
GetId	snap-exp/graphmp-exp.h	/^    int GetId() const { return -1; }$/;"	f	class:TUNGraphMP::TEdgeI
GetId	snap-exp/graphmp-exp.h	/^    int GetId() const { return Id; }$/;"	f	class:TUNGraphMP::TNode
GetId	snap-exp/graphmp-exp.h	/^    int GetId() const { return NodeHI.GetDat().GetId(); }$/;"	f	class:TUNGraphMP::TNodeI
GetId	snap-exp/memes.h	/^  int GetId() const { return QtCIdTy.Id; }$/;"	f	class:TQuote
GetId	snap-exp/mmgraph-exp.h	/^    int GetId() const { return EdgeHI.GetDat().GetId(); }$/;"	f	class:TMNet::TEdgeI
GetId	snap-exp/mmgraph-exp.h	/^    int GetId() const { return HashI.GetDat().GetId(); }$/;"	f	class:TMNet::TMNodeI
GetId	snap-exp/mmgraph-exp.h	/^    int GetId() const { return Id; }$/;"	f	class:TMNet::TEdge
GetId	snap-exp/mmgraph-exp.h	/^    int GetId() const { return Id; }$/;"	f	class:TMNet::TNodeType
GetId	snap-exp/mmgraph-exp.h	/^  int GetId() const { return Id; }$/;"	f	class:TCVNode
GetId	snap-exp/mmgraph-exp.h	/^  int GetId() const { return Id; }$/;"	f	class:TMVNode
GetId	snap-exp/mmgraph-exp.h	/^  int GetId() const { return Id; }$/;"	f	class:TSVNode
GetIdColName	snap-core/table.h	/^  TStr GetIdColName() const { return IdColName; }$/;"	f	class:TTable
GetIdColName	snap-exp/alternativetable.h	/^  TStr GetIdColName() const { return IdColName; }$/;"	f	class:ExplicitStringTable
GetIdStr	glib-core/tm.cpp	/^TStr TTm::GetIdStr() const {$/;"	f	class:TTm
GetIdVSAttr	snap-core/attr.cpp	/^int TAttr::GetIdVSAttr(const TInt& AttrId, TIntV& IdV) const {$/;"	f	class:TAttr
GetIdVSAttr	snap-core/attr.cpp	/^int TAttr::GetIdVSAttr(const TInt& AttrId, const TAttrType Type, TIntV& IdV) const {$/;"	f	class:TAttr
GetIdVSAttr	snap-core/attr.cpp	/^int TAttr::GetIdVSAttr(const TStr& AttrName, TIntV& IdV) const {$/;"	f	class:TAttr
GetIdVSAttr	snap-core/attr.cpp	/^int TAttrPair::GetIdVSAttr(const TInt& AttrId, TIntPrV& IdV) const {$/;"	f	class:TAttrPair
GetIdVSAttr	snap-core/attr.cpp	/^int TAttrPair::GetIdVSAttr(const TInt& AttrId, const TAttrType Type, TIntPrV& IdV) const {$/;"	f	class:TAttrPair
GetIdVSAttr	snap-core/attr.cpp	/^int TAttrPair::GetIdVSAttr(const TStr& AttrName, TIntPrV& IdV) const {$/;"	f	class:TAttrPair
GetIdVSAttrE	snap-core/network.cpp	/^int TDirNet::GetIdVSAttrE(const TInt& AttrId, TIntPrV& IdV) const {$/;"	f	class:TDirNet
GetIdVSAttrE	snap-core/network.cpp	/^int TDirNet::GetIdVSAttrE(const TStr& AttrName, TIntPrV& IdV) const {$/;"	f	class:TDirNet
GetIdVSAttrE	snap-core/network.cpp	/^int TNEANet::GetIdVSAttrE(const TInt& AttrId, TIntV& IdV) const {$/;"	f	class:TNEANet
GetIdVSAttrE	snap-core/network.cpp	/^int TNEANet::GetIdVSAttrE(const TStr& AttrName, TIntV& IdV) const {$/;"	f	class:TNEANet
GetIdVSAttrE	snap-core/network.cpp	/^int TUndirNet::GetIdVSAttrE(const TInt& AttrId, TIntPrV& IdV) const {$/;"	f	class:TUndirNet
GetIdVSAttrE	snap-core/network.cpp	/^int TUndirNet::GetIdVSAttrE(const TStr& AttrName, TIntPrV& IdV) const {$/;"	f	class:TUndirNet
GetIdVSAttrN	snap-core/network.cpp	/^int TDirNet::GetIdVSAttrN(const TInt& AttrId, TIntV& IdV) const {$/;"	f	class:TDirNet
GetIdVSAttrN	snap-core/network.cpp	/^int TDirNet::GetIdVSAttrN(const TStr& AttrName, TIntV& IdV) const {$/;"	f	class:TDirNet
GetIdVSAttrN	snap-core/network.cpp	/^int TNEANet::GetIdVSAttrN(const TInt& AttrId, TIntV& IdV) const {$/;"	f	class:TNEANet
GetIdVSAttrN	snap-core/network.cpp	/^int TNEANet::GetIdVSAttrN(const TStr& AttrName, TIntV& IdV) const {$/;"	f	class:TNEANet
GetIdVSAttrN	snap-core/network.cpp	/^int TUndirNet::GetIdVSAttrN(const TInt& AttrId, TIntV& IdV) const {$/;"	f	class:TUndirNet
GetIdVSAttrN	snap-core/network.cpp	/^int TUndirNet::GetIdVSAttrN(const TStr& AttrName, TIntV& IdV) const {$/;"	f	class:TUndirNet
GetIfArgPrefixBool	glib-core/env.cpp	/^bool TEnv::GetIfArgPrefixBool($/;"	f	class:TEnv
GetIfArgPrefixFlt	glib-core/env.cpp	/^double TEnv::GetIfArgPrefixFlt($/;"	f	class:TEnv
GetIfArgPrefixInt	glib-core/env.cpp	/^int TEnv::GetIfArgPrefixInt($/;"	f	class:TEnv
GetIfArgPrefixIntV	glib-core/env.cpp	/^TIntV TEnv::GetIfArgPrefixIntV($/;"	f	class:TEnv
GetIfArgPrefixIntV	glib-core/env.h	/^  TIntV GetIfArgPrefixIntV(const TStr& PrefixStr, const TStr& DNm="") const {$/;"	f	class:TEnv
GetIfArgPrefixStr	glib-core/env.cpp	/^TStr TEnv::GetIfArgPrefixStr($/;"	f	class:TEnv
GetIfArgPrefixStrSet	glib-core/env.h	/^  TStrSet GetIfArgPrefixStrSet(const TStr& PrefixStr, TStrV& DfValV, const TStr& DNm="") const {$/;"	f	class:TEnv
GetIfArgPrefixStrSet	glib-core/env.h	/^  TStrSet GetIfArgPrefixStrSet(const TStr& PrefixStr, const TStr& DNm="") const {$/;"	f	class:TEnv
GetIfArgPrefixStrV	glib-core/env.cpp	/^TStrV TEnv::GetIfArgPrefixStrV($/;"	f	class:TEnv
GetIfArgPrefixStrV	glib-core/env.h	/^  TStrV GetIfArgPrefixStrV(const TStr& PrefixStr, const TStr& DNm="") const {$/;"	f	class:TEnv
GetInAdjSize	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int GetInAdjSize(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int Id) {$/;"	f
GetInAdjSize	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^int GetInAdjSize(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int Id) {$/;"	f
GetInCoeff	snap-adv/mag.cpp	/^const double TMAGFitBern::GetInCoeff(const int& i, const int& j, const int& l, const int& A, const TMAGAffMtx& Theta) const {$/;"	f	class:TMAGFitBern
GetInDeg	snap-core/bignet.h	/^    int GetInDeg() const { return InDeg; }$/;"	f	class:TBigNet::TNodeI
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return GetDeg(); }$/;"	f	class:TBPGraph::TNode
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return GetDeg(); }$/;"	f	class:TUNGraph::TNode
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return HI().GetDat().GetInDeg(); }$/;"	f	class:TBPGraph::TNodeI
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return InEIdV.Len(); }$/;"	f	class:TNEGraph::TNode
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return InNIdV.Len(); }$/;"	f	class:TNGraph::TNode
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNEGraph::TNodeI
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNGraph::TNodeI
GetInDeg	snap-core/graph.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TUNGraph::TNodeI
GetInDeg	snap-core/graphmp.h	/^    int GetInDeg() const { return InNIdV.Len(); }$/;"	f	class:TNGraphMP::TNode
GetInDeg	snap-core/graphmp.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNGraphMP::TNodeI
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return GetDeg(); }$/;"	f	class:TUndirNet::TNode
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return InEIdV.Len(); }$/;"	f	class:TNEANet::TNode
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return InEIdV.Len(); }$/;"	f	class:TNodeEdgeNet::TNode
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return InNIdV.Len(); }$/;"	f	class:TDirNet::TNode
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return InNIdV.Len(); }$/;"	f	class:TNodeEDatNet::TNode
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return InNIdV.Len(); }$/;"	f	class:TNodeNet::TNode
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TDirNet::TNodeI
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNEANet::TNodeI
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNodeEDatNet::TNodeI
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNodeNet::TNodeI
GetInDeg	snap-core/network.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TUndirNet::TNodeI
GetInDeg	snap-core/networkmp.h	/^    int GetInDeg() const { return InEIdV.Len(); }$/;"	f	class:TNEANetMP::TNode
GetInDeg	snap-core/networkmp.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TNEANetMP::TNodeI
GetInDeg	snap-exp/graphmp-exp.h	/^    int GetInDeg() const { return GetDeg();}$/;"	f	class:TUNGraphMP::TNode
GetInDeg	snap-exp/graphmp-exp.h	/^    int GetInDeg() const { return NodeHI.GetDat().GetInDeg(); }$/;"	f	class:TUNGraphMP::TNodeI
GetInDeg	snap-exp/mmgraph-exp.h	/^    int GetInDeg() const { return HashI.GetDat().GetInDeg(); }$/;"	f	class:TMNet::TMNodeI
GetInDeg	snap-exp/mmgraph-exp.h	/^  int GetInDeg() const { return InDeg; }$/;"	f	class:TCVNode
GetInDeg	snap-exp/mmgraph-exp.h	/^  int GetInDeg() const { return InDeg; }$/;"	f	class:TSVNode
GetInDeg	snap-exp/mmgraph-exp.h	/^  int GetInDeg() const { return InEIdV.Len(); }$/;"	f	class:TMVNode
GetInDeg	snap-exp/mmgraph-exp.h	/^  int GetInDeg(const int& ETypeId) const { return InTypeDegV[ETypeId]; }$/;"	f	class:TCVNode
GetInDeg	snap-exp/mmgraph-exp.h	/^  int GetInDeg(const int& ETypeId) const {return InEIdVV[ETypeId].Len();}$/;"	f	class:TSVNode
GetInDegCnt	snap-core/alg.h	/^void GetInDegCnt(const PGraph& Graph, TFltPrV& DegToCntV) {$/;"	f	namespace:TSnap
GetInDegCnt	snap-core/alg.h	/^void GetInDegCnt(const PGraph& Graph, TIntPrV& DegToCntV) {$/;"	f	namespace:TSnap
GetInEDat	snap-core/network.h	/^    TEdgeDat& GetInEDat(const int& EdgeN) { return Net->GetEDat(GetInEId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetInEDat	snap-core/network.h	/^    TEdgeData& GetInEDat(const int& EdgeN) { return Net->GetEDat(GetInNId(EdgeN), GetId()); }$/;"	f	class:TNodeEDatNet::TNodeI
GetInEDat	snap-core/network.h	/^    const TEdgeDat& GetInEDat(const int& EdgeN) const { return Net->GetEDat(GetInEId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetInEDat	snap-core/network.h	/^    const TEdgeData& GetInEDat(const int& EdgeN) const { return Net->GetEDat(GetInNId(EdgeN), GetId()); }$/;"	f	class:TNodeEDatNet::TNodeI
GetInEId	snap-core/graph.h	/^    int GetInEId(const int& EdgeN) const { return InEIdV[EdgeN]; }$/;"	f	class:TNEGraph::TNode
GetInEId	snap-core/graph.h	/^    int GetInEId(const int& EdgeN) const { return NodeHI.GetDat().GetInEId(EdgeN); }$/;"	f	class:TNEGraph::TNodeI
GetInEId	snap-core/network.h	/^    int GetInEId(const int& EdgeN) const { return InEIdV[EdgeN]; }$/;"	f	class:TNEANet::TNode
GetInEId	snap-core/network.h	/^    int GetInEId(const int& EdgeN) const { return NodeHI.GetDat().GetInEId(EdgeN); }$/;"	f	class:TNEANet::TNodeI
GetInEId	snap-core/network.h	/^    int GetInEId(const int& EdgeN) const { return NodeHI.GetDat().GetInEId(EdgeN); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetInEId	snap-core/network.h	/^    int GetInEId(const int& NodeN) const { return InEIdV[NodeN]; }$/;"	f	class:TNodeEdgeNet::TNode
GetInEId	snap-core/networkmp.h	/^    int GetInEId(const int& EdgeN) const { return InEIdV[EdgeN]; }$/;"	f	class:TNEANetMP::TNode
GetInEId	snap-core/networkmp.h	/^    int GetInEId(const int& EdgeN) const { return NodeHI.GetDat().GetInEId(EdgeN); }$/;"	f	class:TNEANetMP::TNodeI
GetInEId	snap-exp/mmgraph-exp.h	/^    int GetInEId(const int& EdgeN) const { return HashI.GetDat().GetInEId(EdgeN); }$/;"	f	class:TMNet::TMNodeI
GetInEId	snap-exp/mmgraph-exp.h	/^  int GetInEId(const int& EdgeN) const { return InEIdV[EdgeN]; }$/;"	f	class:TMVNode
GetInEId	snap-exp/mmgraph-exp.h	/^  int GetInEId(const int& EdgeN) const {$/;"	f	class:TCVNode
GetInEId	snap-exp/mmgraph-exp.h	/^  int GetInEId(const int& EdgeN) const {$/;"	f	class:TSVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(TIntV& EIdV) const { EIdV = InEIdV; }$/;"	f	class:TMVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(TIntV& EIdV) const {$/;"	f	class:TCVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(TIntV& EIdV) const {$/;"	f	class:TSVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(const TInt ETypeId, TIntV& EIdV) const {$/;"	f	class:TSVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(const TInt& ETypeId, TIntV& EIdV) const {$/;"	f	class:TCVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(const TInt& ETypeId, TIntV& EIdV) const {$/;"	f	class:TMVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(const TIntV& ETypeIdV, TIntV& EIdV) const {$/;"	f	class:TCVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(const TIntV& ETypeIdV, TIntV& EIdV) const {$/;"	f	class:TMVNode
GetInEIdV	snap-exp/mmgraph-exp.h	/^  void GetInEIdV(const TIntV& ETypeIdV, TIntV& EIdV) const {$/;"	f	class:TSVNode
GetInEdgesSizes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* GetInEdgesSizes() const { return InEdgesSizes; }$/;"	f	class:TMatchingMachine
GetInEdgesSizes	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* GetInEdgesSizes() const { return InEdgesSizes; }$/;"	f	class:TMatchingMachine
GetInNDat	snap-core/network.h	/^    TNodeData& GetInNDat(const int& EdgeN) { return Net->GetNDat(GetInNId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetInNDat	snap-core/network.h	/^    TNodeData& GetInNDat(const int& NodeN) { return Net->GetNDat(GetInNId(NodeN)); }$/;"	f	class:TNodeEDatNet::TNodeI
GetInNDat	snap-core/network.h	/^    TNodeData& GetInNDat(const int& NodeN) { return Net->GetNDat(GetInNId(NodeN)); }$/;"	f	class:TNodeNet::TNodeI
GetInNDat	snap-core/network.h	/^    const TNodeData& GetInNDat(const int& EdgeN) const { return Net->GetNDat(GetInNId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetInNDat	snap-core/network.h	/^    const TNodeData& GetInNDat(const int& NodeN) const { return Net->GetNDat(GetInNId(NodeN)); }$/;"	f	class:TNodeEDatNet::TNodeI
GetInNDat	snap-core/network.h	/^    const TNodeData& GetInNDat(const int& NodeN) const { return Net->GetNDat(GetInNId(NodeN)); }$/;"	f	class:TNodeNet::TNodeI
GetInNId	snap-core/bignet.h	/^    int GetInNId(const int& NodeN) const { return InNIdV[NodeN]; }$/;"	f	class:TBigNet::TNodeI
GetInNId	snap-core/graph.h	/^    int GetInNId(const int& EdgeN) const { return Graph->GetEdge(NodeHI.GetDat().GetInEId(EdgeN)).GetSrcNId(); }$/;"	f	class:TNEGraph::TNodeI
GetInNId	snap-core/graph.h	/^    int GetInNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TBPGraph::TNode
GetInNId	snap-core/graph.h	/^    int GetInNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TUNGraph::TNode
GetInNId	snap-core/graph.h	/^    int GetInNId(const int& NodeN) const { return HI().GetDat().GetInNId(NodeN); }$/;"	f	class:TBPGraph::TNodeI
GetInNId	snap-core/graph.h	/^    int GetInNId(const int& NodeN) const { return InNIdV[NodeN]; }$/;"	f	class:TNGraph::TNode
GetInNId	snap-core/graph.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TNGraph::TNodeI
GetInNId	snap-core/graph.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TUNGraph::TNodeI
GetInNId	snap-core/graphmp.h	/^    int GetInNId(const int& NodeN) const { return InNIdV[NodeN]; }$/;"	f	class:TNGraphMP::TNode
GetInNId	snap-core/graphmp.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TNGraphMP::TNodeI
GetInNId	snap-core/network.h	/^    int GetInNId(const int& EdgeN) const { return Graph->GetEdge(NodeHI.GetDat().GetInEId(EdgeN)).GetSrcNId(); }$/;"	f	class:TNEANet::TNodeI
GetInNId	snap-core/network.h	/^    int GetInNId(const int& EdgeN) const { return InNIdV[EdgeN]; }$/;"	f	class:TNodeEDatNet::TNode
GetInNId	snap-core/network.h	/^    int GetInNId(const int& EdgeN) const { return Net->GetEdge(NodeHI.GetDat().GetInEId(EdgeN)).GetSrcNId(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetInNId	snap-core/network.h	/^    int GetInNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TUndirNet::TNode
GetInNId	snap-core/network.h	/^    int GetInNId(const int& NodeN) const { return InNIdV[NodeN]; }$/;"	f	class:TDirNet::TNode
GetInNId	snap-core/network.h	/^    int GetInNId(const int& NodeN) const { return InNIdV[NodeN]; }$/;"	f	class:TNodeNet::TNode
GetInNId	snap-core/network.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TDirNet::TNodeI
GetInNId	snap-core/network.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TNodeEDatNet::TNodeI
GetInNId	snap-core/network.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TNodeNet::TNodeI
GetInNId	snap-core/network.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TUndirNet::TNodeI
GetInNId	snap-core/networkmp.h	/^    int GetInNId(const int& EdgeN) const { return Graph->GetEdge(NodeHI.GetDat().GetInEId(EdgeN)).GetSrcNId(); }$/;"	f	class:TNEANetMP::TNodeI
GetInNId	snap-exp/graphmp-exp.h	/^    int GetInNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TUNGraphMP::TNode
GetInNId	snap-exp/graphmp-exp.h	/^    int GetInNId(const int& NodeN) const { return NodeHI.GetDat().GetInNId(NodeN); }$/;"	f	class:TUNGraphMP::TNodeI
GetInNId	snap-exp/mmgraph-exp.h	/^    int GetInNId(const int& EdgeN) const { return Graph->GetEdge(HashI.GetDat().GetInEId(EdgeN)).GetSrcNId(); }$/;"	f	class:TMNet::TMNodeI
GetInNIdV	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::GetInNIdV(int NId, TIntV& InNIdV) const {$/;"	f	class:TBigNet
GetInNIdVPt	snap-core/bignet.h	/^  int* GetInNIdVPt(const int& NId) const { return (int *) Pool.GetValVPt(GetNode(NId).InVId); }$/;"	f	class:TBigNet
GetInOutNIdV	snap-core/bignet.h	/^inline void TBigNet<TNodeData, IsDir>::TNodeI::GetInOutNIdV() {$/;"	f	class:TBigNet::TNodeI
GetInPlsSurp	snap-exp/signnet.h	/^    double GetInPlsSurp() const { return  (PlsCnt - InSumWgt)\/sqrt(InVarSq); }$/;"	f	struct:TSignMicroEvol::TCloseStat
GetInUnits	glib-core/tm.cpp	/^uint TSecTm::GetInUnits(const TTmUnit& TmUnit) const {$/;"	f	class:TSecTm
GetInVId	snap-core/bignet.h	/^    int GetInVId() const { return NodeHI->Dat.InVId; }$/;"	f	class:TBigNet::TNodeI
GetIndGraph	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetIndGraph(const PNGraph &G, const TIntV &sg, PNGraph &indG) {$/;"	f	class:TGraphEnumUtils
GetIndent	snap-exp/wikinet.h	/^  int GetIndent() const { return UsrIndent; }$/;"	f	class:TWikiVote
GetInferredGraphAtT	snap-adv/cascdynetinf.cpp	/^void TNIBs::GetInferredGraphAtT(const double& Step, PNGraph &GraphAtT) {$/;"	f	class:TNIBs
GetInferredNetworkAtT	snap-adv/cascdynetinf.cpp	/^void TNIBs::GetInferredNetworkAtT(const double& Step, PStrFltNEDNet& NetworkAtT) {$/;"	f	class:TNIBs
GetInfoStr	glib-core/os.cpp	/^TStr TSysMemStat::GetInfoStr(){$/;"	f	class:TSysMemStat
GetInitMtx	snap-adv/kronecker.cpp	/^TKronMtx TKronMtx::GetInitMtx(const TStr& MtxStr, const int& Dim, const int& Nodes, const int& Edges) {$/;"	f	class:TKronMtx
GetInitMtx	snap-adv/kronecker.cpp	/^TKronMtx TKronMtx::GetInitMtx(const int& Dim, const int& Nodes, const int& Edges) {$/;"	f	class:TKronMtx
GetInsideQuotes	snap-exp/spinn3r.cpp	/^void TQuoteExtractor::GetInsideQuotes() {$/;"	f	class:TQuoteExtractor
GetInstance	snap-core/util.h	/^  static TStopwatch* GetInstance() {$/;"	f	class:TStopwatch
GetInt	glib-core/bits.h	/^  int GetInt(const int& MnBitN, const int& MxBitN) const {$/;"	f	class:TB32Set
GetInt	glib-core/bits.h	/^  int GetInt(const int& MnBitN, const int& MxBitN) const {$/;"	f	class:TB8Set
GetInt	glib-core/fl.h	/^  int GetInt(){int Int; GetBf(&Int, sizeof(Int)); return Int;}$/;"	f
GetInt	glib-core/http.cpp	/^int THttpLx::GetInt(const int& RqPlaces){$/;"	f	class:THttpLx
GetInt	glib-core/ss.cpp	/^bool TSsParser::GetInt(const int& FldN, int& Val) const {$/;"	f	class:TSsParser
GetInt	glib-core/ssmp.cpp	/^bool TSsParserMP::GetInt(const int& FldN, int& Val) const {$/;"	f	class:TSsParserMP
GetInt	glib-core/ssmp.h	/^  int GetInt(const int& FldN) const {$/;"	f
GetInt	snap-core/table.h	/^  TInt GetInt() const { return IntVal; }$/;"	f	class:TPrimitive
GetInt64Arg	glib-core/xml.cpp	/^int64 TXmlObjSer::GetInt64Arg(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TXmlObjSer
GetIntArg	glib-core/xml.cpp	/^int TXmlObjSer::GetIntArg(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TXmlObjSer
GetIntArgVal	glib-core/xml.cpp	/^int TXmlTok::GetIntArgVal(const TStr& ArgNm, const int& DfVal) const {$/;"	f	class:TXmlTok
GetIntAttr	snap-core/table.cpp	/^TInt TRowIterator::GetIntAttr(TInt ColIdx) const {$/;"	f	class:TRowIterator
GetIntAttr	snap-core/table.cpp	/^TInt TRowIterator::GetIntAttr(const TStr& Col) const {$/;"	f	class:TRowIterator
GetIntAttr	snap-exp/alternativetable.cpp	/^TInt ExplicitStringRowIterator::GetIntAttr(TInt ColIdx) const{$/;"	f	class:ExplicitStringRowIterator
GetIntAttr	snap-exp/alternativetable.cpp	/^TInt ExplicitStringRowIterator::GetIntAttr(const TStr& Col) const {$/;"	f	class:ExplicitStringRowIterator
GetIntAttr	snap-exp/alternativetable.cpp	/^TInt RowBasedRowIterator::GetIntAttr(TInt ColIdx) const {$/;"	f	class:RowBasedRowIterator
GetIntAttrDatE	snap-core/mmnet.cpp	/^TInt TCrossNet::GetIntAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TCrossNet
GetIntAttrDatE	snap-core/mmnet.h	/^  TInt GetIntAttrDatE(const TCrossEdgeI& EdgeI, const TStr& attr) { return GetIntAttrDatE(EdgeI.GetId(), attr); }$/;"	f	class:TCrossNet
GetIntAttrDatE	snap-core/network.cpp	/^TInt TNEANet::GetIntAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANet
GetIntAttrDatE	snap-core/network.h	/^  TInt GetIntAttrDatE(const TEdgeI& EdgeI, const TStr& attr) { return GetIntAttrDatE(EdgeI.GetId(), attr); }$/;"	f	class:TNEANet
GetIntAttrDatE	snap-core/networkmp.cpp	/^TInt TNEANetMP::GetIntAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANetMP
GetIntAttrDatE	snap-core/networkmp.h	/^  TInt GetIntAttrDatE(const TEdgeI& EdgeId, const TStr& attr) { return GetIntAttrDatE(EdgeId.GetId(), attr); }$/;"	f	class:TNEANetMP
GetIntAttrDatN	snap-core/network.cpp	/^TInt TNEANet::GetIntAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANet
GetIntAttrDatN	snap-core/network.h	/^  TInt GetIntAttrDatN(const TNodeI& NodeI, const TStr& attr) { return GetIntAttrDatN(NodeI.GetId(), attr); }$/;"	f	class:TNEANet
GetIntAttrDatN	snap-core/networkmp.cpp	/^TInt TNEANetMP::GetIntAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANetMP
GetIntAttrDatN	snap-core/networkmp.h	/^  TInt GetIntAttrDatN(const TNodeI& NodeId, const TStr& attr) { return GetIntAttrDatN(NodeId.GetId(), attr); }$/;"	f	class:TNEANetMP
GetIntAttrDefaultE	snap-core/mmnet.h	/^  TInt GetIntAttrDefaultE(const TStr& attribute) const { return IntDefaultsE.IsKey(attribute) ? IntDefaultsE.GetDat(attribute) : (TInt) TInt::Mn; }$/;"	f	class:TCrossNet
GetIntAttrDefaultE	snap-core/network.h	/^  TInt GetIntAttrDefaultE(const TStr& attribute) const { return IntDefaultsE.IsKey(attribute) ? IntDefaultsE.GetDat(attribute) : (TInt) TInt::Mn; }$/;"	f	class:TNEANet
GetIntAttrDefaultE	snap-core/networkmp.h	/^  TInt GetIntAttrDefaultE(const TStr& attribute) const { return IntDefaultsE.IsKey(attribute) ? IntDefaultsE.GetDat(attribute) : (TInt) TInt::Mn; }$/;"	f	class:TNEANetMP
GetIntAttrDefaultN	snap-core/network.h	/^  TInt GetIntAttrDefaultN(const TStr& attribute) const { return IntDefaultsN.IsKey(attribute) ? IntDefaultsN.GetDat(attribute) : (TInt) TInt::Mn; }$/;"	f	class:TNEANet
GetIntAttrDefaultN	snap-core/networkmp.h	/^  TInt GetIntAttrDefaultN(const TStr& attribute) const { return IntDefaultsN.IsKey(attribute) ? IntDefaultsN.GetDat(attribute) : (TInt) TInt::Mn; }$/;"	f	class:TNEANetMP
GetIntAttrIndDatE	snap-core/network.cpp	/^TInt TNEANet::GetIntAttrIndDatE(const int& EId, const int& index) {$/;"	f	class:TNEANet
GetIntAttrIndDatE	snap-core/network.h	/^  TInt GetIntAttrIndDatE(const TEdgeI& EdgeI, const int& index) { return GetIntAttrIndDatE(EdgeI.GetId(), index); }$/;"	f	class:TNEANet
GetIntAttrIndDatE	snap-core/networkmp.cpp	/^TInt TNEANetMP::GetIntAttrIndDatE(const int& EId, const int& index) {$/;"	f	class:TNEANetMP
GetIntAttrIndDatE	snap-core/networkmp.h	/^  TInt GetIntAttrIndDatE(const TEdgeI& EdgeId, const int &index) { return GetIntAttrIndDatE(EdgeId.GetId(), index); }$/;"	f	class:TNEANetMP
GetIntAttrIndDatN	snap-core/network.cpp	/^TInt TNEANet::GetIntAttrIndDatN(const int& NId, const int& index) {$/;"	f	class:TNEANet
GetIntAttrIndDatN	snap-core/network.h	/^  TInt GetIntAttrIndDatN(const TNodeI& NodeI, const int& index) { return GetIntAttrIndDatN(NodeI.GetId(), index); }$/;"	f	class:TNEANet
GetIntAttrIndDatN	snap-core/networkmp.cpp	/^TInt TNEANetMP::GetIntAttrIndDatN(const int& NId, const int& index) {$/;"	f	class:TNEANetMP
GetIntAttrIndDatN	snap-core/networkmp.h	/^  TInt GetIntAttrIndDatN(const TNodeI& NodeId, const int& index) { return GetIntAttrIndDatN(NodeId.GetId(), index); }$/;"	f	class:TNEANetMP
GetIntAttrIndE	snap-core/network.cpp	/^int TNEANet::GetIntAttrIndE(const TStr& attr) {$/;"	f	class:TNEANet
GetIntAttrIndE	snap-core/networkmp.cpp	/^int TNEANetMP::GetIntAttrIndE(const TStr& attr) {$/;"	f	class:TNEANetMP
GetIntAttrIndN	snap-core/network.cpp	/^int TNEANet::GetIntAttrIndN(const TStr& attr) {$/;"	f	class:TNEANet
GetIntAttrIndN	snap-core/networkmp.cpp	/^int TNEANetMP::GetIntAttrIndN(const TStr& attr) {$/;"	f	class:TNEANetMP
GetIntAttrNames	snap-core/network.h	/^    void GetIntAttrNames(TStrV& Names) const { Graph->IntAttrNameEI(GetId(), Names); }$/;"	f	class:TNEANet::TEdgeI
GetIntAttrNames	snap-core/network.h	/^    void GetIntAttrNames(TStrV& Names) const { Graph->IntAttrNameNI(GetId(), Names); }$/;"	f	class:TNEANet::TNodeI
GetIntAttrNames	snap-core/networkmp.h	/^    void GetIntAttrNames(TStrV& Names) const { Graph->IntAttrNameEI(GetId(), Names); }$/;"	f	class:TNEANetMP::TEdgeI
GetIntAttrNames	snap-core/networkmp.h	/^    void GetIntAttrNames(TStrV& Names) const { Graph->IntAttrNameNI(GetId(), Names); }$/;"	f	class:TNEANetMP::TNodeI
GetIntAttrVal	snap-core/network.h	/^    void GetIntAttrVal(TIntV& Val) const { Graph->IntAttrValueEI(GetId(), Val); }$/;"	f	class:TNEANet::TEdgeI
GetIntAttrVal	snap-core/network.h	/^    void GetIntAttrVal(TIntV& Val) const { Graph->IntAttrValueNI(GetId(), Val); }$/;"	f	class:TNEANet::TNodeI
GetIntAttrVal	snap-core/networkmp.h	/^    void GetIntAttrVal(TIntV& Val) const { Graph->IntAttrValueEI(GetId(), Val); }$/;"	f	class:TNEANetMP::TEdgeI
GetIntAttrVal	snap-core/networkmp.h	/^    void GetIntAttrVal(TIntV& Val) const { Graph->IntAttrValueNI(GetId(), Val); }$/;"	f	class:TNEANetMP::TNodeI
GetIntDens	snap-adv/ncp.h	/^    double GetIntDens() const { return 1.0 - ((Nodes<2) ? 0 : 2.0*double(Edges)\/double(Nodes*(Nodes-1))); }   \/\/ internal density$/;"	f	class:TLocClustStat::TCutInfo
GetIntFromFldV	glib-core/ssmp.cpp	/^int TSsParserMP::GetIntFromFldV(TVec<char*>& FieldsV, const int& FldN) {$/;"	f	class:TSsParserMP
GetIntRowIdxByVal	snap-core/table.cpp	/^TIntV TTable::GetIntRowIdxByVal(const TStr& ColName, const TInt& Val) const {$/;"	f	class:TTable
GetIntVAttrDatE	snap-core/network.cpp	/^TIntV TNEANet::GetIntVAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANet
GetIntVAttrDatE	snap-core/network.h	/^  TIntV GetIntVAttrDatE(const TEdgeI& EdgeI, const TStr& attr) { return GetIntVAttrDatE(EdgeI.GetId(), attr); }$/;"	f	class:TNEANet
GetIntVAttrDatN	snap-core/network.cpp	/^TIntV TNEANet::GetIntVAttrDatN(const int& NId, const TStr& attr) const {$/;"	f	class:TNEANet
GetIntVAttrDatN	snap-core/network.h	/^  TIntV GetIntVAttrDatN(const TNodeI& NodeI, const TStr& attr) const { return GetIntVAttrDatN(NodeI.GetId(), attr); }$/;"	f	class:TNEANet
GetIntVAttrNames	snap-core/network.h	/^    void GetIntVAttrNames(TStrV& Names) const { Graph->IntVAttrNameEI(GetId(), Names); }$/;"	f	class:TNEANet::TEdgeI
GetIntVAttrNames	snap-core/network.h	/^    void GetIntVAttrNames(TStrV& Names) const { Graph->IntVAttrNameNI(GetId(), Names); }$/;"	f	class:TNEANet::TNodeI
GetIntVAttrVal	snap-core/network.h	/^    void GetIntVAttrVal(TVec<TIntV>& Val) const { Graph->IntVAttrValueEI(GetId(), Val); }$/;"	f	class:TNEANet::TEdgeI
GetIntVAttrVal	snap-core/network.h	/^    void GetIntVAttrVal(TVec<TIntV>& Val) const { Graph->IntVAttrValueNI(GetId(), Val); }$/;"	f	class:TNEANet::TNodeI
GetIntVal	snap-core/table.h	/^  TInt GetIntVal(const TStr& ColName, const TInt& RowIdx) {$/;"	f	class:TTable
GetIntVal	snap-exp/alternativetable.h	/^  TInt GetIntVal(TInt Idx) const { return IntVals[Idx];}$/;"	f	class:RowBasedTableRow
GetIntValAtRowIdx	snap-core/table.h	/^  TInt GetIntValAtRowIdx(const TInt& ColIdx, const TInt& RowIdx) {$/;"	f	class:TTable
GetIntVals	snap-core/table.h	/^  TIntV GetIntVals() const { return IntVals; }$/;"	f	class:TTableRow
GetIntVals	snap-exp/alternativetable.h	/^  TIntV GetIntVals() const { return IntVals; }$/;"	f	class:RowBasedTableRow
GetIntersection	snap-adv/agm.cpp	/^void TAGMUtil::GetIntersection(const THashSet<TInt>& A, const THashSet<TInt>& B, THashSet<TInt>& C) {$/;"	f	class:TAGMUtil
GetIntersection	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetIntersection(const THashSet<TInt>& A, const THashSet<TInt>& B, THashSet<TInt>& C) {$/;"	f	class:TCliqueOverlap
GetInvParticipRat	snap-core/gsvd.cpp	/^void GetInvParticipRat(const PUNGraph& Graph, int MaxEigVecs, int TimeLimit, TFltPrV& EigValIprV) {$/;"	f	namespace:TSnap
GetInvParticipRatEig	snap-core/gsvd.cpp	/^double GetInvParticipRatEig(const TFltV& EigVec) {$/;"	f	namespace:TSnap::TSnapDetail
GetIpNum	glib-core/url.h	/^  TStr GetIpNum() const {EAssert(IsIpNum()); return IpNum;}$/;"	f
GetIpNumOrHostNm	glib-core/url.h	/^  TStr GetIpNumOrHostNm() const {return IsIpNum() ? GetIpNum() : GetHostNm();}$/;"	f
GetIsoCeFromYuascii	glib-core/html.cpp	/^TStr THtmlLxChDef::GetIsoCeFromYuascii(const TChA& ChA){$/;"	f	class:THtmlLxChDef
GetIsoGraphs	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetIsoGraphs(const PNGraph &G, TVec<PNGraph> &isoG) {$/;"	f	class:TGraphEnumUtils
GetIsoGraphs	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetIsoGraphs(uint64 graphId, int nodes, TVec<PNGraph> &isoG) {$/;"	f	class:TGraphEnumUtils
GetItem	snap-exp/trawling.h	/^  const TIntV& GetItem(const int& ItemN) const { return MxFqItemSetV[ItemN]; }$/;"	f	class:TTrawling
GetItemV	snap-exp/trawling.h	/^  TVec<TIntV>& GetItemV() { return MxFqItemSetV; }$/;"	f	class:TTrawling
GetItemV	snap-exp/trawling.h	/^  const TVec<TIntV>& GetItemV() const { return MxFqItemSetV; }$/;"	f	class:TTrawling
GetJsonValType	glib-core/json.h	/^  TJsonValType GetJsonValType() const {return JsonValType;}$/;"	f
GetJulianDateN	glib-core/tm.cpp	/^int TJulianDate::GetJulianDateN(int d, int m, int y){$/;"	f	class:TJulianDate
GetKCore	snap-core/kcore.h	/^PGraph GetKCore(const PGraph& Graph, const int& K) {$/;"	f	namespace:TSnap
GetKCoreEdges	snap-core/kcore.h	/^int GetKCoreEdges(const PGraph& Graph, TIntPrV& CoreIdSzV) {$/;"	f	namespace:TSnap
GetKCoreNodes	snap-core/kcore.h	/^int GetKCoreNodes(const PGraph& Graph, TIntPrV& CoreIdSzV) {$/;"	f	namespace:TSnap
GetKNodeCut	snap-adv/ncp.h	/^  const TCutInfo& GetKNodeCut(const int& Nodes) const { return BestCutH.GetDat(Nodes); }$/;"	f	class:TLocClustStat
GetKey	glib-core/hash.h	/^  const TKey& GetKey() const {Assert((KeyDatI!=NULL)&&(KeyDatI->HashCd!=-1)); return KeyDatI->Key;}$/;"	f	class:THashKeyDatI
GetKey	glib-core/hash.h	/^  const TKey& GetKey(const int& KeyId) const { return GetHashKeyDat(KeyId).Key;}$/;"	f	class:THash
GetKey	glib-core/hashmp.h	/^  const TKey& GetKey() const {Assert((KeyDatI!=NULL)&&(KeyDatI->HashCd!=-1)); return KeyDatI->Key;}$/;"	f	class:THashMPKeyDatI
GetKey	glib-core/hashmp.h	/^  const TKey& GetKey(const int& KeyId) const { return GetPHashKeyDat(KeyId).Key;}$/;"	f	class:THashMP
GetKey	glib-core/os.cpp	/^PRegKey TRegKey::GetKey(const PRegKey& BaseKey, const TStr& SubKeyNm){$/;"	f	class:TRegKey
GetKey	glib-core/shash.h	/^  TKey& GetKey() { return Key; }$/;"	f	class:TKeyDatFl
GetKey	glib-core/shash.h	/^  const TKey& GetKey() const { return Key; }$/;"	f	class:TKeyDatFl
GetKey	glib-core/shash.h	/^  const TKey& GetKey() const {Assert((KeyI!=NULL)&&(KeyI->HashCd!=-1)); return KeyI->Key; }$/;"	f	class:THashSetKeyI
GetKey	glib-core/shash.h	/^  const TKey& GetKey(const int& KeyId) const { return Table.Get(KeyId).Key; }$/;"	f	class:TSparseHash
GetKey	glib-core/shash.h	/^  const TKey& GetKey(const int& KeyId) const { return Table.Get(KeyId); }$/;"	f	class:TSparseSet
GetKey	glib-core/shash.h	/^  const TKey& GetKey(const int& KeyId) const {$/;"	f	class:THashSet
GetKey	snap-core/ghash.h	/^  const TGraphKey& GetKey(const int& KeyId) const { return GraphH.GetKey(KeyId); }$/;"	f	class:TGHash
GetKeyDat	glib-core/hash.h	/^  void GetKeyDat(const int& KeyId, TKey& Key, TDat& Dat) const {$/;"	f	class:THash
GetKeyDat	glib-core/hashmp.h	/^  void GetKeyDat(const int& KeyId, TKey& Key, TDat& Dat) const {$/;"	f	class:THashMP
GetKeyDat	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::GetKeyDat(const int& KeyId, TKey& Key, TDat& Dat) const {$/;"	f	class:TSparseHash
GetKeyDat	snap-core/ghash.h	/^  void GetKeyDat(const int& KeyId, TGraphKey& Key, TDat& Dat) const { GraphH.GetKeyDat(KeyId, Key, Dat); }$/;"	f	class:TGHash
GetKeyDatKdV	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::GetKeyDatKdV(TVec<TKeyDat<TKey, TDat> >& KeyDatKdV) const {$/;"	f	class:THash
GetKeyDatKdV	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::GetKeyDatKdV(TVec<TKeyDat<TKey, TDat> >& KeyDatKdV) const {$/;"	f	class:THashMP
GetKeyDatPrV	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::GetKeyDatPrV(TVec<TPair<TKey, TDat> >& KeyDatPrV) const {$/;"	f	class:THash
GetKeyDatPrV	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::GetKeyDatPrV(TVec<TPair<TKey, TDat> >& KeyDatPrV) const {$/;"	f	class:THashMP
GetKeyDatPrV	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::GetKeyDatPrV(TVec<TPair<TKey, TDat> >& KeyDatPrV) const {$/;"	f	class:TSparseHash
GetKeyDatPrV	snap-core/ghash.h	/^  void GetKeyDatPrV(TVec<TPair<TGraphKey, TDat> >& KeyDatPrV) const { GraphH.GetKeyDatPrV(KeyDatPrV); }$/;"	f	class:TGHash
GetKeyI	snap-core/gbase.h	/^  int GetKeyI(const int& KeyN) const { return KIdSetH.GetKey(KeyN); }$/;"	f	class:TUnionFind
GetKeyId	glib-core/hash.h	/^int THash<TKey, TDat, THashFunc>::GetKeyId(const TKey& Key) const {$/;"	f	class:THash
GetKeyId	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::GetKeyId(const TKey& Key) const {$/;"	f	class:THashMP
GetKeyId	glib-core/shash.h	/^  int GetKeyId(const TKey& Key) const { int Pos, PosToIns;$/;"	f	class:TSparseSet
GetKeyId	glib-core/shash.h	/^  int GetKeyId(const TKey& Key) const {$/;"	f	class:TSparseHash
GetKeyId	glib-core/shash.h	/^int THashSet<TKey, THashFunc>::GetKeyId(const TKey& Key) const {$/;"	f	class:THashSet
GetKeyId	snap-core/ghash.h	/^  int GetKeyId(const PNGraph& Graph) const { return IsGetKeyId(Graph); }$/;"	f	class:TGHash
GetKeyId	snap-core/ghash.h	/^  int GetKeyId(const TGraphKey& Key) const { return GraphH.GetKeyId(Key); }$/;"	f	class:TGHash
GetKeyIdByDat	snap-core/ghash.h	/^void TGHash<TDat>::GetKeyIdByDat(TIntV& KeyIdV, const bool& Asc) const {$/;"	f	class:TGHash
GetKeyIdByGSz	snap-core/ghash.h	/^void TGHash<TDat>::GetKeyIdByGSz(TIntV& KeyIdV, const bool& Asc) const {$/;"	f	class:TGHash
GetKeyNmV	glib-core/os.cpp	/^void TRegKey::GetKeyNmV(TStrV& KeyNmV) const {$/;"	f	class:TRegKey
GetKeyPrV	snap-exp/signnet.cpp	/^void GetKeyPrV(const THash<TIntPr, TInt>& H, const int& MinCnt, TFltPrV& V) {$/;"	f
GetKeyV	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::GetKeyV(TVec<TKey>& KeyV) const {$/;"	f	class:THash
GetKeyV	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::GetKeyV(TVec<TKey>& KeyV) const {$/;"	f	class:THashMP
GetKeyV	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::GetKeyV(TVec<TKey>& KeyV) const {$/;"	f	class:THashSet
GetKeyV	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::GetKeyV(TVec<TKey>& KeyV) const {$/;"	f	class:TSparseHash
GetKeyV	glib-core/shash.h	/^void TSparseSet<TKey, GroupSize>::GetKeyV(TVec<TKey>& KeyV) const {$/;"	f	class:TSparseSet
GetKeyV	snap-core/ghash.h	/^  void GetKeyV(TVec<TGraphKey>& KeyV) const { GraphH.GetKeyV(KeyV); }$/;"	f	class:TGHash
GetKeys	test/test-alg.cpp	/^void GetKeys(TIntV& Keys, const TIntPrV& Map) {$/;"	f
GetKronIter	snap-adv/kronecker.cpp	/^int TKronMtx::GetKronIter(const int& GNodes, const int& SeedMtxSz) {$/;"	f	class:TKronMtx
GetKronIter	snap-adv/kronecker.cpp	/^int TKronMtx::GetKronIter(const int& Nodes) const {$/;"	f	class:TKronMtx
GetKronIters	snap-adv/kronecker.h	/^  int GetKronIters() const { return KronIters; }$/;"	f	class:TKroneckerLL
GetL2	glib-core/bits.cpp	/^int TB1Def::GetL2(const uchar& Val){$/;"	f	class:TB1Def
GetL2	glib-core/bits.cpp	/^int TB2Def::GetL2(const TB2& Val){$/;"	f	class:TB2Def
GetL2	glib-core/bits.cpp	/^int TB4Def::GetL2(const uint& Val){$/;"	f	class:TB4Def
GetLL	snap-adv/kronecker.h	/^  double GetLL() const { return LogLike; }$/;"	f	class:TKroneckerLL
GetLLHist	snap-adv/kronecker.h	/^  const TFltV& GetLLHist() const { return LLV; }$/;"	f	class:TKroneckerLL
GetLLMtx	snap-adv/kronecker.cpp	/^void TKronMtx::GetLLMtx(TKronMtx& LLMtx) {$/;"	f	class:TKronMtx
GetLLMtx	snap-adv/kronecker.h	/^  const TKronMtx& GetLLMtx() const { return LLMtx; }$/;"	f	class:TKroneckerLL
GetLLMtx	snap-adv/mag.cpp	/^void TMAGAffMtx::GetLLMtx(TMAGAffMtx& LLMtx) {$/;"	f	class:TMAGAffMtx
GetLNId	snap-core/graph.h	/^    int GetLNId() const { return GetSrcNId(); }$/;"	f	class:TBPGraph::TEdgeI
GetLNIdV	snap-core/graph.cpp	/^void TBPGraph::GetLNIdV(TIntV& NIdV) const {$/;"	f	class:TBPGraph
GetLNodes	snap-core/graph.h	/^  int GetLNodes() const { return LeftH.Len(); }$/;"	f	class:TBPGraph
GetLTalk	snap-exp/wikinet.h	/^  TSecTm GetLTalk() const { return LastTalk; }$/;"	f	class:TWikiTalkEdge
GetLambdaV	snap-adv/agmfit.h	/^  void GetLambdaV(TFltV& OutV) {OutV = LambdaV;}$/;"	f	class:TAGMFit
GetLang	snap-exp/imdbnet.h	/^  int GetLang() const { return Lang; }$/;"	f	class:TImdbNode
GetLassoCoef	snap-adv/agmattr.h	/^  double GetLassoCoef() { return LassoCoef; }$/;"	f	class:TCesna
GetLast	snap-core/gbase.h	/^  int GetLast() const { return Last; }$/;"	f	class:TSnapQueue
GetLastAccessTm	glib-core/fl.cpp	/^uint64 TFile::GetLastAccessTm(const TStr& FNm) {$/;"	f	class:TFile
GetLastMsgCStr	glib-core/os.cpp	/^char* TSysStr::GetLastMsgCStr(){$/;"	f	class:TSysStr
GetLastWriteTm	glib-core/fl.cpp	/^uint64 TFile::GetLastWriteTm(const TStr& FNm) {$/;"	f	class:TFile
GetLc	glib-core/html.h	/^  char GetLc(const char& Ch) const {return LcChV[Ch-TCh::Mn];}$/;"	f
GetLcCh	glib-core/http.cpp	/^  char GetLcCh(const char& Ch){return LcChV[Ch-TCh::Mn];}$/;"	f	class:THttpChDef
GetLcChA	glib-core/html.h	/^  void GetLcChA(TChA& ChA) const {$/;"	f
GetLcStr	glib-core/html.h	/^  TStr GetLcStr(const TStr& Str) const {$/;"	f
GetLcStr	glib-core/http.cpp	/^TStr THttpChDef::GetLcStr(const TStr& Str){$/;"	f	class:THttpChDef
GetLen2PathAttrV	snap-exp/linkpred.cpp	/^void TLpExample::GetLen2PathAttrV(TVec<TFltV>& AttrV) const { \/\/ (dstnid, class, features)$/;"	f	class:TLpExample
GetLen2Paths	snap-core/triad.h	/^int GetLen2Paths(const PGraph& Graph, const int& NId1, const int& NId2) {$/;"	f	namespace:TSnap
GetLen2Paths	snap-core/triad.h	/^int GetLen2Paths(const PGraph& Graph, const int& NId1, const int& NId2, TIntV& NbrV) {$/;"	f	namespace:TSnap
GetLine	glib-core/fl.cpp	/^char* TMIn::GetLine(uint64 Index) {$/;"	f	class:TMIn
GetLineBreakCode	glib-core/unicode.h	/^	static inline ushort GetLineBreakCode(char c1, char c2) { return ((static_cast<ushort>(static_cast<uchar>(c1)) & 0xff) << 8) | ((static_cast<ushort>(static_cast<uchar>(c2)) & 0xff)); }$/;"	f	class:TUniChInfo
GetLineBreakFn	glib-core/unicode.h	/^	static TStr GetLineBreakFn() { return "LineBreak.txt"; }$/;"	f	class:TUniChDb
GetLineEndPos	glib-core/fl.cpp	/^uint64 TMIn::GetLineEndPos(uint64 Ind) {$/;"	f	class:TMIn
GetLineNo	glib-core/ssmp.h	/^  uint64 GetLineNo() const { return LineCnt; }$/;"	f
GetLineStartPos	glib-core/fl.cpp	/^uint64 TMIn::GetLineStartPos(uint64 Ind) {$/;"	f	class:TMIn
GetLineStyle	glib-core/gnuplot.h	/^  TStr GetLineStyle(const int& PlotId) const { return SeriesV[PlotId].WithStyle; }$/;"	f	class:TGnuPlot
GetLnStr	glib-core/ssmp.h	/^  TChA GetLnStr() const { TChA LnOut;  for (int i = 0; i < Len(); i++) { LnOut+=GetFld(i); LnOut+=' '; }  if (LnOut.Len() > 0) LnOut.DelLastCh();  return LnOut; }$/;"	f
GetLnV	glib-core/lx.cpp	/^void TILx::GetLnV(const TStr& FNm, TStrV& LnV){$/;"	f	class:TILx
GetLoad	glib-core/os.h	/^  uint64 GetLoad(){ \/\/ percent of memory in use$/;"	f
GetLoadStr	glib-core/os.cpp	/^TStr TSysMemStat::GetLoadStr(){$/;"	f	class:TSysMemStat
GetLocTmFromUniTm	glib-core/os.cpp	/^TTm TSysTm::GetLocTmFromUniTm(const TTm& Tm) {$/;"	f	class:TSysTm
GetLocTmFromUniTm	glib-core/os.cpp	/^TTm TSysTm::GetLocTmFromUniTm(const TTm& Tm){$/;"	f	class:TSysTm
GetLocTmFromUniTm	glib-core/tm.cpp	/^TTm TTm::GetLocTmFromUniTm(const TTm& Tm){$/;"	f	class:TTm
GetLocalId	snap-exp/mmgraph-exp.h	/^    int GetLocalId() const { return TMNet::GetLocalNId(GetId()); }$/;"	f	class:TMNet::TMNodeI
GetLocalNId	snap-exp/mmgraph-exp.h	/^  static int GetLocalNId(const int& GlobalNId) { return GlobalNId >> NTYPEID_NBITS; }$/;"	f	class:TMNet
GetLoss	snap-exp/linkpred.cpp	/^double TLpPredictor::GetLoss(const double& Val) const {$/;"	f	class:TLpPredictor
GetLoss	snap-exp/linkpred.cpp	/^double TLpPredictor::GetLoss(const double& Val) const {$/;"	f	class:__OLD__::TLpPredictor
GetLossGrad	snap-exp/linkpred.cpp	/^double TLpPredictor::GetLossGrad(const double& Val) const {$/;"	f	class:TLpPredictor
GetLossGrad	snap-exp/linkpred.cpp	/^double TLpPredictor::GetLossGrad(const double& Val) const {$/;"	f	class:__OLD__::TLpPredictor
GetLowerCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetLowerCase(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true, const bool turkic = false, const bool lithuanian = false) const { GetLowerCase(src, 0, src.Len(), dest, clrDest, turkic, lithuanian); }$/;"	f	class:TUniChDb
GetLowerCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetLowerCase(const TSrcVec& src, size_t srcIdx, const size_t srcCount, TVec<TDestCh>& dest, const bool clrDest = true, const bool turkic = false, const bool lithuanian = false) const { GetCaseConverted(src, srcIdx, srcCount, dest, clrDest, ccLower, turkic, lithuanian); }$/;"	f	class:TUniChDb
GetLowerCase	glib-core/unicode.h	/^	void GetLowerCase(const TIntV& src, TIntV& dest) const { ucd.GetLowerCase(src, dest, true, false, false); }$/;"	f	class:TUnicode
GetLsUInt32	glib-core/bd.h	/^  uint GetLsUInt32() const {return Val.UInt32.Ls;}$/;"	f	class:TConv_Pt64Ints32
GetLws	glib-core/http.cpp	/^void THttpLx::GetLws(){$/;"	f	class:THttpLx
GetLxSym	glib-core/html.cpp	/^TLxSym THtmlDoc::GetLxSym(const THtmlLxSym& HtmlLxSym, const TChA& ChA){$/;"	f	class:THtmlDoc
GetMMNI	snap-core/mmnet.h	/^  TNodeI GetMMNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), this); }$/;"	f	class:TModeNet
GetMP	snap-core/table.h	/^  static TInt GetMP() { return UseMP; }$/;"	f	class:TTable
GetMP	snap-exp/alternativetable.h	/^  static TInt GetMP() { return UseMP; }$/;"	f	class:PhysicalOrderTable
GetMSec	glib-core/tm.h	/^    double GetMSec() const { return double(GetTime()) \/ double(CLOCKS_PER_SEC\/1000); }$/;"	f	class:TTmStopWatch
GetMSec	glib-core/tm.h	/^  int GetMSec() const {return MSec;}$/;"	f	class:TTm
GetMSecInt	glib-core/tm.h	/^    int GetMSecInt() const { return TFlt::Round(GetMSec()); }$/;"	f	class:TTmStopWatch
GetMSecsFromOsStart	glib-core/os.cpp	/^uint TSysTm::GetMSecsFromOsStart(){$/;"	f	class:TSysTm
GetMSecsFromOsStart	glib-core/tm.cpp	/^uint TTm::GetMSecsFromOsStart(){$/;"	f	class:TTm
GetMSecsFromTm	glib-core/os.cpp	/^uint64 TSysTm::GetMSecsFromTm(const TTm& Tm){$/;"	f	class:TSysTm
GetMSecsFromTm	glib-core/tm.cpp	/^uint64 TTm::GetMSecsFromTm(const TTm& Tm){$/;"	f	class:TTm
GetMainFNm	glib-core/blobbs.cpp	/^TStr TMBlobBs::GetMainFNm($/;"	f	class:TMBlobBs
GetMajorFrac	snap-exp/signnet.h	/^    double GetMajorFrac() const { return TMath::Mx(PlsCnt,MnsCnt)\/(PlsCnt+MnsCnt); }$/;"	f	struct:TSignMicroEvol::TCloseStat
GetMajorSign	snap-exp/signnet.h	/^    TStr GetMajorSign() const { return PlsCnt>=MnsCnt?"+":"-"; }$/;"	f	struct:TSignMicroEvol::TCloseStat
GetMapHitsIterator	snap-core/table.h	/^  static TTableIterator GetMapHitsIterator(const TVec<PNEANet>& GraphSeq,$/;"	f	class:TTable
GetMapNodeToState	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* GetMapNodeToState() const { return MapNodeToState; }$/;"	f	class:TMatchingMachine
GetMapNodeToState	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* GetMapNodeToState() const { return MapNodeToState; }$/;"	f	class:TMatchingMachine
GetMapPageRank	snap-core/table.h	/^  static TTableIterator GetMapPageRank(const TVec<PNEANet>& GraphSeq, TTableContext* Context,$/;"	f	class:TTable
GetMapStateToNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* GetMapStateToNode() const { return MapStateToNode; }$/;"	f	class:TMatchingMachine
GetMapStateToNode	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* GetMapStateToNode() const { return MapStateToNode; }$/;"	f	class:TMatchingMachine
GetMatchCount	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  long GetMatchCount() const { return MatchCount; }$/;"	f	class:TMatchListener
GetMatchCount	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  long GetMatchCount() const { return MatchCount; }$/;"	f	class:TMatchListener
GetMaxCliques	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetMaxCliques(const PUNGraph& G, int MinMaxCliqueSize, TVec<TIntV>& MaxCliques) {$/;"	f	class:TCliqueOverlap
GetMaxFlowIntEK	snap-core/flow.cpp	/^int GetMaxFlowIntEK (PNEANet &Net, const int &SrcNId, const int &SnkNId) {$/;"	f	namespace:TSnap
GetMaxFlowIntPR	snap-core/flow.cpp	/^int GetMaxFlowIntPR (PNEANet &Net, const int& SrcNId, const int& SnkNId) {$/;"	f	namespace:TSnap
GetMaxLabel	snap-core/flow.cpp	/^  int GetMaxLabel() { return MaxLabel; }$/;"	f	class:TSnap::TPRManager
GetMaxPriority	glib-core/priorityqueue.h	/^  float GetMaxPriority() {$/;"	f	class:TMaxPriorityQueue
GetMaxTm	snap-adv/cascdynetinf.h	/^  double GetMaxTm() const { return NIdHitH[NIdHitH.Len()-1].Tm; } \/\/ we assume the cascade is sorted$/;"	f	class:TCascade
GetMaxTm	snap-exp/memes.h	/^  TSecTm GetMaxTm() const { return TmUrlCntV.Empty()?TSecTm():TmUrlCntV.Last().Tm(); }$/;"	f	class:TQuote
GetMaximalCliques	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetMaximalCliques(const PUNGraph& G, int MinMaxCliqueSize, TVec<TIntV>& MaxCliques) {$/;"	f	class:TCliqueOverlap
GetMd5SigStr	glib-core/md5.h	/^  static TStr GetMd5SigStr(const PSIn& SIn){$/;"	f
GetMd5SigStr	glib-core/md5.h	/^  static TStr GetMd5SigStr(const TMem& Mem){$/;"	f
GetMd5SigStr	glib-core/md5.h	/^  static TStr GetMd5SigStr(const TStr& Str){$/;"	f
GetMean	glib-core/xmath.h	/^  double GetMean() const {Assert(DefP&&UsableP); return Mean;}$/;"	f
GetMeanTm	snap-exp/memes.cpp	/^TSecTm TQuote::GetMeanTm(const TTmUnit& TmUnit, const TUrlTy& UrlTy, const TQuoteBs& QtBs, const TSecTm& AfterTm) const {$/;"	f	class:TQuote
GetMedian	glib-core/xmath.h	/^  double GetMedian() const {Assert(DefP&&UsableP); return Median;}$/;"	f
GetMedianTm	snap-exp/memes.cpp	/^TSecTm TQuote::GetMedianTm(const TTmUnit& TmUnit, const TUrlTy& UrlTy, const TQuoteBs& QtBs, const TSecTm& AfterTm) const {$/;"	f	class:TQuote
GetMemSf	glib-core/http.cpp	/^  TMem& GetMemSf(){return SfMem;}$/;"	f	class:THttpLx
GetMemSize	glib-core/ds.h	/^  TSizeTy GetMemSize() const {$/;"	f	class:TVec
GetMemUsed	glib-core/blobbs.h	/^  int GetMemUsed() const {return sizeof(TBlobPt);}$/;"	f
GetMemUsed	glib-core/ds.h	/^  ::TSize GetMemUsed() const {$/;"	f	class:TGLib_OLD::TVecPool
GetMemUsed	glib-core/ds.h	/^  TSizeTy GetMemUsed() const {$/;"	f	class:TVec
GetMemUsed	glib-core/ds.h	/^  int GetMemUsed() const {return NodeV.GetMemUsed();}$/;"	f	class:TTree
GetMemUsed	glib-core/ds.h	/^  int GetMemUsed() const {return Val1.GetMemUsed()+Val2.GetMemUsed()+Val3.GetMemUsed();}$/;"	f	class:TTriple
GetMemUsed	glib-core/ds.h	/^  int GetMemUsed() const {return Val1.GetMemUsed()+Val2.GetMemUsed();}$/;"	f	class:TPair
GetMemUsed	glib-core/ds.h	/^  uint64 GetMemUsed() const {$/;"	f	class:TVecPool
GetMemUsed	glib-core/dt.h	/^  int GetMemUsed() const {return int(2*sizeof(int)+sizeof(char*)+MxBfL);}$/;"	f
GetMemUsed	glib-core/hash.h	/^  ::TSize GetMemUsed() const {$/;"	f	class:THash
GetMemUsed	glib-core/hash.h	/^  ::TSize GetMemUsed(){$/;"	f
GetMemUsed	glib-core/hashmp.h	/^  ::TSize GetMemUsed() const {$/;"	f	class:THashMP
GetMemUsed	glib-core/shash.h	/^  ::TSize GetMemUsed() const { return 2*sizeof(TInt)+Table.GetMemUsed(); }$/;"	f	class:TSparseHash
GetMemUsed	glib-core/shash.h	/^  ::TSize GetMemUsed() const { return 2*sizeof(TInt)+Table.GetMemUsed(); }$/;"	f	class:TSparseSet
GetMemUsed	glib-core/shash.h	/^  ::TSize GetMemUsed() const { return 2*sizeof(TInt)+Vals*sizeof(TVal)+GroupV.GetMemUsed(); }$/;"	f	class:TSparseTable
GetMemUsed	glib-core/shash.h	/^  ::TSize GetMemUsed() const {$/;"	f	class:THashSet
GetMemUsed	glib-core/tm.h	/^  int GetMemUsed() const {return AbsSecs.GetMemUsed();}$/;"	f	class:TSecTm
GetMemUsed	glib-core/tm.h	/^  int GetMemUsed() const {return sizeof(TTm);}$/;"	f	class:TTm
GetMemUsed	glib-core/wch.h	/^  int GetMemUsed() const {return sizeof(MsVal)+sizeof(LsVal);}$/;"	f	class:TWCh
GetMemUsed	glib-core/wch.h	/^  int GetMemUsed(){return WChV.GetMemUsed();}$/;"	f	class:TWChA
GetMemUsed	snap-core/attr.h	/^  size_t GetMemUsed() const { return AttrNameToId.GetMemUsed() + AttrIdToName.GetMemUsed() + IntAttrVals.GetMemUsed() + FltAttrVals.GetMemUsed() + StrAttrVals.GetMemUsed(); }$/;"	f	class:TAttr
GetMemUsed	snap-core/mmnet.h	/^    size_t GetMemUsed() const { return EId.GetMemUsed() + SrcNId.GetMemUsed() + DstNId.GetMemUsed(); }$/;"	f	class:TCrossNet::TCrossEdge
GetMemUsed	snap-core/table.h	/^	TSize GetMemUsed() const{$/;"	f	class:GroupStmt
GetMemUsedKB	snap-core/table.cpp	/^TSize TTable::GetMemUsedKB() {$/;"	f	class:TTable
GetMemUsedKB	snap-exp/alternativetable.cpp	/^TSize ExplicitStringTable::GetMemUsedKB() {$/;"	f	class:ExplicitStringTable
GetMergeClusters	snap-exp/memes.cpp	/^PQuoteBs TQuoteBs::GetMergeClusters(const bool& OnlyClusters) const {$/;"	f	class:TQuoteBs
GetMergeSortedV	snap-core/triad.cpp	/^void GetMergeSortedV(TIntV& NeighbourV, TNGraph::TNodeI NI) {$/;"	f	namespace:TSnap
GetMergedClustQt	snap-exp/memes.cpp	/^void TClustNet::GetMergedClustQt(const TIntV& QtIdV, TQuote& NewQt) const {$/;"	f	class:TClustNet
GetMergedClustQt	snap-exp/memes.cpp	/^void TQuoteBs::GetMergedClustQt(const TIntV& ClustV, TQuote& NewQt, const bool& OnlyAfterBegTm) const {$/;"	f	class:TQuoteBs
GetMergedClustQt	snap-exp/memes.cpp	/^void TQuoteBs::GetMergedClustQt(const int& CId, TQuote& NewQt, const bool& OnlyAfterBegTm) const {$/;"	f	class:TQuoteBs
GetMetaTag	glib-core/html.cpp	/^void THtmlLx::GetMetaTag(){$/;"	f	class:THtmlLx
GetMethod	glib-core/http.h	/^  THttpRqMethod GetMethod() const {return Method;}$/;"	f
GetMethodNm	glib-core/http.cpp	/^const TStr THttp::GetMethodNm="GET";$/;"	m	class:THttp	file:
GetMethodNm	glib-core/http.cpp	/^const TStr& THttpRq::GetMethodNm() const {$/;"	f	class:THttpRq
GetMethodNm	glib-core/http.h	/^  static const TStr GetMethodNm;$/;"	m	class:THttp
GetMin	glib-core/tm.h	/^  int GetMin() const {return Min;}$/;"	f	class:TTm
GetMin	snap-core/gstat.h	/^  int GetMin() const { return Time.GetMinN(); }$/;"	f	class:TGStat
GetMinAndGraphIds	snap-adv/graphcounter.cpp	/^uint64 TGraphEnumUtils::GetMinAndGraphIds(const TVec<PNGraph> &isoG, TVec<uint64> &graphIds) {$/;"	f	class:TGraphEnumUtils
GetMinDiscTm	snap-core/cncom.h	/^  int GetMinDiscTm(const int& NId1, const int& NId2) const {$/;"	f	class:TSccVisitor
GetMinMSecs	glib-core/tm.h	/^  static uint64 GetMinMSecs(){return 60*1000;}$/;"	f	class:TTmInfo
GetMinMax	snap-adv/kronecker.cpp	/^void GetMinMax(const TFltPrV& XYValV, double& Min, double& Max, const bool& ResetMinMax) {$/;"	f
GetMinMaxTm	snap-exp/memes.cpp	/^void TQuoteBs::GetMinMaxTm(TSecTm& MinTm, TSecTm& MaxTm) const {$/;"	f	class:TQuoteBs
GetMinMaxTm	snap-exp/memes.cpp	/^void TQuoteBs::GetMinMaxTm(const TIntV& QtIdV, TSecTm& MinTm, TSecTm&MaxTm) const {$/;"	f	class:TQuoteBs
GetMinN	glib-core/tm.cpp	/^int TSecTm::GetMinN() const {$/;"	f	class:TSecTm
GetMinSize	glib-core/shash.h	/^int TSparseHash<TKey, TDat, GroupSize>::GetMinSize(const int& CurVals, const int& WantedVals) const {$/;"	f	class:TSparseHash
GetMinSize	glib-core/shash.h	/^int TSparseSet<TKey, GroupSize>::GetMinSize(const int& CurVals, const int& WantedVals) const {$/;"	f	class:TSparseSet
GetMinTm	snap-adv/cascdynetinf.h	/^  double GetMinTm() const { return NIdHitH[0].Tm; } \/\/ we assume the cascade is sorted$/;"	f	class:TCascade
GetMinTm	snap-exp/memes.h	/^  TSecTm GetMinTm() const { return TmUrlCntV.Empty()?TSecTm():TmUrlCntV[0].Tm(); }$/;"	f	class:TQuote
GetMn	glib-core/xmath.h	/^  double GetMn() const {Assert(DefP&&UsableP); return Mn;}$/;"	f
GetMnArgs	glib-core/env.h	/^  int GetMnArgs() const {return MnArgs;}$/;"	f	class:TEnv
GetModRat	snap-adv/ncp.h	/^    double GetModRat(const int& GEdges) const { return (2.0*Edges) \/ GetExpEdgesIn(GEdges); }                 \/\/ modularity ratio$/;"	f	class:TLocClustStat::TCutInfo
GetMode	glib-core/xmath.h	/^  double GetMode() const {Assert(DefP&&UsableP); return Mode;}$/;"	f
GetMode1	snap-core/mmnet.h	/^  int GetMode1() const { return Mode1; }$/;"	f	class:TCrossNet
GetMode2	snap-core/mmnet.h	/^  int GetMode2() const {return Mode2; }$/;"	f	class:TCrossNet
GetModeId	snap-core/mmnet.h	/^    int GetModeId() { return ModeNetHI.GetKey(); }$/;"	f	class:TMMNet::TModeNetI
GetModeId	snap-core/mmnet.h	/^  int GetModeId(const TStr& ModeName) const { if (ModeNameToIdH.IsKey(ModeName)) { return ModeNameToIdH.GetDat(ModeName); } else { return -1; }  }$/;"	f	class:TMMNet
GetModeName	snap-core/mmnet.h	/^    TStr GetModeName() { return Graph->GetModeName(ModeNetHI.GetKey()); }$/;"	f	class:TMMNet::TModeNetI
GetModeName	snap-core/mmnet.h	/^  TStr GetModeName(const TInt& ModeId) const { if (ModeIdToNameH.IsKey(ModeId)) { return ModeIdToNameH.GetDat(ModeId); } else {return TStr::GetNullStr();} }$/;"	f	class:TMMNet
GetModeNet	snap-core/mmnet.h	/^    TModeNet& GetModeNet() { return Graph->GetModeNetById(GetModeId()); }$/;"	f	class:TMMNet::TModeNetI
GetModeNetById	snap-core/mmnet.cpp	/^TModeNet& TMMNet::GetModeNetById(const TInt& ModeId) const {$/;"	f	class:TMMNet
GetModeNetByName	snap-core/mmnet.cpp	/^TModeNet& TMMNet::GetModeNetByName(const TStr& ModeName) const {$/;"	f	class:TMMNet
GetModeNetI	snap-core/mmnet.h	/^  TModeNetI GetModeNetI(const int& Id) const { return TModeNetI(TModeNetH.GetI(Id), this); }$/;"	f	class:TMMNet
GetModeNets	snap-core/mmnet.h	/^  int GetModeNets() { return TModeNetH.Len(); }$/;"	f	class:TMMNet
GetModel	snap-adv/cascdynetinf.h	/^  int GetModel() const { return Model; }$/;"	f	class:TCascade
GetModular	snap-adv/ncp.h	/^    double GetModular(const int& GEdges) const { return (2.0*Edges - GetExpEdgesIn(GEdges)) \/ (2.0*GEdges); } \/\/ modularity$/;"	f	class:TLocClustStat::TCutInfo
GetModularity	snap-core/cmty.h	/^double GetModularity(const PGraph& G, const TCnComV& CmtyV, int GEdges) {$/;"	f	namespace:TSnap
GetModularity	snap-core/cmty.h	/^double GetModularity(const PGraph& Graph, const TIntV& NIdV, int GEdges) {$/;"	f	namespace:TSnap
GetModuleFileName	glib-core/os.cpp	/^int GetModuleFileName(void *hModule, char *Bf, int MxBfL) {$/;"	f
GetMonth	glib-core/tm.h	/^  int GetMonth() const {return Month;}$/;"	f	class:TTm
GetMonth	snap-core/gstat.h	/^  int GetMonth() const { return Time.GetMonthN(); }$/;"	f	class:TGStat
GetMonthIntFromTm	glib-core/tm.cpp	/^uint TTm::GetMonthIntFromTm(const TTm& Tm) {$/;"	f	class:TTm
GetMonthN	glib-core/tm.cpp	/^int TSecTm::GetMonthN() const {$/;"	f	class:TSecTm
GetMonthN	glib-core/tm.cpp	/^int TTmInfo::GetMonthN(const TStr& MonthNm, const TLoc& Loc){$/;"	f	class:TTmInfo
GetMonthNm	glib-core/tm.cpp	/^TStr TSecTm::GetMonthNm(const TLoc& Loc) const {$/;"	f	class:TSecTm
GetMonthNm	glib-core/tm.cpp	/^TStr TTmInfo::GetMonthNm(const int& MonthN, const TLoc& Loc){$/;"	f	class:TTmInfo
GetMonthNm	glib-core/tm.h	/^  TStr GetMonthNm() const {return TTmInfo::GetMonthNm(Month+1);}$/;"	f	class:TTm
GetMotifCluster	snap-adv/motifcluster.cpp	/^void MotifCluster::GetMotifCluster(PNGraph graph, MotifType motif,$/;"	f	class:MotifCluster
GetMotifCluster	snap-adv/motifcluster.cpp	/^void MotifCluster::GetMotifCluster(PUNGraph graph, MotifType motif,$/;"	f	class:MotifCluster
GetMovieTy	snap-exp/imdbnet.cpp	/^TMovieTy TImdbNet::GetMovieTy(const TStr& MovieTyStr) {$/;"	f	class:TImdbNet
GetMovieTyStr	snap-exp/imdbnet.cpp	/^TStr TImdbNet::GetMovieTyStr(const TMovieTy& MovieTy) {$/;"	f	class:TImdbNet
GetMsUInt32	glib-core/bd.h	/^  uint GetMsUInt32() const {return Val.UInt32.Ms;}$/;"	f	class:TConv_Pt64Ints32
GetMsgStr	glib-core/os.cpp	/^TStr TSysStr::GetMsgStr(const DWORD& MsgCd){$/;"	f	class:TSysStr
GetMtx	snap-adv/kronecker.cpp	/^TKronMtx TKronMtx::GetMtx(TStr MatlabMtxStr) {$/;"	f	class:TKronMtx
GetMtx	snap-adv/kronecker.h	/^  TFltV& GetMtx() { return SeedMtx; }$/;"	f	class:TKronMtx
GetMtx	snap-adv/kronecker.h	/^  const TFltV& GetMtx() const { return SeedMtx; }$/;"	f	class:TKronMtx
GetMtx	snap-adv/mag.cpp	/^TMAGAffMtx TMAGAffMtx::GetMtx(TStr MatlabMtxStr) {$/;"	f	class:TMAGAffMtx
GetMtx	snap-adv/mag.h	/^	const TMAGAffMtx& GetMtx(const int& Attr) const {  return AffMtxV[Attr];  }$/;"	f	class:TMAGParam
GetMtx	snap-adv/mag.h	/^  TFltV& GetMtx() { return SeedMtx; }$/;"	f	class:TMAGAffMtx
GetMtx	snap-adv/mag.h	/^  const TFltV& GetMtx() const { return SeedMtx; }$/;"	f	class:TMAGAffMtx
GetMtxFromNm	snap-adv/kronecker.cpp	/^TKronMtx TKronMtx::GetMtxFromNm(const TStr& MtxNm) {$/;"	f	class:TKronMtx
GetMtxIdx	snap-adv/rolx.cpp	/^int GetMtxIdx(const TInt NodeId, const TIntIntH& NodeIdMtxIdxH) {$/;"	f
GetMtxStr	snap-adv/kronecker.cpp	/^TStr TKronMtx::GetMtxStr() const {$/;"	f	class:TKronMtx
GetMtxStr	snap-adv/mag.cpp	/^TStr TMAGAffMtx::GetMtxStr() const {$/;"	f	class:TMAGAffMtx
GetMtxSum	snap-adv/kronecker.cpp	/^double TKronMtx::GetMtxSum() const {$/;"	f	class:TKronMtx
GetMtxSum	snap-adv/mag.cpp	/^double TMAGAffMtx::GetMtxSum() const {$/;"	f	class:TMAGAffMtx
GetMtxV	snap-adv/mag.h	/^	void GetMtxV(TMAGAffMtxV& MtxV) const {  MtxV = AffMtxV;  }$/;"	f	class:TMAGParam
GetMtxV	snap-adv/mag.h	/^	void GetMtxV(TMAGAffMtxV& MtxV) const {  Param.GetMtxV(MtxV);  }$/;"	f	class:TMAGFitBern
GetMtxVal	snap-adv/mag.h	/^	const double GetMtxVal(const int& Attr, const int& Row, const int& Col) const {  return AffMtxV[Attr].At(Row, Col);  }$/;"	f	class:TMAGParam
GetMu	snap-adv/mag.h	/^	double GetMu(const int& Attr) const {  return MuV[Attr];  }$/;"	f	class:TMAGNodeBern
GetMuV	snap-adv/mag.h	/^	bool GetMuV(TFltV& _MuV) const {  if(!Dirty)  {  _MuV = MuV;  }  return Dirty; }$/;"	f	class:TMAGNodeBeta
GetMuV	snap-adv/mag.h	/^	const TFltV& GetMuV() const {  const TMAGNodeBern& Dist = Param.GetNodeAttr();  return Dist.GetMuV();  }$/;"	f	class:TMAGFitBern
GetMuV	snap-adv/mag.h	/^	const TFltV& GetMuV() const {  return MuV;  }$/;"	f	class:TMAGNodeBern
GetMx	glib-core/xmath.h	/^  double GetMx() const {Assert(DefP&&UsableP); return Mx;}$/;"	f
GetMxBiCon	snap-core/cncom.cpp	/^PUNGraph GetMxBiCon(const PUNGraph& Graph, const bool& RenumberNodes) {$/;"	f	namespace:TSnap
GetMxBiCon	snap-core/cncom.h	/^PGraph GetMxBiCon(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetMxDegNId	snap-core/alg.h	/^int GetMxDegNId(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetMxEId	snap-core/mmnet.h	/^  int GetMxEId() const { return MxEId; }$/;"	f	class:TCrossNet
GetMxEId	snap-core/network.h	/^  int GetMxEId() const { return MxEId; }$/;"	f	class:TNEANet
GetMxEId	snap-core/networkmp.h	/^  int GetMxEId() const { return MxEId; }$/;"	f	class:TNEANetMP
GetMxEId	snap-exp/mmgraph-exp.h	/^  int GetMxEId() const { return MxEId; }$/;"	f	class:TMNet
GetMxInDegNId	snap-core/alg.h	/^int GetMxInDegNId(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetMxKeyIds	glib-core/hash.h	/^  int GetMxKeyIds() const {return KeyDatV.Len();}$/;"	f	class:THash
GetMxKeyIds	glib-core/hashmp.h	/^  int GetMxKeyIds() const {return Table.Len();}$/;"	f	class:THashMP
GetMxKeyIds	glib-core/shash.h	/^  int GetMxKeyIds() const {return KeyV.Len(); }$/;"	f	class:THashSet
GetMxKeyIds	snap-core/ghash.h	/^  int GetMxKeyIds() const { return GraphH.GetMxKeyIds(); }$/;"	f	class:TGHash
GetMxNId	snap-core/bignet.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TBigNet
GetMxNId	snap-core/graph.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TBPGraph
GetMxNId	snap-core/graph.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNEGraph
GetMxNId	snap-core/graph.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNGraph
GetMxNId	snap-core/graph.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TUNGraph
GetMxNId	snap-core/graphmp.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNGraphMP
GetMxNId	snap-core/network.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TDirNet
GetMxNId	snap-core/network.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNEANet
GetMxNId	snap-core/network.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNodeEDatNet
GetMxNId	snap-core/network.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNodeEdgeNet
GetMxNId	snap-core/network.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNodeNet
GetMxNId	snap-core/network.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TUndirNet
GetMxNId	snap-core/networkmp.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TNEANetMP
GetMxNId	snap-exp/graphmp-exp.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TUNGraphMP
GetMxNId	snap-exp/mmgraph-exp.h	/^    int GetMxNId() const { return MxNId; }$/;"	f	class:TMNet::TNodeType
GetMxNId	snap-exp/mmgraph-exp.h	/^  int GetMxNId() const { return MxNId; }$/;"	f	class:TMNet
GetMxNId	snap-exp/mmgraph-exp.h	/^  int GetMxNId(const int& NTypeId) const {$/;"	f	class:TMNet
GetMxNTypeId	snap-exp/mmgraph-exp.h	/^  int GetMxNTypeId() const { return TypeNodeV.Len(); }$/;"	f	class:TMNet
GetMxOutDegNId	snap-core/alg.h	/^int GetMxOutDegNId(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetMxQ	snap-core/cmty.cpp	/^    double GetMxQ() const { return NIdQH[MxQId]; }$/;"	f	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat
GetMxQNId	snap-core/cmty.cpp	/^    int GetMxQNId() const { return NIdQH.GetKey(MxQId); }$/;"	f	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat
GetMxScc	snap-core/cncom.h	/^PGraph GetMxScc(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetMxSccSz	snap-core/cncom.h	/^double GetMxSccSz(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetMxSegLen	glib-core/blobbs.cpp	/^int TBlobBs::GetMxSegLen(const PFRnd& FBlobBs){$/;"	f	class:TBlobBs
GetMxValN	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::GetMxValN() const {$/;"	f	class:TVec
GetMxValXY	glib-core/ds.h	/^void TVVec<TVal>::GetMxValXY(int& X, int& Y) const {$/;"	f	class:TVVec
GetMxWcc	snap-core/cncom.h	/^PGraph GetMxWcc(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetMxWccSz	snap-core/cncom.h	/^double GetMxWccSz(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetNAFltI	snap-core/network.h	/^  TAFltI GetNAFltI(const TStr& attr, const int& NId) const {$/;"	f	class:TNEANet
GetNAFltI	snap-core/networkmp.h	/^  TAFltI GetNAFltI(const TStr& attr, const int& NId) const {$/;"	f	class:TNEANetMP
GetNAIntI	snap-core/network.h	/^  TAIntI GetNAIntI(const TStr& attr, const int& NId) const {$/;"	f	class:TNEANet
GetNAIntI	snap-core/networkmp.h	/^  TAIntI GetNAIntI(const TStr& attr, const int& NId) const {$/;"	f	class:TNEANetMP
GetNAIntVI	snap-core/network.h	/^  TAIntVI GetNAIntVI(const TStr& attr, const int& NId) const {$/;"	f	class:TNEANet
GetNAStrI	snap-core/network.h	/^  TAStrI GetNAStrI(const TStr& attr, const int& NId) const {$/;"	f	class:TNEANet
GetNAStrI	snap-core/networkmp.h	/^  TAStrI GetNAStrI(const TStr& attr, const int& NId) const {$/;"	f	class:TNEANetMP
GetNAttr	snap-exp/linkpred.h	/^  int GetNAttr() const { return BegEI().GetDat().AttrV.Len(); }$/;"	f	class:TLpExample
GetNBurned	snap-core/ff.h	/^  int GetNBurned() const { return BurnedSet.Len(); }$/;"	f	class:TUndirFFire
GetNDat	snap-core/bignet.h	/^  TNodeDat& GetNDat(const int& NId) { return NodeH.GetDat(NId).Dat; }$/;"	f	class:TBigNet
GetNDat	snap-core/bignet.h	/^  const TNodeDat& GetNDat(const int& NId) const { return NodeH.GetDat(NId).Dat; }$/;"	f	class:TBigNet
GetNDat	snap-core/network.h	/^  TNodeData& GetNDat(const int& NId) { return NodeH.GetDat(NId).NodeDat; }$/;"	f	class:TNodeEDatNet
GetNDat	snap-core/network.h	/^  TNodeData& GetNDat(const int& NId) { return NodeH.GetDat(NId).NodeDat; }$/;"	f	class:TNodeEdgeNet
GetNDat	snap-core/network.h	/^  TNodeData& GetNDat(const int& NId) { return NodeH.GetDat(NId).NodeDat; }$/;"	f	class:TNodeNet
GetNDat	snap-core/network.h	/^  const TNodeData& GetNDat(const int& NId) const { return NodeH.GetDat(NId).NodeDat; }$/;"	f	class:TNodeEDatNet
GetNDat	snap-core/network.h	/^  const TNodeData& GetNDat(const int& NId) const { return NodeH.GetDat(NId).NodeDat; }$/;"	f	class:TNodeEdgeNet
GetNDat	snap-core/network.h	/^  const TNodeData& GetNDat(const int& NId) const { return NodeH.GetDat(NId).NodeDat; }$/;"	f	class:TNodeNet
GetNData	glib-core/xml.cpp	/^void TXmlLx::GetNData(){$/;"	f	class:TXmlLx
GetNGraph	snap-core/bignet.h	/^PNGraph TBigNet<TNodeData, IsDir>::GetNGraph(const bool& RenumberNodes) const {$/;"	f	class:TBigNet
GetNGraph	snap-core/ghash.cpp	/^PNGraph TGraphKey::GetNGraph() const {$/;"	f	class:TGraphKey
GetNI	snap-core/bignet.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), (TVPool *)&Pool); }$/;"	f	class:TBigNet
GetNI	snap-core/graph.h	/^  TNodeI GetNI(const int& NId) const { return IsLNode(NId) ? TNodeI(LeftH.GetI(NId), RightH.EndI()) : TNodeI(LeftH.EndI(), RightH.GetI(NId)); }$/;"	f	class:TBPGraph
GetNI	snap-core/graph.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId)); }$/;"	f	class:TNGraph
GetNI	snap-core/graph.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId)); }$/;"	f	class:TUNGraph
GetNI	snap-core/graph.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), this); }$/;"	f	class:TNEGraph
GetNI	snap-core/graphmp.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId)); }$/;"	f	class:TNGraphMP
GetNI	snap-core/network.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId)); }$/;"	f	class:TDirNet
GetNI	snap-core/network.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId)); }$/;"	f	class:TUndirNet
GetNI	snap-core/network.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), this); }$/;"	f	class:TNEANet
GetNI	snap-core/network.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), this); }$/;"	f	class:TNodeEDatNet
GetNI	snap-core/network.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), this); }$/;"	f	class:TNodeEdgeNet
GetNI	snap-core/network.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), this); }$/;"	f	class:TNodeNet
GetNI	snap-core/networkmp.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId), this); }$/;"	f	class:TNEANetMP
GetNI	snap-exp/graphmp-exp.h	/^  TNodeI GetNI(const int& NId) const { return TNodeI(NodeH.GetI(NId)); }$/;"	f	class:TUNGraphMP
GetNI	snap-exp/mmgraph-exp.h	/^  TNodeI GetNI(const int& NId) const {$/;"	f	class:TMNet
GetNI	snap-exp/mmgraph-exp.h	/^  TNodeI GetNI(const int& NTypeId, const int& NId) const {$/;"	f	class:TMNet
GetNIDValH	snap-adv/agmdirected.cpp	/^void TCoda::GetNIDValH(TIntFltH& NIdValInOutH, TIntFltH& NIdValOutH, TIntFltH& NIdValInH, const int CID, const double Thres) {$/;"	f	class:TCoda
GetNId	snap-adv/ncp.h	/^  int GetNId(const int& NodeN) const { return NIdV[NodeN]; }$/;"	f	class:TLocClust
GetNIdByTm	snap-core/timenet.cpp	/^void TTimeNENet::GetNIdByTm(TIntV& NIdV) const {$/;"	f	class:TTimeNENet
GetNIdByTm	snap-core/timenet.cpp	/^void TTimeNet::GetNIdByTm(TIntV& NIdV) const {$/;"	f	class:TTimeNet
GetNIdOffset	snap-core/anf.h	/^  uint64 GetNIdOffset(const int& NId) const { return NIdToBitPosH.GetDat(NId); }$/;"	f	class:TGraphAnf
GetNIdPhiV	snap-adv/agmattr.h	/^  static void GetNIdPhiV(const PGraph& G, TFltIntPrV& NIdPhiV) {$/;"	f	class:TCesnaUtil
GetNIdPhiV	snap-adv/agmfast.h	/^  static void GetNIdPhiV(const PGraph& G, TFltIntPrV& NIdPhiV) {$/;"	f	class:TAGMFastUtil
GetNIdPos	snap-core/network.h	/^int TNodeEDatNet<TNodeData, TEdgeData>::GetNIdPos(const TVec<TPair<TInt, TEdgeData> >& NIdV, const int& NId) {$/;"	f	class:TNodeEDatNet
GetNIdSorted	snap-adv/rolx.cpp	/^TVec<TInt> GetNIdSorted(const TIntFtrH& Features, const int Idx) {$/;"	f
GetNIdV	snap-adv/ncp.h	/^  const TIntV& GetNIdV() const { return NIdV; }$/;"	f	class:TLocClust
GetNIdV	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TBigNet
GetNIdV	snap-core/graph.cpp	/^void TBPGraph::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TBPGraph
GetNIdV	snap-core/graph.cpp	/^void TNEGraph::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNEGraph
GetNIdV	snap-core/graph.cpp	/^void TNGraph::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNGraph
GetNIdV	snap-core/graph.cpp	/^void TUNGraph::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TUNGraph
GetNIdV	snap-core/graphmp.cpp	/^void TNGraphMP::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNGraphMP
GetNIdV	snap-core/kcore.h	/^  const TIntV& GetNIdV() const { return NIdV; }$/;"	f	class:TKCore
GetNIdV	snap-core/network.cpp	/^void TDirNet::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TDirNet
GetNIdV	snap-core/network.cpp	/^void TNEANet::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNEANet
GetNIdV	snap-core/network.cpp	/^void TUndirNet::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TUndirNet
GetNIdV	snap-core/network.h	/^void TNodeEDatNet<TNodeData, TEdgeData>::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNodeEDatNet
GetNIdV	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNodeEdgeNet
GetNIdV	snap-core/network.h	/^void TNodeNet<TNodeData>::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNodeNet
GetNIdV	snap-core/networkmp.cpp	/^void TNEANetMP::GetNIdV(TIntV& NIdV) const {$/;"	f	class:TNEANetMP
GetNIdV	snap-exp/mmgraph-exp.h	/^  void GetNIdV(TIntV& NIdV) const {$/;"	f	class:TMNet
GetNTypeId	snap-exp/mmgraph-exp.h	/^  int GetNTypeId(const TStr& NTypeStr) { return NTypeH.GetDat(NTypeStr); }$/;"	f	class:TMNet
GetNTypeId	snap-exp/mmgraph-exp.h	/^  static int GetNTypeId(const int& NId) { return NId & NTYPEID_FLAG; } \/\/ Assuming that GlobalNId is positive here$/;"	f	class:TMNet
GetNTypeName	snap-exp/mmgraph-exp.h	/^  TStr GetNTypeName(const int NTypeId) {$/;"	f	class:TMNet
GetNVisited	snap-core/bfsdfs.h	/^  int GetNVisited() const { return NIdDistH.Len(); }$/;"	f	class:TBreathFS
GetNZeroK	snap-adv/kronecker.cpp	/^int TKronMtx::GetNZeroK(const PNGraph& Graph) const {$/;"	f	class:TKronMtx
GetName	glib-core/unicode.h	/^	static TStr GetName() { return TEncoding::GetName(); }$/;"	f	class:T8BitCodec
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "CP1250"; }$/;"	f	class:TEncoding_CP1250
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "CP437"; }$/;"	f	class:TEncoding_CP437
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "CP852"; }$/;"	f	class:TEncoding_CP852
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "ISO-8859-1"; }$/;"	f	class:TEncoding_ISO8859_1
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "ISO-8859-2"; }$/;"	f	class:TEncoding_ISO8859_2
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "ISO-8859-3"; }$/;"	f	class:TEncoding_ISO8859_3
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "ISO-8859-4"; }$/;"	f	class:TEncoding_ISO8859_4
GetName	glib-core/unicode.h	/^	static inline TStr GetName() { return "YU-ASCII"; }$/;"	f	class:TEncoding_YuAscii
GetName	glib-core/unicode.h	/^	virtual TStr GetName() const { return impl.GetName(); }$/;"	f	class:TCodecWrapper
GetName	glib-core/xml.cpp	/^TStr TXmlLx::GetName(){$/;"	f	class:TXmlLx
GetName	glib-core/xml.cpp	/^TStr TXmlLx::GetName(const TStr& RqNm){$/;"	f	class:TXmlLx
GetName	snap-exp/mmgraph-exp.h	/^    TStr GetName() const { return Name; }$/;"	f	class:TMNet::TNodeType
GetNbhCom	snap-adv/agm.cpp	/^void TAGMUtil::GetNbhCom(const PUNGraph& Graph, const int NID, TIntSet& NBCmtyS) {$/;"	f	class:TAGMUtil
GetNbhCom	snap-adv/agmattr.h	/^  static void GetNbhCom(const PGraph& Graph, const int NID, TIntSet& NBCmtyS) {$/;"	f	class:TCesnaUtil
GetNbhCom	snap-adv/agmfast.h	/^  static void GetNbhCom(const PGraph& Graph, const int NID, TIntSet& NBCmtyS) {$/;"	f	class:TAGMFastUtil
GetNbrEDat	snap-core/network.h	/^    TEdgeDat& GetNbrEDat(const int& EdgeN) { return Net->GetEDat(GetNbrEId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetNbrEDat	snap-core/network.h	/^    TEdgeData& GetNbrEDat(const int& EdgeN) { return EdgeN<GetOutDeg() ? GetOutEDat(EdgeN) : GetInEDat(EdgeN-GetOutDeg()); }$/;"	f	class:TNodeEDatNet::TNodeI
GetNbrEDat	snap-core/network.h	/^    const TEdgeDat& GetNbrEDat(const int& EdgeN) const { return Net->GetEDat(GetNbrEId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetNbrEDat	snap-core/network.h	/^    const TEdgeData& GetNbrEDat(const int& EdgeN) const { return EdgeN<GetOutDeg() ? GetOutEDat(EdgeN) : GetInEDat(EdgeN-GetOutDeg()); }$/;"	f	class:TNodeEDatNet::TNodeI
GetNbrEId	snap-core/graph.h	/^    int GetNbrEId(const int& EdgeN) const { return EdgeN<GetOutDeg()?GetOutEId(EdgeN):GetInEId(EdgeN-GetOutDeg()); }$/;"	f	class:TNEGraph::TNode
GetNbrEId	snap-core/graph.h	/^    int GetNbrEId(const int& EdgeN) const { return NodeHI.GetDat().GetNbrEId(EdgeN); }$/;"	f	class:TNEGraph::TNodeI
GetNbrEId	snap-core/network.h	/^    int GetNbrEId(const int& EdgeN) const { return EdgeN<GetOutDeg()?GetOutEId(EdgeN):GetInEId(EdgeN-GetOutDeg()); }$/;"	f	class:TNEANet::TNode
GetNbrEId	snap-core/network.h	/^    int GetNbrEId(const int& EdgeN) const { return EdgeN<GetOutDeg()?GetOutEId(EdgeN):GetInEId(EdgeN-GetOutDeg()); }$/;"	f	class:TNodeEdgeNet::TNode
GetNbrEId	snap-core/network.h	/^    int GetNbrEId(const int& EdgeN) const { return NodeHI.GetDat().GetNbrEId(EdgeN); }$/;"	f	class:TNEANet::TNodeI
GetNbrEId	snap-core/network.h	/^    int GetNbrEId(const int& EdgeN) const { return NodeHI.GetDat().GetNbrEId(EdgeN); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetNbrEId	snap-core/networkmp.h	/^    int GetNbrEId(const int& EdgeN) const { return EdgeN<GetOutDeg()?GetOutEId(EdgeN):GetInEId(EdgeN-GetOutDeg()); }$/;"	f	class:TNEANetMP::TNode
GetNbrEId	snap-core/networkmp.h	/^    int GetNbrEId(const int& EdgeN) const { return NodeHI.GetDat().GetNbrEId(EdgeN); }$/;"	f	class:TNEANetMP::TNodeI
GetNbrEId	snap-exp/mmgraph-exp.h	/^    int GetNbrEId(const int& EdgeN) const { return HashI.GetDat().GetNbrEId(EdgeN); }$/;"	f	class:TMNet::TMNodeI
GetNbrEId	snap-exp/mmgraph-exp.h	/^  int GetNbrEId(const int& EdgeN) const { return EdgeN<GetOutDeg()?GetOutEId(EdgeN):GetInEId(EdgeN-GetOutDeg()); }$/;"	f	class:TCVNode
GetNbrEId	snap-exp/mmgraph-exp.h	/^  int GetNbrEId(const int& EdgeN) const { return EdgeN<GetOutDeg()?GetOutEId(EdgeN):GetInEId(EdgeN-GetOutDeg()); }$/;"	f	class:TMVNode
GetNbrNDat	snap-core/network.h	/^    TNodeData& GetNbrNDat(const int& EdgeN) { return Net->GetNDat(GetNbrNId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetNbrNDat	snap-core/network.h	/^    TNodeData& GetNbrNDat(const int& NodeN) { return Net->GetNDat(GetNbrNId(NodeN)); }$/;"	f	class:TNodeEDatNet::TNodeI
GetNbrNDat	snap-core/network.h	/^    TNodeData& GetNbrNDat(const int& NodeN) { return Net->GetNDat(GetNbrNId(NodeN)); }$/;"	f	class:TNodeNet::TNodeI
GetNbrNDat	snap-core/network.h	/^    const TNodeData& GetNbrNDat(const int& EdgeN) const { return Net->GetNDat(GetNbrNId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetNbrNDat	snap-core/network.h	/^    const TNodeData& GetNbrNDat(const int& NodeN) const { return Net->GetNDat(GetNbrNId(NodeN)); }$/;"	f	class:TNodeEDatNet::TNodeI
GetNbrNDat	snap-core/network.h	/^    const TNodeData& GetNbrNDat(const int& NodeN) const { return Net->GetNDat(GetNbrNId(NodeN)); }$/;"	f	class:TNodeNet::TNodeI
GetNbrNId	snap-core/graph.h	/^    int GetNbrNId(const int& EdgeN) const { const TEdge& E = Graph->GetEdge(NodeHI.GetDat().GetNbrEId(EdgeN));$/;"	f	class:TNEGraph::TNodeI
GetNbrNId	snap-core/graph.h	/^    int GetNbrNId(const int& NodeN) const { return HI().GetDat().GetNbrNId(NodeN); }$/;"	f	class:TBPGraph::TNodeI
GetNbrNId	snap-core/graph.h	/^    int GetNbrNId(const int& NodeN) const { return NIdV[NodeN]; }$/;"	f	class:TBPGraph::TNode
GetNbrNId	snap-core/graph.h	/^    int GetNbrNId(const int& NodeN) const { return NIdV[NodeN]; }$/;"	f	class:TUNGraph::TNode
GetNbrNId	snap-core/graph.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TNGraph::TNodeI
GetNbrNId	snap-core/graph.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TUNGraph::TNodeI
GetNbrNId	snap-core/graph.h	/^    int GetNbrNId(const int& NodeN) const { return NodeN<GetOutDeg()?GetOutNId(NodeN):GetInNId(NodeN-GetOutDeg()); }$/;"	f	class:TNGraph::TNode
GetNbrNId	snap-core/graphmp.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TNGraphMP::TNodeI
GetNbrNId	snap-core/graphmp.h	/^    int GetNbrNId(const int& NodeN) const { return NodeN<GetOutDeg()?GetOutNId(NodeN):GetInNId(NodeN-GetOutDeg()); }$/;"	f	class:TNGraphMP::TNode
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& EdgeN) const { const TEdge& E = Graph->GetEdge(NodeHI.GetDat().GetNbrEId(EdgeN)); return GetId()==E.GetSrcNId() ? E.GetDstNId():E.GetSrcNId(); }$/;"	f	class:TNEANet::TNodeI
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& EdgeN) const { const TEdge& E = Net->GetEdge(NodeHI.GetDat().GetNbrEId(EdgeN));$/;"	f	class:TNodeEdgeNet::TNodeI
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& EdgeN) const { return EdgeN<GetOutDeg() ? GetOutNId(EdgeN):GetInNId(EdgeN-GetOutDeg()); }$/;"	f	class:TNodeEDatNet::TNode
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& NodeN) const { return NIdV[NodeN]; }$/;"	f	class:TUndirNet::TNode
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TDirNet::TNodeI
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TNodeEDatNet::TNodeI
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TNodeNet::TNodeI
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TUndirNet::TNodeI
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& NodeN) const { return NodeN<GetOutDeg() ? GetOutNId(NodeN):GetInNId(NodeN-GetOutDeg()); }$/;"	f	class:TNodeNet::TNode
GetNbrNId	snap-core/network.h	/^    int GetNbrNId(const int& NodeN) const { return NodeN<GetOutDeg()?GetOutNId(NodeN):GetInNId(NodeN-GetOutDeg()); }$/;"	f	class:TDirNet::TNode
GetNbrNId	snap-core/networkmp.h	/^    int GetNbrNId(const int& EdgeN) const { const TEdge& E = Graph->GetEdge(NodeHI.GetDat().GetNbrEId(EdgeN)); return GetId()==E.GetSrcNId() ? E.GetDstNId():E.GetSrcNId(); }$/;"	f	class:TNEANetMP::TNodeI
GetNbrNId	snap-exp/graphmp-exp.h	/^    int GetNbrNId(const int& NodeN) const { return NIdV[NodeN]; }$/;"	f	class:TUNGraphMP::TNode
GetNbrNId	snap-exp/graphmp-exp.h	/^    int GetNbrNId(const int& NodeN) const { return NodeHI.GetDat().GetNbrNId(NodeN); }$/;"	f	class:TUNGraphMP::TNodeI
GetNbrNId	snap-exp/mmgraph-exp.h	/^    int GetNbrNId(const int& EdgeN) const { const TEdge& E = Graph->GetEdge(HashI.GetDat().GetNbrEId(EdgeN)); return GetId()==E.GetSrcNId() ? E.GetDstNId():E.GetSrcNId(); }$/;"	f	class:TMNet::TMNodeI
GetNbrs	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetNbrs(int NId, THashSet<TInt>& Nbrs) const{$/;"	f	class:TCliqueOverlap
GetNearPoints	snap-exp/lsh.cpp	/^TVec<TFltV> TLSHash::GetNearPoints(TFltV Datum) {$/;"	f	class:TLSHash
GetNeighborCrossName	snap-core/mmnet.cpp	/^TStr TModeNet::GetNeighborCrossName(const TStr& CrossName, bool isOutEdge, const bool sameMode, bool isDir) const {$/;"	f	class:TModeNet
GetNeighborsByCrossNet	snap-core/mmnet.cpp	/^void TModeNet::GetNeighborsByCrossNet(const int& NId, TStr& Name, TIntV& Neighbors, const bool isOutEId) const{$/;"	f	class:TModeNet
GetNeighborsByCrossNet	snap-core/mmnet.h	/^    void GetNeighborsByCrossNet(TStr& Name, TIntV& Neighbors, const bool isOutEId=false) {$/;"	f	class:TModeNet::TNodeI
GetNet	snap-exp/memenet.h	/^  PMemeNet GetNet(const int& NetN) const { return QtIdNetH[NetN]; }$/;"	f	class:TMemeNetBs
GetNetAttrV	snap-exp/linkpred.cpp	/^void TLpExample::GetNetAttrV(TVec<TFltV>& AttrV) const { \/\/ (dstnid, class, features)$/;"	f	class:TLpExample
GetNetByNzNodes	snap-exp/memenet.cpp	/^TIntV TMemeNetBs::GetNetByNzNodes() const {$/;"	f	class:TMemeNetBs
GetNets	snap-exp/memenet.h	/^  int GetNets() const { return QtIdNetH.Len(); }$/;"	f	class:TMemeNetBs
GetNewEdge	snap-exp/signnet.cpp	/^TIntPr TSignNet::GetNewEdge(const PSignNet& OldTriad) const {$/;"	f	class:TSignNet
GetNewtonStep	snap-adv/agm.cpp	/^void TLogRegFit::GetNewtonStep(TFltVV& HVV, const TFltV& GradV, TFltV& DeltaLV){$/;"	f	class:TLogRegFit
GetNext	glib-core/xmath.cpp	/^bool TComb::GetNext(){$/;"	f	class:TComb
GetNextCore	snap-core/kcore.h	/^int TKCore<PGraph>::GetNextCore() {$/;"	f	class:TKCore
GetNextFile	snap-exp/memes.cpp	/^bool TMemesDataLoader::GetNextFile() {$/;"	f	class:TMemesDataLoader
GetNextFltAttr	snap-core/table.cpp	/^TFlt TRowIteratorWithRemove::GetNextFltAttr(TInt ColIdx) const {$/;"	f	class:TRowIteratorWithRemove
GetNextFltAttr	snap-core/table.cpp	/^TFlt TRowIteratorWithRemove::GetNextFltAttr(const TStr& Col) const {$/;"	f	class:TRowIteratorWithRemove
GetNextFltAttr	snap-exp/alternativetable.cpp	/^TFlt ExplicitStringRowIteratorWithRemove::GetNextFltAttr(TInt ColIdx) const {$/;"	f	class:ExplicitStringRowIteratorWithRemove
GetNextFqItemSets	snap-exp/trawling.cpp	/^int TTrawling::GetNextFqItemSets(const int& FqItemsetLen) {$/;"	f	class:TTrawling
GetNextGraphFromSequence	snap-core/table.cpp	/^PNEANet TTable::GetNextGraphFromSequence() {$/;"	f	class:TTable
GetNextIntAttr	snap-core/table.cpp	/^TInt TRowIteratorWithRemove::GetNextIntAttr(TInt ColIdx) const {$/;"	f	class:TRowIteratorWithRemove
GetNextIntAttr	snap-core/table.cpp	/^TInt TRowIteratorWithRemove::GetNextIntAttr(const TStr& Col) const {$/;"	f	class:TRowIteratorWithRemove
GetNextIntAttr	snap-exp/alternativetable.cpp	/^TInt ExplicitStringRowIteratorWithRemove::GetNextIntAttr(TInt ColIdx) const {$/;"	f	class:ExplicitStringRowIteratorWithRemove
GetNextLine	glib-core/unicode.h	/^		bool GetNextLine(TStrV& dest) {$/;"	f	class:TUniChDb::TUcdFileReader
GetNextLn	glib-core/fl.cpp	/^bool TSIn::GetNextLn(TChA& LnChA){$/;"	f	class:TSIn
GetNextLn	glib-core/fl.cpp	/^bool TSIn::GetNextLn(TStr& LnStr){$/;"	f	class:TSIn
GetNextLnBf	glib-core/dt.cpp	/^bool TChAIn::GetNextLnBf(TChA& LnChA){$/;"	f	class:TChAIn
GetNextLnBf	glib-core/dt.cpp	/^bool TMemIn::GetNextLnBf(TChA& LnChA){$/;"	f	class:TMemIn
GetNextLnBf	glib-core/dt.cpp	/^bool TStrIn::GetNextLnBf(TChA& LnChA){$/;"	f	class:TStrIn
GetNextLnBf	glib-core/fl.cpp	/^bool TFIn::GetNextLnBf(TChA& LnChA) {$/;"	f	class:TFIn
GetNextLnBf	glib-core/fl.cpp	/^bool TFInOut::GetNextLnBf(TChA& LnChA){$/;"	f	class:TFInOut
GetNextLnBf	glib-core/fl.cpp	/^bool TMIn::GetNextLnBf(TChA& LnChA){$/;"	f	class:TMIn
GetNextLnBf	glib-core/fl.cpp	/^bool TStdIn::GetNextLnBf(TChA& LnChA){$/;"	f	class:TStdIn
GetNextLnBf	glib-core/zipfl.cpp	/^bool TZipIn::GetNextLnBf(TChA& LnChA) {$/;"	f	class:TZipIn
GetNextPrime	glib-core/hash.h	/^uint THash<TKey, TDat, THashFunc>::GetNextPrime(const uint& Val) const {$/;"	f	class:THash
GetNextPrime	glib-core/hashmp.h	/^uint THashMP<TKey, TDat, THashFunc>::GetNextPrime(const uint& Val) const {$/;"	f	class:THashMP
GetNextPrime	glib-core/shash.h	/^uint THashSet<TKey, THashFunc>::GetNextPrime(const uint& Val) const {$/;"	f	class:THashSet
GetNextRowIdx	snap-core/table.cpp	/^TInt TRowIteratorWithRemove::GetNextRowIdx() const {$/;"	f	class:TRowIteratorWithRemove
GetNextRowIdx	snap-exp/alternativetable.cpp	/^TInt ExplicitStringRowIteratorWithRemove::GetNextRowIdx() const {$/;"	f	class:ExplicitStringRowIteratorWithRemove
GetNextSample	snap-exp/sir.h	/^bool TEstEpidemParams<TEpiModel>::GetNextSample() {$/;"	f	class:TEstEpidemParams
GetNextSeed	glib-core/dt.h	/^  int GetNextSeed(){$/;"	f	class:TRnd
GetNextStrAttr	snap-core/table.cpp	/^TStr TRowIteratorWithRemove::GetNextStrAttr(TInt ColIdx) const {$/;"	f	class:TRowIteratorWithRemove
GetNextStrAttr	snap-core/table.cpp	/^TStr TRowIteratorWithRemove::GetNextStrAttr(const TStr& Col) const {$/;"	f	class:TRowIteratorWithRemove
GetNextStrAttr	snap-exp/alternativetable.cpp	/^TStr ExplicitStringRowIteratorWithRemove::GetNextStrAttr(TInt ColIdx) const {$/;"	f	class:ExplicitStringRowIteratorWithRemove
GetNm	snap-core/gstat.h	/^  TStr GetNm() const { return GraphNm; }$/;"	f	class:TGStat
GetNm	snap-exp/imdbnet.h	/^  int GetNm() const { return Name; }$/;"	f	class:TImdbNode
GetNmVStr	glib-core/xmath.cpp	/^TStr TMom::GetNmVStr(const TStr& VarPfx,$/;"	f	class:TMom
GetNoEdgeDLL	snap-adv/kronecker.cpp	/^double TKronMtx::GetNoEdgeDLL(const int& ParamId, int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetNoEdgeLL	snap-adv/kronecker.cpp	/^double TKronMtx::GetNoEdgeLL(int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetNoEdgeProb	snap-adv/kronecker.cpp	/^double TKronMtx::GetNoEdgeProb(int NId1, int NId2, const int& NKronIters) const {$/;"	f	class:TKronMtx
GetNoTag	glib-core/html.cpp	/^TStr THtmlLx::GetNoTag(const TStr& Str) {$/;"	f	class:THtmlLx
GetNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int GetNode(int Id) { return Net->GetNI(NodesList[Id]).GetId(); }$/;"	f	class:TCandidatesList
GetNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int GetNode(int Id) {$/;"	f	class:TAllNodesList
GetNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int GetNode(int Id) {$/;"	f	class:TInAdjList
GetNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int GetNode(int Id) {$/;"	f	class:TOutAdjList
GetNode	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int GetNode(int Id) {$/;"	f	class:TAllNodesList
GetNode	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int GetNode(int Id) {$/;"	f	class:TInAdjList
GetNode	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int GetNode(int Id) {$/;"	f	class:TOutAdjList
GetNode	snap-adv/cascdynetinf.h	/^  int GetNode(const int& i) const { return NIdHitH.GetKey(i); }$/;"	f	class:TCascade
GetNode	snap-adv/cascnetinf.h	/^  int GetNode(const int& i) const { return NIdHitH.GetKey(i); }$/;"	f	class:TCascade
GetNode	snap-core/bignet.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TBigNet
GetNode	snap-core/bignet.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TBigNet
GetNode	snap-core/graph.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNEGraph
GetNode	snap-core/graph.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNGraph
GetNode	snap-core/graph.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TUNGraph
GetNode	snap-core/graph.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNEGraph
GetNode	snap-core/graph.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNGraph
GetNode	snap-core/graph.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TUNGraph
GetNode	snap-core/graphmp.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNGraphMP
GetNode	snap-core/graphmp.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNGraphMP
GetNode	snap-core/network.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TDirNet
GetNode	snap-core/network.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNEANet
GetNode	snap-core/network.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNodeEDatNet
GetNode	snap-core/network.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNodeEdgeNet
GetNode	snap-core/network.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNodeNet
GetNode	snap-core/network.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TUndirNet
GetNode	snap-core/network.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TDirNet
GetNode	snap-core/network.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNEANet
GetNode	snap-core/network.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNodeEDatNet
GetNode	snap-core/network.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNodeEdgeNet
GetNode	snap-core/network.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNodeNet
GetNode	snap-core/network.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TUndirNet
GetNode	snap-core/networkmp.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TNEANetMP
GetNode	snap-core/networkmp.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TNEANetMP
GetNode	snap-exp/graphmp-exp.h	/^  TNode& GetNode(const int& NId) { return NodeH.GetDat(NId); }$/;"	f	class:TUNGraphMP
GetNode	snap-exp/graphmp-exp.h	/^  const TNode& GetNode(const int& NId) const { return NodeH.GetDat(NId); }$/;"	f	class:TUNGraphMP
GetNode	snap-exp/mmgraph-exp.h	/^  TNode& GetNode(const int& NTypeId, const int& NId) { return TypeNodeV[NTypeId].NodeH.GetDat(NId); }$/;"	f	class:TMNet
GetNode	snap-exp/mmgraph-exp.h	/^  TNode& GetNode(const int&NId) {$/;"	f	class:TMNet
GetNode	snap-exp/mmgraph-exp.h	/^  const TNode& GetNode(const int& NTypeId, const int& NId) const { return TypeNodeV[NTypeId].NodeH.GetDat(NId); }$/;"	f	class:TMNet
GetNode	snap-exp/mmgraph-exp.h	/^  const TNode& GetNode(const int&NId) const {$/;"	f	class:TMNet
GetNodeAnf	snap-core/anf.h	/^void TGraphAnf<PGraph>::GetNodeAnf(const int& SrcNId, TIntFltKdV& DistNbrsV, const int& MxDist, const bool& IsDir) {$/;"	f	class:TGraphAnf
GetNodeAttr	snap-adv/mag.h	/^	const TMAGNodeBern& GetNodeAttr() const {  return Param.GetNodeAttr();  }$/;"	f	class:TMAGFitBern
GetNodeAttr	snap-adv/mag.h	/^	const TNodeAttr& GetNodeAttr() const {  return NodeAttr;  }$/;"	f	class:TMAGParam
GetNodeAttrV	snap-exp/linkpred.cpp	/^void TLpExample::GetNodeAttrV(TVec<TFltV>& AttrV) const { \/\/ (dstnid, class, features)$/;"	f	class:TLpExample
GetNodeAttrValue	snap-core/network.cpp	/^TStr TNEANet::GetNodeAttrValue(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANet
GetNodeAttrValue	snap-core/networkmp.cpp	/^TStr TNEANetMP::GetNodeAttrValue(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANetMP
GetNodeBuckets	snap-core/timenet.cpp	/^void TTimeNENet::GetNodeBuckets(const int NodesPerBucket, TTimeNet::TTmBucketV& TmBucketV) const {$/;"	f	class:TTimeNENet
GetNodeBuckets	snap-core/timenet.cpp	/^void TTimeNet::GetNodeBuckets(const int NodesPerBucket, TTimeNet::TTmBucketV& TmBucketV) const {$/;"	f	class:TTimeNet
GetNodeC	snap-core/triad.h	/^double TNetConstraint<PGraph>::GetNodeC(const int& NId) const {$/;"	f	class:TNetConstraint
GetNodeClustCf	snap-core/triad.h	/^double GetNodeClustCf(const PGraph& Graph, const int& NId) {$/;"	f	namespace:TSnap
GetNodeClustCf	snap-core/triad.h	/^void GetNodeClustCf(const PGraph& Graph, TIntFltH& NIdCCfH) {$/;"	f	namespace:TSnap
GetNodeEcc	snap-core/centr.h	/^int GetNodeEcc(const PGraph& Graph, const int& NId, const bool& IsDir) {$/;"	f	namespace:TSnap
GetNodeId	snap-adv/rolx.cpp	/^int GetNodeId(const TInt MtxId, const TIntIntH& NodeIdMtxIdxH) {$/;"	f
GetNodeIdV	glib-core/ds.h	/^void TTree<TVal>::GetNodeIdV(TIntV& NodeIdV, const int& NodeId){$/;"	f	class:TTree
GetNodeIdWithMaxDeg	snap-adv/cliques.cpp	/^int TCliqueOverlap::GetNodeIdWithMaxDeg(const THashSet<TInt>& Set) const{$/;"	f	class:TCliqueOverlap
GetNodeInAdjList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int GetNodeInAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int NId, int N) {$/;"	f
GetNodeInAdjList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^int GetNodeInAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int NId, int N) {$/;"	f
GetNodeInDegV	snap-core/alg.h	/^void GetNodeInDegV(const PGraph& Graph, TIntPrV& NIdInDegV) {$/;"	f	namespace:TSnap
GetNodeInfo	snap-adv/cascdynetinf.h	/^  TNodeInfo GetNodeInfo(const int& NId) const { return NodeNmH.GetDat(NId); }$/;"	f	class:TNIBs
GetNodeInfo	snap-adv/cascnetinf.h	/^  TNodeInfo GetNodeInfo(const int& NId) const { return NodeNmH.GetDat(NId); }$/;"	f	class:TNetInfBs
GetNodeKId	snap-core/network.h	/^  const TNode& GetNodeKId(const int& NodeKeyId) const { return NodeH[NodeKeyId]; }$/;"	f	class:TNodeEdgeNet
GetNodeMap	snap-core/ghash.h	/^bool TGHash<TDat>::GetNodeMap(const PNGraph& Graph, TIntPrV& NodeMapV) const {$/;"	f	class:TGHash
GetNodeMap	snap-core/ghash.h	/^bool TGHash<TDat>::GetNodeMap(const PNGraph& Graph, TIntPrV& NodeMapV, int& KeyId) const {$/;"	f	class:TGHash
GetNodeMembership	snap-adv/agm.cpp	/^void TAGMUtil::GetNodeMembership(THash<TInt,TIntSet >& NIDComVH, const THash<TInt,TIntV>& CmtyVH) {$/;"	f	class:TAGMUtil
GetNodeMembership	snap-adv/agm.cpp	/^void TAGMUtil::GetNodeMembership(THash<TInt,TIntSet >& NIDComVH, const TVec<TIntSet>& CmtyVV) {$/;"	f	class:TAGMUtil
GetNodeMembership	snap-adv/agm.cpp	/^void TAGMUtil::GetNodeMembership(THash<TInt,TIntSet >& NIDComVH, const TVec<TIntV>& CmtyVV) {$/;"	f	class:TAGMUtil
GetNodeMembership	snap-adv/agm.cpp	/^void TAGMUtil::GetNodeMembership(THash<TInt,TIntSet >& NIDComVH, const TVec<TIntV>& CmtyVV, const TIntV& NIDV) {$/;"	f	class:TAGMUtil
GetNodeMembership	snap-adv/agm.cpp	/^void TAGMUtil::GetNodeMembership(THash<TInt,TIntV >& NIDComVH, const THash<TInt,TIntV>& CmtyVH) {$/;"	f	class:TAGMUtil
GetNodeMembership	snap-adv/agm.cpp	/^void TAGMUtil::GetNodeMembership(THash<TInt,TIntV >& NIDComVH, const TVec<TIntV>& CmtyVV) {$/;"	f	class:TAGMUtil
GetNodeMembership	snap-adv/agm.cpp	/^void TAGMUtil::GetNodeMembership(TIntH& NIDComVH, const THash<TInt,TIntV >& CmtyVH) {$/;"	f	class:TAGMUtil
GetNodeNm	snap-adv/cascdynetinf.h	/^  TStr GetNodeNm(const int& NId) const { return NodeNmH.GetDat(NId).Name; }$/;"	f	class:TNIBs
GetNodeNm	snap-adv/cascnetinf.h	/^  TStr GetNodeNm(const int& NId) const { return NodeNmH.GetDat(NId).Name; }$/;"	f	class:TNetInfBs
GetNodeOutDegV	snap-core/alg.h	/^void GetNodeOutDegV(const PGraph& Graph, TIntPrV& NIdOutDegV) {$/;"	f	namespace:TSnap
GetNodePr	snap-core/triad.h	/^  TIntPr GetNodePr(const int& ConstraintN) const { return NodePrCH.GetKey(ConstraintN); }$/;"	f	class:TNetConstraint
GetNodeSig	snap-adv/kronecker.cpp	/^uint TKronMtx::GetNodeSig(const double& OneProb) {$/;"	f	class:TKronMtx
GetNodeTable	snap-core/table.cpp	/^PTable TTable::GetNodeTable(const PNEANet& Network, TTableContext* Context) {$/;"	f	class:TTable
GetNodeTriads	snap-core/triad.h	/^int GetNodeTriads(const PGraph& Graph, const int& NId) {$/;"	f	namespace:TSnap
GetNodeTriads	snap-core/triad.h	/^int GetNodeTriads(const PGraph& Graph, const int& NId, const TIntSet& GroupSet, int& InGroupEdges, int& InOutGroupEdges, int& OutGroupEdges) {$/;"	f	namespace:TSnap
GetNodeTriads	snap-core/triad.h	/^int GetNodeTriads(const PGraph& Graph, const int& NId, int& ClosedTriads, int& OpenTriads) {$/;"	f	namespace:TSnap
GetNodeVal	glib-core/ds.h	/^  TVal& GetNodeVal(const int& NodeId){return NodeV[NodeId].Val3;}$/;"	f	class:TTree
GetNodeWcc	snap-core/cncom.h	/^void GetNodeWcc(const PGraph& Graph, const int& NId, TIntV& CnCom) {$/;"	f	namespace:TSnap
GetNodes	glib-core/ds.h	/^  int GetNodes() const {return NodeV.Len();}$/;"	f	class:TTree
GetNodes	snap-adv/cascdynetinf.h	/^  int GetNodes() { return InferredNetwork.GetNodes(); }$/;"	f	class:TNIBs
GetNodes	snap-adv/cascnetinf.h	/^  int GetNodes() { return Graph->GetNodes(); }$/;"	f	class:TNetInfBs
GetNodes	snap-adv/kronecker.cpp	/^int TKronMtx::GetNodes(const int& NIter) const {$/;"	f	class:TKronMtx
GetNodes	snap-adv/kronecker.h	/^  int GetNodes() const { return Nodes; }$/;"	f	class:TKroneckerLL
GetNodes	snap-adv/mag.h	/^	const int GetNodes() const {  return NNodes;  }$/;"	f	class:TMAGParam
GetNodes	snap-adv/mag.h	/^	const int GetNodes() const { return Param.GetNodes(); }$/;"	f	class:TMAGFitBern
GetNodes	snap-adv/ncp.h	/^    int GetNodes() const { return Nodes; }$/;"	f	class:TLocClustStat::TCutInfo
GetNodes	snap-core/bignet.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TBigNet
GetNodes	snap-core/ghash.h	/^  int GetNodes() const { return Nodes; }$/;"	f	class:TGraphKey
GetNodes	snap-core/graph.h	/^  int GetNodes() const { return GetLNodes() + GetRNodes(); }$/;"	f	class:TBPGraph
GetNodes	snap-core/graph.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNEGraph
GetNodes	snap-core/graph.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNGraph
GetNodes	snap-core/graph.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TUNGraph
GetNodes	snap-core/graphmp.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNGraphMP
GetNodes	snap-core/gstat.h	/^  int GetNodes() const { return (int) GetVal(gsvNodes); }$/;"	f	class:TGStat
GetNodes	snap-core/network.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TDirNet
GetNodes	snap-core/network.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNEANet
GetNodes	snap-core/network.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNodeEDatNet
GetNodes	snap-core/network.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNodeEdgeNet
GetNodes	snap-core/network.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNodeNet
GetNodes	snap-core/network.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TUndirNet
GetNodes	snap-core/networkmp.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TNEANetMP
GetNodes	snap-exp/graphmp-exp.h	/^  int GetNodes() const { return NodeH.Len(); }$/;"	f	class:TUNGraphMP
GetNodes	snap-exp/mmgraph-exp.h	/^  int GetNodes() const { return Sz; }$/;"	f	class:TMNet
GetNodes	snap-exp/mmgraph-exp.h	/^  int GetNodes(const int& NTypeId) const { return TypeNodeV[NTypeId].NodeH.Len(); }$/;"	f	class:TMNet
GetNodesAtHop	snap-core/bfsdfs.h	/^int GetNodesAtHop(const PGraph& Graph, const int& StartNId, const int& Hop, TIntV& NIdV, const bool& IsDir) {$/;"	f	namespace:TSnap
GetNodesAtHops	snap-core/bfsdfs.h	/^int GetNodesAtHops(const PGraph& Graph, const int& StartNId, TIntPrV& HopCntV, const bool& IsDir) {$/;"	f	namespace:TSnap
GetNodesAttrs	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TNodeData** GetNodesAttrs() const { return NodesAttrs; }$/;"	f	class:TMatchingMachine
GetNodesAttrs	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TNodeData** GetNodesAttrs() const { return NodesAttrs; }$/;"	f	class:TMatchingMachine
GetNofSn	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int GetNofSn() const { return NofSn; }$/;"	f	class:TMatchingMachine
GetNofSn	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int GetNofSn() const { return NofSn; }$/;"	f	class:TMatchingMachine
GetNonEdgePairScores	snap-adv/agmdirected.cpp	/^void TCoda::GetNonEdgePairScores(TFltIntIntTrV& ScoreV) {$/;"	f	class:TCoda
GetNormCut	snap-adv/ncp.h	/^    double GetNormCut(const int& GEdges) const { return GetPhi() + double(CutSz)\/double(2*GEdges-GetVol()); } \/\/ normalized cut$/;"	f	class:TLocClustStat::TCutInfo
GetNormalizationTestFn	glib-core/unicode.h	/^	static TStr GetNormalizationTestFn() { return "NormalizationTest.txt"; }$/;"	f	class:TUniChDb
GetNormalizedGraph	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetNormalizedGraph(const PNGraph &G, PNGraph &nG) {$/;"	f	class:TGraphEnumUtils
GetNormalizedMap	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetNormalizedMap(const PNGraph &G, THash<TInt,TInt> &map) {$/;"	f	class:TGraphEnumUtils
GetNormalizedUrl	snap-core/util.cpp	/^bool TStrUtil::GetNormalizedUrl(const TChA& UrlIn, const TChA& BaseUrl, TChA& UrlOut) {$/;"	f	class:TStrUtil
GetNotation	glib-core/xml.cpp	/^void TXmlLx::GetNotation(){$/;"	f	class:TXmlLx
GetNrAbsFPath	glib-core/dt.cpp	/^TStr TStr::GetNrAbsFPath(const TStr& FPath, const TStr& BaseFPath){$/;"	f	class:TStr
GetNrBlobBsFNm	glib-core/blobbs.cpp	/^TStr TGBlobBs::GetNrBlobBsFNm(const TStr& BlobBsFNm){$/;"	f	class:TGBlobBs
GetNrFExt	glib-core/dt.cpp	/^TStr TStr::GetNrFExt(const TStr& FExt){$/;"	f	class:TStr
GetNrFMid	glib-core/dt.cpp	/^TStr TStr::GetNrFMid(const TStr& FMid){$/;"	f	class:TStr
GetNrFNm	glib-core/dt.cpp	/^TStr TStr::GetNrFNm(const TStr& FNm){$/;"	f	class:TStr
GetNrFPath	glib-core/dt.cpp	/^TStr TStr::GetNrFPath(const TStr& FPath){$/;"	f	class:TStr
GetNrFPathFMid	glib-core/blobbs.cpp	/^void TMBlobBs::GetNrFPathFMid($/;"	f	class:TMBlobBs
GetNrNumFExt	glib-core/dt.cpp	/^TStr TStr::GetNrNumFExt(const int& FExtN){$/;"	f	class:TStr
GetNrStr	glib-core/http.cpp	/^  static TStr GetNrStr(const TStr& Str){return ChDef.GetLcStr(Str);}$/;"	f	class:THttpLx
GetNrTypeNm	glib-core/ut.h	/^  static TStr GetNrTypeNm(const TStr& TypeNm){$/;"	f	class:TTypeNm
GetNrmDev	glib-core/dt.cpp	/^double TRnd::GetNrmDev($/;"	f	class:TRnd
GetNrmDev	glib-core/dt.cpp	/^double TRnd::GetNrmDev(){$/;"	f	class:TRnd
GetNrmDevStep	glib-core/dt.h	/^  static double GetNrmDevStep(const int& Seed, const int& Steps){$/;"	f	class:TRnd
GetNthFeature	snap-adv/rolx.cpp	/^TFtr GetNthFeature(const TIntFtrH& Features, const int N) {$/;"	f
GetNthInAdjList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int GetNthInAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int NId, int N) {$/;"	f
GetNthInAdjList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^int GetNthInAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int NId, int N) {$/;"	f
GetNthOccurence	snap-core/util.cpp	/^int GetNthOccurence(const TChA& Url, const int& Count, const char Ch='\/') {$/;"	f
GetNthOutAdjList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int GetNthOutAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int NId, int N) {$/;"	f
GetNthOutAdjList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^int GetNthOutAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int NId, int N) {$/;"	f
GetNullStr	glib-core/dt.cpp	/^TStr TStr::GetNullStr(){$/;"	f	class:TStr
GetNum	glib-core/json.h	/^  double GetNum() const {EAssert(IsNum()); return Num;}$/;"	f
GetNumComs	snap-adv/agmattr.h	/^  int GetNumComs() { return NumComs; }$/;"	f	class:TCesna
GetNumComs	snap-adv/agmdirected.h	/^  int GetNumComs() { return InCmtyValHV.Len(); }$/;"	f	class:TCodaAnalyzer
GetNumComs	snap-adv/agmdirected.h	/^  int GetNumComs() { return NumComs.Val; }$/;"	f	class:TCoda
GetNumFNm	glib-core/dt.cpp	/^TStr TStr::GetNumFNm(const TStr& FNm, const int& Num){$/;"	f	class:TStr
GetNumFeatures	snap-adv/rolx.cpp	/^int GetNumFeatures(const TIntFtrH& Features) {$/;"	f
GetNumRows	snap-core/table.h	/^  TInt GetNumRows() const { return NumRows;}$/;"	f	class:TTable
GetNumValidRows	snap-core/table.h	/^  TInt GetNumValidRows() const { return NumValidRows;}$/;"	f	class:TTable
GetObjBool	glib-core/json.cpp	/^bool TJsonVal::GetObjBool(const TStr& Key, const bool& DefBool) const { $/;"	f	class:TJsonVal
GetObjBool	glib-core/json.cpp	/^bool TJsonVal::GetObjBool(const char *Key, const bool& DefBool) const { $/;"	f	class:TJsonVal
GetObjBool	glib-core/json.h	/^  bool GetObjBool(const TStr& Key) const { return GetObjKey(Key)->GetBool(); }$/;"	f
GetObjBool	glib-core/json.h	/^  bool GetObjBool(const char *Key) const { return GetObjKey(Key)->GetBool(); }$/;"	f
GetObjKey	glib-core/json.cpp	/^PJsonVal TJsonVal::GetObjKey(const TStr& Key) const {$/;"	f	class:TJsonVal
GetObjKey	glib-core/json.cpp	/^PJsonVal TJsonVal::GetObjKey(const char *Key) const {$/;"	f	class:TJsonVal
GetObjKeyVal	glib-core/json.h	/^  void GetObjKeyVal(const int& KeyValN, TStr& Key, PJsonVal& Val) const {$/;"	f
GetObjKeys	glib-core/json.h	/^  int GetObjKeys() const {EAssert(IsObj()); return KeyValH.Len();}$/;"	f
GetObjNum	glib-core/json.cpp	/^double TJsonVal::GetObjNum(const TStr& Key, const double& DefNum) const { $/;"	f	class:TJsonVal
GetObjNum	glib-core/json.cpp	/^double TJsonVal::GetObjNum(const char *Key, const double& DefNum) const { $/;"	f	class:TJsonVal
GetObjNum	glib-core/json.h	/^  double GetObjNum(const TStr& Key) const { return GetObjKey(Key)->GetNum(); }$/;"	f
GetObjNum	glib-core/json.h	/^  double GetObjNum(const char *Key) const { return GetObjKey(Key)->GetNum(); }$/;"	f
GetObjStr	glib-core/json.cpp	/^TStr TJsonVal::GetObjStr(const TStr& Key, const TStr& DefStr) const { $/;"	f	class:TJsonVal
GetObjStr	glib-core/json.cpp	/^TStr TJsonVal::GetObjStr(const char *Key, const TStr& DefStr) const { $/;"	f	class:TJsonVal
GetObjStr	glib-core/json.h	/^  TStr GetObjStr(const TStr& Key) const { return GetObjKey(Key)->GetStr(); }$/;"	f
GetObjStr	glib-core/json.h	/^  TStr GetObjStr(const char *Key) const { return GetObjKey(Key)->GetStr(); }$/;"	f
GetOnExeStopF	glib-core/bd.h	/^  static TOnExeStopF GetOnExeStopF(){return OnExeStopF;}$/;"	f	class:TOnExeStop
GetOnlyVoteElecBs	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetOnlyVoteElecBs(TWikiElecBs& NewElecBs, const bool& OnlySupOpp) const {$/;"	f	class:TWikiElecBs
GetOnlyVotes	snap-exp/wikinet.cpp	/^void TWikiElec::GetOnlyVotes(TWikiElec& NewElec, const bool& OnlySupOpp) const {$/;"	f	class:TWikiElec
GetOpnTriadId	snap-exp/signnet.cpp	/^int TSignMicroEvol::GetOpnTriadId(const PSignNet& Net1) {$/;"	f	class:TSignMicroEvol
GetOutAdjSize	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int GetOutAdjSize(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int Id) {$/;"	f
GetOutAdjSize	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^int GetOutAdjSize(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Graph, int Id) {$/;"	f
GetOutCoeff	snap-adv/mag.cpp	/^const double TMAGFitBern::GetOutCoeff(const int& i, const int& j, const int& l, const int& A, const TMAGAffMtx& Theta) const {$/;"	f	class:TMAGFitBern
GetOutDeg	snap-core/bignet.h	/^    int GetOutDeg() const { return OutDeg; }$/;"	f	class:TBigNet::TNodeI
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return GetDeg(); }$/;"	f	class:TBPGraph::TNode
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return GetDeg(); }$/;"	f	class:TUNGraph::TNode
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return HI().GetDat().GetOutDeg(); }$/;"	f	class:TBPGraph::TNodeI
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNEGraph::TNodeI
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNGraph::TNodeI
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TUNGraph::TNodeI
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return OutEIdV.Len(); }$/;"	f	class:TNEGraph::TNode
GetOutDeg	snap-core/graph.h	/^    int GetOutDeg() const { return OutNIdV.Len(); }$/;"	f	class:TNGraph::TNode
GetOutDeg	snap-core/graphmp.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNGraphMP::TNodeI
GetOutDeg	snap-core/graphmp.h	/^    int GetOutDeg() const { return OutNIdV.Len(); }$/;"	f	class:TNGraphMP::TNode
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return GetDeg(); }$/;"	f	class:TUndirNet::TNode
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TDirNet::TNodeI
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNEANet::TNodeI
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNodeEDatNet::TNodeI
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNodeNet::TNodeI
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TUndirNet::TNodeI
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return OutEIdV.Len(); }$/;"	f	class:TNEANet::TNode
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return OutEIdV.Len(); }$/;"	f	class:TNodeEdgeNet::TNode
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return OutNIdV.Len(); }$/;"	f	class:TDirNet::TNode
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return OutNIdV.Len(); }$/;"	f	class:TNodeEDatNet::TNode
GetOutDeg	snap-core/network.h	/^    int GetOutDeg() const { return OutNIdV.Len(); }$/;"	f	class:TNodeNet::TNode
GetOutDeg	snap-core/networkmp.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TNEANetMP::TNodeI
GetOutDeg	snap-core/networkmp.h	/^    int GetOutDeg() const { return OutEIdV.Len(); }$/;"	f	class:TNEANetMP::TNode
GetOutDeg	snap-exp/graphmp-exp.h	/^    int GetOutDeg() const { return GetDeg(); }$/;"	f	class:TUNGraphMP::TNode
GetOutDeg	snap-exp/graphmp-exp.h	/^    int GetOutDeg() const { return NodeHI.GetDat().GetOutDeg(); }$/;"	f	class:TUNGraphMP::TNodeI
GetOutDeg	snap-exp/mmgraph-exp.h	/^    int GetOutDeg() const { return HashI.GetDat().GetOutDeg(); }$/;"	f	class:TMNet::TMNodeI
GetOutDeg	snap-exp/mmgraph-exp.h	/^  int GetOutDeg() const { return OutDeg; }$/;"	f	class:TCVNode
GetOutDeg	snap-exp/mmgraph-exp.h	/^  int GetOutDeg() const { return OutDeg; }$/;"	f	class:TSVNode
GetOutDeg	snap-exp/mmgraph-exp.h	/^  int GetOutDeg() const { return OutEIdV.Len(); }$/;"	f	class:TMVNode
GetOutDeg	snap-exp/mmgraph-exp.h	/^  int GetOutDeg(const int& ETypeId) const { return OutTypeDegV[ETypeId]; }$/;"	f	class:TCVNode
GetOutDeg	snap-exp/mmgraph-exp.h	/^  int GetOutDeg(int ETypeId) const {return OutEIdVV[ETypeId].Len();}$/;"	f	class:TSVNode
GetOutDegCnt	snap-core/alg.h	/^void GetOutDegCnt(const PGraph& Graph, TFltPrV& DegToCntV) {$/;"	f	namespace:TSnap
GetOutDegCnt	snap-core/alg.h	/^void GetOutDegCnt(const PGraph& Graph, TIntPrV& DegToCntV) {$/;"	f	namespace:TSnap
GetOutDescUrlStrKdV	glib-core/html.cpp	/^void TWebPg::GetOutDescUrlStrKdV(TStrKdV& OutDescUrlStrKdV) const {$/;"	f	class:TWebPg
GetOutEDat	snap-core/network.h	/^    TEdgeDat& GetOutEDat(const int& EdgeN) { return Net->GetEDat(GetOutEId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetOutEDat	snap-core/network.h	/^    TEdgeData& GetOutEDat(const int& EdgeN) { return NodeHI.GetDat().GetOutEDat(EdgeN); }$/;"	f	class:TNodeEDatNet::TNodeI
GetOutEDat	snap-core/network.h	/^    TEdgeData& GetOutEDat(const int& EdgeN) { return OutNIdV[EdgeN].Val2; }$/;"	f	class:TNodeEDatNet::TNode
GetOutEDat	snap-core/network.h	/^    const TEdgeDat& GetOutEDat(const int& EdgeN) const { return Net->GetEDat(GetOutEId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetOutEDat	snap-core/network.h	/^    const TEdgeData& GetOutEDat(const int& EdgeN) const { return NodeHI.GetDat().GetOutEDat(EdgeN); }$/;"	f	class:TNodeEDatNet::TNodeI
GetOutEDat	snap-core/network.h	/^    const TEdgeData& GetOutEDat(const int& EdgeN) const { return OutNIdV[EdgeN].Val2; }$/;"	f	class:TNodeEDatNet::TNode
GetOutEId	snap-core/graph.h	/^    int GetOutEId(const int& EdgeN) const { return NodeHI.GetDat().GetOutEId(EdgeN); }$/;"	f	class:TNEGraph::TNodeI
GetOutEId	snap-core/graph.h	/^    int GetOutEId(const int& EdgeN) const { return OutEIdV[EdgeN]; }$/;"	f	class:TNEGraph::TNode
GetOutEId	snap-core/network.h	/^    int GetOutEId(const int& EdgeN) const { return NodeHI.GetDat().GetOutEId(EdgeN); }$/;"	f	class:TNEANet::TNodeI
GetOutEId	snap-core/network.h	/^    int GetOutEId(const int& EdgeN) const { return NodeHI.GetDat().GetOutEId(EdgeN); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetOutEId	snap-core/network.h	/^    int GetOutEId(const int& EdgeN) const { return OutEIdV[EdgeN]; }$/;"	f	class:TNEANet::TNode
GetOutEId	snap-core/network.h	/^    int GetOutEId(const int& NodeN) const { return OutEIdV[NodeN]; }$/;"	f	class:TNodeEdgeNet::TNode
GetOutEId	snap-core/networkmp.h	/^    int GetOutEId(const int& EdgeN) const { return NodeHI.GetDat().GetOutEId(EdgeN); }$/;"	f	class:TNEANetMP::TNodeI
GetOutEId	snap-core/networkmp.h	/^    int GetOutEId(const int& EdgeN) const { return OutEIdV[EdgeN]; }$/;"	f	class:TNEANetMP::TNode
GetOutEId	snap-exp/mmgraph-exp.h	/^    int GetOutEId(const int& EdgeN) const { return HashI.GetDat().GetOutEId(EdgeN); }$/;"	f	class:TMNet::TMNodeI
GetOutEId	snap-exp/mmgraph-exp.h	/^  int GetOutEId(const int& EdgeN) const { return OutEIdV[EdgeN]; }$/;"	f	class:TMVNode
GetOutEId	snap-exp/mmgraph-exp.h	/^  int GetOutEId(const int& EdgeN) const {$/;"	f	class:TCVNode
GetOutEId	snap-exp/mmgraph-exp.h	/^  int GetOutEId(const int& EdgeN) const {$/;"	f	class:TSVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(TIntV& EIdV) const { EIdV = OutEIdV; }$/;"	f	class:TMVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(TIntV& EIdV) const {$/;"	f	class:TCVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(TIntV& EIdV) const {$/;"	f	class:TSVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(const TInt ETypeId, TIntV& EIdV) const {$/;"	f	class:TSVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(const TInt& ETypeId, TIntV& EIdV) const {$/;"	f	class:TCVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(const TInt& ETypeId, TIntV& EIdV) const {$/;"	f	class:TMVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(const TIntV& ETypeIdV, TIntV& EIdV) const {$/;"	f	class:TCVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(const TIntV& ETypeIdV, TIntV& EIdV) const {$/;"	f	class:TMVNode
GetOutEIdV	snap-exp/mmgraph-exp.h	/^  void GetOutEIdV(const TIntV& ETypeIdV, TIntV& EIdV) const {$/;"	f	class:TSVNode
GetOutEdgesSizes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* GetOutEdgesSizes() const { return OutEdgesSizes; }$/;"	f	class:TMatchingMachine
GetOutEdgesSizes	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* GetOutEdgesSizes() const { return OutEdgesSizes; }$/;"	f	class:TMatchingMachine
GetOutNDat	snap-core/network.h	/^    TNodeData& GetOutNDat(const int& EdgeN) { return Net->GetNDat(GetOutNId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetOutNDat	snap-core/network.h	/^    TNodeData& GetOutNDat(const int& NodeN) { return Net->GetNDat(GetOutNId(NodeN)); }$/;"	f	class:TNodeEDatNet::TNodeI
GetOutNDat	snap-core/network.h	/^    TNodeData& GetOutNDat(const int& NodeN) { return Net->GetNDat(GetOutNId(NodeN)); }$/;"	f	class:TNodeNet::TNodeI
GetOutNDat	snap-core/network.h	/^    const TNodeData& GetOutNDat(const int& EdgeN) const { return Net->GetNDat(GetOutNId(EdgeN)); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetOutNDat	snap-core/network.h	/^    const TNodeData& GetOutNDat(const int& NodeN) const { return Net->GetNDat(GetOutNId(NodeN)); }$/;"	f	class:TNodeEDatNet::TNodeI
GetOutNDat	snap-core/network.h	/^    const TNodeData& GetOutNDat(const int& NodeN) const { return Net->GetNDat(GetOutNId(NodeN)); }$/;"	f	class:TNodeNet::TNodeI
GetOutNId	snap-core/bignet.h	/^    int GetOutNId(const int& NodeN) const { return OutNIdV[NodeN]; }$/;"	f	class:TBigNet::TNodeI
GetOutNId	snap-core/graph.h	/^    int GetOutNId(const int& EdgeN) const { return Graph->GetEdge(NodeHI.GetDat().GetOutEId(EdgeN)).GetDstNId(); }$/;"	f	class:TNEGraph::TNodeI
GetOutNId	snap-core/graph.h	/^    int GetOutNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TBPGraph::TNode
GetOutNId	snap-core/graph.h	/^    int GetOutNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TUNGraph::TNode
GetOutNId	snap-core/graph.h	/^    int GetOutNId(const int& NodeN) const { return HI().GetDat().GetOutNId(NodeN); }$/;"	f	class:TBPGraph::TNodeI
GetOutNId	snap-core/graph.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TNGraph::TNodeI
GetOutNId	snap-core/graph.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TUNGraph::TNodeI
GetOutNId	snap-core/graph.h	/^    int GetOutNId(const int& NodeN) const { return OutNIdV[NodeN]; }$/;"	f	class:TNGraph::TNode
GetOutNId	snap-core/graphmp.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TNGraphMP::TNodeI
GetOutNId	snap-core/graphmp.h	/^    int GetOutNId(const int& NodeN) const { return OutNIdV[NodeN]; }$/;"	f	class:TNGraphMP::TNode
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& EdgeN) const { return Graph->GetEdge(NodeHI.GetDat().GetOutEId(EdgeN)).GetDstNId(); }$/;"	f	class:TNEANet::TNodeI
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& EdgeN) const { return Net->GetEdge(NodeHI.GetDat().GetOutEId(EdgeN)).GetDstNId(); }$/;"	f	class:TNodeEdgeNet::TNodeI
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& EdgeN) const { return OutNIdV[EdgeN].Val1; }$/;"	f	class:TNodeEDatNet::TNode
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TUndirNet::TNode
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TDirNet::TNodeI
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TNodeEDatNet::TNodeI
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TNodeNet::TNodeI
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TUndirNet::TNodeI
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& NodeN) const { return OutNIdV[NodeN]; }$/;"	f	class:TDirNet::TNode
GetOutNId	snap-core/network.h	/^    int GetOutNId(const int& NodeN) const { return OutNIdV[NodeN]; }$/;"	f	class:TNodeNet::TNode
GetOutNId	snap-core/networkmp.h	/^    int GetOutNId(const int& EdgeN) const { return Graph->GetEdge(NodeHI.GetDat().GetOutEId(EdgeN)).GetDstNId(); }$/;"	f	class:TNEANetMP::TNodeI
GetOutNId	snap-exp/graphmp-exp.h	/^    int GetOutNId(const int& NodeN) const { return GetNbrNId(NodeN); }$/;"	f	class:TUNGraphMP::TNode
GetOutNId	snap-exp/graphmp-exp.h	/^    int GetOutNId(const int& NodeN) const { return NodeHI.GetDat().GetOutNId(NodeN); }$/;"	f	class:TUNGraphMP::TNodeI
GetOutNId	snap-exp/mmgraph-exp.h	/^    int GetOutNId(const int& EdgeN) const { return Graph->GetEdge(HashI.GetDat().GetOutEId(EdgeN)).GetDstNId(); }$/;"	f	class:TMNet::TMNodeI
GetOutNIdV	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::GetOutNIdV(int NId, TIntV& OutNIdV) const {$/;"	f	class:TBigNet
GetOutNIdVPt	snap-core/bignet.h	/^  int* GetOutNIdVPt(const int& NId) const { return (int *) Pool.GetValVPt(GetNode(NId).OutVId); }$/;"	f	class:TBigNet
GetOutNbrId	snap-core/bignet.h	/^    int GetOutNbrId(const int& NodeN) const { return NodeN<OutDeg ? OutNIdV[NodeN]:InNIdV[NodeN-OutDeg]; }$/;"	f	class:TBigNet::TNodeI
GetOutPlsSurp	snap-exp/signnet.h	/^    double GetOutPlsSurp() const { return (PlsCnt - OutSumWgt)\/sqrt(OutVarSq); }$/;"	f	struct:TSignMicroEvol::TCloseStat
GetOutUrlV	glib-core/html.cpp	/^void TWebPg::GetOutUrlV(TUrlV& OutUrlV, TUrlV& OutRedirUrlV) const {$/;"	f	class:TWebPg
GetOutVId	snap-core/bignet.h	/^    int GetOutVId() const { return NodeHI->Dat.OutVId; }$/;"	f	class:TBigNet::TNodeI
GetOverlapCliques	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetOverlapCliques(const TVec<TIntV>& OverlapMtx, const TVec<TIntV>& MaxCliques, double MinOverlapFrac, TVec<TIntV>& CliqueIdVV) {$/;"	f	class:TCliqueOverlap
GetOverlapCliques	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetOverlapCliques(const TVec<TIntV>& OverlapMtx, int MinNodeOverlap, TVec<TIntV>& CliqueIdVV) {$/;"	f	class:TCliqueOverlap
GetP2	glib-core/bits.cpp	/^uint TB1Def::GetP2(const int& P2Exp){$/;"	f	class:TB1Def
GetP2	glib-core/bits.cpp	/^uint TB2Def::GetP2(const int& P2Exp){$/;"	f	class:TB2Def
GetP2	glib-core/bits.cpp	/^uint TB4Def::GetP2(const int& P2Exp){$/;"	f	class:TB4Def
GetPEReference	glib-core/xml.cpp	/^TStr TXmlLx::GetPEReference(){$/;"	f	class:TXmlLx
GetPHashKeyDat	glib-core/hashmp.h	/^  TPHKeyDat& GetPHashKeyDat(const int& KeyId){$/;"	f	class:THashMP
GetPHashKeyDat	glib-core/hashmp.h	/^  const TPHKeyDat& GetPHashKeyDat(const int& KeyId) const {$/;"	f	class:THashMP
GetPI	glib-core/xml.cpp	/^void TXmlLx::GetPI(){$/;"	f	class:TXmlLx
GetPNoCom	snap-adv/agmfit.h	/^  double GetPNoCom() { return PNoCom; }$/;"	f	class:TAGMFit
GetPageRank	snap-core/centr.h	/^void GetPageRank(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetPageRankMNetMP	snap-exp/centr-exp.h	/^void GetPageRankMNetMP(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetPageRankMP	snap-core/centr.h	/^void GetPageRankMP(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetPageRankMP1	snap-exp/centr-exp.h	/^void GetPageRankMP1(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetPageRankMP2	snap-exp/centr-exp.h	/^void GetPageRankMP2(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetPageRankMP3	snap-exp/centr-exp.h	/^void GetPageRankMP3(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetPageRank_v1	snap-core/centr.h	/^void GetPageRank_v1(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetPageRank_v2	snap-exp/centr-exp.h	/^void GetPageRank_v2(const PGraph& Graph, TIntFltH& PRankH, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetParam	snap-exp/sir.cpp	/^void TSir2Model::GetParam(TFltV& ParamV) const { $/;"	f	class:TSir2Model
GetParam	snap-exp/sir.cpp	/^void TSirModel::GetParam(TFltV& ParamV) const { $/;"	f	class:TSirModel
GetParam	snap-exp/sir.cpp	/^void TSirSR2Model::GetParam(TFltV& ParamV) const { $/;"	f	class:TSirSR2Model
GetParamHist	snap-adv/kronecker.h	/^  const TVec<TKronMtx>& GetParamHist() const { return MtxV; }$/;"	f	class:TKroneckerLL
GetParamNmV	snap-exp/sir.cpp	/^void TSir2Model::GetParamNmV(TStrV& ParamNmV) const {$/;"	f	class:TSir2Model
GetParamNmV	snap-exp/sir.cpp	/^void TSirModel::GetParamNmV(TStrV& ParamNmV) const {$/;"	f	class:TSirModel
GetParamNmV	snap-exp/sir.cpp	/^void TSirSR2Model::GetParamNmV(TStrV& ParamNmV) const {$/;"	f	class:TSirSR2Model
GetParamRange	snap-exp/sir.cpp	/^void TSir2Model::GetParamRange(TFltTrV& ParamMnMxStepV) const {$/;"	f	class:TSir2Model
GetParamRange	snap-exp/sir.cpp	/^void TSirModel::GetParamRange(TFltTrV& ParamMnMxStepV) const {$/;"	f	class:TSirModel
GetParamRange	snap-exp/sir.cpp	/^void TSirSR2Model::GetParamRange(TFltTrV& ParamMnMxStepV) const {$/;"	f	class:TSirSR2Model
GetParamStr	snap-core/ff.cpp	/^TStr TFfGGen::GetParamStr() const {$/;"	f	class:TFfGGen
GetParams	snap-adv/kronecker.h	/^  int GetParams() const { return ProbMtx.Len(); }$/;"	f	class:TKroneckerLL
GetParams	snap-adv/mag.h	/^	const TMAGParam<TMAGNodeBern>& GetParams() const { return Param; }$/;"	f	class:TMAGFitBern
GetParent	snap-adv/cascnetinf.h	/^  int GetParent(const int NId) const { return NIdHitH.GetDat(NId).Parent; }$/;"	f	class:TCascade
GetParentNodeId	glib-core/ds.h	/^  int GetParentNodeId(const int& NodeId) const {return NodeV[NodeId].Val1;}$/;"	f	class:TTree
GetParentState	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* GetParentState() const { return ParentState;}$/;"	f	class:TMatchingMachine
GetParentState	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* GetParentState() const { return ParentState;}$/;"	f	class:TMatchingMachine
GetParentType	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMamaParent* GetParentType() const {$/;"	f	class:TMatchingMachine
GetParentType	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMamaParent* GetParentType() const { return ParentType; }$/;"	f	class:TMatchingMachine
GetPartOverlap	snap-exp/signnet.cpp	/^void TSignNet::GetPartOverlap(const TVec<TIntV>& PartNIdV1, const TVec<TIntV>& PartNIdV2) {$/;"	f	class:TSignNet
GetPartStat	snap-exp/signnet.cpp	/^void TSignNet::GetPartStat(const TVec<TIntV>& PartNIdV, const TStr& Desc) const {$/;"	f	class:TSignNet
GetPartStat	snap-exp/wikinet.cpp	/^void TWikiTalkNet::GetPartStat(const TVec<TIntV>& PartNIdV) const {$/;"	f	class:TWikiTalkNet
GetPartitionRanges	snap-core/mmnet.cpp	/^void TMMNet::GetPartitionRanges(TIntPrV& Partitions, const TInt& NumPartitions, const TInt& MxLen) const {$/;"	f	class:TMMNet
GetPartitionRanges	snap-core/table.cpp	/^void TTable::GetPartitionRanges(TIntPrV& Partitions, TInt NumPartitions) const {$/;"	f	class:TTable
GetPathSeg	glib-core/url.h	/^  TStr GetPathSeg(const int& PathSegN) const {return PathSegV[PathSegN];}$/;"	f
GetPathSegs	glib-core/url.h	/^  int GetPathSegs() const {return PathSegV.Len();}$/;"	f
GetPathStr	glib-core/url.h	/^  TStr GetPathStr() const {EAssert(IsOk()); return PathStr;}$/;"	f
GetPdf	snap-core/util.cpp	/^void TGUtil::GetPdf(const TFltPrV& CdfV, TFltPrV& PdfV) {$/;"	f	class:TGUtil
GetPdf	snap-core/util.cpp	/^void TGUtil::GetPdf(const TIntFltKdV& CdfV, TIntFltKdV& PdfV) {$/;"	f	class:TGUtil
GetPdf	snap-core/util.cpp	/^void TGUtil::GetPdf(const TIntPrV& CdfV, TIntPrV& PdfV) {$/;"	f	class:TGUtil
GetPeakTm	snap-exp/memes.cpp	/^TSecTm TQuote::GetPeakTm(const TTmUnit& TmUnit, const TSecTm& AfterTm) const {$/;"	f	class:TQuote
GetPeakTm	snap-exp/memes.cpp	/^TSecTm TQuote::GetPeakTm(const TTmUnit& TmUnit, const TSecTm& AfterTm, TInt& FreqAtPeak) const {$/;"	f	class:TQuote
GetPeakTm	snap-exp/memes.cpp	/^TSecTm TQuote::GetPeakTm(const TTmUnit& TmUnit, const TSecTm& AfterTm, const TUrlTy& UrlTy, const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
GetPercentile	glib-core/xmath.h	/^  double GetPercentile(const int& PercentileN) const {$/;"	f
GetPerfTimerFq	glib-core/os.cpp	/^uint64 TSysTm::GetPerfTimerFq(){$/;"	f	class:TSysTm
GetPerfTimerFq	glib-core/tm.cpp	/^uint64 TTm::GetPerfTimerFq(){$/;"	f	class:TTm
GetPerfTimerTicks	glib-core/os.cpp	/^uint64 TSysTm::GetPerfTimerTicks(){$/;"	f	class:TSysTm
GetPerfTimerTicks	glib-core/tm.cpp	/^uint64 TTm::GetPerfTimerTicks(){$/;"	f	class:TTm
GetPeriod	glib-core/http.cpp	/^void THttpLx::GetPeriod(){$/;"	f	class:THttpLx
GetPermV	snap-adv/kronecker.h	/^  const TIntV& GetPermV() const { return NodePerm; }$/;"	f	class:TKroneckerLL
GetPermutations	snap-adv/graphcounter.cpp	/^void TGraphEnumUtils::GetPermutations(TIntV &v, int start, TVec<TIntV> &perms) {$/;"	f	class:TGraphEnumUtils
GetPersonalizedPageRankBidirectional	snap-core/randwalk.h	/^  double GetPersonalizedPageRankBidirectional(const PGraph& Graph,$/;"	f	namespace:TSnap
GetPhi	snap-adv/ncp.h	/^    double GetPhi() const { return double(CutSz)\/double(2*Edges+CutSz); }                                     \/\/ conductance$/;"	f	class:TLocClustStat::TCutInfo
GetPhi	snap-adv/ncp.h	/^  double GetPhi(const int& ValId) const { return PhiV[ValId]; }$/;"	f	class:TLocClust
GetPhiV	snap-adv/ncp.h	/^  const TFltV& GetPhiV() const { return PhiV; } $/;"	f	class:TLocClust
GetPhiVV	snap-adv/mag.h	/^	const TFltVV& GetPhiVV() const { return PhiVV; }$/;"	f	class:TMAGFitBern
GetPivot	snap-core/table.cpp	/^TInt TTable::GetPivot(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:TTable
GetPivot	snap-exp/alternativetable.cpp	/^TInt PhysicalOrderTable::GetPivot(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:PhysicalOrderTable
GetPivotKeyVal	snap-core/table.cpp	/^TInt TTable::GetPivotKeyVal(TIntV& Key, TIntV& Val, TInt Start, TInt End) {$/;"	f	class:TTable
GetPivotValN	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::GetPivotValN(const TSizeTy& LValN, const TSizeTy& RValN) const {$/;"	f	class:TVec
GetPivotValNCmp	glib-core/ds.h	/^  static TIter GetPivotValNCmp(const TIter& BI, const TIter& EI, const TCmp& Cmp) {$/;"	f	class:TVec
GetPlainStrFromXmlStr	glib-core/xml.cpp	/^TStr TXmlLx::GetPlainStrFromXmlStr(const TStr& XmlStr){$/;"	f	class:TXmlLx
GetPlainStrFromXmlStr	glib-core/xml.cpp	/^void TXmlParser::GetPlainStrFromXmlStr(const TChA& XmlStr, TChA& PlainChA) {$/;"	f	class:TXmlParser
GetPlotInfo	snap-core/gstat.cpp	/^TGStat::TPlotInfo TGStat::GetPlotInfo(const TGStatDistr& Distr) {$/;"	f	class:TGStat
GetPlotInfo	snap-core/gstat.cpp	/^TGStat::TPlotInfo TGStat::GetPlotInfo(const TGStatVal& Val) {$/;"	f	class:TGStat
GetPlsFrac	snap-exp/signnet.h	/^    double GetPlsFrac() const { return PlsCnt\/double(PlsCnt+MnsCnt); }$/;"	f	struct:TSignMicroEvol::TCloseStat
GetPoissonDev	glib-core/dt.cpp	/^double TRnd::GetPoissonDev(const double& Mean){$/;"	f	class:TRnd
GetPortN	glib-core/url.h	/^  int GetPortN() const {EAssert(IsOk()&&(PortN!=-1)); return PortN;}$/;"	f
GetPortStr	glib-core/url.h	/^  TStr GetPortStr() const {EAssert(IsOk()); return PortStr;}$/;"	f
GetPorts	glib-core/hash.h	/^  int GetPorts() const {return PortV.Len();}$/;"	f	class:THash
GetPorts	glib-core/shash.h	/^  int GetPorts() const {return PortV.Len(); }$/;"	f	class:THashSet
GetPorts	snap-core/ghash.h	/^  int GetPorts() const { return GraphH.GetPorts(); }$/;"	f	class:TGHash
GetPos	glib-core/fl.h	/^  int GetPos() const { return (int) ftell(FileId); }$/;"	f	class:TFInOut
GetPos	snap-exp/imdbnet.h	/^  int GetPos() const { return Position; }$/;"	f	class:TImdbNode
GetPositiveW	snap-adv/agmattr.h	/^  int GetPositiveW() {$/;"	f	class:TCesna
GetPowerCoef	glib-core/xmath.cpp	/^double TSpecFunc::GetPowerCoef(const TFltPrV& XValCntV, double MinX) {$/;"	f	class:TSpecFunc
GetPowerCoef	glib-core/xmath.cpp	/^double TSpecFunc::GetPowerCoef(const TFltV& XValV, double MinX) {$/;"	f	class:TSpecFunc
GetPowerDev	glib-core/dt.h	/^  double GetPowerDev(const double& AlphaSlope){ \/\/ power-law degree distribution (AlphaSlope>0)$/;"	f	class:TRnd
GetPrefAttach	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::GetPrefAttach(const int& Nodes, const int& Edges, const double& GammaIn, const double& GammaOut) {$/;"	f	class:TTimeNENet
GetPrefAttach	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::GetPrefAttach(const int& Nodes, const int& OutDeg) {$/;"	f	class:TTimeNENet
GetPrefixArgN	glib-core/env.cpp	/^int TEnv::GetPrefixArgN(const TStr& PrefixStr) const {$/;"	f	class:TEnv
GetPrimHashCd	glib-core/bd.h	/^  int GetPrimHashCd() const {return Addr->GetPrimHashCd();}$/;"	f	class:TPt
GetPrimHashCd	glib-core/blobbs.h	/^  int GetPrimHashCd() const {return abs(int(Addr));}$/;"	f
GetPrimHashCd	glib-core/ds.h	/^  int GetPrimHashCd() const { int hc = 0;$/;"	f	class:TTuple
GetPrimHashCd	glib-core/ds.h	/^  int GetPrimHashCd() const {return  TPairHashImpl::GetHashCd(TPairHashImpl::GetHashCd(Val1.GetPrimHashCd(), Val2.GetPrimHashCd()), TPairHashImpl::GetHashCd(Val3.GetPrimHashCd(), Val4.GetPrimHashCd())); }$/;"	f	class:TQuad
GetPrimHashCd	glib-core/ds.h	/^  int GetPrimHashCd() const {return  TPairHashImpl::GetHashCd(TPairHashImpl::GetHashCd(Val1.GetPrimHashCd(), Val2.GetPrimHashCd()), Val3.GetPrimHashCd()); }$/;"	f	class:TTriple
GetPrimHashCd	glib-core/ds.h	/^  int GetPrimHashCd() const {return Key.GetPrimHashCd();}$/;"	f	class:TKeyDat
GetPrimHashCd	glib-core/ds.h	/^  int GetPrimHashCd() const {return NodeV.GetPrimHashCd();}$/;"	f	class:TTree
GetPrimHashCd	glib-core/ds.h	/^  int GetPrimHashCd() const {return TPairHashImpl::GetHashCd(Val1.GetPrimHashCd(), Val2.GetPrimHashCd()); }$/;"	f	class:TPair
GetPrimHashCd	glib-core/ds.h	/^int TVec<TVal, TSizeTy>::GetPrimHashCd() const {$/;"	f	class:TVec
GetPrimHashCd	glib-core/dt.cpp	/^int TChA::GetPrimHashCd() const {$/;"	f	class:TChA
GetPrimHashCd	glib-core/dt.cpp	/^int TRStr::GetPrimHashCd() const {$/;"	f	class:TRStr
GetPrimHashCd	glib-core/dt.cpp	/^int TStrPool::GetPrimHashCd(const char *CStr) {$/;"	f	class:TStrPool
GetPrimHashCd	glib-core/hash.cpp	/^int TBigStrPool::GetPrimHashCd(const char *CStr) {$/;"	f	class:TBigStrPool
GetPrimHashCd	glib-core/hash.cpp	/^int TStrHashF_Md5::GetPrimHashCd(const TStr& s) {$/;"	f	class:TStrHashF_Md5
GetPrimHashCd	glib-core/hash.cpp	/^int TStrHashF_Md5::GetPrimHashCd(const char *p) {$/;"	f	class:TStrHashF_Md5
GetPrimHashCd	glib-core/hash.h	/^  int GetPrimHashCd(const int& StrId) { Assert(StrId < GetStrs());$/;"	f
GetPrimHashCd	glib-core/hash.h	/^ static inline int GetPrimHashCd(const TKey& Key) { return Key.GetPrimHashCd(); }$/;"	f	class:TDefaultHashFunc
GetPrimHashCd	glib-core/md5.cpp	/^int TMd5Sig::GetPrimHashCd() const {$/;"	f	class:TMd5Sig
GetPrimHashCd	glib-core/tm.h	/^  int GetPrimHashCd() const {return AbsSecs.GetPrimHashCd();}$/;"	f	class:TSecTm
GetPrimHashCd	glib-core/tm.h	/^  int GetPrimHashCd() const {return Year*Month*Day+Hour*Min*Sec*MSec;}$/;"	f	class:TTm
GetPrimHashCd	glib-core/wch.h	/^  int GetPrimHashCd() const {return LsVal;}$/;"	f	class:TWCh
GetPrimHashCd	snap-adv/kronecker.h	/^  int GetPrimHashCd() const { return SeedMtx.GetPrimHashCd(); }$/;"	f	class:TKronMtx
GetPrimHashCd	snap-adv/mag.h	/^  int GetPrimHashCd() const { return SeedMtx.GetPrimHashCd(); }$/;"	f	class:TMAGAffMtx
GetPrimHashCd	snap-core/cncom.h	/^  int GetPrimHashCd() const { return NIdV.GetPrimHashCd(); }$/;"	f	class:TCnCom
GetPrimHashCd	snap-core/ghash.h	/^  int GetPrimHashCd() const { return abs(SigV.GetPrimHashCd() ^ VariantId); }$/;"	f	class:TGraphKey
GetPrimHashCd	snap-core/table.h	/^	int GetPrimHashCd() const{$/;"	f	class:GroupStmt
GetPrimHashCd	snap-exp/trawling.h	/^ static inline int GetPrimHashCd(const TIntV& Key) { $/;"	f	class:TIntVHashFunc
GetPriorities	glib-core/priorityqueue.h	/^  void GetPriorities(THash<TVal, TFlt>& Result ) {$/;"	f	class:TMaxPriorityQueue
GetPriority	glib-core/priorityqueue.h	/^  float GetPriority(const TVal& X) {$/;"	f	class:TMaxPriorityQueue
GetProb	snap-adv/cascnetinf.cpp	/^double TCascade::GetProb(const PNGraph& G) {$/;"	f	class:TCascade
GetProbMtx	snap-adv/kronecker.cpp	/^void TKronMtx::GetProbMtx(TKronMtx& ProbMtx) {$/;"	f	class:TKronMtx
GetProbMtx	snap-adv/kronecker.h	/^  const TKronMtx& GetProbMtx() const { return ProbMtx; }$/;"	f	class:TKroneckerLL
GetProbMtx	snap-adv/mag.cpp	/^void TMAGAffMtx::GetProbMtx(TMAGAffMtx& ProbMtx) {$/;"	f	class:TMAGAffMtx
GetProbMu	snap-adv/mag.cpp	/^const double TMAGFitBern::GetProbMu(const int& NId1, const int& NId2, const int& AId, const int& Attr1, const int& Attr2, const bool Left, const bool Right) const {$/;"	f	class:TMAGFitBern
GetProbPhi	snap-adv/mag.cpp	/^const double TMAGFitBern::GetProbPhi(const int& NId1, const int& NId2, const int& AId, const int& Attr1, const int& Attr2) const {$/;"	f	class:TMAGFitBern
GetProcessMSecs	glib-core/os.cpp	/^uint64 TSysTm::GetProcessMSecs() {$/;"	f	class:TSysTm
GetProcessMSecs	glib-core/os.cpp	/^uint64 TSysTm::GetProcessMSecs(){$/;"	f	class:TSysTm
GetProdLinWeight	snap-adv/mag.cpp	/^const double TMAGFitBern::GetProdLinWeight(const int& NId1, const int& NId2) const {$/;"	f	class:TMAGFitBern
GetProdSqWeight	snap-adv/mag.cpp	/^const double TMAGFitBern::GetProdSqWeight(const int& NId1, const int& NId2) const {$/;"	f	class:TMAGFitBern
GetPropListFn	glib-core/unicode.h	/^	static TStr GetPropListFn() { return "PropList.txt"; }$/;"	f	class:TUniChDb
GetPt	glib-core/bd.h	/^  void* GetPt() const {return Val.Pt;}$/;"	f	class:TConv_Pt64Ints32
GetPubidLiteral	glib-core/xml.cpp	/^TStr TXmlLx::GetPubidLiteral(){$/;"	f	class:TXmlLx
GetQStr	glib-core/lx.cpp	/^TStr TILx::GetQStr(const TStr& Str, const bool& QuoteP, const char& QuoteCh){$/;"	f	class:TILx
GetQV	snap-adv/agmfit.cpp	/^void TAGMFit::GetQV(TFltV& OutV) {$/;"	f	class:TAGMFit
GetQt	snap-exp/memes.h	/^  TQuote& GetQt(const int& QtId) { return QuoteH.GetDat(QtId); }$/;"	f	class:TQuoteBs
GetQt	snap-exp/memes.h	/^  const TQuote& GetQt(const int& QtId) const { return QuoteH.GetDat(QtId); }$/;"	f	class:TQuoteBs
GetQtId	snap-exp/memes.h	/^  int GetQtId(const char* CStr) const { return IsStr(CStr)? StrQtIdH.GetDat(CStr).Val : -1; }$/;"	f	class:TQuoteBs
GetQtId	snap-exp/memes.h	/^  int GetQtId(const int& QtN) const { return QuoteH.GetKey(QtN); }$/;"	f	class:TQuoteBs
GetQtIdV	snap-exp/memes.cpp	/^void TQuoteBs::GetQtIdV(TIntV& QtIdV) const {$/;"	f	class:TQuoteBs
GetQtIdVByFq	snap-exp/memes.cpp	/^void TQuoteBs::GetQtIdVByFq(TIntV& QtIdV, const int& MinWrdLen, const int& MinQtFq, const TStrV& FromDomains,$/;"	f	class:TQuoteBs
GetQtIdVByFq	snap-exp/memes.cpp	/^void TQuoteBs::GetQtIdVByFq(TIntV& QtIdV, const int& MinWrdLen, const int& MinQtFq, const bool& OnlyClustRoots, const TStr& HasWord, const TStr& AppearsAtUrl, const TUrlTy& OnlyCountTy, const TSecTm& BegTm, const TSecTm& EndTm) const {$/;"	f	class:TQuoteBs
GetQtIdVByTm	snap-exp/memes.cpp	/^void TQuoteBs::GetQtIdVByTm(const int& WndSzHr, const int& StepHr, const int& MinWrdLen, const int& MinQtFq, const int& TakePerStep) const {$/;"	f	class:TQuoteBs
GetQtN	snap-exp/memes.h	/^  TQuote& GetQtN(const int& QtN) { return QuoteH[QtN]; }$/;"	f	class:TQuoteBs
GetQtN	snap-exp/memes.h	/^  const TQuote& GetQtN(const int& QtN) const { return QuoteH[QtN]; }$/;"	f	class:TQuoteBs
GetQtPageUrl	snap-exp/memes.cpp	/^void TQuoteBs::GetQtPageUrl(const TIntV& QtIdV, TIntH& QtUrlIdH) const {$/;"	f	class:TQuoteBs
GetQtsInClust	snap-exp/memes.cpp	/^int TQuoteBs::GetQtsInClust() const {$/;"	f	class:TQuoteBs
GetQuart1	glib-core/xmath.h	/^  double GetQuart1() const {Assert(DefP&&UsableP); return Quart1;}$/;"	f
GetQuart3	glib-core/xmath.h	/^  double GetQuart3() const {Assert(DefP&&UsableP); return Quart3;}$/;"	f
GetQuoteBs	snap-exp/memes.cpp	/^PQuoteBs TQuoteBs::GetQuoteBs(const TIntV& QtIdV) const {$/;"	f	class:TQuoteBs
GetQuoteDomNet	snap-exp/memes.cpp	/^PQtDomNet TQuoteBs::GetQuoteDomNet(const PNGraph& PostGraph, const int& CId) const {$/;"	f	class:TQuoteBs
GetQuotePostNet	snap-exp/memes.cpp	/^PNGraph TQuoteBs::GetQuotePostNet(const TStr& DatasetFNm) const {$/;"	f	class:TQuoteBs
GetRNId	snap-core/graph.h	/^    int GetRNId() const { return GetDstNId(); }$/;"	f	class:TBPGraph::TEdgeI
GetRNIdV	snap-core/graph.cpp	/^void TBPGraph::GetRNIdV(TIntV& NIdV) const {$/;"	f	class:TBPGraph
GetRNodes	snap-core/graph.h	/^  int GetRNodes() const { return RightH.Len(); }$/;"	f	class:TBPGraph
GetRStr	glib-core/dt.cpp	/^TRStr* TStr::GetRStr(const char* CStr){$/;"	f	class:TStr
GetRayleigh	glib-core/dt.h	/^  double GetRayleigh(const double& Sigma) { \/\/ 1\/sqrt(alpha) = sigma$/;"	f	class:TRnd
GetReasonPhrase	glib-core/http.cpp	/^TStr THttp::GetReasonPhrase(const int& StatusCd){$/;"	f	class:THttp
GetRec	glib-core/ds.h	/^  void GetRec(TRec& Rec, const int& RecN=-1){FRnd->GetRec(&Rec, RecN);}$/;"	f	class:TFRec
GetRec	glib-core/fl.h	/^  void GetRec(void* Rec, const int& RecN=-1){$/;"	f
GetRecN	glib-core/ds.h	/^  int GetRecN(){return FRnd->GetRecN();}$/;"	f	class:TFRec
GetRecN	glib-core/fl.cpp	/^int TFRnd::GetRecN(){$/;"	f	class:TFRnd
GetRecs	glib-core/ds.h	/^  int GetRecs(){return FRnd->GetRecs();}$/;"	f	class:TFRec
GetRecs	glib-core/fl.cpp	/^int TFRnd::GetRecs(){$/;"	f	class:TFRnd
GetRedirHtmlDocStr	glib-core/html.cpp	/^TStr THtmlDoc::GetRedirHtmlDocStr(const TStr& HtmlStr,$/;"	f	class:THtmlDoc
GetReference	glib-core/xml.cpp	/^TStr TXmlLx::GetReference(){$/;"	f	class:TXmlLx
GetRefs	glib-core/bd.h	/^  int GetRefs() const {$/;"	f	class:TPt
GetRefs	glib-core/bd.h	/^  int GetRefs() const {return Refs;}$/;"	f	class:TCRef
GetRegCoef	snap-adv/agmattr.h	/^  double GetRegCoef() { return RegCoef; }$/;"	f	class:TCesna
GetRegCoef	snap-adv/agmdirected.h	/^  double GetRegCoef() { return RegCoef; }$/;"	f	class:TCoda
GetRegCoef	snap-adv/agmfast.h	/^  double GetRegCoef() { return RegCoef; }$/;"	f	class:TAGMFast
GetRelUrlStr	glib-core/url.h	/^  TStr GetRelUrlStr() const {return RelUrlStr;}$/;"	f
GetRelativeComplement	snap-adv/cliques.cpp	/^void TCliqueOverlap::GetRelativeComplement(const THashSet<TInt>& A, const THashSet<TInt>& B, THashSet<TInt>& Complement) {$/;"	f	class:TCliqueOverlap
GetReservedKeyIds	glib-core/hash.h	/^  int GetReservedKeyIds() const {return KeyDatV.Reserved();}$/;"	f	class:THash
GetReservedKeyIds	glib-core/hashmp.h	/^  int GetReservedKeyIds() const {return Table.Reserved();}$/;"	f	class:THashMP
GetReservedKeyIds	glib-core/shash.h	/^  int GetReservedKeyIds() const { return KeyV.Reserved(); }$/;"	f	class:THashSet
GetRespReasonPhrase	glib-core/http.cpp	/^TStr THttpLx::GetRespReasonPhrase(){$/;"	f	class:THttpLx
GetRest	glib-core/http.cpp	/^void THttpLx::GetRest(){$/;"	f	class:THttpLx
GetRevCnt	snap-exp/wikinet.h	/^  int GetRevCnt() const { return MnRevCnt; }$/;"	f	class:TWikiUsr
GetRevWrds	snap-exp/wikinet.h	/^  int GetRevWrds() const { return MnRevWrds; }$/;"	f	class:TWikiUsr
GetRnd2WccSz	snap-exp/wgtnet.cpp	/^int TTop2FriendNet::GetRnd2WccSz(const double ProbPick2nd) const {$/;"	f	class:TTop2FriendNet
GetRndEI	snap-core/graph.h	/^  TEdgeI GetRndEI(TRnd& Rnd=TInt::Rnd) { return GetEI(GetRndEId(Rnd)); }$/;"	f	class:TNEGraph
GetRndEI	snap-core/network.h	/^  TEdgeI GetRndEI(TRnd& Rnd=TInt::Rnd) { return GetEI(GetRndEId(Rnd)); }$/;"	f	class:TNEANet
GetRndEI	snap-core/network.h	/^  TEdgeI GetRndEI(TRnd& Rnd=TInt::Rnd) { return GetEI(GetRndEId(Rnd)); }$/;"	f	class:TNodeEdgeNet
GetRndEI	snap-core/networkmp.h	/^  TEdgeI GetRndEI(TRnd& Rnd=TInt::Rnd) { return GetEI(GetRndEId(Rnd)); }$/;"	f	class:TNEANetMP
GetRndEI	snap-exp/mmgraph-exp.h	/^  TEdgeI GetRndEI(TRnd& Rnd=TInt::Rnd) { return GetEI(GetRndEId(Rnd)); }$/;"	f	class:TMNet
GetRndEId	snap-core/graph.h	/^  int GetRndEId(TRnd& Rnd=TInt::Rnd) { return EdgeH.GetKey(EdgeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNEGraph
GetRndEId	snap-core/network.h	/^  int GetRndEId(TRnd& Rnd=TInt::Rnd) { return EdgeH.GetKey(EdgeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNEANet
GetRndEId	snap-core/network.h	/^  int GetRndEId(TRnd& Rnd=TInt::Rnd) { return EdgeH.GetKey(EdgeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNodeEdgeNet
GetRndEId	snap-core/networkmp.h	/^  int GetRndEId(TRnd& Rnd=TInt::Rnd) { return EdgeH.GetKey(EdgeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNEANetMP
GetRndEId	snap-exp/mmgraph-exp.h	/^  int GetRndEId(TRnd& Rnd=TInt::Rnd) { return EdgeH.GetKey(EdgeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TMNet
GetRndESubGraph	snap-core/subgraph.h	/^PGraph GetRndESubGraph(const PGraph& Graph, const int& NEdges) {$/;"	f	namespace:TSnap
GetRndEdgeNonAdjNode	snap-core/ggen.h	/^TIntPr GetRndEdgeNonAdjNode(const PGraph& Graph, int NId1, int NId2) {$/;"	f	namespace:TSnap::TSnapDetail
GetRndKeyId	glib-core/hash.h	/^int THash<TKey, TDat, THashFunc>::GetRndKeyId(TRnd& Rnd) const  {$/;"	f	class:THash
GetRndKeyId	glib-core/hash.h	/^int THash<TKey, TDat, THashFunc>::GetRndKeyId(TRnd& Rnd, const double& EmptyFrac) {$/;"	f	class:THash
GetRndKeyId	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::GetRndKeyId(TRnd& Rnd) const  {$/;"	f	class:THashMP
GetRndKeyId	glib-core/hashmp.h	/^int THashMP<TKey, TDat, THashFunc>::GetRndKeyId(TRnd& Rnd, const double& EmptyFrac) {$/;"	f	class:THashMP
GetRndKeyId	glib-core/shash.h	/^  int GetRndKeyId(TRnd& Rnd = TInt::Rnd) const { Assert(Len()>0);$/;"	f	class:TSparseHash
GetRndKeyId	glib-core/shash.h	/^  int GetRndKeyId(TRnd& Rnd = TInt::Rnd) const { Assert(Len()>0);$/;"	f	class:TSparseSet
GetRndKeyId	glib-core/shash.h	/^  int GetRndKeyId(TRnd& Rnd) const {$/;"	f	class:THashSet
GetRndLNId	snap-core/graph.cpp	/^int TBPGraph::GetRndLNId(TRnd& Rnd) { $/;"	f	class:TBPGraph
GetRndMtx	snap-adv/kronecker.cpp	/^TKronMtx TKronMtx::GetRndMtx(const int& Dim, const double& MinProb) {$/;"	f	class:TKronMtx
GetRndMtx	snap-adv/mag.cpp	/^TMAGAffMtx TMAGAffMtx::GetRndMtx(TRnd& Rnd, const int& Dim, const double& MinProb) {$/;"	f	class:TMAGAffMtx
GetRndNI	snap-core/bignet.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) const { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TBigNet
GetRndNI	snap-core/graph.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TBPGraph
GetRndNI	snap-core/graph.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNEGraph
GetRndNI	snap-core/graph.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNGraph
GetRndNI	snap-core/graph.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TUNGraph
GetRndNI	snap-core/graphmp.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNGraphMP
GetRndNI	snap-core/network.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TDirNet
GetRndNI	snap-core/network.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNEANet
GetRndNI	snap-core/network.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNodeEDatNet
GetRndNI	snap-core/network.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNodeEdgeNet
GetRndNI	snap-core/network.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNodeNet
GetRndNI	snap-core/network.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TUndirNet
GetRndNI	snap-core/networkmp.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TNEANetMP
GetRndNI	snap-exp/graphmp-exp.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TUNGraphMP
GetRndNI	snap-exp/mmgraph-exp.h	/^  TNodeI GetRndNI(TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(Rnd)); }$/;"	f	class:TMNet
GetRndNI	snap-exp/mmgraph-exp.h	/^  TNodeI GetRndNI(const int& NTypeId, TRnd& Rnd=TInt::Rnd) { return GetNI(GetRndNId(NTypeId, Rnd)); }$/;"	f	class:TMNet
GetRndNId	snap-core/bignet.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) const { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd)); }$/;"	f	class:TBigNet
GetRndNId	snap-core/cncom.h	/^  const TInt& GetRndNId() const { return NIdV[TInt::Rnd.GetUniDevInt(Len())]; }$/;"	f	class:TCnCom
GetRndNId	snap-core/graph.cpp	/^int TBPGraph::GetRndNId(TRnd& Rnd) { $/;"	f	class:TBPGraph
GetRndNId	snap-core/graph.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNEGraph
GetRndNId	snap-core/graph.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNGraph
GetRndNId	snap-core/graph.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TUNGraph
GetRndNId	snap-core/graphmp.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNGraphMP
GetRndNId	snap-core/network.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TDirNet
GetRndNId	snap-core/network.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNEANet
GetRndNId	snap-core/network.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNodeEDatNet
GetRndNId	snap-core/network.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNodeEdgeNet
GetRndNId	snap-core/network.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNodeNet
GetRndNId	snap-core/network.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TUndirNet
GetRndNId	snap-core/networkmp.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TNEANetMP
GetRndNId	snap-exp/graphmp-exp.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) { return NodeH.GetKey(NodeH.GetRndKeyId(Rnd, 0.8)); }$/;"	f	class:TUNGraphMP
GetRndNId	snap-exp/mmgraph-exp.h	/^  int GetRndNId(TRnd& Rnd=TInt::Rnd) {$/;"	f	class:TMNet
GetRndNId	snap-exp/mmgraph-exp.h	/^  int GetRndNId(const int& NTypeId, TRnd& Rnd=TInt::Rnd) {$/;"	f	class:TMNet
GetRndPath	snap-core/bfsdfs.h	/^int TBreathFS<PGraph>::GetRndPath(const int& SrcNId, const int& DstNId, TIntV& PathNIdV) const {$/;"	f	class:TBreathFS
GetRndRNId	snap-core/graph.cpp	/^int TBPGraph::GetRndRNId(TRnd& Rnd) { $/;"	f	class:TBPGraph
GetRndSubGraph	snap-core/subgraph.h	/^PGraph GetRndSubGraph(const PGraph& Graph, const int& NNodes) {$/;"	f	namespace:TSnap
GetRndUint	glib-core/unicode.cpp	/^uint TUniCodec::GetRndUint(TRnd& rnd)$/;"	f	class:TUniCodec
GetRndUint	glib-core/unicode.cpp	/^uint TUniCodec::GetRndUint(TRnd& rnd, uint minVal, uint maxVal)$/;"	f	class:TUniCodec
GetRndVal	glib-core/ds.h	/^  TVal& GetRndVal(TRnd& Rnd=TInt::Rnd) { return GetVal(Rnd.GetUniDevInt(Len())); }$/;"	f	class:TVec
GetRndVal	glib-core/ds.h	/^  const TVal& GetRndVal(TRnd& Rnd=TInt::Rnd) const { return GetVal(Rnd.GetUniDevInt(Len())); }$/;"	f	class:TVec
GetRndWalkRestart	snap-exp/linkpred.cpp	/^void GetRndWalkRestart(const PGraph& Graph, const double& JumpProb, const int& JumpNId, THash<TInt, TFlt>& RwrNIdH) {$/;"	f
GetRndWalkRestartBidirectional	snap-core/randwalk.h	/^  double GetRndWalkRestartBidirectional(const PGraph& Graph,$/;"	f	namespace:TSnap
GetRndWalkSup	snap-adv/ncp.h	/^  int GetRndWalkSup() const { return VolV.Len(); }$/;"	f	class:TLocClust
GetRngWgtNet	snap-exp/wgtnet.cpp	/^PWgtNet TWgtNet::GetRngWgtNet(const int& Nodes, const int& Edges, const double& Wgt) {$/;"	f	class:TWgtNet
GetRow	glib-core/ds.h	/^void TVVec<TVal>::GetRow(const int& RowN, TVec<TVal>& Vec) const {$/;"	f	class:TVVec
GetRowIdMap	snap-core/table.h	/^  THash<TInt, TInt> GetRowIdMap() const { return RowIdMap;}$/;"	f	class:TTable
GetRowIdx	snap-core/table.cpp	/^TInt TRowIterator::GetRowIdx() const {$/;"	f	class:TRowIterator
GetRowIdx	snap-core/table.cpp	/^TInt TRowIteratorWithRemove::GetRowIdx() const {$/;"	f	class:TRowIteratorWithRemove
GetRowIdx	snap-exp/alternativetable.cpp	/^TInt ExplicitStringRowIterator::GetRowIdx() const {$/;"	f	class:ExplicitStringRowIterator
GetRowIdx	snap-exp/alternativetable.cpp	/^TInt ExplicitStringRowIteratorWithRemove::GetRowIdx() const {$/;"	f	class:ExplicitStringRowIteratorWithRemove
GetRowIdx	snap-exp/alternativetable.cpp	/^TInt RowBasedRowIterator::GetRowIdx() const {$/;"	f	class:RowBasedRowIterator
GetRowSum	snap-adv/kronecker.cpp	/^double TKronMtx::GetRowSum(const int& RowId) const {$/;"	f	class:TKronMtx
GetRowSum	snap-adv/mag.cpp	/^double TMAGAffMtx::GetRowSum(const int& RowId) const {$/;"	f	class:TMAGAffMtx
GetRows	glib-core/ds.h	/^  int GetRows() const {return XDim;}$/;"	f	class:TVVec
GetRows	glib-core/linalg.h	/^    int GetRows() const { return Transposed ? PGetCols() : PGetRows(); }$/;"	f	class:TMatrix
GetRqMethod	glib-core/http.cpp	/^THttpRqMethod THttpLx::GetRqMethod(){$/;"	f	class:THttpLx
GetRunLen	snap-exp/wikinet.cpp	/^int TWikiElec::GetRunLen(const int& VoteId) const {$/;"	f	class:TWikiElec
GetSAttrDat	snap-core/attr.cpp	/^int TAttr::GetSAttrDat(const TInt& Id, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TAttr
GetSAttrDat	snap-core/attr.cpp	/^int TAttr::GetSAttrDat(const TInt& Id, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TAttr
GetSAttrDat	snap-core/attr.cpp	/^int TAttr::GetSAttrDat(const TInt& Id, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TAttr
GetSAttrDat	snap-core/attr.cpp	/^int TAttr::GetSAttrDat(const TInt& Id, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TAttr
GetSAttrDat	snap-core/attr.cpp	/^int TAttr::GetSAttrDat(const TInt& Id, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TAttr
GetSAttrDat	snap-core/attr.cpp	/^int TAttr::GetSAttrDat(const TInt& Id, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TAttr
GetSAttrDat	snap-core/attr.cpp	/^int TAttrPair::GetSAttrDat(const TIntPr& Id, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TAttrPair
GetSAttrDat	snap-core/attr.cpp	/^int TAttrPair::GetSAttrDat(const TIntPr& Id, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TAttrPair
GetSAttrDat	snap-core/attr.cpp	/^int TAttrPair::GetSAttrDat(const TIntPr& Id, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TAttrPair
GetSAttrDat	snap-core/attr.cpp	/^int TAttrPair::GetSAttrDat(const TIntPr& Id, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TAttrPair
GetSAttrDat	snap-core/attr.cpp	/^int TAttrPair::GetSAttrDat(const TIntPr& Id, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TAttrPair
GetSAttrDat	snap-core/attr.cpp	/^int TAttrPair::GetSAttrDat(const TIntPr& Id, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TAttrPair
GetSAttrDatE	snap-core/network.cpp	/^int TDirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.cpp	/^int TDirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.cpp	/^int TDirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.cpp	/^int TDirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.cpp	/^int TDirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.cpp	/^int TDirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.cpp	/^int TNEANet::GetSAttrDatE(const TInt& EId, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.cpp	/^int TNEANet::GetSAttrDatE(const TInt& EId, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.cpp	/^int TNEANet::GetSAttrDatE(const TInt& EId, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.cpp	/^int TNEANet::GetSAttrDatE(const TInt& EId, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.cpp	/^int TNEANet::GetSAttrDatE(const TInt& EId, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.cpp	/^int TNEANet::GetSAttrDatE(const TInt& EId, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatE(const int& SrcNId, const int& DstNId, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TFlt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TFlt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TFlt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TInt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TInt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TInt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TStr& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TStr& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TInt& AttrId, TStr& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TFlt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TFlt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TFlt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TInt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TInt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TInt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TStr& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TStr& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatE	snap-core/network.h	/^  int GetSAttrDatE(const TEdgeI& EdgeI, const TStr& AttrName, TStr& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.cpp	/^int TDirNet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.cpp	/^int TDirNet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.cpp	/^int TDirNet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.cpp	/^int TDirNet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.cpp	/^int TDirNet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.cpp	/^int TDirNet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.cpp	/^int TNEANet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.cpp	/^int TNEANet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.cpp	/^int TNEANet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.cpp	/^int TNEANet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.cpp	/^int TNEANet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.cpp	/^int TNEANet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TFlt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TInt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatN(const TInt& NId, const TInt& AttrId, TStr& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TFlt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TInt& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.cpp	/^int TUndirNet::GetSAttrDatN(const TInt& NId, const TStr& AttrName, TStr& Val) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TFlt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TFlt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TFlt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TInt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TInt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TInt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TStr& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TStr& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TInt& AttrId, TStr& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TFlt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TFlt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TFlt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TInt& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TInt& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TInt& ValX) const {$/;"	f	class:TUndirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TStr& ValX) const {$/;"	f	class:TDirNet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TStr& ValX) const {$/;"	f	class:TNEANet
GetSAttrDatN	snap-core/network.h	/^  int GetSAttrDatN(const TNodeI& NodeI, const TStr& AttrName, TStr& ValX) const {$/;"	f	class:TUndirNet
GetSAttrId	snap-core/attr.cpp	/^int TAttr::GetSAttrId(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TAttr
GetSAttrId	snap-core/attr.cpp	/^int TAttrPair::GetSAttrId(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TAttrPair
GetSAttrIdE	snap-core/network.cpp	/^int TDirNet::GetSAttrIdE(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TDirNet
GetSAttrIdE	snap-core/network.cpp	/^int TNEANet::GetSAttrIdE(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TNEANet
GetSAttrIdE	snap-core/network.cpp	/^int TUndirNet::GetSAttrIdE(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TUndirNet
GetSAttrIdN	snap-core/network.cpp	/^int TDirNet::GetSAttrIdN(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TDirNet
GetSAttrIdN	snap-core/network.cpp	/^int TNEANet::GetSAttrIdN(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TNEANet
GetSAttrIdN	snap-core/network.cpp	/^int TUndirNet::GetSAttrIdN(const TStr& Name, TInt& AttrId, TAttrType& AttrType) const {$/;"	f	class:TUndirNet
GetSAttrName	snap-core/attr.cpp	/^int TAttr::GetSAttrName(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TAttr
GetSAttrName	snap-core/attr.cpp	/^int TAttrPair::GetSAttrName(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TAttrPair
GetSAttrNameE	snap-core/network.cpp	/^int TDirNet::GetSAttrNameE(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TDirNet
GetSAttrNameE	snap-core/network.cpp	/^int TNEANet::GetSAttrNameE(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TNEANet
GetSAttrNameE	snap-core/network.cpp	/^int TUndirNet::GetSAttrNameE(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TUndirNet
GetSAttrNameN	snap-core/network.cpp	/^int TDirNet::GetSAttrNameN(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TDirNet
GetSAttrNameN	snap-core/network.cpp	/^int TNEANet::GetSAttrNameN(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TNEANet
GetSAttrNameN	snap-core/network.cpp	/^int TUndirNet::GetSAttrNameN(const TInt& AttrId, TStr& Name, TAttrType& AttrType) const {$/;"	f	class:TUndirNet
GetSAttrV	snap-core/attr.cpp	/^void TAttr::GetSAttrV(const TInt& Id, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TAttr
GetSAttrV	snap-core/attr.cpp	/^void TAttrPair::GetSAttrV(const TIntPr& Id, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TAttrPair
GetSAttrVE	snap-core/network.cpp	/^int TDirNet::GetSAttrVE(const int& SrcNId, const int& DstNId, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TDirNet
GetSAttrVE	snap-core/network.cpp	/^int TNEANet::GetSAttrVE(const TInt& EId, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TNEANet
GetSAttrVE	snap-core/network.cpp	/^int TUndirNet::GetSAttrVE(const int& SrcNId, const int& DstNId, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TUndirNet
GetSAttrVE	snap-core/network.h	/^  int GetSAttrVE(const TEdgeI& EdgeI, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TDirNet
GetSAttrVE	snap-core/network.h	/^  int GetSAttrVE(const TEdgeI& EdgeI, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TNEANet
GetSAttrVE	snap-core/network.h	/^  int GetSAttrVE(const TEdgeI& EdgeI, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TUndirNet
GetSAttrVN	snap-core/network.cpp	/^int TDirNet::GetSAttrVN(const TInt& NId, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TDirNet
GetSAttrVN	snap-core/network.cpp	/^int TNEANet::GetSAttrVN(const TInt& NId, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TNEANet
GetSAttrVN	snap-core/network.cpp	/^int TUndirNet::GetSAttrVN(const TInt& NId, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TUndirNet
GetSAttrVN	snap-core/network.h	/^  int GetSAttrVN(const TNodeI& NodeI, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TDirNet
GetSAttrVN	snap-core/network.h	/^  int GetSAttrVN(const TNodeI& NodeI, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TNEANet
GetSAttrVN	snap-core/network.h	/^  int GetSAttrVN(const TNodeI& NodeI, const TAttrType AttrType, TAttrPrV& AttrV) const {$/;"	f	class:TUndirNet
GetSDev	glib-core/xmath.h	/^  double GetSDev() const {Assert(DefP&&UsableP); return SDev;}$/;"	f
GetSErr	glib-core/xmath.h	/^  double GetSErr() const {Assert(DefP&&UsableP); return SErr;}$/;"	f
GetSIn	glib-core/dt.h	/^  PSIn GetSIn() const {$/;"	f
GetSIn	glib-core/fl.cpp	/^PSIn TFRnd::GetSIn(const int& BfL, TCs& Cs){$/;"	f	class:TFRnd
GetSIn	glib-core/fl.cpp	/^PSIn TMOut::GetSIn(const bool& IsCut, const int& CutBfL){$/;"	f	class:TMOut
GetSIn	glib-core/http.cpp	/^PSIn THttpResp::GetSIn() const {$/;"	f	class:THttpResp
GetSIn	glib-core/lx.cpp	/^PSIn TILx::GetSIn(const char& SepCh){$/;"	f	class:TILx
GetSNm	glib-core/fl.cpp	/^TStr TSBase::GetSNm() const {$/;"	f	class:TSBase
GetSSym	glib-core/lx.cpp	/^TLxSym TLxSymStr::GetSSym(const TStr& Str){$/;"	f	class:TLxSymStr
GetSameDomLinks	snap-exp/memenet.cpp	/^int TMemeNet::GetSameDomLinks(const PMemeNetBs& NetBs) const {$/;"	f	class:TMemeNet
GetSbFlags	glib-core/unicode.h	/^	int GetSbFlags() const { return flags & ucfSbMask; }$/;"	f	class:TUniChInfo
GetSbFlags	glib-core/unicode.h	/^	int GetSbFlags(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return 0; else return h[i].GetSbFlags(); }$/;"	f	class:TUniChDb
GetSbFlagsStr	glib-core/unicode.h	/^	TStr GetSbFlagsStr() const { return GetSbFlagsStr(GetSbFlags()); }$/;"	f	class:TUniChInfo
GetSbFlagsStr	glib-core/unicode.h	/^	static TStr GetSbFlagsStr(const int flags) { return TStr("") + (flags & ucfSbSep ? "S" : "") +$/;"	f	class:TUniChInfo
GetScaleStr	glib-core/gnuplot.cpp	/^TStr TGnuPlot::GetScaleStr(const TGpScaleTy& ScaleTy) {$/;"	f	class:TGnuPlot
GetSccSzCnt	snap-core/cncom.h	/^void GetSccSzCnt(const PGraph& Graph, TIntPrV& SccSzCnt) {$/;"	f	namespace:TSnap
GetSccs	snap-core/cncom.h	/^void GetSccs(const PGraph& Graph, TCnComV& CnComV) {$/;"	f	namespace:TSnap
GetSchema	snap-core/table.cpp	/^void TTable::GetSchema(const TStr& InFNm, Schema& S, const char& Separator) {$/;"	f	class:TTable
GetSchema	snap-core/table.h	/^  Schema GetSchema() { return DenormalizeSchema(); }$/;"	f	class:TTable
GetSchemaColName	snap-core/table.h	/^  TStr GetSchemaColName(TInt Idx) const { return Sch[Idx].Val1; }$/;"	f	class:TTable
GetSchemaColName	snap-exp/alternativetable.h	/^  TStr GetSchemaColName(TInt Idx) const { return Sch[Idx].Val1; }$/;"	f	class:ExplicitStringTable
GetSchemaColName	snap-exp/alternativetable.h	/^  TStr GetSchemaColName(TInt Idx) const { return Sch[Idx].Val1; }$/;"	f	class:PhysicalOrderTable
GetSchemaColType	snap-core/table.h	/^  TAttrType GetSchemaColType(TInt Idx) const { return Sch[Idx].Val2; }$/;"	f	class:TTable
GetSchemaColType	snap-exp/alternativetable.h	/^  TAttrType GetSchemaColType(TInt Idx) const { return Sch[Idx].Val2; }$/;"	f	class:ExplicitStringTable
GetSchemaColType	snap-exp/alternativetable.h	/^  TAttrType GetSchemaColType(TInt Idx) const { return Sch[Idx].Val2; }$/;"	f	class:PhysicalOrderTable
GetScheme	glib-core/url.cpp	/^  TStr GetScheme(){TChA Str;$/;"	f	class:TUrlLx
GetScheme	glib-core/url.h	/^  TUrlScheme GetScheme(){return Scheme;}$/;"	f
GetSchemeCh	glib-core/url.cpp	/^  char GetSchemeCh(){EAssertR(IsSchemeCh(), ""); return GetCh();}$/;"	f	class:TUrlLx
GetSchemeNm	glib-core/url.h	/^  TStr GetSchemeNm() const {EAssert(IsOk()); return SchemeNm;}$/;"	f
GetScript	glib-core/unicode.h	/^	int GetScript(const TUniChInfo& ci) const { int s = ci.script; if (s < 0) s = scriptUnknown; return s; }$/;"	f	class:TUniChDb
GetScript	glib-core/unicode.h	/^	int GetScript(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return scriptUnknown; else return GetScript(h[i]); }$/;"	f	class:TUniChDb
GetScriptByName	glib-core/unicode.h	/^	int GetScriptByName(const TStr& scriptName) const { return scripts.GetKeyId(scriptName); }$/;"	f	class:TUniChDb
GetScriptId	glib-core/unicodestring.cpp	/^int TUStr::GetScriptId(const TStr& ScriptNm){$/;"	f	class:TUStr
GetScriptName	glib-core/unicode.h	/^	const TStr& GetScriptName(const int scriptId) const { return scripts.GetKey(scriptId); }$/;"	f	class:TUniChDb
GetScriptNameHiragana	glib-core/unicode.h	/^	static TStr GetScriptNameHiragana() { return "Hiragana"; }$/;"	f	class:TUniChDb
GetScriptNameKatakana	glib-core/unicode.h	/^	static TStr GetScriptNameKatakana() { return "Katakana"; }$/;"	f	class:TUniChDb
GetScriptNameUnknown	glib-core/unicode.h	/^	static TStr GetScriptNameUnknown() { return "Unknown"; }$/;"	f	class:TUniChDb
GetScriptNm	glib-core/unicodestring.cpp	/^TStr TUStr::GetScriptNm(const int& ScriptId){$/;"	f	class:TUStr
GetScriptsFn	glib-core/unicode.h	/^	static TStr GetScriptsFn() { return "Scripts.txt"; }$/;"	f	class:TUniChDb
GetSearch	glib-core/url.cpp	/^  TStr GetSearch(){return GetToCh('#');}$/;"	f	class:TUrlLx
GetSearchStr	glib-core/url.h	/^  TStr GetSearchStr() const {EAssert(IsOk()); return SearchStr;}$/;"	f
GetSec	glib-core/tm.h	/^    double GetSec() const { return double(GetTime()) \/ double(CLOCKS_PER_SEC); }$/;"	f	class:TTmStopWatch
GetSec	glib-core/tm.h	/^  int GetSec() const {return Sec;}$/;"	f	class:TTm
GetSec	snap-core/gstat.h	/^  int GetSec() const { return Time.GetSecN(); }$/;"	f	class:TGStat
GetSecHashCd	glib-core/bd.h	/^  int GetSecHashCd() const {return Addr->GetSecHashCd();}$/;"	f	class:TPt
GetSecHashCd	glib-core/blobbs.h	/^  int GetSecHashCd() const {return (abs(int(Addr))+int(Seg)*0x10);}$/;"	f
GetSecHashCd	glib-core/ds.h	/^  int GetSecHashCd() const { int hc = 0;$/;"	f	class:TTuple
GetSecHashCd	glib-core/ds.h	/^  int GetSecHashCd() const {return Key.GetSecHashCd();}$/;"	f	class:TKeyDat
GetSecHashCd	glib-core/ds.h	/^  int GetSecHashCd() const {return NodeV.GetSecHashCd();}$/;"	f	class:TTree
GetSecHashCd	glib-core/ds.h	/^  int GetSecHashCd() const {return TPairHashImpl::GetHashCd(TPairHashImpl::GetHashCd(Val2.GetSecHashCd(), Val3.GetSecHashCd()), TPairHashImpl::GetHashCd(Val4.GetSecHashCd(), Val1.GetSecHashCd())); }$/;"	f	class:TQuad
GetSecHashCd	glib-core/ds.h	/^  int GetSecHashCd() const {return TPairHashImpl::GetHashCd(TPairHashImpl::GetHashCd(Val2.GetSecHashCd(), Val3.GetSecHashCd()), Val1.GetSecHashCd()); }$/;"	f	class:TTriple
GetSecHashCd	glib-core/ds.h	/^  int GetSecHashCd() const {return TPairHashImpl::GetHashCd(Val2.GetSecHashCd(), Val1.GetSecHashCd()); }$/;"	f	class:TPair
GetSecHashCd	glib-core/ds.h	/^int TVec<TVal, TSizeTy>::GetSecHashCd() const {$/;"	f	class:TVec
GetSecHashCd	glib-core/dt.cpp	/^int TChA::GetSecHashCd() const {$/;"	f	class:TChA
GetSecHashCd	glib-core/dt.cpp	/^int TRStr::GetSecHashCd() const {$/;"	f	class:TRStr
GetSecHashCd	glib-core/dt.cpp	/^int TStrPool::GetSecHashCd(const char *CStr) {$/;"	f	class:TStrPool
GetSecHashCd	glib-core/hash.cpp	/^int TBigStrPool::GetSecHashCd(const char *CStr) {$/;"	f	class:TBigStrPool
GetSecHashCd	glib-core/hash.cpp	/^int TStrHashF_Md5::GetSecHashCd(const TStr& s) {$/;"	f	class:TStrHashF_Md5
GetSecHashCd	glib-core/hash.cpp	/^int TStrHashF_Md5::GetSecHashCd(const char *p) {$/;"	f	class:TStrHashF_Md5
GetSecHashCd	glib-core/hash.h	/^  int GetSecHashCd(const int& StrId) { Assert(StrId < GetStrs());$/;"	f
GetSecHashCd	glib-core/hash.h	/^ static inline int GetSecHashCd(const TKey& Key) { return Key.GetSecHashCd(); }$/;"	f	class:TDefaultHashFunc
GetSecHashCd	glib-core/md5.cpp	/^int TMd5Sig::GetSecHashCd() const {$/;"	f	class:TMd5Sig
GetSecHashCd	glib-core/tm.h	/^  int GetSecHashCd() const {return AbsSecs.GetSecHashCd();}$/;"	f	class:TSecTm
GetSecHashCd	glib-core/tm.h	/^  int GetSecHashCd() const {return Year*Month*Day;}$/;"	f	class:TTm
GetSecHashCd	glib-core/wch.h	/^  int GetSecHashCd() const {return MsVal;}$/;"	f	class:TWCh
GetSecHashCd	snap-adv/kronecker.h	/^  int GetSecHashCd() const { return SeedMtx.GetSecHashCd(); }$/;"	f	class:TKronMtx
GetSecHashCd	snap-adv/mag.h	/^  int GetSecHashCd() const { return SeedMtx.GetSecHashCd(); }$/;"	f	class:TMAGAffMtx
GetSecHashCd	snap-core/cncom.h	/^  int GetSecHashCd() const { return NIdV.GetSecHashCd(); }$/;"	f	class:TCnCom
GetSecHashCd	snap-core/ghash.h	/^  int GetSecHashCd() const { return abs(SigV.GetSecHashCd() ^ VariantId<<8); }$/;"	f	class:TGraphKey
GetSecHashCd	snap-core/table.h	/^	int GetSecHashCd() const{$/;"	f	class:GroupStmt
GetSecHashCd	snap-exp/trawling.h	/^ static inline int GetSecHashCd(const TIntV& Key) { $/;"	f	class:TIntVHashFunc
GetSecInt	glib-core/tm.h	/^    int GetSecInt() const { return TFlt::Round(GetSec()); }$/;"	f	class:TTmStopWatch
GetSecInt	glib-core/tm.h	/^  int GetSecInt() { return TFlt::Round(GetSecs()); }$/;"	f	class:TExeTm
GetSecN	glib-core/tm.cpp	/^int TSecTm::GetSecN() const {$/;"	f	class:TSecTm
GetSecTm	glib-core/tm.h	/^  TSecTm GetSecTm() const {$/;"	f	class:TTm
GetSecTmFromDateTimeInt	glib-core/tm.cpp	/^TSecTm TTm::GetSecTmFromDateTimeInt(const uint& DateTimeInt) {$/;"	f	class:TTm
GetSecs	glib-core/tm.h	/^  double GetSecs() const {return double(clock()-LastTick)\/double(CLOCKS_PER_SEC);}$/;"	f	class:TExeTm
GetSeed	glib-core/dt.h	/^  int GetSeed() const {return Seed;}$/;"	f	class:TRnd
GetSeed	snap-adv/ncp.h	/^    int GetSeed() const { return SeedNId; }$/;"	f	class:TLocClustStat::TNodeSweep
GetSeg	glib-core/blobbs.h	/^  uchar GetSeg() const {return Seg;}$/;"	f
GetSegFNm	glib-core/blobbs.cpp	/^TStr TMBlobBs::GetSegFNm($/;"	f	class:TMBlobBs
GetSentenceBreakPropertyFn	glib-core/unicode.h	/^	static TStr GetSentenceBreakPropertyFn() { return "SentenceBreakProperty.txt"; }$/;"	f	class:TUniChDb
GetSentenceBreakTestFn	glib-core/unicode.h	/^	static TStr GetSentenceBreakTestFn() { return "SentenceBreakTest.txt"; }$/;"	f	class:TUniChDb
GetSeriesPlotStr	glib-core/gnuplot.cpp	/^TStr TGnuPlot::GetSeriesPlotStr(const int& SeriesId) {$/;"	f	class:TGnuPlot
GetSeriesTyStr	glib-core/gnuplot.cpp	/^TStr TGnuPlot::GetSeriesTyStr(const TGpSeriesTy& SeriesTy) {$/;"	f	class:TGnuPlot
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2, const TKey& Key3){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2, const TKey& Key3, const TKey& Key4){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2, const TKey& Key3, const TKey& Key4, const TKey& Key5){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2, const TKey& Key3, const TKey& Key4, const TKey& Key5, const TKey& Key6){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2, const TKey& Key3, const TKey& Key4, const TKey& Key5, const TKey& Key6, const TKey& Key7){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2, const TKey& Key3, const TKey& Key4, const TKey& Key5, const TKey& Key6, const TKey& Key7, const TKey& Key8){$/;"	f	class:THashSet
GetSet	glib-core/shash.h	/^  static THashSet<TKey> GetSet(const TKey& Key1, const TKey& Key2, const TKey& Key3, const TKey& Key4, const TKey& Key5, const TKey& Key6, const TKey& Key7, const TKey& Key8, const TKey& Key9){$/;"	f	class:THashSet
GetSetKey	glib-core/shash.h	/^  TSetKey& GetSetKey(const int& KeyId) {$/;"	f	class:THashSet
GetSetKey	glib-core/shash.h	/^  const TSetKey& GetSetKey(const int& KeyId) const {$/;"	f	class:THashSet
GetShorStr	snap-core/util.cpp	/^TChA TStrUtil::GetShorStr(const TChA& LongStr, const int MaxLen) {$/;"	f	class:TStrUtil
GetShortPath	snap-core/bfsdfs.h	/^int GetShortPath(const PGraph& Graph, const int& SrcNId, TIntH& NIdToDistH, const bool& IsDir, const int& MaxDist) {$/;"	f	namespace:TSnap
GetShortPath	snap-core/bfsdfs.h	/^int GetShortPath(const PGraph& Graph, const int& SrcNId, const int& DstNId, const bool& IsDir) {$/;"	f	namespace:TSnap
GetShortestDistances	snap-core/bfsdfs.h	/^int GetShortestDistances(const PGraph& Graph, const int& StartNId, const bool& FollowOut, const bool& FollowIn, TIntV& ShortestDists) {$/;"	f	namespace:TSnap
GetShortestDistancesMP2	snap-core/bfsdfs.h	/^int GetShortestDistancesMP2(const PGraph& Graph, const int& StartNId, const bool& FollowOut, const bool& FollowIn, TIntV& ShortestDists) {$/;"	f	namespace:TSnap
GetSigLen	snap-core/ghash.h	/^  int GetSigLen() const { return SigV.Len(); }$/;"	f	class:TGraphKey
GetSigMem	glib-core/md5.cpp	/^void TMd5::GetSigMem(TMem& Mem) const {$/;"	f	class:TMd5
GetSigStr	glib-core/md5.cpp	/^TStr TMd5::GetSigStr() const {$/;"	f	class:TMd5
GetSigmoidAB	glib-core/linalg.h	/^    void GetSigmoidAB(double& A_, double& B_) { A_=A; B_=B; }$/;"	f	class:TSigmoid
GetSignNet	snap-exp/wikinet.cpp	/^PSignNet TWikiTalkNet::GetSignNet(const int& VoteSign, const bool& VoteOnly, const bool& TalkOnly) const {$/;"	f	class:TWikiTalkNet
GetSignSubNet	snap-exp/signnet.h	/^  PSignNet GetSignSubNet(const int& Sign) const {$/;"	f	class:TSignNet
GetSimpleCaseConverted	glib-core/unicode.h	/^void TUniChDb::GetSimpleCaseConverted(const TSrcVec& src, size_t srcIdx, const size_t srcCount,$/;"	f	class:TUniChDb
GetSimpleLowerCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetSimpleLowerCase(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true) const { GetSimpleLowerCase(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TUniChDb
GetSimpleLowerCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetSimpleLowerCase(const TSrcVec& src, size_t srcIdx, const size_t srcCount, TVec<TDestCh>& dest, const bool clrDest = true) const { GetSimpleCaseConverted(src, srcIdx, srcCount, dest, clrDest, ccLower); }$/;"	f	class:TUniChDb
GetSimpleLowerCase	glib-core/unicode.h	/^	void GetSimpleLowerCase(const TIntV& src, TIntV& dest) const { ucd.GetSimpleLowerCase(src, dest, true); }$/;"	f	class:TUnicode
GetSimpleTitleCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetSimpleTitleCase(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true) const { GetSimpleTitleCase(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TUniChDb
GetSimpleTitleCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetSimpleTitleCase(const TSrcVec& src, size_t srcIdx, const size_t srcCount, TVec<TDestCh>& dest, const bool clrDest = true) const { GetSimpleCaseConverted(src, srcIdx, srcCount, dest, clrDest, ccTitle); }$/;"	f	class:TUniChDb
GetSimpleTitleCase	glib-core/unicode.h	/^	void GetSimpleTitleCase(const TIntV& src, TIntV& dest) const { ucd.GetSimpleTitleCase(src, dest, true); }$/;"	f	class:TUnicode
GetSimpleUpperCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetSimpleUpperCase(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true) const { GetSimpleUpperCase(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TUniChDb
GetSimpleUpperCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetSimpleUpperCase(const TSrcVec& src, size_t srcIdx, const size_t srcCount, TVec<TDestCh>& dest, const bool clrDest = true) const { GetSimpleCaseConverted(src, srcIdx, srcCount, dest, clrDest, ccUpper); }$/;"	f	class:TUniChDb
GetSimpleUpperCase	glib-core/unicode.h	/^	void GetSimpleUpperCase(const TIntV& src, TIntV& dest) const { ucd.GetSimpleUpperCase(src, dest, true); }$/;"	f	class:TUnicode
GetSingleNode	test/test-alg.cpp	/^  PNGraph GetSingleNode() {$/;"	f	class:TreeTest
GetSize	glib-core/fl.cpp	/^int TFInOut::GetSize() const {$/;"	f	class:TFInOut
GetSize	glib-core/fl.cpp	/^uint64 TFile::GetSize(const TStr& FNm) {$/;"	f	class:TFile
GetSmallGraph	snap-core/graph.cpp	/^PBPGraph TBPGraph::GetSmallGraph() {$/;"	f	class:TBPGraph
GetSmallGraph	snap-core/graph.cpp	/^PNEGraph TNEGraph::GetSmallGraph() {$/;"	f	class:TNEGraph
GetSmallGraph	snap-core/graph.cpp	/^PNGraph TNGraph::GetSmallGraph() {$/;"	f	class:TNGraph
GetSmallGraph	snap-core/graph.cpp	/^PUNGraph TUNGraph::GetSmallGraph() {$/;"	f	class:TUNGraph
GetSmallGraph	snap-core/graphmp.cpp	/^PNGraphMP TNGraphMP::GetSmallGraph() {$/;"	f	class:TNGraphMP
GetSmallGraph	snap-core/network.cpp	/^PDirNet TDirNet::GetSmallGraph() {$/;"	f	class:TDirNet
GetSmallGraph	snap-core/network.cpp	/^PNEANet TNEANet::GetSmallGraph() {$/;"	f	class:TNEANet
GetSmallGraph	snap-core/network.cpp	/^PUndirNet TUndirNet::GetSmallGraph() {$/;"	f	class:TUndirNet
GetSmallGraph	tutorials/demo-TDirNet.cpp	/^void GetSmallGraph() {$/;"	f
GetSmallGraph	tutorials/demo-TNEANet.cpp	/^void GetSmallGraph() {$/;"	f
GetSmallGraph	tutorials/demo-TNEGraph.cpp	/^void GetSmallGraph() {$/;"	f
GetSmallGraph	tutorials/demo-TNGraph.cpp	/^void GetSmallGraph() {$/;"	f
GetSmallGraph	tutorials/demo-TUNGraph.cpp	/^void GetSmallGraph() {$/;"	f
GetSmallGraph	tutorials/demo-TUndirNet.cpp	/^void GetSmallGraph() {$/;"	f
GetSmallNet	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::GetSmallNet() {$/;"	f	class:TTimeNENet
GetSmallNet	snap-exp/signnet.cpp	/^PSignNet TSignNet::GetSmallNet() {$/;"	f	class:TSignNet
GetSmoothFqOt	snap-exp/memes.cpp	/^void TQuote::GetSmoothFqOt(TTmFltPrV& FqOtV, const TTmUnit& TmUnit, const int& WndSz, const double& Smooth, const TSecTm& BegTm, const TSecTm& EndTm) const {$/;"	f	class:TQuote
GetSmoothFqOt	snap-exp/memes.cpp	/^void TQuote::GetSmoothFqOt(TTmFltPrV& SmoothFqOtV, const TTmFltPrV& RawFqOtV, const TTmUnit& TmUnit, const int& WndSz, const double& Smooth, const TSecTm& BegTm, const TSecTm& EndTm) {$/;"	f	class:TQuote
GetSngVals	snap-core/gsvd.cpp	/^void GetSngVals(const PNGraph& Graph, const int& SngVals, TFltV& SngValV) {$/;"	f	namespace:TSnap
GetSngVec	snap-core/gsvd.cpp	/^void GetSngVec(const PNGraph& Graph, TFltV& LeftSV, TFltV& RightSV) {$/;"	f	namespace:TSnap
GetSngVec	snap-core/gsvd.cpp	/^void GetSngVec(const PNGraph& Graph, const int& SngVecs, TFltV& SngValV, TVec<TFltV>& LeftSV, TVec<TFltV>& RightSV) {$/;"	f	namespace:TSnap
GetSource	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    int GetSource() const { return Source; }$/;"	f	class:TMatchingMachine::TMaMaEdge
GetSource	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    int GetSource() const { return Source; }$/;"	f	class:TMatchingMachine::TMaMaEdge
GetSpaceStr	glib-core/dt.cpp	/^TStr TStr::GetSpaceStr(const int& Spaces){$/;"	f	class:TStr
GetSpec	glib-core/http.cpp	/^TStr THttpLx::GetSpec(const TStr& ExpectStr){$/;"	f	class:THttpLx
GetSpecialCasingFn	glib-core/unicode.h	/^	static TStr GetSpecialCasingFn() { return "SpecialCasing.txt"; }$/;"	f	class:TUniChDb
GetSphereDev	snap-core/ggen.cpp	/^void GetSphereDev(const int& Dim, TRnd& Rnd, TFltV& ValV) {$/;"	f	namespace:TSnap::TSnapDetail
GetSqThetaLL	snap-adv/mag.cpp	/^const double TMAGFitBern::GetSqThetaLL(const int& NId1, const int& NId2, const int& AId) const {$/;"	f	class:TMAGFitBern
GetSrcCol	snap-core/table.h	/^	TStr GetSrcCol() const { return SrcCol; }$/;"	f	class:TTable
GetSrcModeId	snap-core/mmnet.h	/^    int GetSrcModeId() const { return Graph->GetMode1(); }$/;"	f	class:TCrossNet::TCrossEdgeI
GetSrcNDat	snap-core/bignet.h	/^    const TNodeData& GetSrcNDat() const { return CurNode.GetNDat(); }$/;"	f	class:TBigNet::TEdgeI
GetSrcNDat	snap-core/network.h	/^    TNodeData& GetSrcNDat() { return CurNode(); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetSrcNDat	snap-core/network.h	/^    TNodeData& GetSrcNDat() { return Net->GetNDat(GetSrcNId()); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetSrcNDat	snap-core/network.h	/^    const TNodeData& GetSrcNDat() const { return CurNode(); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetSrcNDat	snap-core/network.h	/^    const TNodeData& GetSrcNDat() const { return CurNode.GetDat(); }$/;"	f	class:TNodeNet::TEdgeI
GetSrcNDat	snap-core/network.h	/^    const TNodeData& GetSrcNDat() const { return Net->GetNDat(GetSrcNId()); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetSrcNId	snap-core/bignet.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TBigNet::TEdgeI
GetSrcNId	snap-core/graph.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TBPGraph::TEdgeI
GetSrcNId	snap-core/graph.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TNGraph::TEdgeI
GetSrcNId	snap-core/graph.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TUNGraph::TEdgeI
GetSrcNId	snap-core/graph.h	/^    int GetSrcNId() const { return EdgeHI.GetDat().GetSrcNId(); }$/;"	f	class:TNEGraph::TEdgeI
GetSrcNId	snap-core/graph.h	/^    int GetSrcNId() const { return SrcNId; }$/;"	f	class:TNEGraph::TEdge
GetSrcNId	snap-core/graphmp.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TNGraphMP::TEdgeI
GetSrcNId	snap-core/mmnet.h	/^    int GetSrcNId() const { return CrossHI.GetDat().GetSrcNId(); }$/;"	f	class:TCrossNet::TCrossEdgeI
GetSrcNId	snap-core/mmnet.h	/^    int GetSrcNId() const { return SrcNId; }$/;"	f	class:TCrossNet::TCrossEdge
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TDirNet::TEdgeI
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TNodeEDatNet::TEdgeI
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TNodeNet::TEdgeI
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TUndirNet::TEdgeI
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return EdgeHI.GetDat().GetSrcNId(); }$/;"	f	class:TNEANet::TEdgeI
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return EdgeHI.GetDat().GetSrcNId(); }$/;"	f	class:TNodeEdgeNet::TEdgeI
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return SrcNId; }$/;"	f	class:TNEANet::TEdge
GetSrcNId	snap-core/network.h	/^    int GetSrcNId() const { return SrcNId; }$/;"	f	class:TNodeEdgeNet::TEdge
GetSrcNId	snap-core/networkmp.h	/^    int GetSrcNId() const { return EdgeHI.GetDat().GetSrcNId(); }$/;"	f	class:TNEANetMP::TEdgeI
GetSrcNId	snap-core/networkmp.h	/^    int GetSrcNId() const { return SrcNId; }$/;"	f	class:TNEANetMP::TEdge
GetSrcNId	snap-exp/graphmp-exp.h	/^    int GetSrcNId() const { return CurNode.GetId(); }$/;"	f	class:TUNGraphMP::TEdgeI
GetSrcNId	snap-exp/mmgraph-exp.h	/^    int GetSrcNId() const { return EdgeHI.GetDat().GetSrcNId(); }$/;"	f	class:TMNet::TEdgeI
GetSrcNId	snap-exp/mmgraph-exp.h	/^    int GetSrcNId() const { return SrcNId; }$/;"	f	class:TMNet::TEdge
GetSrcNodeFltAttrV	snap-core/table.cpp	/^TStrV TTable::GetSrcNodeFltAttrV() const {$/;"	f	class:TTable
GetSrcNodeIntAttrV	snap-core/table.cpp	/^TStrV TTable::GetSrcNodeIntAttrV() const {$/;"	f	class:TTable
GetSrcNodeStrAttrV	snap-core/table.cpp	/^TStrV TTable::GetSrcNodeStrAttrV() const {$/;"	f	class:TTable
GetSsFmtFromStr	glib-core/ss.cpp	/^TSsFmt TSs::GetSsFmtFromStr(const TStr& SsFmtNm){$/;"	f	class:TSs
GetSsFmtNmVStr	glib-core/ss.cpp	/^TStr TSs::GetSsFmtNmVStr(){$/;"	f	class:TSs
GetStableSet	snap-exp/signnet.cpp	/^void THopfield::GetStableSet(const int& Tresh, TVec<TIntV>& PartNIdV) {$/;"	f	class:THopfield
GetStalVal	glib-core/xml.cpp	/^TStr TXmlLx::GetStalVal(){$/;"	f	class:TXmlLx
GetStars	snap-exp/wikinet.h	/^  int GetStars() const { return BarnStars; }$/;"	f	class:TWikiUsr
GetStartPosV	glib-core/ssmp.cpp	/^TVec<uint64> TSsParserMP::GetStartPosV(uint64 Lb, uint64 Ub) const {$/;"	f	class:TSsParserMP
GetStarterLowerCaseStr	glib-core/unicodestring.cpp	/^TStr TUStr::GetStarterLowerCaseStr() const {$/;"	f	class:TUStr
GetStarterStr	glib-core/unicodestring.cpp	/^TStr TUStr::GetStarterStr() const {$/;"	f	class:TUStr
GetStatus	snap-exp/signnet.cpp	/^double TSignMicroEvol::GetStatus(const PSignNet& Net, const int& NId) {$/;"	f	class:TSignMicroEvol
GetStatusDelta	snap-exp/signnet.cpp	/^double TSignMicroEvol::GetStatusDelta(const PSignNet& Net, const int& NId1, const int& NId2) {$/;"	f	class:TSignMicroEvol
GetStdName	snap-core/util.cpp	/^TStr TStrUtil::GetStdName(TStr AuthorName) {$/;"	f	class:TStrUtil
GetStdNameV	snap-core/util.cpp	/^void TStrUtil::GetStdNameV(TStr AuthorNames, TStrV& StdNameV) {$/;"	f	class:TStrUtil
GetStepSizeByLineSearch	snap-adv/agm.cpp	/^double TLogRegFit::GetStepSizeByLineSearch(const TFltV& DeltaV, const TFltV& GradV, const double& Alpha, const double& Beta) {$/;"	f	class:TLogRegFit
GetStepSizeByLineSearch	snap-adv/agmattr.cpp	/^double TCesna::GetStepSizeByLineSearch(const int UID, const TIntFltH& DeltaV, const TIntFltH& GradV, const double& Alpha, const double& Beta, const int MaxIter) {$/;"	f	class:TCesna
GetStepSizeByLineSearch	snap-adv/agmdirected.cpp	/^double TCoda::GetStepSizeByLineSearch(const bool IsRow, const int UID, const TIntFltH& DeltaV, const TIntFltH& GradV, const double& Alpha, const double& Beta, const int MaxIter) {$/;"	f	class:TCoda
GetStepSizeByLineSearch	snap-adv/agmfast.cpp	/^double TAGMFast::GetStepSizeByLineSearch(const int UID, const TIntFltH& DeltaV, const TIntFltH& GradV, const double& Alpha, const double& Beta, const int MaxIter) {$/;"	f	class:TAGMFast
GetStepSizeByLineSearchForLambda	snap-adv/agmfit.cpp	/^double TAGMFit::GetStepSizeByLineSearchForLambda(const TFltV& DeltaV, const TFltV& GradV, const double& Alpha, const double& Beta) {$/;"	f	class:TAGMFit
GetStepSizeByLineSearchForWK	snap-adv/agmattr.h	/^  double GetStepSizeByLineSearchForWK(const int K, const TFltV& DeltaV, const TFltV& GradV, const double& Alpha, const double& Beta, const int MaxIter = 10) {$/;"	f	class:TCesna
GetStr	glib-core/bits.cpp	/^TStr TB32Set::GetStr() const {$/;"	f	class:TB32Set
GetStr	glib-core/bits.cpp	/^TStr TB8Set::GetStr() const {$/;"	f	class:TB8Set
GetStr	glib-core/blobbs.cpp	/^TStr TBlobPt::GetStr() const {$/;"	f	class:TBlobPt
GetStr	glib-core/ds.h	/^  TStr GetStr() const { TChA ValsStr;$/;"	f	class:TTuple
GetStr	glib-core/ds.h	/^  TStr GetStr() const {$/;"	f	class:TPair
GetStr	glib-core/dt.cpp	/^TStr TFlt::GetStr(const double& Val, const char* FmtStr){$/;"	f	class:TFlt
GetStr	glib-core/dt.cpp	/^TStr TFlt::GetStr(const double& Val, const int& Width, const int& Prec){$/;"	f	class:TFlt
GetStr	glib-core/dt.cpp	/^TStr TFltRect::GetStr() const {$/;"	f	class:TFltRect
GetStr	glib-core/dt.cpp	/^TStr TInt::GetStr(const int& Val, const char* FmtStr){$/;"	f	class:TInt
GetStr	glib-core/dt.cpp	/^TStr TLFlt::GetStr(const ldouble& Val, const char* FmtStr){$/;"	f	class:TLFlt
GetStr	glib-core/dt.cpp	/^TStr TLFlt::GetStr(const ldouble& Val, const int& Width, const int& Prec){$/;"	f	class:TLFlt
GetStr	glib-core/dt.cpp	/^TStr TStr::GetStr(const TStr& Str, const char* FmtStr){$/;"	f	class:TStr
GetStr	glib-core/dt.cpp	/^TStr TStr::GetStr(const TStrV& StrV, const TStr& DelimiterStr){$/;"	f	class:TStr
GetStr	glib-core/dt.cpp	/^TStr TStrPool64::GetStr(const uint64& StrId) const {$/;"	f	class:TStrPool64
GetStr	glib-core/dt.cpp	/^TStr TUInt::GetStr(const uint& Val, const char* FmtStr){$/;"	f	class:TUInt
GetStr	glib-core/fl.cpp	/^TStr TFRnd::GetStr(const int& StrLen){$/;"	f	class:TFRnd
GetStr	glib-core/fl.cpp	/^TStr TFRnd::GetStr(const int& StrLen, bool& IsOk){$/;"	f	class:TFRnd
GetStr	glib-core/hash.h	/^  TStr GetStr(const int& StrId) const { Assert(StrId < GetStrs());$/;"	f
GetStr	glib-core/http.cpp	/^TStr THttpRq::GetStr() const {$/;"	f	class:THttpRq
GetStr	glib-core/json.h	/^  TStr GetStr() const {EAssert(IsStr()); return Str;}$/;"	f
GetStr	glib-core/md5.cpp	/^TStr TMd5Sig::GetStr() const {$/;"	f	class:TMd5Sig
GetStr	glib-core/os.cpp	/^TStr TSysMemStat::GetStr(){$/;"	f	class:TSysMemStat
GetStr	glib-core/tm.cpp	/^TStr TSecTm::GetStr(const TLoc& Loc) const {$/;"	f	class:TSecTm
GetStr	glib-core/tm.cpp	/^TStr TSecTm::GetStr(const TTmUnit& TmUnit) const {$/;"	f	class:TSecTm
GetStr	glib-core/tm.cpp	/^TStr TTm::GetStr(const bool& MSecP) const {$/;"	f	class:TTm
GetStr	glib-core/tm.h	/^  const char* GetStr() const {return GetTmStr();}$/;"	f	class:TExeTm
GetStr	glib-core/unicodestring.cpp	/^TStr TUStr::GetStr() const {$/;"	f	class:TUStr
GetStr	glib-core/url.cpp	/^  TStr GetStr(const TStr& Str){$/;"	f	class:TUrlLx
GetStr	glib-core/url.cpp	/^  const char* GetStr(const char *Str){$/;"	f	class:TUrlLx
GetStr	glib-core/wch.cpp	/^TStr TWChA::GetStr() const {$/;"	f	class:TWChA
GetStr	glib-core/xmath.cpp	/^TStr TMom::GetStr($/;"	f	class:TMom
GetStr	snap-core/table.h	/^  TStr GetStr() const { return StrVal; }$/;"	f	class:TPrimitive
GetStr	snap-core/table.h	/^  TStr GetStr(const TInt& KeyId) const {$/;"	f	class:TTable
GetStr	snap-core/table.h	/^  TStr GetStr(const TInt& KeyId) const {$/;"	f	class:TTableContext
GetStr	snap-exp/imdbnet.h	/^  TStr GetStr(const int& StrId) const { IAssert(! StrIdH.GetPool().Empty()); return StrIdH.GetKey(StrId); }$/;"	f	class:TImdbNet
GetStr	snap-exp/memenet.h	/^  TStr GetStr() const { return QtStr; }$/;"	f	class:TMemeNet
GetStr	snap-exp/memes.h	/^  TStr GetStr() const { return QtStr; }$/;"	f	class:TQuote
GetStr	snap-exp/memes.h	/^  const char *GetStr(const int& StrId) const { return StrQtIdH.GetKey(StrId); }$/;"	f	class:TQuoteBs
GetStr	snap-exp/sir.cpp	/^TStr TSir2Model::GetStr() const { $/;"	f	class:TSir2Model
GetStr	snap-exp/sir.cpp	/^TStr TSirSR2Model::GetStr() const { $/;"	f	class:TSirSR2Model
GetStr	snap-exp/sir.h	/^  TStr GetStr() const { return TStr::Fmt("N0:%g  I0:%g  T0:%d  Beta:%g  Gamma:%g. Err: %f", N0, I0, T0, Beta, Gamma, GetErr()); }$/;"	f	class:TSirModel
GetStr	snap-exp/sir.h	/^  virtual TStr GetStr() const { return TStr(); }$/;"	f	class:TEpidemModel
GetStr2	glib-core/tm.h	/^  TStr GetStr2() const {return GetTmStr();}$/;"	f	class:TExeTm
GetStrArgVal	glib-core/xml.cpp	/^TStr TXmlTok::GetStrArgVal(const TStr& ArgNm, const TStr& DfVal) const {$/;"	f	class:TXmlTok
GetStrAttr	snap-core/table.cpp	/^TStr TRowIterator::GetStrAttr(TInt ColIdx) const {$/;"	f	class:TRowIterator
GetStrAttr	snap-core/table.cpp	/^TStr TRowIterator::GetStrAttr(const TStr& Col) const {$/;"	f	class:TRowIterator
GetStrAttr	snap-exp/alternativetable.cpp	/^TStr ExplicitStringRowIterator::GetStrAttr(TInt ColIdx) const{$/;"	f	class:ExplicitStringRowIterator
GetStrAttr	snap-exp/alternativetable.cpp	/^TStr ExplicitStringRowIterator::GetStrAttr(const TStr& Col) const {$/;"	f	class:ExplicitStringRowIterator
GetStrAttrDatE	snap-core/mmnet.cpp	/^TStr TCrossNet::GetStrAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TCrossNet
GetStrAttrDatE	snap-core/mmnet.h	/^  TStr GetStrAttrDatE(const TCrossEdgeI& EdgeI, const TStr& attr) { return GetStrAttrDatE(EdgeI.GetId(), attr); }$/;"	f	class:TCrossNet
GetStrAttrDatE	snap-core/network.cpp	/^TStr TNEANet::GetStrAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANet
GetStrAttrDatE	snap-core/network.h	/^  TStr GetStrAttrDatE(const TEdgeI& EdgeI, const TStr& attr) { return GetStrAttrDatE(EdgeI.GetId(), attr); }$/;"	f	class:TNEANet
GetStrAttrDatE	snap-core/networkmp.cpp	/^TStr TNEANetMP::GetStrAttrDatE(const int& EId, const TStr& attr) {$/;"	f	class:TNEANetMP
GetStrAttrDatE	snap-core/networkmp.h	/^  TStr GetStrAttrDatE(const TEdgeI& EdgeId, const TStr& attr) { return GetStrAttrDatE(EdgeId.GetId(), attr); }$/;"	f	class:TNEANetMP
GetStrAttrDatN	snap-core/network.cpp	/^TStr TNEANet::GetStrAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANet
GetStrAttrDatN	snap-core/network.h	/^  TStr GetStrAttrDatN(const TNodeI& NodeI, const TStr& attr) { return GetStrAttrDatN(NodeI.GetId(), attr); }$/;"	f	class:TNEANet
GetStrAttrDatN	snap-core/networkmp.cpp	/^TStr TNEANetMP::GetStrAttrDatN(const int& NId, const TStr& attr) {$/;"	f	class:TNEANetMP
GetStrAttrDatN	snap-core/networkmp.h	/^  TStr GetStrAttrDatN(const TNodeI& NodeId, const TStr& attr) { return GetStrAttrDatN(NodeId.GetId(), attr); }$/;"	f	class:TNEANetMP
GetStrAttrDefaultE	snap-core/mmnet.h	/^  TStr GetStrAttrDefaultE(const TStr& attribute) const { return StrDefaultsE.IsKey(attribute) ? StrDefaultsE.GetDat(attribute) : (TStr) TStr::GetNullStr(); }$/;"	f	class:TCrossNet
GetStrAttrDefaultE	snap-core/network.h	/^  TStr GetStrAttrDefaultE(const TStr& attribute) const { return StrDefaultsE.IsKey(attribute) ? StrDefaultsE.GetDat(attribute) : (TStr) TStr::GetNullStr(); }$/;"	f	class:TNEANet
GetStrAttrDefaultE	snap-core/networkmp.h	/^  TStr GetStrAttrDefaultE(const TStr& attribute) const { return StrDefaultsE.IsKey(attribute) ? StrDefaultsE.GetDat(attribute) : (TStr) TStr::GetNullStr(); }$/;"	f	class:TNEANetMP
GetStrAttrDefaultN	snap-core/network.h	/^  TStr GetStrAttrDefaultN(const TStr& attribute) const { return StrDefaultsN.IsKey(attribute) ? StrDefaultsN.GetDat(attribute) : (TStr) TStr::GetNullStr(); }$/;"	f	class:TNEANet
GetStrAttrDefaultN	snap-core/networkmp.h	/^  TStr GetStrAttrDefaultN(const TStr& attribute) const { return StrDefaultsN.IsKey(attribute) ? StrDefaultsN.GetDat(attribute) : (TStr) TStr::GetNullStr(); }$/;"	f	class:TNEANetMP
GetStrAttrIndDatE	snap-core/network.cpp	/^TStr TNEANet::GetStrAttrIndDatE(const int& EId, const int& index) {$/;"	f	class:TNEANet
GetStrAttrIndDatE	snap-core/network.h	/^  TStr GetStrAttrIndDatE(const TEdgeI& EdgeI, const int& index) { return GetStrAttrIndDatE(EdgeI.GetId(), index); }$/;"	f	class:TNEANet
GetStrAttrIndDatN	snap-core/network.cpp	/^TStr TNEANet::GetStrAttrIndDatN(const int& NId, const int& index) {$/;"	f	class:TNEANet
GetStrAttrIndDatN	snap-core/network.h	/^  TStr GetStrAttrIndDatN(const TNodeI& NodeI, const int& index) { return GetStrAttrIndDatN(NodeI.GetId(), index); }$/;"	f	class:TNEANet
GetStrAttrNames	snap-core/network.h	/^    void GetStrAttrNames(TStrV& Names) const { Graph->StrAttrNameEI(GetId(), Names); }$/;"	f	class:TNEANet::TEdgeI
GetStrAttrNames	snap-core/network.h	/^    void GetStrAttrNames(TStrV& Names) const { Graph->StrAttrNameNI(GetId(), Names); }$/;"	f	class:TNEANet::TNodeI
GetStrAttrNames	snap-core/networkmp.h	/^    void GetStrAttrNames(TStrV& Names) const { Graph->StrAttrNameEI(GetId(), Names); }$/;"	f	class:TNEANetMP::TEdgeI
GetStrAttrNames	snap-core/networkmp.h	/^    void GetStrAttrNames(TStrV& Names) const { Graph->StrAttrNameNI(GetId(), Names); }$/;"	f	class:TNEANetMP::TNodeI
GetStrAttrVal	snap-core/network.h	/^    void GetStrAttrVal(TStrV& Val) const { Graph->StrAttrValueEI(GetId(), Val); }$/;"	f	class:TNEANet::TEdgeI
GetStrAttrVal	snap-core/network.h	/^    void GetStrAttrVal(TStrV& Val) const { Graph->StrAttrValueNI(GetId(), Val); }$/;"	f	class:TNEANet::TNodeI
GetStrAttrVal	snap-core/networkmp.h	/^    void GetStrAttrVal(TStrV& Val) const { Graph->StrAttrValueEI(GetId(), Val); }$/;"	f	class:TNEANetMP::TEdgeI
GetStrAttrVal	snap-core/networkmp.h	/^    void GetStrAttrVal(TStrV& Val) const { Graph->StrAttrValueNI(GetId(), Val); }$/;"	f	class:TNEANetMP::TNodeI
GetStrByNm	glib-core/xmath.cpp	/^TStr TMom::GetStrByNm(const TStr& MomNm, char* FmtStr) const {$/;"	f	class:TMom
GetStrFromFAccess	glib-core/fl.cpp	/^TStr TFRnd::GetStrFromFAccess(const TFAccess& FAccess){$/;"	f	class:TFRnd
GetStrFromIpUInt	glib-core/dt.cpp	/^TStr TUInt::GetStrFromIpUInt(const uint& Ip) {$/;"	f	class:TUInt
GetStrFromOffset	glib-core/hash.h	/^  TStr GetStrFromOffset(const TSize& Offset) const { Assert(Offset < BfL);$/;"	f
GetStrFromSsFmt	glib-core/ss.cpp	/^TStr TSs::GetStrFromSsFmt(const TSsFmt& SsFmt){$/;"	f	class:TSs
GetStrFromVal	glib-core/json.cpp	/^TStr TJsonVal::GetStrFromVal(const PJsonVal& Val){$/;"	f	class:TJsonVal
GetStrId	snap-exp/imdbnet.h	/^  int GetStrId(const TStr& Str) const { return StrIdH.GetKeyId(Str); }$/;"	f	class:TImdbNet
GetStrId	snap-exp/memes.h	/^  int GetStrId(const TChA& Str) const { return StrQtIdH.GetKeyId(Str.CStr()); }$/;"	f	class:TQuoteBs
GetStrId	snap-exp/memes.h	/^  int GetStrId(const char* CStr) const { return StrQtIdH.GetKeyId(CStr); }$/;"	f	class:TQuoteBs
GetStrInTag	glib-core/html.cpp	/^TStr THtmlLx::GetStrInTag(const TStr& TagNm, const bool& TxtOnlyP){$/;"	f	class:THtmlLx
GetStrMapById	snap-core/table.cpp	/^TInt TRowIterator::GetStrMapById(TInt ColIdx) const {$/;"	f	class:TRowIterator
GetStrMapById	snap-core/table.h	/^  TInt GetStrMapById(TInt ColIdx, TInt RowIdx) const {$/;"	f	class:TTable
GetStrMapByName	snap-core/table.cpp	/^TInt TRowIterator::GetStrMapByName(const TStr& Col) const {$/;"	f	class:TRowIterator
GetStrMapByName	snap-core/table.h	/^  TInt GetStrMapByName(const TStr& ColName, TInt RowIdx) const {$/;"	f	class:TTable
GetStrRowIdxByMap	snap-core/table.cpp	/^TIntV TTable::GetStrRowIdxByMap(const TStr& ColName, const TInt& Map) const {$/;"	f	class:TTable
GetStrToBTag	glib-core/html.cpp	/^TStr THtmlLx::GetStrToBTag(const TStr& TagNm, const TStr& ArgNm,$/;"	f	class:THtmlLx
GetStrToBTag	glib-core/html.cpp	/^TStr THtmlLx::GetStrToBTag(const TStr& TagNm, const bool& TxtOnlyP){$/;"	f	class:THtmlLx
GetStrToCh	glib-core/lx.cpp	/^TStr TILx::GetStrToCh(const char& ToCh){$/;"	f	class:TILx
GetStrToETag	glib-core/html.cpp	/^TStr THtmlLx::GetStrToETag(const TStr& TagNm, const bool& TxtOnlyP){$/;"	f	class:THtmlLx
GetStrToETag2	glib-core/html.cpp	/^TStr THtmlLx::GetStrToETag2(const TStr& TagNm1, $/;"	f	class:THtmlLx
GetStrToEoln	glib-core/lx.cpp	/^TStr TILx::GetStrToEoln(const bool& DoTrunc){$/;"	f	class:TILx
GetStrToEolnAndCh	glib-core/lx.cpp	/^TStr TILx::GetStrToEolnAndCh(const char& ToCh){$/;"	f	class:TILx
GetStrToEolnOrCh	glib-core/lx.cpp	/^TStr TILx::GetStrToEolnOrCh(const char& ToCh){$/;"	f	class:TILx
GetStrVal	snap-core/table.h	/^  TStr GetStrVal(TInt ColIdx, TInt RowIdx) const {$/;"	f	class:TTable
GetStrVal	snap-core/table.h	/^  TStr GetStrVal(const TStr& ColName, const TInt& RowIdx) const {$/;"	f	class:TTable
GetStrVal	snap-exp/alternativetable.h	/^  TStr GetStrVal(TInt ColIdx, TInt RowIdx) const { $/;"	f	class:PhysicalOrderTable
GetStrValById	snap-core/table.h	/^  TStr GetStrValById(TInt ColIdx, TInt RowIdx) const {$/;"	f	class:TTable
GetStrValByName	snap-core/table.h	/^  TStr GetStrValByName(const TStr& ColName, const TInt& RowIdx) const {$/;"	f	class:TTable
GetStrVals	snap-core/table.h	/^  TStrV GetStrVals() const { return StrVals; }$/;"	f	class:TTableRow
GetStreamLen	glib-core/ssmp.h	/^  uint64 GetStreamLen() const {$/;"	f
GetStreamPos	glib-core/ssmp.h	/^  uint64 GetStreamPos() const {$/;"	f
GetStrs	glib-core/hash.h	/^  int GetStrs() const { return IdOffV.Len(); }$/;"	f
GetStrs	snap-exp/imdbnet.h	/^  int GetStrs() const { return StrIdH.Len(); }$/;"	f	class:TImdbNet
GetStrs	snap-exp/memes.h	/^  int GetStrs() const { return StrQtIdH.Len(); }$/;"	f	class:TQuoteBs
GetSubCat	glib-core/unicode.h	/^	TUniChSubCategory GetSubCat() const { return (TUniChSubCategory) subCat; }$/;"	f	class:TUniChInfo
GetSubCat	glib-core/unicode.h	/^	TUniChSubCategory GetSubCat(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return ucOtherNotAssigned; else return h[i].subCat; }$/;"	f	class:TUniChDb
GetSubCat	glib-core/unicode.h	/^	TUniChSubCategory GetSubCat(const int cp) const { return ucd.GetSubCat(cp); }$/;"	f	class:TUnicode
GetSubGraph	snap-core/bignet.h	/^TPt<TBigNet<TNodeData, IsDir> > TBigNet<TNodeData, IsDir>::GetSubGraph(const TIntV& NIdV, const bool& RenumberNodes) const {$/;"	f	class:TBigNet
GetSubGraph	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::GetSubGraph(const TIntV& NIdV, TBigNet* NewNetPt, const bool& RenumberNodes) const {$/;"	f	class:TBigNet
GetSubGraph	snap-core/subgraph.cpp	/^PNGraph GetSubGraph(const PNGraph& Graph, const TIntV& NIdV, const bool& RenumberNodes) {$/;"	f	namespace:TSnap
GetSubGraph	snap-core/subgraph.cpp	/^PUNGraph GetSubGraph(const PUNGraph& Graph, const TIntV& NIdV, const bool& RenumberNodes) {$/;"	f	namespace:TSnap
GetSubGraph	snap-core/subgraph.h	/^PGraph GetSubGraph(const PGraph& Graph, const TIntV& NIdV) {$/;"	f	namespace:TSnap
GetSubGraph	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::GetSubGraph(const TIntV& NIdV) const {$/;"	f	class:TTimeNENet
GetSubGraph	snap-core/timenet.cpp	/^PTimeNet TTimeNet::GetSubGraph(const TIntV& NIdV) const {$/;"	f	class:TTimeNet
GetSubGraph	snap-exp/memes.cpp	/^PClustNet TClustNet::GetSubGraph(const TIntV& NIdV) const {$/;"	f	class:TClustNet
GetSubGraph	snap-exp/memes.cpp	/^PClustNet TClustNet::GetSubGraph(const int& MinQtWords, const int& MaxQtWords, const int& MinFq) const {$/;"	f	class:TClustNet
GetSubGraph	snap-exp/mmgraph-exp.h	/^  TPt<TMNet<TNode> > GetSubGraph(const TIntV& NTypeIdV) {$/;"	f	class:TMNet
GetSubGraph	snap-exp/mmgraph-exp.h	/^  TPt<TMNet<TNode> > GetSubGraph(const TStrV& NTypeNameV) {$/;"	f	class:TMNet
GetSubGraph	snap-exp/signnet.cpp	/^PSignNet TSignMicroEvol::GetSubGraph(const int& N1, const int& N2) {$/;"	f	class:TSignMicroEvol
GetSubGraph	snap-exp/signnet.cpp	/^PSignNet TSignMicroEvol::GetSubGraph(const int& N1, const int& N2, const int& N3) {$/;"	f	class:TSignMicroEvol
GetSubGraphTNEANet	snap-exp/mmgraph-exp.h	/^  PNEANet GetSubGraphTNEANet(const TIntV& NTypeIdV) {$/;"	f	class:TMNet
GetSubGraphTNEANet	snap-exp/mmgraph-exp.h	/^  PNEANet GetSubGraphTNEANet(const TIntV& NTypeIdV, const TIntV& ETypeIdV) {$/;"	f	class:TMNet
GetSubGraphTNEANet2	snap-exp/mmgraph-exp.h	/^  PNEANet GetSubGraphTNEANet2(const TIntV& NTypeIdV, const TIntV& ETypeIdV) {$/;"	f	class:TMNet
GetSubGraphTNEANetMP	snap-exp/mmgraph-exp.h	/^  PNEANetMP GetSubGraphTNEANetMP(const TIntV& NTypeIdV, const TIntV& ETypeIdV) {$/;"	f	class:TMNet
GetSubGraphTNEANetMP2	snap-exp/mmgraph-exp.h	/^  PNEANetMP GetSubGraphTNEANetMP2(const TIntV& NTypeIdV) {$/;"	f	class:TMNet
GetSubGraphTNEANetMP2	snap-exp/mmgraph-exp.h	/^  PNEANetMP GetSubGraphTNEANetMP2(const TIntV& NTypeIdV, const TIntV& ETypeIdV) {$/;"	f	class:TMNet
GetSubGraphs	snap-adv/subgraphenum.h	/^void TSubGraphEnum<TGraphCounter>::GetSubGraphs(PNGraph &Graph, int NId, int SubGraphSz, TGraphCounter &Functor) {$/;"	f	class:TSubGraphEnum
GetSubGraphs	snap-adv/subgraphenum.h	/^void TSubGraphEnum<TGraphCounter>::GetSubGraphs(PNGraph &Graph, int SubGraphSz, TGraphCounter &Functor) {$/;"	f	class:TSubGraphEnum
GetSubGraphs_recursive	snap-adv/subgraphenum.h	/^void TSubGraphEnum<TGraphCounter>::GetSubGraphs_recursive(TSVec &sg, const TSSet &sgNbrs, TSSet &ext) {$/;"	f	class:TSubGraphEnum
GetSubGraphs_recursive	snap-adv/subgraphenum.h	/^void TSubGraphEnum<TGraphCounter>::GetSubGraphs_recursive(TSVec &sg, const TSSet &sgNbrs, TSSet &ext, int vId) {$/;"	f	class:TSubGraphEnum
GetSubNGraph	snap-core/bignet.h	/^PNGraph TBigNet<TNodeData, IsDir>::GetSubNGraph(const TIntV& NIdV) const {$/;"	f	class:TBigNet
GetSubNet	snap-exp/signnet.h	/^  PSignNet GetSubNet(const int& MinEdgeWgt) const {$/;"	f	class:TSignNet
GetSubStr	glib-core/dt.cpp	/^TChA TChA::GetSubStr(const int& _BChN, const int& _EChN) const {$/;"	f	class:TChA
GetSubStr	glib-core/dt.cpp	/^TStr TStr::GetSubStr(const int& _BChN, const int& _EChN) const {$/;"	f	class:TStr
GetSubTreeSz	snap-core/bfsdfs.h	/^int GetSubTreeSz(const PGraph& Graph, const int& StartNId, const bool& FollowOut, const bool& FollowIn, int& TreeSz, int& TreeDepth) {$/;"	f	namespace:TSnap
GetSubValV	glib-core/ds.h	/^  void GetSubValV(const int& _BValN, const int& _EValN, TVec<TVal>& SubValV) const {$/;"	f	class:TQQueue
GetSubValV	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::GetSubValV(const TSizeTy& _BValN, const TSizeTy& _EValN, TVec<TVal, TSizeTy>& SubValV) const {$/;"	f	class:TVec
GetSubWChA	glib-core/wch.h	/^  void GetSubWChA(const int& BChN, const int& EChN, TWChA& WChA) const {$/;"	f	class:TWChA
GetSubgraphByCrossNet	snap-core/mmnet.cpp	/^PMMNet TMMNet::GetSubgraphByCrossNet(TStrV& CrossNetTypes) {$/;"	f	class:TMMNet
GetSubgraphByModeNet	snap-core/mmnet.cpp	/^PMMNet TMMNet::GetSubgraphByModeNet(TStrV& ModeNetTypes) {$/;"	f	class:TMMNet
GetSumVal	snap-adv/agmdirected.h	/^  TFlt& GetSumVal(const bool IsOut, const int CID) { $/;"	f	class:TCoda
GetSupport	snap-exp/trawling.cpp	/^int TTrawling::GetSupport(const TIntV& ItemSet) {$/;"	f	class:TTrawling
GetSwitchedKdV	glib-core/ds.h	/^void GetSwitchedKdV(const TVec<TKeyDat<TKey, TDat>, int>& SrcKdV, TVec<TKeyDat<TDat, TKey>, int>& DstKdV){$/;"	f
GetSwitchedPrV	glib-core/ds.h	/^void GetSwitchedPrV(const TVec<TPair<TVal1, TVal2>, TSizeTy>& SrcPrV, TVec<TPair<TVal2, TVal1>, TSizeTy>& DstPrV){$/;"	f
GetSym	glib-core/html.cpp	/^THtmlLxSym THtmlLx::GetSym(){$/;"	f	class:THtmlLx
GetSym	glib-core/lx.cpp	/^TLxSym TILx::GetSym(const TFSet& Expect){$/;"	f	class:TILx
GetSym	glib-core/xml.cpp	/^TXmlLxSym TXmlLx::GetSym(){$/;"	f	class:TXmlLx
GetSym	glib-core/xml.cpp	/^TXmlLxSym TXmlParser::GetSym() {$/;"	f	class:TXmlParser
GetSym	glib-core/xml.cpp	/^TXmlLxSym TXmlParser::GetSym(TChA& _SymStr) {$/;"	f	class:TXmlParser
GetSymStr	glib-core/html.cpp	/^TStr THtmlLx::GetSymStr(const THtmlLxSym& Sym){$/;"	f	class:THtmlLx
GetSymStr	glib-core/lx.cpp	/^TStr TILx::GetSymStr() const {$/;"	f	class:TILx
GetSymStr	glib-core/lx.cpp	/^TStr TLxSymStr::GetSymStr(const TLxSym& Sym){$/;"	f	class:TLxSymStr
GetSymStr	glib-core/xml.cpp	/^TStr TXmlLx::GetSymStr() const {$/;"	f	class:TXmlLx
GetSystemLiteral	glib-core/xml.cpp	/^TStr TXmlLx::GetSystemLiteral(){$/;"	f	class:TXmlLx
GetTNLoopGraph	tutorials/demo-alg.cpp	/^PNGraph GetTNLoopGraph() {$/;"	f
GetTag	glib-core/html.cpp	/^void THtmlLx::GetTag(){$/;"	f	class:THtmlLx
GetTag	glib-core/xml.cpp	/^TXmlLxSym TXmlParser::GetTag(const TChA& TagStr) {$/;"	f	class:TXmlParser
GetTagNm	glib-core/xml.cpp	/^TStr TXmlObjSer::GetTagNm(const TStr& TypeNm){$/;"	f	class:TXmlObjSer
GetTagTok	glib-core/xml.cpp	/^PXmlTok TXmlDoc::GetTagTok(const TStr& TagPath) const {$/;"	f	class:TXmlDoc
GetTagTok	glib-core/xml.cpp	/^PXmlTok TXmlTok::GetTagTok(const TStr& TagPath) const {$/;"	f	class:TXmlTok
GetTagTokBoolArgVal	glib-core/xml.cpp	/^bool TXmlDoc::GetTagTokBoolArgVal($/;"	f	class:TXmlDoc
GetTagTokFltArgVal	glib-core/xml.cpp	/^double TXmlDoc::GetTagTokFltArgVal($/;"	f	class:TXmlDoc
GetTagTokIntArgVal	glib-core/xml.cpp	/^int TXmlDoc::GetTagTokIntArgVal($/;"	f	class:TXmlDoc
GetTagTokStrArgVal	glib-core/xml.cpp	/^TStr TXmlDoc::GetTagTokStrArgVal($/;"	f	class:TXmlDoc
GetTagTokV	glib-core/xml.cpp	/^void TXmlDoc::GetTagTokV(const TStr& TagPath, TXmlTokV& XmlTokV) const {$/;"	f	class:TXmlDoc
GetTagTokV	glib-core/xml.cpp	/^void TXmlTok::GetTagTokV(const TStr& TagPath, TXmlTokV& XmlTokV) const {$/;"	f	class:TXmlTok
GetTagVal	glib-core/xml.cpp	/^TStr TXmlTok::GetTagVal(const TStr& TagNm, const bool& XmlP) const {$/;"	f	class:TXmlTok
GetTagVal	glib-core/xml.cpp	/^void TXmlParser::GetTagVal(const TChA& TagStr, TChA& TagVal) {$/;"	f	class:TXmlParser
GetTagValV	glib-core/xml.cpp	/^void TXmlTok::GetTagValV(const TStr& TagNm, const bool& XmlP, TStrV& ValV) const {$/;"	f	class:TXmlTok
GetTalks	snap-exp/wikinet.h	/^  int GetTalks() const { return TotTalks; }$/;"	f	class:TWikiTalkEdge
GetTalksAE	snap-exp/wikinet.h	/^  int GetTalksAE() const { return TalksAE; }$/;"	f	class:TWikiTalkEdge
GetTalksBE	snap-exp/wikinet.h	/^  int GetTalksBE() const { return TalksBE; }$/;"	f	class:TWikiTalkEdge
GetTarget	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    int GetTarget() const { return Target; }$/;"	f	class:TMatchingMachine::TMaMaEdge
GetTarget	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    int GetTarget() const { return Target; }$/;"	f	class:TMatchingMachine::TMaMaEdge
GetTestTNEGraph	test/test-subgraph.cpp	/^PNEGraph GetTestTNEGraph() {$/;"	f
GetTestTNEGraph	tutorials/demo-subgraph.cpp	/^PNEGraph GetTestTNEGraph() {$/;"	f
GetTestTNGraph	test/test-subgraph.cpp	/^PNGraph GetTestTNGraph() {$/;"	f
GetTestTNGraph	tutorials/demo-subgraph.cpp	/^PNGraph GetTestTNGraph() {$/;"	f
GetTestTNodeEDatNet	test/test-subgraph.cpp	/^TPt <TNodeEDatNet<TInt, TInt> > GetTestTNodeEDatNet() {$/;"	f
GetTestTNodeEDatNet	tutorials/demo-subgraph.cpp	/^TPt <TNodeEDatNet<TInt, TInt> > GetTestTNodeEDatNet() {$/;"	f
GetTestTNodeEdgeNet	test/test-subgraph.cpp	/^TPt <TNodeEdgeNet<TInt, TInt> > GetTestTNodeEdgeNet() {$/;"	f
GetTestTNodeEdgeNet	tutorials/demo-subgraph.cpp	/^TPt <TNodeEdgeNet<TInt, TInt> > GetTestTNodeEdgeNet() {$/;"	f
GetTestTUNGraph	test/test-subgraph.cpp	/^PUNGraph GetTestTUNGraph() {$/;"	f
GetTestTUNGraph	tutorials/demo-subgraph.cpp	/^PUNGraph GetTestTUNGraph() {$/;"	f
GetTextOnlyStrToEof	glib-core/html.cpp	/^TStr THtmlLx::GetTextOnlyStrToEof(){$/;"	f	class:THtmlLx
GetTheta	snap-adv/agm.h	/^  void GetTheta(TFltV& _Theta) { _Theta = Theta; }$/;"	f	class:TLogRegPredict
GetThetaLL	snap-adv/mag.cpp	/^const double TMAGFitBern::GetThetaLL(const int& NId1, const int& NId2, const int& AId) const {$/;"	f	class:TMAGFitBern
GetThis	snap-exp/memes.h	/^  PClustNet GetThis() const { IAssert(CRef.GetRefs()>0); return PClustNet((TClustNet *) this); }$/;"	f	class:TClustNet
GetThreadMSecs	glib-core/os.cpp	/^uint64 TSysTm::GetThreadMSecs() {$/;"	f	class:TSysTm
GetThreadMSecs	glib-core/os.cpp	/^uint64 TSysTm::GetThreadMSecs(){$/;"	f	class:TSysTm
GetTics42	glib-core/gnuplot.cpp	/^int TGnuPlot::GetTics42() {$/;"	f	class:TGnuPlot
GetTime	glib-core/tm.h	/^    int GetTime() const { return TmSoFar + (RunningP ? ExeTm.GetTime() : 0); }$/;"	f	class:TTmStopWatch
GetTime	glib-core/tm.h	/^  int GetTime() const {return int(clock()-LastTick);}$/;"	f	class:TExeTm
GetTime	snap-core/gstat.h	/^  int GetTime(const TTmUnit& TimeUnit) const { return Time.GetInUnits(TimeUnit); }$/;"	f	class:TGStat
GetTime	snap-core/gstat.h	/^  int GetTime(const int& ValN) const { return At(ValN)->GetTime(TmUnit); }$/;"	f	class:TGStatVec
GetTimeNENet	snap-core/timenet.cpp	/^PTimeNENet TTimeNet::GetTimeNENet() const {$/;"	f	class:TTimeNet
GetTimeNet	snap-core/timenet.cpp	/^PTimeNet TTimeNENet::GetTimeNet() const {$/;"	f	class:TTimeNENet
GetTimeStr	tutorials/demo-hashvec-benchmark.cpp	/^void GetTimeStr(struct timeval *tval, char s[])$/;"	f
GetTimerId	glib-core/tm.h	/^	int GetTimerId(const TStr& TimerNm) const { return TimerH.GetKeyId(TimerNm); }$/;"	f
GetTimerIdFFirst	glib-core/tm.h	/^	int GetTimerIdFFirst() const { return TimerH.FFirstKeyId(); }$/;"	f
GetTimerIdFNext	glib-core/tm.h	/^	bool GetTimerIdFNext(int& TimerId) const { return TimerH.FNextKeyId(TimerId); }$/;"	f
GetTimerNm	glib-core/tm.h	/^    TStr GetTimerNm(const int& TimerId) const { return TimerH.GetKey(TimerId); }$/;"	f
GetTimerSec	glib-core/tm.cpp	/^double TTmProfiler::GetTimerSec(const int& TimerId) const {$/;"	f	class:TTmProfiler
GetTimerSumSec	glib-core/tm.cpp	/^double TTmProfiler::GetTimerSumSec() const {$/;"	f	class:TTmProfiler
GetTimers	glib-core/tm.h	/^	int GetTimers() const { return TimerH.Len(); }$/;"	f
GetTimes	snap-exp/memes.h	/^  int GetTimes() const { return TmUrlCntV.Len(); }$/;"	f	class:TQuote
GetTitleCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetTitleCase(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true, const bool turkic = false, const bool lithuanian = false) const { GetTitleCase(src, 0, src.Len(), dest, clrDest, turkic, lithuanian); }$/;"	f	class:TUniChDb
GetTitleCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetTitleCase(const TSrcVec& src, size_t srcIdx, const size_t srcCount, TVec<TDestCh>& dest, const bool clrDest = true, const bool turkic = false, const bool lithuanian = false) const { GetCaseConverted(src, srcIdx, srcCount, dest, clrDest, ccTitle, turkic, lithuanian); }$/;"	f	class:TUniChDb
GetTitleCase	glib-core/unicode.h	/^	void GetTitleCase(const TIntV& src, TIntV& dest) const { ucd.GetTitleCase(src, dest, true, false, false); }$/;"	f	class:TUnicode
GetTkEdCnt	snap-exp/wikinet.h	/^  int GetTkEdCnt() const { return MnTkEdCnt+WkTkEdCnt; }$/;"	f	class:TWikiUsr
GetTkWrdCnt	snap-exp/wikinet.h	/^  int GetTkWrdCnt() const { return MnTkEdWrds+WkTkEdWrds; }$/;"	f	class:TWikiUsr
GetTm	snap-adv/cascdynetinf.h	/^  double GetTm(const int& NId) const { return NIdHitH.GetDat(NId).Tm; }$/;"	f	class:TCascade
GetTm	snap-adv/cascnetinf.h	/^  double GetTm(const int& NId) const { return NIdHitH.GetDat(NId).Tm; }$/;"	f	class:TCascade
GetTm	snap-exp/memenet.h	/^  TSecTm GetTm() const { return Tm; }$/;"	f	class:TMemeNetDat
GetTm	snap-exp/memes.h	/^  TSecTm GetTm(const int& t) const { return TmUrlCntV[t].Tm(); }$/;"	f	class:TQuote
GetTm	snap-exp/wikinet.h	/^  TSecTm GetTm() const { return ElecTm; }$/;"	f	class:TWikiElec
GetTm	snap-exp/wikinet.h	/^  TSecTm GetTm() const { return VoteTm; }$/;"	f	class:TWikiVote
GetTmBuckets	snap-core/timenet.cpp	/^void TTimeNENet::GetTmBuckets(const TTmUnit& TmUnit, TTimeNet::TTmBucketV& TmBucketV) const {$/;"	f	class:TTimeNENet
GetTmBuckets	snap-core/timenet.cpp	/^void TTimeNet::GetTmBuckets(const TTmUnit& TmUnit, TTmBucketV& TmBucketV) const {$/;"	f	class:TTimeNet
GetTmFromDateTimeInt	glib-core/tm.cpp	/^TTm TTm::GetTmFromDateTimeInt(const uint& DateTimeInt) {$/;"	f	class:TTm
GetTmFromIdStr	glib-core/tm.cpp	/^TTm TTm::GetTmFromIdStr(const TStr& IdStr){$/;"	f	class:TTm
GetTmFromMSecs	glib-core/os.cpp	/^TTm TSysTm::GetTmFromMSecs(const uint64& MSecs){$/;"	f	class:TSysTm
GetTmFromMSecs	glib-core/os.cpp	/^TTm TSysTm::GetTmFromMSecs(const uint64& TmNum){$/;"	f	class:TSysTm
GetTmFromMSecs	glib-core/tm.cpp	/^TTm TTm::GetTmFromMSecs(const uint64& MSecs){$/;"	f	class:TTm
GetTmFromStr	snap-core/util.cpp	/^bool TStrUtil::GetTmFromStr(const char* TmStr, TSecTm& Tm) {$/;"	f	class:TStrUtil
GetTmFromWebLogDateTimeStr	glib-core/tm.cpp	/^TTm TTm::GetTmFromWebLogDateTimeStr(const TStr& DateTimeStr,$/;"	f	class:TTm
GetTmFromWebLogTimeStr	glib-core/tm.cpp	/^TTm TTm::GetTmFromWebLogTimeStr(const TStr& TimeStr,$/;"	f	class:TTm
GetTmMinStr	glib-core/tm.cpp	/^TStr TSecTm::GetTmMinStr() const {$/;"	f	class:TSecTm
GetTmSec	glib-core/tm.cpp	/^bool TSecTm::GetTmSec(const int& YearN, const int& MonthN, const int& DayN, const int& HourN, const int& MinN, const int& SecN, uint& AbsSec) {$/;"	f	class:TSecTm
GetTmSec	glib-core/tm.cpp	/^bool TSecTm::GetTmSec(struct tm& Tm, uint& AbsSec) {$/;"	f	class:TSecTm
GetTmStr	glib-core/tm.cpp	/^TStr TSecTm::GetTmStr() const {$/;"	f	class:TSecTm
GetTmStr	glib-core/tm.h	/^  const char* GetTmStr() const { static char TmStr[32];$/;"	f	class:TExeTm
GetTmStr	snap-core/gstat.h	/^  TStr GetTmStr() const { return Time.GetStr(); }$/;"	f	class:TGStat
GetTmStruct	glib-core/tm.cpp	/^bool TSecTm::GetTmStruct(const uint& AbsSec, struct tm& Tm) {$/;"	f	class:TSecTm
GetTmUnit	snap-core/gstat.h	/^  TTmUnit GetTmUnit() const { return TmUnit; }$/;"	f	class:TGStatVec
GetTmUnitSecs	glib-core/tm.cpp	/^int TTmInfo::GetTmUnitSecs(const TTmUnit& TmUnit) {$/;"	f	class:TTmInfo
GetTmUnitStr	glib-core/tm.cpp	/^TStr TTmInfo::GetTmUnitStr(const TTmUnit& TmUnit) {$/;"	f	class:TTmInfo
GetTmZoneDiffStr	glib-core/tm.cpp	/^TStr TTmInfo::GetTmZoneDiffStr(const TStr& TmZoneStr){$/;"	f	class:TTmInfo
GetToCh	glib-core/url.cpp	/^  TStr GetToCh(const char& Ch=TUrlLxChDef::EofCh){TChA Str;$/;"	f	class:TUrlLx
GetTok	glib-core/html.cpp	/^PHtmlTok THtmlLx::GetTok(const bool& DoUc){$/;"	f	class:THtmlLx
GetTok	glib-core/xml.cpp	/^PXmlTok TXmlTok::GetTok(TXmlLx& Lx){$/;"	f	class:TXmlTok
GetTokStrV	glib-core/html.cpp	/^void THtmlLx::GetTokStrV(const TStr& Str, TStrV& TokStrV){$/;"	f	class:THtmlLx
GetTokVStr	glib-core/xml.cpp	/^TStr TXmlTok::GetTokVStr(const TXmlTokV& TokV, const bool& XmlP){$/;"	f	class:TXmlTok
GetToken	glib-core/http.cpp	/^TStr THttpLx::GetToken(const TStr& ExpectStr){$/;"	f	class:THttpLx
GetTop1Net	snap-exp/wgtnet.cpp	/^PNGraph TTop2FriendNet::GetTop1Net() {$/;"	f	class:TTop2FriendNet
GetTop2Len	snap-exp/wgtnet.h	/^  int GetTop2Len() const { return Top2NIdH.Len(); }$/;"	f	class:TTop2FriendNet
GetTop2WccSz	snap-exp/wgtnet.cpp	/^int TTop2FriendNet::GetTop2WccSz(const double ProbPick2nd) const {$/;"	f	class:TTop2FriendNet
GetTopCIDs	snap-adv/agmdirected.cpp	/^void TCoda::GetTopCIDs(TIntV& CIdV, const int TopK, const int IsAverage, const int MinSz) {$/;"	f	class:TCoda
GetTopDownDocNm	glib-core/url.cpp	/^TStr TUrl::GetTopDownDocNm($/;"	f	class:TUrl
GetTopQtDoms	snap-exp/memes.cpp	/^void TQuoteBs::GetTopQtDoms(TStrIntPrV& DomCntV, const int& TakeNClust, const int& MinClFq, const TStr& RootHasWord, const TUrlTy& OnlyCountTy) const {$/;"	f	class:TQuoteBs
GetTotalPageFile	glib-core/os.h	/^  uint64 GetTotalPageFile(){ \/\/ bytes of paging file$/;"	f
GetTotalPhys	glib-core/os.h	/^  uint64 GetTotalPhys(){ \/\/ bytes of physical memory$/;"	f
GetTotalVirtual	glib-core/os.h	/^  uint64 GetTotalVirtual(){ \/\/ user bytes of address space$/;"	f
GetTree	test/test-alg.cpp	/^  PNGraph GetTree() {$/;"	f	class:TreeTest
GetTreeRootNId	snap-core/alg.h	/^template <class PGraph> int GetTreeRootNId(const PGraph& Graph) { int RootNId; bool Tree; Tree = IsTree(Graph, RootNId);  Assert(Tree);  return RootNId; }$/;"	f	namespace:TSnap
GetTreeSig	snap-core/alg.h	/^void GetTreeSig(const PGraph& Graph, const int& RootNId, TIntV& Sig) {$/;"	f	namespace:TSnap
GetTreeSig	snap-core/alg.h	/^void GetTreeSig(const PGraph& Graph, const int& RootNId, TIntV& Sig, TIntPrV& NodeMap) {$/;"	f	namespace:TSnap
GetTrend	snap-exp/wikinet.cpp	/^double TWikiElec::GetTrend(int VoteId1, int VoteId2) const {$/;"	f	class:TWikiElec
GetTriad	snap-exp/signnet.cpp	/^PSignNet TSignNet::GetTriad(const int& N1, const int& N2, const int& N3) const {$/;"	f	class:TSignNet
GetTriadEdges	snap-core/timenet.cpp	/^int TTimeNENet::GetTriadEdges(TIntV& TriadEIdV) const {$/;"	f	class:TTimeNENet
GetTriadEdges	snap-core/triad.h	/^int GetTriadEdges(const PGraph& Graph, int SampleEdges) {$/;"	f	namespace:TSnap
GetTriadId	snap-exp/signnet.cpp	/^int TSignMicroEvol::GetTriadId(const PSignNet& Net1) {$/;"	f	class:TSignMicroEvol
GetTriadParticip	snap-core/triad.h	/^void GetTriadParticip(const PGraph& Graph, TIntPrV& TriadCntV) {$/;"	f	namespace:TSnap
GetTriadProb	snap-exp/signnet.cpp	/^double TSignNet::GetTriadProb(const double& PlusProb) const {$/;"	f	class:TSignNet
GetTriadSig	snap-exp/signnet.cpp	/^TIntTr TSignNet::GetTriadSig(const bool& Canonical) const {$/;"	f	class:TSignNet
GetTriadStr	snap-exp/signnet.cpp	/^TChA TSignNet::GetTriadStr(const TIntTr& TriadSig) {$/;"	f	class:TSignNet
GetTriadStr	snap-exp/signnet.cpp	/^TChA TSignNet::GetTriadStr(const bool& Canonical) const {$/;"	f	class:TSignNet
GetTriads	snap-core/triad.h	/^int64 GetTriads(const PGraph& Graph, int SampleNodes) {$/;"	f	namespace:TSnap
GetTriads	snap-core/triad.h	/^int64 GetTriads(const PGraph& Graph, int64& ClosedTriads, int64& OpenTriads, int SampleNodes) {$/;"	f	namespace:TSnap
GetTriads	snap-core/triad.h	/^void GetTriads(const PGraph& Graph, TIntTrV& NIdCOTriadV, int SampleNodes) {$/;"	f	namespace:TSnap
GetTriads_v0	snap-core/triad.h	/^void GetTriads_v0(const PGraph& Graph, TIntTrV& NIdCOTriadV, int SampleNodes) {$/;"	f	namespace:TSnap
GetTriangleCnt	snap-core/triad.h	/^int64 GetTriangleCnt(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetTxtLen	snap-exp/wikinet.h	/^  int GetTxtLen() const { return TxtLen; }$/;"	f	class:TWikiVote
GetTxtLnDoc	glib-core/html.cpp	/^TStr THtmlDoc::GetTxtLnDoc(const TStr& HtmlStr){$/;"	f	class:THtmlDoc
GetTxtLnDoc	glib-core/html.cpp	/^TStr THtmlDoc::GetTxtLnDoc(const TStr& HtmlStr, $/;"	f	class:THtmlDoc
GetTy	snap-exp/imdbnet.h	/^  TMovieTy GetTy() const { return TMovieTy(Type.Val); }$/;"	f	class:TImdbNode
GetTy	snap-exp/memes.h	/^  TQtTy GetTy() const { return (TQtTy) QtCIdTy.Ty; }$/;"	f	class:TQuote
GetType	snap-core/table.h	/^  TAttrType GetType() const { return AttrType; }$/;"	f	class:TPrimitive
GetTypeId	snap-exp/mmgraph-exp.h	/^    int GetTypeId() const { return EdgeHI.GetDat().GetTypeId(); }$/;"	f	class:TMNet::TEdgeI
GetTypeId	snap-exp/mmgraph-exp.h	/^    int GetTypeId() const { return HashI.GetDat().GetTypeId(); }$/;"	f	class:TMNet::TMNodeI
GetTypeId	snap-exp/mmgraph-exp.h	/^    int GetTypeId() const { return TypeId; }$/;"	f	class:TMNet::TEdge
GetTypeId	snap-exp/mmgraph-exp.h	/^  int GetTypeId() const { return TypeId; }$/;"	f	class:TCVNode
GetTypeId	snap-exp/mmgraph-exp.h	/^  int GetTypeId() const { return TypeId; }$/;"	f	class:TMVNode
GetTypeId	snap-exp/mmgraph-exp.h	/^  int GetTypeId() const { return TypeId; }$/;"	f	class:TSVNode
GetTypeNm	glib-core/ut.h	/^TStr GetTypeNm(const Type& Var){$/;"	f
GetTypeStr	glib-core/ut.cpp	/^TStr TNotify::GetTypeStr($/;"	f	class:TNotify
GetUCh	glib-core/bits.h	/^  uchar GetUCh() const {return B1;}$/;"	f	class:TB8Set
GetUCh	glib-core/fl.h	/^  uchar GetUCh(){uchar UCh; GetBf(&UCh, sizeof(UCh)); return UCh;}$/;"	f
GetUId	snap-exp/wikinet.h	/^  int GetUId() const { return UsrId; }$/;"	f	class:TWikiElec
GetUId	snap-exp/wikinet.h	/^  int GetUId() const { return UsrId; }$/;"	f	class:TWikiVote
GetUId	snap-exp/wikinet.h	/^  int GetUId(const TChA& Str) const { return UsrH.GetKeyId(Str.CStr()); }$/;"	f	class:TWikiElecBs
GetUId	snap-exp/wikinet.h	/^  int GetUId(const char* CStr) const { return UsrH.GetKeyId(CStr); }$/;"	f	class:TWikiElecBs
GetUInt	glib-core/bits.h	/^  uint GetUInt() const {return B4;}$/;"	f	class:TB32Set
GetUInt	glib-core/fl.h	/^  uint GetUInt(){uint UInt; GetBf(&UInt, sizeof(UInt)); return UInt;}$/;"	f
GetUInt64	glib-core/bd.h	/^  uint64 GetUInt64() const {return Val.UInt64;}$/;"	f	class:TConv_Pt64Ints32
GetUInt64	glib-core/bits.h	/^  uint64 GetUInt64() const {$/;"	f
GetUInt64	glib-core/ss.cpp	/^bool TSsParser::GetUInt64(const int& FldN, uint64& Val) const {$/;"	f	class:TSsParser
GetUIntFromIpStr	glib-core/dt.cpp	/^uint TUInt::GetUIntFromIpStr(const TStr& IpStr, const char& SplitCh) {$/;"	f	class:TUInt
GetUc	glib-core/html.h	/^  char GetUc(const char& Ch) const {return UcChV[Ch-TCh::Mn];}$/;"	f
GetUc	glib-core/lx.h	/^  char GetUc(const char& Ch) const {return UcChV[Ch-TCh::Mn];}$/;"	f
GetUcChA	glib-core/html.h	/^  void GetUcChA(TChA& ChA) const {$/;"	f
GetUcStr	glib-core/html.h	/^  TStr GetUcStr(const TStr& Str) const {$/;"	f
GetUcStr	glib-core/lx.cpp	/^TStr TLxChDef::GetUcStr(const TStr& Str) const {$/;"	f	class:TLxChDef
GetUnDir	snap-core/alg.h	/^PGraph GetUnDir(const PGraph& Graph) {$/;"	f	namespace:TSnap
GetUnDirEdgeSign	snap-exp/signnet.cpp	/^int GetUnDirEdgeSign(const PSignNet& Net, const int& NId1, const int& NId2) {$/;"	f
GetUniDev	glib-core/dt.h	/^  double GetUniDev(){return GetNextSeed()\/double(m);}$/;"	f	class:TRnd
GetUniDevInt	glib-core/dt.cpp	/^int TRnd::GetUniDevInt(const int& Range){$/;"	f	class:TRnd
GetUniDevInt	glib-core/dt.h	/^  int GetUniDevInt(const int& MnVal, const int& MxVal){$/;"	f	class:TRnd
GetUniDevInt64	glib-core/dt.cpp	/^int64 TRnd::GetUniDevInt64(const int64& Range){$/;"	f	class:TRnd
GetUniDevStep	glib-core/dt.h	/^  static double GetUniDevStep(const int& Seed, const int& Steps){$/;"	f	class:TRnd
GetUniDevUInt	glib-core/dt.cpp	/^uint TRnd::GetUniDevUInt(const uint& Range){$/;"	f	class:TRnd
GetUniDevUInt64	glib-core/dt.cpp	/^uint64 TRnd::GetUniDevUInt64(const uint64& Range){$/;"	f	class:TRnd
GetUniTmFromLocTm	glib-core/os.cpp	/^TTm TSysTm::GetUniTmFromLocTm(const TTm& Tm) {$/;"	f	class:TSysTm
GetUniTmFromLocTm	glib-core/os.cpp	/^TTm TSysTm::GetUniTmFromLocTm(const TTm& Tm){$/;"	f	class:TSysTm
GetUniTmFromLocTm	glib-core/tm.cpp	/^TTm TTm::GetUniTmFromLocTm(const TTm& Tm){$/;"	f	class:TTm
GetUnicodeDataFn	glib-core/unicode.h	/^	static TStr GetUnicodeDataFn() { return "UnicodeData.txt"; }$/;"	f	class:TUniChDb
GetUniqEdges	snap-core/network.h	/^int TNodeEdgeNet<TNodeData, TEdgeData>::GetUniqEdges(const bool& IsDir) const {$/;"	f	class:TNodeEdgeNet
GetUniqueCurUniTm	glib-core/tm.cpp	/^TTm TTm::GetUniqueCurUniTm(){$/;"	f	class:TTm
GetUniqueCurUniTm	glib-core/tm.cpp	/^TTm TTm::GetUniqueCurUniTm(const int& UniqueSpaces, const int& UniqueSpaceN){$/;"	f	class:TTm
GetUniqueFNm	glib-core/fl.cpp	/^TStr TFile::GetUniqueFNm(const TStr& FNm){$/;"	f	class:TFile
GetUniqueNbrV	snap-core/triad.h	/^void GetUniqueNbrV(const PGraph& Graph, const int& NId, TIntV& NbrV) {$/;"	f	namespace:TSnap
GetUpperCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetUpperCase(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true, const bool turkic = false, const bool lithuanian = false) const { GetUpperCase(src, 0, src.Len(), dest, clrDest, turkic, lithuanian); }$/;"	f	class:TUniChDb
GetUpperCase	glib-core/unicode.h	/^	template<typename TSrcVec, typename TDestCh> void GetUpperCase(const TSrcVec& src, size_t srcIdx, const size_t srcCount, TVec<TDestCh>& dest, const bool clrDest = true, const bool turkic = false, const bool lithuanian = false) const { GetCaseConverted(src, srcIdx, srcCount, dest, clrDest, ccUpper, turkic, lithuanian); }$/;"	f	class:TUniChDb
GetUpperCase	glib-core/unicode.h	/^	void GetUpperCase(const TIntV& src, TIntV& dest) const { ucd.GetUpperCase(src, dest, true, false, false); }$/;"	f	class:TUnicode
GetUrl	glib-core/http.cpp	/^PUrl THttpLx::GetUrl(){$/;"	f	class:THttpLx
GetUrl	glib-core/http.h	/^  PUrl GetUrl() const {return Url;}$/;"	f
GetUrl	snap-exp/memenet.h	/^  const char *GetUrl(const int& UrlId) const { return UrlH.GetKey(UrlId); }$/;"	f	class:TMemeNetBs
GetUrlEnv	glib-core/http.h	/^  PUrlEnv GetUrlEnv() const {return UrlEnv;}$/;"	f
GetUrlFromShortcut	glib-core/url.cpp	/^PUrl TUrl::GetUrlFromShortcut(const TStr& ShortcutUrlStr,$/;"	f	class:TUrl
GetUrlId	snap-exp/memenet.h	/^  int GetUrlId() const { return UrlId; }$/;"	f	class:TMemeNetDat
GetUrlId	snap-exp/memenet.h	/^  int GetUrlId(const char* UrlStr) const { return UrlH.GetKeyId(TMd5Sig(UrlStr)); }$/;"	f	class:TBlogPostNet
GetUrlId	snap-exp/memenet.h	/^  int GetUrlId(const char* UrlStr) const { return UrlH.GetKeyId(UrlStr); }$/;"	f	class:TMemeNetBs
GetUrlId	snap-exp/memes.h	/^  int GetUrlId(const int& t) const { return TmUrlCntV[t].UrlId(); }$/;"	f	class:TQuote
GetUrlSearchStr	glib-core/url.cpp	/^TStr TUrl::GetUrlSearchStr(const TStr& Str){$/;"	f	class:TUrl
GetUrlStr	glib-core/http.cpp	/^TStr THttpLx::GetUrlStr(){$/;"	f	class:THttpLx
GetUrlStr	glib-core/url.h	/^  TStr GetUrlStr() const {return UrlStr;}$/;"	f
GetUrlTy	snap-exp/memenet.h	/^  TUrlTy GetUrlTy() const { return UrlTy; }$/;"	f	class:TMemeNetDat
GetUrlTy	snap-exp/memenet.h	/^  TUrlTy GetUrlTy(const char* UrlStr) const { return (TUrlTy) UrlH.GetDat(UrlStr).Val; }$/;"	f	class:TMemeNetBs
GetUrlTy	snap-exp/memenet.h	/^  TUrlTy GetUrlTy(const int& UrlId) const { return (TUrlTy) UrlH[UrlId].Val; }$/;"	f	class:TMemeNetBs
GetUrlTy	snap-exp/memes.cpp	/^TUrlTy TQuoteBs::GetUrlTy(const int& UrlId) const {$/;"	f	class:TQuoteBs
GetUrls	snap-exp/memenet.h	/^  int GetUrls() const { return UrlH.Len(); }$/;"	f	class:TBlogPostNet
GetUrls	snap-exp/memenet.h	/^  int GetUrls() const { return UrlH.Len(); }$/;"	f	class:TMemeNetBs
GetUrls	snap-exp/memes.cpp	/^int TQuote::GetUrls(const TSecTm& BegTm, const TSecTm& EndTm, const TUrlTy& UrlTy, const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
GetUrls	snap-exp/memes.h	/^  int GetUrls() const { return TmUrlCntV.Len(); }$/;"	f	class:TQuote
GetUsAsciiStrFromXmlStr	glib-core/xml.cpp	/^TStr TXmlLx::GetUsAsciiStrFromXmlStr(const TStr& XmlStr){$/;"	f	class:TXmlLx
GetUsFromYuAscii	glib-core/dt.cpp	/^char TCh::GetUsFromYuAscii(const char& Ch){$/;"	f	class:TCh
GetUsageStr	glib-core/os.cpp	/^TStr TSysMemStat::GetUsageStr(){$/;"	f	class:TSysMemStat
GetUsr	snap-exp/wikinet.h	/^  const TChA& GetUsr() const { return Usr; }$/;"	f	class:TWikiUsr
GetUsr	snap-exp/wikinet.h	/^  const char *GetUsr(const int& UId) const { return UsrH.GetKey(UId); }$/;"	f	class:TWikiElecBs
GetUsrAreaUTrail	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetUsrAreaUTrail(const TIntV& UIdV, TFltV& AreaV) const {$/;"	f	class:TWikiElecBs
GetUsrNId	snap-exp/wikinet.cpp	/^int TWikiTalkNet::GetUsrNId(const TStr& UsrStr) const {$/;"	f	class:TWikiTalkNet
GetUsrTm	snap-exp/wikinet.cpp	/^bool TWikiElecBs::GetUsrTm(char* LineStr, TChA& Usr, TSecTm& Tm, int& Indent) {$/;"	f	class:TWikiElecBs
GetUsrV	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetUsrV(TIntV& UIdV) const {$/;"	f	class:TWikiElecBs
GetUsrVoteTrail	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetUsrVoteTrail(const TIntV& UIdV, TVec<TFltPrV>& ProbPosFracPosV) const {$/;"	f	class:TWikiElecBs
GetUsrVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetUsrVotes(TIntPrV& VoteUIdV) const {$/;"	f	class:TWikiElecBs
GetUsrs	snap-exp/wikinet.h	/^  int GetUsrs() const { return UsrH.Len(); }$/;"	f	class:TWikiElecBs
GetUtf8CaseFolded	glib-core/unicode.h	/^	TStr GetUtf8CaseFolded(const TStr& s) const {$/;"	f	class:TUnicode
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2, const TVal& Val3){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2, const TVal& Val3, const TVal& Val4){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2, const TVal& Val3, const TVal& Val4, const TVal& Val5){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2, const TVal& Val3, const TVal& Val4, const TVal& Val5, const TVal& Val6){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2, const TVal& Val3, const TVal& Val4, const TVal& Val5, const TVal& Val6, const TVal& Val7){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2, const TVal& Val3, const TVal& Val4, const TVal& Val5, const TVal& Val6, const TVal& Val7, const TVal& Val8){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  static TVec<TVal, TSizeTy> GetV(const TVal& Val1, const TVal& Val2, const TVal& Val3, const TVal& Val4, const TVal& Val5, const TVal& Val6, const TVal& Val7, const TVal& Val8, const TVal& Val9){$/;"	f	class:TVec
GetV	glib-core/ds.h	/^  void GetV(const int& VId, TValV& ValV) const {$/;"	f	class:TGLib_OLD::TVecPool
GetV	glib-core/ds.h	/^  void GetV(const int& VId, TValV& ValV) const {$/;"	f	class:TVecPool
GetVLen	glib-core/ds.h	/^  int GetVLen(const int& VId) const { if (VId==0){return 0;} else {return int(IdToOffV[VId]-IdToOffV[VId-1]);}}$/;"	f	class:TVecPool
GetVLen	glib-core/ds.h	/^  uint GetVLen(const int& VId) const {$/;"	f	class:TGLib_OLD::TVecPool
GetVal	glib-core/ds.h	/^  TVal GetVal(const int& ValN) const {return V[ValN];}$/;"	f	class:PVec
GetVal	glib-core/ds.h	/^  TVal& GetVal(){Assert(this!=NULL); return Val;}$/;"	f	class:TLstNd
GetVal	glib-core/ds.h	/^  TVal& GetVal(const TSizeTy& ValN){return operator[](ValN);}$/;"	f	class:TVec
GetVal	glib-core/ds.h	/^  const TVal& GetVal() const {Assert(this!=NULL); return Val;}$/;"	f	class:TLstNd
GetVal	glib-core/ds.h	/^  const TVal& GetVal(const TSizeTy& ValN) const {return operator[](ValN);}$/;"	f	class:TVec
GetVal	glib-core/ds.h	/^  void GetVal(TVal1& _Val1, TVal2& _Val2) const {_Val1=Val1; _Val2=Val2;}$/;"	f	class:TPair
GetVal	glib-core/ds.h	/^  void GetVal(TVal1& _Val1, TVal2& _Val2, TVal3& _Val3) const {$/;"	f	class:TTriple
GetVal	glib-core/ds.h	/^  void GetVal(TVal1& _Val1, TVal2& _Val2, TVal3& _Val3, TVal4& _Val4) const {$/;"	f	class:TQuad
GetVal	glib-core/linalg.h	/^    double GetVal(const double& x) const {$/;"	f	class:TSigmoid
GetVal	glib-core/os.cpp	/^TStr TRegKey::GetVal(const PRegKey& Key, const TStr& SubKeyNm, const TStr& ValNm){$/;"	f	class:TRegKey
GetVal	glib-core/ss.cpp	/^TStr TSs::GetVal(const int& X, const int& Y) const {$/;"	f	class:TSs
GetVal	glib-core/xmath.h	/^  TFlt GetVal(const int& ValN) const {IAssert(!IsDef()); return ValWgtV[ValN].Val1;}$/;"	f
GetVal	snap-core/cncom.h	/^  const TInt& GetVal(const int& NIdN) const { return operator[](NIdN); }$/;"	f	class:TCnCom
GetVal	snap-core/gstat.cpp	/^double TGStat::GetVal(const TGStatVal& StatVal) const {$/;"	f	class:TGStat
GetVal1	glib-core/ds.h	/^  const TVal1& GetVal1() const { return Val1;}$/;"	f	class:TPair
GetVal1	glib-core/ds.h	/^  const TVal1& GetVal1() const { return Val1;}$/;"	f	class:TQuad
GetVal1	glib-core/ds.h	/^  const TVal1& GetVal1() const { return Val1;}$/;"	f	class:TTriple
GetVal2	glib-core/ds.h	/^  const TVal2& GetVal2() const { return Val2;}$/;"	f	class:TPair
GetVal2	glib-core/ds.h	/^  const TVal2& GetVal2() const { return Val2;}$/;"	f	class:TQuad
GetVal2	glib-core/ds.h	/^  const TVal2& GetVal2() const { return Val2;}$/;"	f	class:TTriple
GetVal3	glib-core/ds.h	/^  const TVal3& GetVal3() const { return Val3;}$/;"	f	class:TQuad
GetVal3	glib-core/ds.h	/^  const TVal3& GetVal3() const { return Val3;}$/;"	f	class:TTriple
GetVal4	glib-core/ds.h	/^  const TVal4& GetVal4() const { return Val4;}$/;"	f	class:TQuad
GetValFromLx	glib-core/json.cpp	/^PJsonVal TJsonVal::GetValFromLx(TILx& Lx){$/;"	f	class:TJsonVal
GetValFromSIn	glib-core/json.cpp	/^PJsonVal TJsonVal::GetValFromSIn(const PSIn& SIn){$/;"	f	class:TJsonVal
GetValFromStr	glib-core/dt.cpp	/^bool TBool::GetValFromStr(const TStr& Str){$/;"	f	class:TBool
GetValFromStr	glib-core/dt.cpp	/^bool TBool::GetValFromStr(const TStr& Str, const bool& DfVal){$/;"	f	class:TBool
GetValFromStr	glib-core/json.cpp	/^PJsonVal TJsonVal::GetValFromStr(const TStr& JsonStr){$/;"	f	class:TJsonVal
GetValN	glib-core/shash.h	/^  int GetValN() const { return int(GroupI-BegI)*GroupSize + GroupI->OffsetToPos(CurOff); }$/;"	f	class:TSparseTableI
GetValStr	snap-core/gstat.cpp	/^TStr TGStat::GetValStr(const TGStatVal& Val) {$/;"	f	class:TGStat
GetValV	glib-core/os.cpp	/^void TRegKey::GetValV(TStrKdV& ValNmStrKdV) const {$/;"	f	class:TRegKey
GetValV	snap-core/gstat.cpp	/^void TGStatVec::GetValV(const TGStatVal& XVal, const TGStatVal& YVal, TFltPrV& ValV) const {$/;"	f	class:TGStatVec
GetValVPt	glib-core/ds.h	/^  TVal* GetValVPt(const int& VId) const {$/;"	f	class:TGLib_OLD::TVecPool
GetValVPt	glib-core/ds.h	/^  TVal* GetValVPt(const int& VId) const {$/;"	f	class:TVecPool
GetValVStr	glib-core/xmath.cpp	/^TStr TMom::GetValVStr($/;"	f	class:TMom
GetVals	glib-core/ds.h	/^  ::TSize GetVals() const { return Vals; }$/;"	f	class:TGLib_OLD::TVecPool
GetVals	glib-core/ds.h	/^  TSize GetVals() const { return Vals; }$/;"	f	class:TVecPool
GetVals	glib-core/xmath.h	/^  int GetVals() const {return Vals;}$/;"	f
GetVals	snap-core/gstat.h	/^  int GetVals() const { return ValStatH.Len(); }$/;"	f	class:TGStat
GetVarBoolV	glib-core/lx.cpp	/^void TILx::GetVarBoolV(const TStr& VarNm, TBoolV& BoolV, const bool& NewLn){$/;"	f	class:TILx
GetVarFltV	glib-core/lx.cpp	/^void TILx::GetVarFltV(const TStr& VarNm, TFltV& FltV, const bool& NewLn){$/;"	f	class:TILx
GetVarIntV	glib-core/lx.cpp	/^void TILx::GetVarIntV(const TStr& VarNm, TIntV& IntV, const bool& NewLn){$/;"	f	class:TILx
GetVarNmV	glib-core/env.cpp	/^void TEnv::GetVarNmV(TStrV& VarNmV){$/;"	f	class:TEnv
GetVarNmValV	glib-core/env.cpp	/^void TEnv::GetVarNmValV(TStrV& VarNmValV){$/;"	f	class:TEnv
GetVarStrPrV	glib-core/lx.cpp	/^void TILx::GetVarStrPrV(const TStr& VarNm, TStrPrV& StrPrV, const bool& NewLn){$/;"	f	class:TILx
GetVarStrV	glib-core/lx.cpp	/^void TILx::GetVarStrV(const TStr& VarNm, TStrV& StrV, const bool& NewLn){$/;"	f	class:TILx
GetVarStrVV	glib-core/lx.cpp	/^void TILx::GetVarStrVV(const TStr& VarNm, TVec<TStrV>& StrVV, const bool& NewLn){$/;"	f	class:TILx
GetVarVal	glib-core/env.cpp	/^TStr TEnv::GetVarVal(const TStr& VarNm) const {$/;"	f	class:TEnv
GetVari	glib-core/xmath.h	/^  double GetVari() const {Assert(DefP&&UsableP); return Vari;}$/;"	f
GetVariables	snap-core/table.cpp	/^void TPredicate::GetVariables(TStrV& Variables) {$/;"	f	class:TPredicate
GetVariables	snap-core/table.cpp	/^void TPredicateNode::GetVariables(TStrV& Variables) {$/;"	f	class:TPredicateNode
GetVariant	snap-core/ghash.h	/^  int GetVariant() const { return VariantId; }$/;"	f	class:TGraphKey
GetVecs	glib-core/ds.h	/^  ::TSize GetVecs() const { return IdToOffV.Len(); }$/;"	f	class:TGLib_OLD::TVecPool
GetVecs	glib-core/ds.h	/^  int GetVecs() const { return IdToOffV.Len(); }$/;"	f	class:TVecPool
GetVersionNum	glib-core/xml.cpp	/^TStr TXmlLx::GetVersionNum(){$/;"	f	class:TXmlLx
GetVisitedNIdV	snap-core/bfsdfs.h	/^  void GetVisitedNIdV(TIntV& NIdV) const { NIdDistH.GetKeyV(NIdV); }$/;"	f	class:TBreathFS
GetVol	snap-adv/ncp.h	/^    int GetVol() const { return 2*Edges+CutSz; }$/;"	f	class:TLocClustStat::TCutInfo
GetVol	snap-adv/ncp.h	/^  int GetVol(const int& Nodes) const { return VolV[Nodes]; }$/;"	f	class:TLocClust
GetVolV	snap-adv/ncp.h	/^  const TIntV& GetVolV() const { return VolV; } $/;"	f	class:TLocClust
GetVote	snap-exp/wikinet.h	/^  const TWikiVote& GetVote(const int& VoteN) const { return VoteV[VoteN]; }$/;"	f	class:TWikiElec
GetVote	snap-exp/wikinet.h	/^  int GetVote() const { return UsrVote; }$/;"	f	class:TWikiVote
GetVote	snap-exp/wikinet.h	/^  int GetVote() const { return VoteSign; }$/;"	f	class:TWikiTalkEdge
GetVoteNet	snap-exp/wikinet.cpp	/^PSignNet TWikiElecBs::GetVoteNet(const TIntV& UsrIdV) const {$/;"	f	class:TWikiElecBs
GetVoteSubNet	snap-exp/wikinet.cpp	/^PWikiTalkNet TWikiTalkNet::GetVoteSubNet(const int& VoteSign, const bool& VoteOnly, const bool& TalkOnly) const {$/;"	f	class:TWikiTalkNet
GetVoteTm	snap-exp/wikinet.h	/^  TSecTm GetVoteTm() const { return VoteTm; }$/;"	f	class:TWikiTalkEdge
GetVoteTrails	snap-exp/wikinet.cpp	/^int TWikiElecBs::GetVoteTrails(const int& MinUsrVotes, const bool& No01Prob, TIntV& UIdV, TVec<TFltPrV>& ProbSupTmV,$/;"	f	class:TWikiElecBs
GetVoteTrails2	snap-exp/wikinet.cpp	/^void TWikiElecBs::GetVoteTrails2(const int& MinUsrVotes, const bool& No01Prob, TIntV& UIdV, TVec<TFltPrV>& VoteIdxFracSupV, TVec<TFltPrV>& NVotesFracSupV) const {$/;"	f	class:TWikiElecBs
GetVotes	snap-exp/wikinet.cpp	/^TIntTr TWikiElec::GetVotes(const bool& OnlyVotes) const {$/;"	f	class:TWikiElec
GetVotes	snap-exp/wikinet.h	/^  int GetVotes() const { int votes=0; for (int e=0; e<Len(); e++) { votes+=GetElec(e).Len(); } return votes; }$/;"	f	class:TWikiElecBs
GetVotesOt	snap-exp/wikinet.cpp	/^void TWikiElec::GetVotesOt(TWikiVoteV& WVoteV, const bool& OnlyVotes) const {$/;"	f	class:TWikiElec
GetW	snap-adv/agmattr.h	/^  double inline GetW(const int CID, const int K) {$/;"	f	class:TCesna
GetW	snap-adv/agmattr.h	/^  void GetW(TVec<TFltV>& _W) { _W = W; }$/;"	f	class:TCesna
GetWIdV	snap-core/util.cpp	/^void TStrUtil::GetWIdV(const TStrHash<TInt>& StrH, const char *CStr, TIntV& WIdV) {$/;"	f	class:TStrUtil
GetWbFlags	glib-core/unicode.h	/^	int GetWbFlags() const { return flags & ucfWbMask; }$/;"	f	class:TUniChInfo
GetWbFlags	glib-core/unicode.h	/^	int GetWbFlags(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return 0; else return h[i].GetWbFlags(); }$/;"	f	class:TUniChDb
GetWbFlagsStr	glib-core/unicode.h	/^	TStr GetWbFlagsStr() const { return GetWbFlagsStr(GetWbFlags()); }$/;"	f	class:TUniChInfo
GetWbFlagsStr	glib-core/unicode.h	/^	static TStr GetWbFlagsStr(const int flags) { return TStr("") + (flags & ucfWbALetter ? "A" : "") +$/;"	f	class:TUniChInfo
GetWcMatch	glib-core/dt.cpp	/^TStr TStr::GetWcMatch(const TStr& WcStr, const int& StarStrN) const {$/;"	f	class:TStr
GetWccSzCnt	snap-core/cncom.h	/^void GetWccSzCnt(const PGraph& Graph, TIntPrV& WccSzCnt) {$/;"	f	namespace:TSnap
GetWccs	snap-core/cncom.h	/^void GetWccs(const PGraph& Graph, TCnComV& CnComV) {$/;"	f	namespace:TSnap
GetWebLogDateStr	glib-core/tm.h	/^  TStr GetWebLogDateStr() const {return GetYMDDashStr();}$/;"	f	class:TTm
GetWebLogDateTimeStr	glib-core/tm.h	/^  TStr GetWebLogDateTimeStr(const bool& FullP=false, const TStr& DateTimeSepCh=" ", const bool& MSecP=true) const {$/;"	f	class:TTm
GetWebLogTimeStr	glib-core/tm.h	/^  TStr GetWebLogTimeStr() const {return GetHMSTColonDotStr(false);}$/;"	f	class:TTm
GetWebsite	snap-exp/memenet.h	/^  TChA GetWebsite(const int& UrlId) const { return TStrUtil::GetWebsite(UrlH.GetKey(UrlId)); }$/;"	f	class:TMemeNetBs
GetWebsiteNm	snap-core/util.cpp	/^TChA TStrUtil::GetWebsiteNm(const TChA& PostUrlStr) {$/;"	f	class:TStrUtil
GetWeekMSecs	glib-core/tm.h	/^  static uint64 GetWeekMSecs(){return 7*24*60*60*1000;}$/;"	f	class:TTmInfo
GetWeibull	glib-core/dt.h	/^  double GetWeibull(const double& K, const double& Lambda) { \/\/ 1\/alpha = lambda$/;"	f	class:TRnd
GetWeightAttr	snap-adv/agmattr.h	/^  double GetWeightAttr() { return WeightAttr; }$/;"	f	class:TCesna
GetWeightOutEdges	snap-core/network.cpp	/^TFlt TNEANet::GetWeightOutEdges(const TNodeI& NI, const TStr& attr) {$/;"	f	class:TNEANet
GetWeightOutEdges	snap-core/networkmp.cpp	/^TFlt TNEANetMP::GetWeightOutEdges(const TNodeI& NI, const TStr& attr) {$/;"	f	class:TNEANetMP
GetWeightOutEdgesV	snap-core/network.cpp	/^void TNEANet::GetWeightOutEdgesV(TFltV& OutWeights, const TFltV& AttrVal) {$/;"	f	class:TNEANet
GetWeightOutEdgesV	snap-core/networkmp.cpp	/^void TNEANetMP::GetWeightOutEdgesV(TFltV& OutWeights, const TFltV& AttrVal) {$/;"	f	class:TNEANetMP
GetWeightedBetweennessCentr	snap-core/centr.cpp	/^void GetWeightedBetweennessCentr(const PNEANet Graph, TIntFltH& NodeBtwH, TIntPrFltH& EdgeBtwH, const TFltV& Attr, const bool& IsDir, const double& NodeFrac) {$/;"	f	namespace:TSnap
GetWeightedBetweennessCentr	snap-core/centr.cpp	/^void GetWeightedBetweennessCentr(const PNEANet Graph, TIntFltH& NodeBtwH, const TFltV& Attr, const bool& IsDir, const double& NodeFrac) {$/;"	f	namespace:TSnap
GetWeightedBetweennessCentr	snap-core/centr.cpp	/^void GetWeightedBetweennessCentr(const PNEANet Graph, TIntPrFltH& EdgeBtwH, const TFltV& Attr, const bool& IsDir, const double& NodeFrac) {$/;"	f	namespace:TSnap
GetWeightedBetweennessCentr	snap-core/centr.cpp	/^void GetWeightedBetweennessCentr(const PNEANet Graph, const TIntV& BtwNIdV, TIntFltH& NodeBtwH, const bool& IsDir, const bool& DoNodeCent, TIntPrFltH& EdgeBtwH, const bool& DoEdgeCent, const TFltV& Attr) {$/;"	f	namespace:TSnap
GetWeightedClosenessCentr	snap-core/centr.cpp	/^double GetWeightedClosenessCentr(const PNEANet Graph, const int& NId, const bool& IsDir, const TFltV& Attr, const bool& Normalized) {$/;"	f	namespace:TSnap
GetWeightedFarnessCentr	snap-core/centr.cpp	/^double GetWeightedFarnessCentr(const PNEANet Graph, const int& NId, const bool& IsDir, const TFltV& Attr, const bool& Normalized) {$/;"	f	namespace:TSnap
GetWeightedPageRank	snap-core/centr.cpp	/^int GetWeightedPageRank(const PNEANet Graph, TIntFltH& PRankH, const TStr& Attr, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetWeightedPageRankMP	snap-core/centr.cpp	/^int GetWeightedPageRankMP(const PNEANet Graph, TIntFltH& PRankH, const TStr& Attr, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetWeightedPageRankMP1	snap-exp/centr-exp.cpp	/^int GetWeightedPageRankMP1(const PNEANet Graph, TIntFltH& PRankH, const TStr& Attr, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetWeightedPageRankMP2	snap-exp/centr-exp.cpp	/^int GetWeightedPageRankMP2(const PNEANet Graph, TIntFltH& PRankH, const TStr& Attr, const double& C, const double& Eps, const int& MaxIter) {$/;"	f	namespace:TSnap
GetWeightedShortestPath	snap-core/centr.cpp	/^int GetWeightedShortestPath($/;"	f	namespace:TSnap
GetWgt	glib-core/xmath.h	/^  double GetWgt() const {return SumW;}$/;"	f
GetWikiTxtLen	snap-exp/wikinet.cpp	/^int TWikiElecBs::GetWikiTxtLen(char* LineStr) {$/;"	f	class:TWikiElecBs
GetWin1250FromYuascii	glib-core/html.cpp	/^TStr THtmlLxChDef::GetWin1250FromYuascii(const TChA& ChA){$/;"	f	class:THtmlLxChDef
GetWordBoundPV	glib-core/unicodestring.cpp	/^void TUStr::GetWordBoundPV(TBoolV& WordBoundPV){$/;"	f	class:TUStr
GetWordBreakPropertyFn	glib-core/unicode.h	/^	static TStr GetWordBreakPropertyFn() { return "WordBreakProperty.txt"; }$/;"	f	class:TUniChDb
GetWordBreakTestFn	glib-core/unicode.h	/^	static TStr GetWordBreakTestFn() { return "WordBreakTest.txt"; }$/;"	f	class:TUniChDb
GetWordUStrV	glib-core/unicodestring.cpp	/^void TUStr::GetWordUStrV(TUStrV& WordUStrV){$/;"	f	class:TUStr
GetWords	snap-exp/wikinet.h	/^  int GetWords() const { return TotWords; }$/;"	f	class:TWikiTalkEdge
GetWordsAE	snap-exp/wikinet.h	/^  int GetWordsAE() const { return WordsAE; }$/;"	f	class:TWikiTalkEdge
GetWordsBE	snap-exp/wikinet.h	/^  int GetWordsBE() const { return WordsBE; }$/;"	f	class:TWikiTalkEdge
GetWrdCnt	snap-exp/wikinet.h	/^  int GetWrdCnt() const { return MnEdWrds+WkEdCnt; }$/;"	f	class:TWikiUsr
GetWs	glib-core/http.cpp	/^void THttpLx::GetWs(){$/;"	f	class:THttpLx
GetWs	glib-core/xml.cpp	/^void TXmlLx::GetWs(const bool& IsRq){$/;"	f	class:TXmlLx
GetXAtMinY	snap-adv/ncp.cpp	/^double TNcpGraphsBase::GetXAtMinY(const TFltPrV& Ncp, const int& NNodes) {$/;"	f	class:TNcpGraphsBase
GetXDim	glib-core/ds.h	/^  int GetXDim() const {return XDim;}$/;"	f	class:TVVVec
GetXDim	glib-core/ds.h	/^  int GetXDim() const {return XDim;}$/;"	f	class:TVVec
GetXLen	glib-core/ss.cpp	/^int TSs::GetXLen() const {$/;"	f	class:TSs
GetXLen	glib-core/ss.cpp	/^int TSs::GetXLen(const int& Y) const {$/;"	f	class:TSs
GetXOutOfBoundsErrMsg	glib-core/ds.h	/^TStr TVec<TVal, TSizeTy>::GetXOutOfBoundsErrMsg(const TSizeTy& ValN) const {$/;"	f	class:TVec
GetXY	glib-core/ds.h	/^  TVal GetXY(const int& X, const int& Y) const {$/;"	f	class:TVVec
GetXYAtMinY	snap-adv/ncp.cpp	/^TFltPr TNcpGraphsBase::GetXYAtMinY(const TFltPrV& Ncp, const int& NNodes) {$/;"	f	class:TNcpGraphsBase
GetXmlDecl	glib-core/xml.cpp	/^void TXmlLx::GetXmlDecl(){$/;"	f	class:TXmlLx
GetXmlLxSymStr	glib-core/xml.cpp	/^TStr TXmlLx::GetXmlLxSymStr(const TXmlLxSym& XmlLxSym){$/;"	f	class:TXmlLx
GetXmlStr	glib-core/xml.cpp	/^TStr TXmlDoc::GetXmlStr(const TStr& Str){$/;"	f	class:TXmlDoc
GetXmlStrFromPlainMem	glib-core/xml.cpp	/^TStr TXmlLx::GetXmlStrFromPlainMem(const TMem& PlainMem){$/;"	f	class:TXmlLx
GetXmlStrFromPlainStr	glib-core/xml.cpp	/^TStr TXmlLx::GetXmlStrFromPlainStr(const TChA& PlainChA){$/;"	f	class:TXmlLx
GetXmlTagNmVal	snap-core/util.cpp	/^void TStrUtil::GetXmlTagNmVal(TXmlLx& XmlLx, TChA& TagNm, TChA& TagVal) {$/;"	f	class:TStrUtil
GetXmlTagNmVal2	snap-core/util.cpp	/^bool TStrUtil::GetXmlTagNmVal2(TXmlLx& XmlLx, TChA& TagNm, TChA& TagVal, const bool& TakeTagNms) {$/;"	f	class:TStrUtil
GetXmlTagVal	snap-core/util.cpp	/^TChA& TStrUtil::GetXmlTagVal(TXmlLx& XmlLx, const TChA& TagNm) {$/;"	f	class:TStrUtil
GetXmlTok	glib-core/tm.cpp	/^PXmlTok TSecTm::GetXmlTok() const {$/;"	f	class:TSecTm
GetXmlTok	snap-exp/imdbnet.h	/^  PXmlTok GetXmlTok() const { Fail; return NULL; }$/;"	f	class:TImdbNode
GetXmlTok	snap-exp/memes.h	/^  PXmlTok GetXmlTok() const { Fail; return TXmlTok::New("NodeData"); }$/;"	f	class:TQuote
GetYDim	glib-core/ds.h	/^  int GetYDim() const {return YDim;}$/;"	f	class:TVVVec
GetYDim	glib-core/ds.h	/^  int GetYDim() const {return YDim;}$/;"	f	class:TVVec
GetYLen	glib-core/ss.cpp	/^int TSs::GetYLen() const {$/;"	f	class:TSs
GetYMDDashStr	glib-core/tm.cpp	/^TStr TTm::GetYMDDashStr() const {$/;"	f	class:TTm
GetYear	glib-core/tm.h	/^  int GetYear() const {return Year;}$/;"	f	class:TTm
GetYear	snap-core/gstat.h	/^  int GetYear() const { return Time.GetYearN(); }$/;"	f	class:TGStat
GetYear	snap-exp/imdbnet.h	/^  int GetYear() const { return Year; }$/;"	f	class:TImdbNode
GetYearFromTitle	snap-exp/imdbnet.cpp	/^int GetYearFromTitle(char *title) {$/;"	f
GetYearIntFromTm	glib-core/tm.cpp	/^uint TTm::GetYearIntFromTm(const TTm& Tm) {$/;"	f	class:TTm
GetYearN	glib-core/tm.cpp	/^int TSecTm::GetYearN() const {$/;"	f	class:TSecTm
GetYmdTmStr	glib-core/tm.cpp	/^TStr TSecTm::GetYmdTmStr() const {$/;"	f	class:TSecTm
GetYmdTmStr2	glib-core/tm.cpp	/^TStr TSecTm::GetYmdTmStr2() const {$/;"	f	class:TSecTm
GetZDim	glib-core/ds.h	/^  int GetZDim() const {return ZDim;}$/;"	f	class:TVVVec
GetZeroTm	glib-core/tm.h	/^  static TSecTm GetZeroTm(){return TSecTm(0).AddHours(23);}$/;"	f	class:TSecTm
GetZeroWeekTm	glib-core/tm.cpp	/^TSecTm TSecTm::GetZeroWeekTm(){$/;"	f	class:TSecTm
GifFExt	glib-core/fl.cpp	/^const TStr TFile::GifFExt=".Gif";$/;"	m	class:TFile	file:
Giga	glib-core/dt.cpp	/^const int TInt::Giga=1024*1024*1024;$/;"	m	class:TInt	file:
Giga	snap-core/gbase.h	5;"	d
GlobalRelabel	snap-core/flow.cpp	/^void GlobalRelabel (PNEANet &Net, TPRManager &PRM, const int& SrcNId, const int& SnkNId) {$/;"	f	namespace:TSnap
GnuPlotFNm	glib-core/gnuplot.cpp	/^  TStr TGnuPlot::GnuPlotFNm = "gnuplot";$/;"	m	class:TGnuPlot	file:
GnuPlotFNm	glib-core/gnuplot.cpp	/^  TStr TGnuPlot::GnuPlotFNm = "gnuplot.exe";$/;"	m	class:TGnuPlot	file:
GnuPlotFNm	glib-core/gnuplot.cpp	/^  TStr TGnuPlot::GnuPlotFNm = "wgnuplot.exe";$/;"	m	class:TGnuPlot	file:
GnuPlotFNm	glib-core/gnuplot.h	/^  static TStr GnuPlotFNm;$/;"	m	class:TGnuPlot
GnuPlotPath	glib-core/gnuplot.cpp	/^  TStr TGnuPlot::GnuPlotPath = "C:\\\\gnuplot";$/;"	m	class:TGnuPlot	file:
GnuPlotPath	glib-core/gnuplot.cpp	/^  TStr TGnuPlot::GnuPlotPath = "\/usr\/bin";$/;"	m	class:TGnuPlot	file:
GnuPlotPath	glib-core/gnuplot.cpp	/^  TStr TGnuPlot::GnuPlotPath = "\/usr\/local\/bin";$/;"	m	class:TGnuPlot	file:
GnuPlotPath	glib-core/gnuplot.h	/^  static TStr GnuPlotPath;$/;"	m	class:TGnuPlot
GoodLatinCnt	snap-exp/spinn3r.h	/^  TInt BadPostCnt, NoContentCnt, NoLatinCnt, GoodLatinCnt, QuotePostCnt, QuotesCnt;$/;"	m	class:TQuoteExtractor
GoodPostCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFeedItem
GoodPostCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFullItem
GradAffMtx	snap-adv/mag.cpp	/^const void TMAGFitBern::GradAffMtx(const int& AId, const TFltVV& ProdVV, const TFltVV& SqVV, const TMAGAffMtx& CurMtx, TFltV& GradV) {$/;"	f	class:TMAGFitBern
GradApxAffMtx	snap-adv/mag.cpp	/^const void TMAGFitBern::GradApxAffMtx(const int& AId, const TFltVV& ProdVV, const TFltVV& SqVV, const TMAGAffMtx& CurMtx, TFltV& GradV) {$/;"	f	class:TMAGFitBern
GradDescent	snap-adv/kronecker.cpp	/^double TKroneckerLL::GradDescent(const int& NIter, const double& LrnRate, double MnStep, double MxStep, const int& WarmUp, const int& NSamples) {$/;"	f	class:TKroneckerLL
GradDescent2	snap-adv/kronecker.cpp	/^double TKroneckerLL::GradDescent2(const int& NIter, const double& LrnRate, double MnStep, double MxStep, const int& WarmUp, const int& NSamples) {$/;"	f	class:TKroneckerLL
GradDescentConvergence	snap-adv/kronecker.cpp	/^void TKroneckerLL::GradDescentConvergence(const TStr& OutFNm, const TStr& Desc1, const bool& SamplePerm, const int& NIters,$/;"	f	class:TKroneckerLL
GradLogLForLambda	snap-adv/agmfit.cpp	/^void TAGMFit::GradLogLForLambda(TFltV& GradV) {$/;"	f	class:TAGMFit
GradPhiMI	snap-adv/mag.cpp	/^const double TMAGFitBern::GradPhiMI(const double& x, const int& NId, const int& AId, const double& Lambda, const double& DeltaQ, const TFltVV& CntVV) {$/;"	f	class:TMAGFitBern
GradV	snap-adv/kronecker.h	/^    TFltV GradV;$/;"	m	class:TKronMaxLL::TFEval
GradV	snap-adv/kronecker.h	/^  TFltV GradV;  \/\/ DLL at ProbMtx (gradient)$/;"	m	class:TKroneckerLL
GradV	snap-exp/linkpred.h	/^  TFltV GradV;    \/\/ gradient of f_w$/;"	m	class:TEdgeGrad
Gradient	snap-adv/agm.cpp	/^void TLogRegFit::Gradient(TFltV& GradV) {$/;"	f	class:TLogRegFit
Gradient	snap-adv/circles.h	/^void TCluster::Gradient(void) {$/;"	f	class:TCluster
GradientForNode	snap-adv/agmdirected.cpp	/^void TCoda::GradientForNode(const bool IsRow, const int UID, TIntFltH& GradU, const TIntSet& CIDSet) {$/;"	f	class:TCoda
GradientForOneVar	snap-adv/agmfast.cpp	/^double TAGMFast::GradientForOneVar(const TFltV& AlphaKV, const int UID, const int CID, const double& Val) {$/;"	f	class:TAGMFast
GradientForRow	snap-adv/agmattr.cpp	/^void TCesna::GradientForRow(const int UID, TIntFltH& GradU, const TIntSet& CIDSet) {$/;"	f	class:TCesna
GradientForRow	snap-adv/agmfast.cpp	/^void TAGMFast::GradientForRow(const int UID, TIntFltH& GradU, const TIntSet& CIDSet) {$/;"	f	class:TAGMFast
GradientForWK	snap-adv/agmattr.h	/^  void GradientForWK(TFltV& GradV, const int K) {$/;"	f	class:TCesna
Graph	snap-adv/cascnetinf.h	/^  PNGraph Graph, GroundTruth;$/;"	m	class:TNetInfBs
Graph	snap-adv/kronecker.h	/^  PNGraph Graph;         \/\/ graph to fit$/;"	m	class:TKroneckerLL
Graph	snap-adv/mag.h	/^	PNGraph Graph;$/;"	m	class:TMAGFitBern
Graph	snap-adv/ncp.h	/^  PUNGraph Graph; \/\/ set at ::Run()$/;"	m	class:TLocClustStat
Graph	snap-adv/ncp.h	/^  PUNGraph Graph;$/;"	m	class:TLocClust
Graph	snap-core/anf.h	/^  PGraph Graph;$/;"	m	class:TGraphAnf
Graph	snap-core/bfsdfs.h	/^  PGraph Graph;$/;"	m	class:TBreathFS
Graph	snap-core/cncom.h	/^  PGraph Graph;$/;"	m	class:TSccVisitor
Graph	snap-core/ff.h	/^  PNGraph Graph;$/;"	m	class:TFfGGen
Graph	snap-core/ff.h	/^  PNGraph Graph;$/;"	m	class:TForestFire
Graph	snap-core/ff.h	/^  PUNGraph Graph;$/;"	m	class:TUndirFFire
Graph	snap-core/graph.h	/^    const TNEGraph *Graph;$/;"	m	class:TNEGraph::TEdgeI
Graph	snap-core/graph.h	/^    const TNEGraph *Graph;$/;"	m	class:TNEGraph::TNodeI
Graph	snap-core/gsvd.h	/^  PNGraph Graph;$/;"	m	class:TNGraphMtx
Graph	snap-core/gsvd.h	/^  PUNGraph Graph;$/;"	m	class:TUNGraphMtx
Graph	snap-core/kcore.h	/^  PGraph Graph;$/;"	m	class:TKCore
Graph	snap-core/mmnet.h	/^    const TCrossNet *Graph;$/;"	m	class:TCrossNet::TAFltI
Graph	snap-core/mmnet.h	/^    const TCrossNet *Graph;$/;"	m	class:TCrossNet::TAIntI
Graph	snap-core/mmnet.h	/^    const TCrossNet *Graph;$/;"	m	class:TCrossNet::TAStrI
Graph	snap-core/mmnet.h	/^    const TCrossNet *Graph;$/;"	m	class:TCrossNet::TCrossEdgeI
Graph	snap-core/mmnet.h	/^    const TMMNet *Graph;$/;"	m	class:TMMNet::TCrossNetI
Graph	snap-core/mmnet.h	/^    const TMMNet *Graph;$/;"	m	class:TMMNet::TModeNetI
Graph	snap-core/network.h	/^    const TNEANet *Graph;$/;"	m	class:TNEANet::TAFltI
Graph	snap-core/network.h	/^    const TNEANet *Graph;$/;"	m	class:TNEANet::TAIntI
Graph	snap-core/network.h	/^    const TNEANet *Graph;$/;"	m	class:TNEANet::TAIntVI
Graph	snap-core/network.h	/^    const TNEANet *Graph;$/;"	m	class:TNEANet::TAStrI
Graph	snap-core/network.h	/^    const TNEANet *Graph;$/;"	m	class:TNEANet::TEdgeI
Graph	snap-core/network.h	/^    const TNEANet *Graph;$/;"	m	class:TNEANet::TNodeI
Graph	snap-core/networkmp.h	/^    const TNEANetMP *Graph;$/;"	m	class:TNEANetMP::TAFltI
Graph	snap-core/networkmp.h	/^    const TNEANetMP *Graph;$/;"	m	class:TNEANetMP::TAIntI
Graph	snap-core/networkmp.h	/^    const TNEANetMP *Graph;$/;"	m	class:TNEANetMP::TAStrI
Graph	snap-core/networkmp.h	/^    const TNEANetMP *Graph;$/;"	m	class:TNEANetMP::TEdgeI
Graph	snap-core/networkmp.h	/^    const TNEANetMP *Graph;$/;"	m	class:TNEANetMP::TNodeI
Graph	snap-core/triad.h	/^  PGraph Graph;$/;"	m	class:TNetConstraint
Graph	snap-exp/bfs-dev/bfs-dev.h	/^  PGraph Graph;$/;"	m	class:TBreathFS_Test
Graph	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  PGraph Graph;$/;"	m	class:TBreathFS_Hybrid_Test
Graph	snap-exp/bfs-dev/bfs-hybrid.h	/^  PGraph Graph;$/;"	m	class:TBreathFS_Hybrid
Graph	snap-exp/bfs-dev/bfs-parallel.h	/^  PGraph Graph;$/;"	m	class:TBreathFS_Parallel
Graph	snap-exp/bfs-dev/bfs-vector.h	/^  PGraph Graph;$/;"	m	class:TBreathFS_Test
Graph	snap-exp/linkpred.h	/^  PNGraph Graph;$/;"	m	class:__OLD__::TLpExample
Graph	snap-exp/mmgraph-exp.h	/^    const TMNet *Graph;$/;"	m	class:TMNet::TEdgeI
Graph	snap-exp/mmgraph-exp.h	/^    const TMNet *Graph;$/;"	m	class:TMNet::TMNodeI
GraphAttributes	snap-adv/circles.h	/^  PGraphAttributes GraphAttributes; \/\/ Graph with attributes$/;"	m	class:TCluster
GraphCounters	snap-adv/graphcounter.h	/^  THash<TUInt64,TUInt64> &GraphCounters() { return m_graphCounters; }$/;"	f	class:TDGraphCounter
GraphH	snap-core/ghash.h	/^  THash<TGraphKey, TDat> GraphH;$/;"	m	class:TGHash
GraphId	snap-adv/graphcounter.cpp	/^uint64 TGraphEnumUtils::GraphId(const PNGraph &G) {$/;"	f	class:TGraphEnumUtils
GraphId	snap-adv/graphcounter.cpp	/^uint64 TGraphEnumUtils::GraphId(const PNGraph &G, const TIntV &sg) {$/;"	f	class:TGraphEnumUtils
GraphNm	snap-core/gstat.h	/^  TStr GraphNm;$/;"	m	class:TGStat
GraphTest	test/test-alg.cpp	/^class GraphTest : public ::testing::Test {$/;"	c	file:
Graphs	snap-adv/graphcounter.h	/^  TGHash<TUInt64> &Graphs() { return m_graphs; }$/;"	f	class:TDGHashGraphCounter
GreedyOpt	snap-adv/cascnetinf.cpp	/^void TNetInfBs::GreedyOpt(const int& MxEdges) {$/;"	f	class:TNetInfBs
GroundTruth	snap-adv/cascnetinf.h	/^  PNGraph Graph, GroundTruth;$/;"	m	class:TNetInfBs
GroundTruth	snap-adv/circles.h	/^  TVec<TIntSet> GroundTruth; \/\/ Groundtruth communities$/;"	m	class:TGraphAttributes
Group	glib-core/shash.h	/^  TVal *Group;$/;"	m	class:TSparseGroup
Group	snap-core/table.cpp	/^void TTable::Group(const TStrV& GroupBy, const TStr& GroupColName, TBool Ordered, TBool UsePhysicalIds) {$/;"	f	class:TTable
Group	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
GroupAux	snap-core/table.cpp	/^void TTable::GroupAux(const TStrV& GroupBy, THash<TGroupKey, TPair<TInt, TIntV> >& Grouping, $/;"	f	class:TTable
GroupByAttrs	snap-core/table.h	/^	TStrV GroupByAttrs;$/;"	m	class:GroupStmt
GroupByFltCol	snap-core/table.h	/^void TTable::GroupByFltCol(const TStr& GroupBy, T& Grouping, $/;"	f	class:TTable
GroupByFltCol	snap-exp/alternativetable.h	/^  void ExplicitStringTable::GroupByFltCol(const TStr& GroupBy, T& Grouping, $/;"	f	class:ExplicitStringTable
GroupByIntCol	snap-core/table.h	/^void TTable::GroupByIntCol(const TStr& GroupBy, T& Grouping, $/;"	f	class:TTable
GroupByIntCol	snap-exp/alternativetable.h	/^  void ExplicitStringTable::GroupByIntCol(const TStr& GroupBy, T& Grouping, $/;"	f	class:ExplicitStringTable
GroupByIntColMP	snap-core/table.cpp	/^void TTable::GroupByIntColMP(const TStr& GroupBy, THashMP<TInt, TIntV>& Grouping, TBool UsePhysicalIds) const {$/;"	f	class:TTable
GroupByStrCol	snap-core/table.h	/^void TTable::GroupByStrCol(const TStr& GroupBy, T& Grouping, $/;"	f	class:TTable
GroupByStrCol	snap-exp/alternativetable.h	/^  void ExplicitStringTable::GroupByStrCol(const TStr& GroupBy, T& Grouping, $/;"	f	class:ExplicitStringTable
GroupI	glib-core/shash.h	/^  TGroupVI BegI, GroupI, EndI;$/;"	m	class:TSparseTableI
GroupIDMapping	snap-core/table.h	/^  THash<GroupStmt, THash<TInt, TGroupKey> >GroupIDMapping; \/\/\/< Maps grouping statements to their (group id --> group-by key) mapping. ##TTable::GroupIDMapping$/;"	m	class:TTable
GroupMapping	snap-core/table.h	/^  THash<GroupStmt, THash<TGroupKey, TIntV> >GroupMapping; \/\/\/< Maps grouping statements to their (group-by key --> group id) mapping. ##TTable::GroupMapping$/;"	m	class:TTable
GroupNum	glib-core/shash.h	/^  int GroupNum(const int& ValN) const { return ValN \/ GroupSize; }$/;"	f	class:TSparseTable
GroupStmt	snap-core/table.h	/^	GroupStmt(): GroupByAttrs(TStrV()), Ordered(true), UsePhysicalRowIds(true), Valid(true){}$/;"	f	class:GroupStmt
GroupStmt	snap-core/table.h	/^	GroupStmt(const GroupStmt& stmt): GroupByAttrs(stmt.GroupByAttrs), Ordered(stmt.Ordered), UsePhysicalRowIds(stmt.UsePhysicalRowIds), Valid(stmt.Valid){}$/;"	f	class:GroupStmt
GroupStmt	snap-core/table.h	/^	GroupStmt(const TStrV& Attrs): GroupByAttrs(Attrs), Ordered(true), UsePhysicalRowIds(true), Valid(true){}$/;"	f	class:GroupStmt
GroupStmt	snap-core/table.h	/^	GroupStmt(const TStrV& Attrs, TBool ordered, TBool physical): GroupByAttrs(Attrs), Ordered(ordered), UsePhysicalRowIds(physical), Valid(true){}$/;"	f	class:GroupStmt
GroupStmt	snap-core/table.h	/^class GroupStmt{$/;"	c
GroupStmtNames	snap-core/table.h	/^  THash<TStr, GroupStmt > GroupStmtNames; \/\/\/< Maps user-given grouping statement names to their group-by attributes. ##TTable::GroupStmtNames$/;"	m	class:TTable
GroupV	glib-core/shash.h	/^  TVec<TSGroup> GroupV;$/;"	m	class:TSparseTable
GroupingSanityCheck	snap-core/table.cpp	/^void TTable::GroupingSanityCheck(const TStr& GroupBy, const TAttrType& AttrType) const {$/;"	f	class:TTable
GroupingSanityCheck	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::GroupingSanityCheck(const TStr& GroupBy, const TAttrType& AttrType) const {$/;"	f	class:ExplicitStringTable
Groups	glib-core/shash.h	/^  int Groups() const { return GroupV.Len(); }$/;"	f	class:TSparseTable
GrowBy	glib-core/ds.h	/^  ::TSize GrowBy, MxVals, Vals;$/;"	m	class:TGLib_OLD::TVecPool
GrowBy	glib-core/ds.h	/^  TSize GrowBy, MxVals, Vals;$/;"	m	class:TVecPool
GrowBy	glib-core/hash.h	/^  uint GrowBy;$/;"	v
GtrStr	glib-core/lx.cpp	/^const TStr TLxSymStr::GtrStr=">";$/;"	m	class:TLxSymStr	file:
H	glib-core/hash.h	/^  THash<TKey, TDat> H;$/;"	m	class:PHash
H	glib-core/md5.h	/^  static uint4 H(uint4 x, uint4 y, uint4 z){return x^y^z;}$/;"	f
H	snap-adv/agmdirected.h	/^  TVec<TIntFltH> H; \/\/ in-degree membership for each user (Size: Nodes * Coms) A ~ F * H'$/;"	m	class:TCoda
H1TagNm	glib-core/html.cpp	/^const TStr THtmlTok::H1TagNm="<H1>";$/;"	m	class:THtmlTok	file:
H2TagNm	glib-core/html.cpp	/^const TStr THtmlTok::H2TagNm="<H2>";$/;"	m	class:THtmlTok	file:
H3TagNm	glib-core/html.cpp	/^const TStr THtmlTok::H3TagNm="<H3>";$/;"	m	class:THtmlTok	file:
H4TagNm	glib-core/html.cpp	/^const TStr THtmlTok::H4TagNm="<H4>";$/;"	m	class:THtmlTok	file:
H5TagNm	glib-core/html.cpp	/^const TStr THtmlTok::H5TagNm="<H5>";$/;"	m	class:THtmlTok	file:
H6TagNm	glib-core/html.cpp	/^const TStr THtmlTok::H6TagNm="<H6>";$/;"	m	class:THtmlTok	file:
HEADER	snap-exp/test-dev/Makefile	/^HEADER = Engine.h$/;"	m
HH	glib-core/md5.h	/^  static void HH(uint4& a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac){$/;"	f
HI	snap-core/graph.h	/^    inline THashIter HI() const { return ! LeftHI.IsEnd()?LeftHI:RightHI; }$/;"	f	class:TBPGraph::TNodeI
HI	snap-core/mmnet.h	/^    TFltVecIter HI;$/;"	m	class:TCrossNet::TAFltI
HI	snap-core/mmnet.h	/^    TIntVecIter HI;$/;"	m	class:TCrossNet::TAIntI
HI	snap-core/mmnet.h	/^    TStrVecIter HI;$/;"	m	class:TCrossNet::TAStrI
HI	snap-core/network.h	/^    TFltVecIter HI;$/;"	m	class:TNEANet::TAFltI
HI	snap-core/network.h	/^    TIntVVecIter HI;$/;"	m	class:TNEANet::TAIntVI
HI	snap-core/network.h	/^    TIntVecIter HI;$/;"	m	class:TNEANet::TAIntI
HI	snap-core/network.h	/^    TStrVecIter HI;$/;"	m	class:TNEANet::TAStrI
HI	snap-core/networkmp.h	/^    TFltVecIter HI;$/;"	m	class:TNEANetMP::TAFltI
HI	snap-core/networkmp.h	/^    TIntVecIter HI;$/;"	m	class:TNEANetMP::TAIntI
HI	snap-core/networkmp.h	/^    TStrVecIter HI;$/;"	m	class:TNEANetMP::TAStrI
HOKIDSV	snap-adv/agmattr.h	/^  TVec<TIntSet> HOKIDSV; \/\/set of attribute index (k) to hold out$/;"	m	class:TCesna
HOVIDSV	snap-adv/agmattr.h	/^  TVec<TIntSet> HOVIDSV; \/\/NID pairs to hold out for cross validation$/;"	m	class:TCesna
HOVIDSV	snap-adv/agmdirected.h	/^  TVec<TIntSet> HOVIDSV; \/\/NID pairs to hold out for cross validation$/;"	m	class:TCoda
HOVIDSV	snap-adv/agmfast.h	/^  TVec<TIntSet> HOVIDSV; \/\/NID pairs to hold out for cross validation$/;"	m	class:TAGMFast
HRefArgNm	glib-core/html.cpp	/^const TStr THtmlTok::HRefArgNm="HREF";$/;"	m	class:THtmlTok	file:
Hairpins	snap-adv/kronecker.h	/^  double Edges, Hairpins, Tripins, Triads;$/;"	m	class:TKronMomentsFit
HangulLBase	glib-core/unicode.h	/^        HangulSBase = 0xAC00, HangulLBase = 0x1100, HangulVBase = 0x1161, HangulTBase = 0x11A7,$/;"	e	enum:TUniChDb::__anon47
HangulLCount	glib-core/unicode.h	/^        HangulLCount = 19, HangulVCount = 21, HangulTCount = 28,$/;"	e	enum:TUniChDb::__anon47
HangulNCount	glib-core/unicode.h	/^        HangulNCount = HangulVCount * HangulTCount,   \/\/ 588$/;"	e	enum:TUniChDb::__anon47
HangulSBase	glib-core/unicode.h	/^        HangulSBase = 0xAC00, HangulLBase = 0x1100, HangulVBase = 0x1161, HangulTBase = 0x11A7,$/;"	e	enum:TUniChDb::__anon47
HangulSCount	glib-core/unicode.h	/^        HangulSCount = HangulLCount * HangulNCount   \/\/ 11172$/;"	e	enum:TUniChDb::__anon47
HangulTBase	glib-core/unicode.h	/^        HangulSBase = 0xAC00, HangulLBase = 0x1100, HangulVBase = 0x1161, HangulTBase = 0x11A7,$/;"	e	enum:TUniChDb::__anon47
HangulTCount	glib-core/unicode.h	/^        HangulLCount = 19, HangulVCount = 21, HangulTCount = 28,$/;"	e	enum:TUniChDb::__anon47
HangulVBase	glib-core/unicode.h	/^        HangulSBase = 0xAC00, HangulLBase = 0x1100, HangulVBase = 0x1161, HangulTBase = 0x11A7,$/;"	e	enum:TUniChDb::__anon47
HangulVCount	glib-core/unicode.h	/^        HangulLCount = 19, HangulVCount = 21, HangulTCount = 28,$/;"	e	enum:TUniChDb::__anon47
Has1Gram	glib-core/unicode.h	/^	bool Has1Gram(const TItem& item) const { return singles.IsKey(item); }$/;"	f	class:TUniTrie
Has2Gram	glib-core/unicode.h	/^	bool Has2Gram(const TItem& last, const TItem& butLast) const { return pairs.IsKey(TItemPr(last, butLast)); }$/;"	f	class:TUniTrie
HasActive	snap-core/flow.cpp	/^  bool HasActive() {$/;"	f	class:TSnap::TPRManager
HasDistr	snap-core/gstat.h	/^  bool HasDistr(const TGStatDistr& Distr) const { return DistrStatH.IsKey(Distr); }$/;"	f	class:TGStat
HasDistr	snap-core/gstat.h	/^  bool HasDistr(const TGStatDistr& Stat) const { return StatFSet.In(Stat); }$/;"	f	class:TGStatVec
HasFlag	snap-core/bignet.h	/^  bool HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TBigNet
HasFlag	snap-core/graph.cpp	/^bool TNEGraph::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNEGraph
HasFlag	snap-core/graph.cpp	/^bool TNGraph::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNGraph
HasFlag	snap-core/graph.cpp	/^bool TUNGraph::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TUNGraph
HasFlag	snap-core/graphmp.cpp	/^bool TNGraphMP::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNGraphMP
HasFlag	snap-core/network.cpp	/^bool TDirNet::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TDirNet
HasFlag	snap-core/network.cpp	/^bool TNEANet::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNEANet
HasFlag	snap-core/network.cpp	/^bool TUndirNet::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TUndirNet
HasFlag	snap-core/network.h	/^bool TNodeEDatNet<TNodeData, TEdgeData>::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNodeEDatNet
HasFlag	snap-core/network.h	/^bool TNodeEdgeNet<TNodeData, TEdgeData>::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNodeEdgeNet
HasFlag	snap-core/network.h	/^bool TNodeNet<TNodeData>::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNodeNet
HasFlag	snap-core/networkmp.cpp	/^bool TNEANetMP::HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TNEANetMP
HasFlag	snap-exp/mmgraph-exp.h	/^  bool HasFlag(const TGraphFlag& Flag) const {$/;"	f	class:TMNet
HasGraphFlag	snap-core/gbase.h	39;"	d
HasMinusEdge	snap-exp/signnet.h	/^  bool HasMinusEdge(const int& NId) const {$/;"	f	class:TEdgeSignPred
HasNext	snap-core/table.h	/^  bool HasNext() { return CurrTableIdx < PTableV.Len(); }$/;"	f	class:TTableIterator
HasVal	snap-core/gstat.cpp	/^bool TGStat::HasVal(const TGStatVal& StatVal) const {$/;"	f	class:TGStat
HasVal	snap-core/gstat.h	/^  bool HasVal(const TGStatVal& Stat) const { return StatFSet.In(Stat); }$/;"	f	class:TGStatVec
Hash	glib-core/hash.h	/^    const THash<TKey, TDat, THashFunc>& Hash;$/;"	m	class:THash::THashKeyDatCmp
Hash	glib-core/hashmp.h	/^    const THashMP<TKey, TDat, THashFunc>& Hash;$/;"	m	class:THashMP::THashMPKeyDatCmp
Hash	glib-core/shash.h	/^  int Hash() const { return Key.GetPrimHashCd(); }$/;"	f	class:TSHashKeyDat
Hash	snap-exp/lsh.cpp	/^int TLSHash::CosineHash::Hash(TFltV Datum) {$/;"	f	class:TLSHash::CosineHash
Hash	snap-exp/lsh.cpp	/^int TLSHash::EuclideanHash::Hash(TFltV Datum) {$/;"	f	class:TLSHash::EuclideanHash
Hash	snap-exp/lsh.cpp	/^int TLSHash::JaccardHash::Hash(TFltV Datum) {$/;"	f	class:TLSHash::JaccardHash
HashBench	tutorials/demo-hashvec-benchmark.cpp	/^void HashBench(const int& n) {$/;"	f
HashCd	glib-core/hash.h	/^  TInt HashCd;$/;"	m	class:THashKeyDat
HashCd	glib-core/hashmp.h	/^  TInt HashCd;$/;"	m	class:THashMPKeyDat
HashCd	glib-core/shash.h	/^  TInt HashCd;$/;"	m	class:THashSetKey
HashCh	glib-core/dt.cpp	/^const char TCh::HashCh='#';$/;"	m	class:TCh	file:
HashFunc	snap-exp/lsh.h	/^  class HashFunc {$/;"	c	class:TLSHash
HashFuncV	snap-exp/lsh.h	/^  TVec<TPt<HashFunc> > HashFuncV;$/;"	m	class:TLSHash
HashI	snap-exp/mmgraph-exp.h	/^    THashIter HashI;$/;"	m	class:TMNet::TMNodeI
HashOnlyTrees	snap-core/ghash.h	/^  TBool HashOnlyTrees; \/\/ hashing only trees (exact isomorphism test)$/;"	m	class:TGHash
HashPrimeT	glib-core/hash.h	/^  static const unsigned int HashPrimeT[HashPrimes];$/;"	m	class:THash
HashPrimeT	glib-core/hash.h	/^const unsigned int THash<TKey, TDat, THashFunc>::HashPrimeT[HashPrimes]={$/;"	m	class:THash
HashPrimeT	glib-core/hashmp.h	/^  static const unsigned int HashPrimeT[HashPrimes];$/;"	m	class:THashMP
HashPrimeT	glib-core/hashmp.h	/^const unsigned int THashMP<TKey, TDat, THashFunc>::HashPrimeT[HashPrimes]={$/;"	m	class:THashMP
HashPrimes	glib-core/hash.h	/^  enum {HashPrimes=32};$/;"	e	enum:THash::__anon28
HashPrimes	glib-core/hashmp.h	/^  enum {HashPrimes=32};$/;"	e	enum:THashMP::__anon57
HashStr	glib-core/lx.cpp	/^const TStr TLxSymStr::HashStr="#";$/;"	m	class:TLxSymStr	file:
HashTrees	snap-core/ghash.h	/^  bool HashTrees() const { return HashOnlyTrees; }$/;"	f	class:TGHash
Haversine	snap-core/table.h	/^typedef enum {L1Norm, L2Norm, Jaccard, Haversine} TSimType;$/;"	e	enum:__anon83
HdLen	glib-core/fl.h	/^  int HdLen, RecLen;$/;"	v
HdStr	glib-core/env.h	/^  TStr HdStr;$/;"	m	class:TEnv
HdStr	glib-core/http.h	/^  TStr HdStr;$/;"	v
HeadMethodNm	glib-core/http.cpp	/^const TStr THttp::HeadMethodNm="HEAD";$/;"	m	class:THttp	file:
HeadMethodNm	glib-core/http.h	/^  static const TStr HeadMethodNm;$/;"	m	class:THttp
HeapV	snap-core/gbase.h	/^  TVec<TVal> HeapV;$/;"	m	class:THeap
Hessian	snap-adv/agm.cpp	/^void TLogRegFit::Hessian(TFltVV& HVV) {$/;"	f	class:TLogRegFit
HessianForOneVar	snap-adv/agmfast.cpp	/^double TAGMFast::HessianForOneVar(const TFltV& AlphaKV, const int UID, const int CID, const double& Val) {$/;"	f	class:TAGMFast
HostFldNm	glib-core/http.cpp	/^const TStr THttp::HostFldNm="Host";$/;"	m	class:THttp	file:
HostFldNm	glib-core/http.h	/^  static const TStr HostFldNm;$/;"	m	class:THttp
HostNm	glib-core/url.h	/^  TStr SchemeNm, HostNm;$/;"	v
Hour	glib-core/tm.h	/^  TInt Hour, Min, Sec, MSec;$/;"	m	class:TTm
HtmFExt	glib-core/fl.cpp	/^const TStr TFile::HtmFExt=".Htm";$/;"	m	class:TFile	file:
HtmlFExt	glib-core/fl.cpp	/^const TStr TFile::HtmlFExt=".Html";$/;"	m	class:TFile	file:
HttpEquivArgNm	glib-core/html.cpp	/^const TStr THtmlTok::HttpEquivArgNm="HTTP-EQUIV";$/;"	m	class:THtmlTok	file:
HttpExCd	glib-core/http.cpp	/^  THttpExCd HttpExCd;$/;"	m	class:THttpChRet	file:
HttpExCd	glib-core/http.cpp	/^  THttpExCd HttpExCd;$/;"	m	class:THttpEx	file:
HttpRqStr	glib-core/url.h	/^  TStr HttpRqStr;$/;"	v
HttpStr	glib-core/http.cpp	/^const TStr THttp::HttpStr="http";$/;"	m	class:THttp	file:
HttpStr	glib-core/http.h	/^  static const TStr HttpStr;$/;"	m	class:THttp
Hyperplane	snap-exp/lsh.h	/^    TBoolV Hyperplane;$/;"	m	class:TLSHash::CosineHash
I	glib-core/md5.h	/^  static uint4 I(uint4 x, uint4 y, uint4 z){return y^(x|~z);}$/;"	f
I0	snap-exp/sir.h	/^  double N0, I0;$/;"	m	class:TSirModel
I0B	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSir2Model
I0B	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSirSR2Model
I0M	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSir2Model
I0M	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSirSR2Model
IAssert	glib-core/bd.h	262;"	d
IAssertR	glib-core/bd.h	265;"	d
II	glib-core/md5.h	/^  static void II(uint4& a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac){$/;"	f
INCLUDES	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^INCLUDES= -I $(SNAPDIR)\/snap-core -I $(SNAPDIR)\/glib-core$/;"	m
INCLUDES	contrib/unict_univr-risnap/RiToSnap/Makefile	/^INCLUDES= -I $(SNAPDIR)\/snap-core -I $(SNAPDIR)\/glib-core$/;"	m
INFECTION_STEP	snap-adv/cascdynetinf.h	/^  INFECTION_STEP, \/\/ run inference every # number of infections$/;"	e	enum:__anon63
INT_TYPE_PREFIX	snap-core/gio.h	/^const TStr INT_TYPE_PREFIX = ("Int");$/;"	m	namespace:TSnap
IOConnList	tutorials/demo-gio.cpp	/^void IOConnList() {$/;"	f
IOConnListStr	tutorials/demo-gio.cpp	/^void IOConnListStr() {$/;"	f
IODyNet	tutorials/demo-gio.cpp	/^void IODyNet() {$/;"	f
IOEdgeListStr	tutorials/demo-gio.cpp	/^void IOEdgeListStr() {$/;"	f
IOGViz	tutorials/demo-gio.cpp	/^void IOGViz() {$/;"	f
IOMatlabSparseMtx	tutorials/demo-gio.cpp	/^void IOMatlabSparseMtx() {$/;"	f
IOPajek	tutorials/demo-gio.cpp	/^void IOPajek() {$/;"	f
ISort	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::ISort(const TSizeTy& MnLValN, const TSizeTy& MxRValN, const bool& Asc){$/;"	f	class:TVec
ISort	snap-core/table.cpp	/^void TTable::ISort(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:TTable
ISort	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::ISort(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:PhysicalOrderTable
ISortCmp	glib-core/ds.h	/^  static void ISortCmp(TIter BI, TIter EI, const TCmp& Cmp) {$/;"	f	class:TVec
ISortKeyVal	snap-core/table.cpp	/^void TTable::ISortKeyVal(TIntV& Key, TIntV& Val, TInt Start, TInt End) {$/;"	f	class:TTable
Id	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    int Id;$/;"	m	class:TMatchingMachine::TMaMaEdge
Id	snap-core/graph.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEGraph::TEdge
Id	snap-core/graph.h	/^    TInt Id;$/;"	m	class:TBPGraph::TNode
Id	snap-core/graph.h	/^    TInt Id;$/;"	m	class:TNEGraph::TNode
Id	snap-core/graph.h	/^    TInt Id;$/;"	m	class:TNGraph::TNode
Id	snap-core/graph.h	/^    TInt Id;$/;"	m	class:TUNGraph::TNode
Id	snap-core/graphmp.h	/^    TInt Id;$/;"	m	class:TNGraphMP::TNode
Id	snap-core/network.h	/^    TInt  Id;$/;"	m	class:TNodeEDatNet::TNode
Id	snap-core/network.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEANet::TEdge
Id	snap-core/network.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNodeEdgeNet::TEdge
Id	snap-core/network.h	/^    TInt Id;$/;"	m	class:TDirNet::TNode
Id	snap-core/network.h	/^    TInt Id;$/;"	m	class:TNEANet::TNode
Id	snap-core/network.h	/^    TInt Id;$/;"	m	class:TNodeEdgeNet::TNode
Id	snap-core/network.h	/^    TInt Id;$/;"	m	class:TNodeNet::TNode
Id	snap-core/network.h	/^    TInt Id;$/;"	m	class:TUndirNet::TNode
Id	snap-core/networkmp.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEANetMP::TEdge
Id	snap-core/networkmp.h	/^    TInt Id;$/;"	m	class:TNEANetMP::TNode
Id	snap-exp/arxiv.h	/^    TInt Id;$/;"	m	class:TArxivPaperList::TArxivPaper
Id	snap-exp/arxiv.h	/^  TInt Id;$/;"	m	class:TArxivPaperList
Id	snap-exp/graphmp-exp.h	/^    TInt Id;$/;"	m	class:TUNGraphMP::TNode
Id	snap-exp/mmgraph-exp.h	/^    TInt Id;$/;"	m	class:TMNet::TNodeType
Id	snap-exp/mmgraph-exp.h	/^    TInt TypeId, Id, SrcNId, DstNId;$/;"	m	class:TMNet::TEdge
Id	snap-exp/mmgraph-exp.h	/^  TInt Id; \/\/ Get global ID$/;"	m	class:TCVNode
Id	snap-exp/mmgraph-exp.h	/^  TInt Id; \/\/ Get global ID$/;"	m	class:TMVNode
Id	snap-exp/mmgraph-exp.h	/^  TInt Id;$/;"	m	class:TSVNode
IdColName	snap-core/table.h	/^  TStr IdColName; \/\/\/< Name of column associated with (optional) permanent row identifiers.$/;"	m	class:TTable
IdColName	snap-exp/alternativetable.h	/^  TStr IdColName; \/\/\/< Name of column associated with (optional) permanent row identifiers.$/;"	m	class:ExplicitStringTable
IdColName	snap-exp/alternativetable.h	/^  TStr IdColName; \/\/\/< Name of column associated with (optional) permanent row identifiers.$/;"	m	class:PhysicalOrderTable
IdFor	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	s_size_t IdFor(std::string* Value) {$/;"	f	class:TIDer
IdOffV	glib-core/hash.h	/^  TVec<TSize> IdOffV; \/\/ string ID to offset$/;"	v
IdStrStr	glib-core/lx.cpp	/^const TStr TLxSymStr::IdStrStr="<id-string>";$/;"	m	class:TLxSymStr	file:
IdToOffV	glib-core/ds.h	/^  TVec< ::TSize> IdToOffV; \/\/ id to one past last (vector starts at [id-1])$/;"	m	class:TGLib_OLD::TVecPool
IdToOffV	glib-core/ds.h	/^  TVec<uint64, int> IdToOffV;   \/\/ Id to one past last (Vector starts at [id-1]). Vector length is IdToOff[id]-IdToOff[id-1]$/;"	m	class:TVecPool
ImageGifFldVal	glib-core/http.cpp	/^const TStr THttp::ImageGifFldVal="image\/gif";$/;"	m	class:THttp	file:
ImageGifFldVal	glib-core/http.h	/^  static const TStr ImageGifFldVal;$/;"	m	class:THttp
ImageIcoFldVal	glib-core/http.cpp	/^const TStr THttp::ImageIcoFldVal="image\/x-icon";$/;"	m	class:THttp	file:
ImageIcoFldVal	glib-core/http.h	/^  static const TStr ImageIcoFldVal;$/;"	m	class:THttp
ImageJpgFldVal	glib-core/http.cpp	/^const TStr THttp::ImageJpgFldVal="image\/jpg";$/;"	m	class:THttp	file:
ImageJpgFldVal	glib-core/http.h	/^  static const TStr ImageJpgFldVal;$/;"	m	class:THttp
ImagePngFldVal	glib-core/http.cpp	/^const TStr THttp::ImagePngFldVal="image\/png";$/;"	m	class:THttp	file:
ImagePngFldVal	glib-core/http.h	/^  static const TStr ImagePngFldVal;$/;"	m	class:THttp
ImgStr	snap-exp/wikinet.h	/^  TChA CatStr, ImgStr, TemplateStr; \/\/ list of categories, images and templates$/;"	m	class:TWikiMetaLoader
ImgTagNm	glib-core/html.cpp	/^const TStr THtmlTok::ImgTagNm="<IMG>";$/;"	m	class:THtmlTok	file:
Impose	snap-adv/ncp.cpp	/^void TNcpGraphsBase::Impose(const TStr& OutFNm, const int& TopN, const bool& Smooth) { $/;"	f	class:TNcpGraphsBase
ImposeDistr	snap-core/gstat.cpp	/^void TGStatVec::ImposeDistr(const TGStatDistr& Distr, const TStr& FNmPref, TStr Desc, const bool& ExpBin, $/;"	f	class:TGStatVec
ImposeElecNet	snap-exp/wikinet.cpp	/^void TWikiTalkNet::ImposeElecNet(const TWikiElecBs& ElecBs, const THash<TChA, TChA>& UsrChageH, const bool& AddVoteOnlyEdges) {$/;"	f	class:TWikiTalkNet
ImposeNCP	snap-adv/ncp.cpp	/^void TLocClustStat::ImposeNCP(const TLocClustStat& LcStat2, TStr OutFNm, TStr Desc, TStr Desc1, TStr Desc2) const {$/;"	f	class:TLocClustStat
ImposeNCP	snap-adv/ncp.cpp	/^void TLocClustStat::ImposeNCP(const TLocClustStat& LcStat2, const TLocClustStat& LcStat3, TStr OutFNm, TStr Desc, TStr Desc1, TStr Desc2, TStr Desc3) const {$/;"	f	class:TLocClustStat
In	glib-core/bits.h	/^  bool In(const int& BitN) const {$/;"	f
In	glib-core/bits.h	/^  bool In(const int& BitN) const {$/;"	f	class:TB32Set
In	glib-core/bits.h	/^  bool In(const int& BitN) const {$/;"	f	class:TB8Set
In	glib-core/bits.h	/^  bool In(const int& FlagN) const {$/;"	f	class:TFSet
InCmtyValHV	snap-adv/agmdirected.h	/^  TVec<TIntFltH> InCmtyValHV;$/;"	m	class:TCodaAnalyzer
InDeg	snap-core/bignet.h	/^    int InDeg, OutDeg, *InNIdV, *OutNIdV; \/\/ if undirected, InNIdV==OutNIdV$/;"	m	class:TBigNet::TNodeI
InDeg	snap-exp/mmgraph-exp.h	/^  TInt InDeg, OutDeg;$/;"	m	class:TCVNode
InDeg	snap-exp/mmgraph-exp.h	/^  TInt InDeg, OutDeg;$/;"	m	class:TSVNode
InDegInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> InDegInf, InDegNet;   \/\/ average in-degree of a cascade$/;"	m	class:TCascadeStat	file:
InDegNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> InDegInf, InDegNet;   \/\/ average in-degree of a cascade$/;"	m	class:TCascadeStat	file:
InEIdV	snap-core/graph.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNEGraph::TNode
InEIdV	snap-core/network.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNEANet::TNode
InEIdV	snap-core/network.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNodeEdgeNet::TNode
InEIdV	snap-core/networkmp.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNEANetMP::TNode
InEIdV	snap-exp/mmgraph-exp.h	/^  TIntV InEIdV, OutEIdV; \/\/ Vectors of EIds$/;"	m	class:TMVNode
InEIdV	snap-exp/mmgraph-exp.h	/^  TIntV InEIdV, OutEIdV;$/;"	m	class:TCVNode
InEIdVV	snap-exp/mmgraph-exp.h	/^  TVec<TIntV > InEIdVV, OutEIdVV;$/;"	m	class:TSVNode
InETypeIdV	snap-exp/mmgraph-exp.h	/^  TIntV InETypeIdV, OutETypeIdV; \/\/ Vectors of ETypeIds$/;"	m	class:TMVNode
InETypes	snap-exp/mmgraph-exp.h	/^  TVec<TIntV> InETypes;$/;"	m	class:TMNet
InEdgesSizes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	int* InEdgesSizes;$/;"	m	class:TMatchingMachine
InEdgesSizes	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* InEdgesSizes;$/;"	m	class:TMatchingMachine
InFNmF	snap-exp/memes.h	/^  PSIn InFNmF;$/;"	m	class:TMemesDataLoader
InFNmWc	snap-exp/spinn3r.h	/^  TStr InFNmWc;$/;"	m	class:TSpinn3rFullItem
InNIdV	snap-core/bignet.h	/^    int InDeg, OutDeg, *InNIdV, *OutNIdV; \/\/ if undirected, InNIdV==OutNIdV$/;"	m	class:TBigNet::TNodeI
InNIdV	snap-core/graph.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TNGraph::TNode
InNIdV	snap-core/graphmp.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TNGraphMP::TNode
InNIdV	snap-core/network.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TDirNet::TNode
InNIdV	snap-core/network.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TNodeNet::TNode
InNIdV	snap-core/network.h	/^    TIntV InNIdV;$/;"	m	class:TNodeEDatNet::TNode
InOutCmtyValHV	snap-adv/agmdirected.h	/^  TVec<TIntFltH> InOutCmtyValHV;$/;"	m	class:TCodaAnalyzer
InPlusPH	snap-exp/signnet.h	/^    TIntH OutPlusPH, InPlusPH;  \/\/ histogram of out-\/in- plus probability$/;"	m	struct:TSignMicroEvol::TCloseStat
InRange	glib-core/xmath.h	/^  static const T& InRange(const T& Val, const T& Mn, const T& Mx) {$/;"	f	class:TMath
InSumWgt	snap-exp/signnet.h	/^    TFlt InSumWgt, InVarSq;     \/\/ sum p+, sum p*(1-p) (in plus prob)$/;"	m	struct:TSignMicroEvol::TCloseStat
InTypeDegV	snap-exp/mmgraph-exp.h	/^  TIntV InTypeDegV, OutTypeDegV;$/;"	m	class:TCVNode
InTypeIndexV	snap-exp/mmgraph-exp.h	/^  TIntV InTypeIndexV, OutTypeIndexV;$/;"	m	class:TCVNode
InVId	snap-core/bignet.h	/^    TInt InVId;$/;"	m	class:TBigNet::TNode
InVarSq	snap-exp/signnet.h	/^    TFlt InSumWgt, InVarSq;     \/\/ sum p+, sum p*(1-p) (in plus prob)$/;"	m	struct:TSignMicroEvol::TCloseStat
IncLevInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> IncLevInf, IncLevNet; \/\/ number of levels with increasing width$/;"	m	class:TCascadeStat	file:
IncLevNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> IncLevInf, IncLevNet; \/\/ number of levels with increasing width$/;"	m	class:TCascadeStat	file:
Incl	glib-core/bits.h	/^  void Incl(const TFSet& FSet){$/;"	f	class:TFSet
Incl	glib-core/bits.h	/^  void Incl(const int& BitN){$/;"	f
Incl	glib-core/bits.h	/^  void Incl(const int& BitN){$/;"	f	class:TB32Set
Incl	glib-core/bits.h	/^  void Incl(const int& BitN){$/;"	f	class:TB8Set
Incl	glib-core/bits.h	/^  void Incl(const int& FlagN){$/;"	f	class:TFSet
InclBoolV	glib-core/url.cpp	/^void TUrlLxChDef::InclBoolV(TBoolV& BoolV, const TBoolV& OrBoolV){$/;"	f	class:TUrlLxChDef
InclCh	glib-core/url.cpp	/^void TUrlLxChDef::InclCh(TBoolV& BoolV, const char& Ch){BoolV[Ch]=true;}$/;"	f	class:TUrlLxChDef
InclStr	glib-core/url.cpp	/^void TUrlLxChDef::InclStr(TBoolV& BoolV, const TStr& Str){$/;"	f	class:TUrlLxChDef
IncludesAttr	snap-core/table.h	/^	TBool IncludesAttr(const TStr& Attr){$/;"	f	class:GroupStmt
Increase	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void Increase(int* NS, int* SIS, int i, int** Weights, int LeftLimit) {$/;"	f	class:TMatchingMachine
IncrementNext	snap-core/table.cpp	/^void TTable::IncrementNext()$/;"	f	class:TTable
IncrementWeight	snap-adv/motifcluster.cpp	/^static void IncrementWeight(int i, int j, WeightVH& weights) {$/;"	f	file:
IndexToVal	glib-core/priorityqueue.h	/^  TVec<TVal> IndexToVal;$/;"	m	class:TMaxPriorityQueue
Infect	snap-core/ff.h	/^  void Infect(const TIntV& InfectedNIdV) { InfectNIdV = InfectedNIdV; }$/;"	f	class:TForestFire
Infect	snap-core/ff.h	/^  void Infect(const int& NodeId) { InfectNIdV.Gen(1,1);  InfectNIdV[0] = NodeId; }$/;"	f	class:TForestFire
InfectAll	snap-core/ff.cpp	/^void TForestFire::InfectAll() {$/;"	f	class:TForestFire
InfectNIdV	snap-core/ff.h	/^  TIntV InfectNIdV;  \/\/ nodes to start fire$/;"	m	class:TForestFire
InfectRnd	snap-core/ff.cpp	/^void TForestFire::InfectRnd(const int& NInfect) {$/;"	f	class:TForestFire
InferredNetwork	snap-adv/cascdynetinf.h	/^  TStrFltFltHNEDNet InferredNetwork;$/;"	m	class:TNIBs
InfoNotify	glib-core/bd.h	/^inline void InfoNotify(const char* NotifyCStr){$/;"	f
InfoNotify	glib-core/ut.h	/^inline void InfoNotify(const TStr& MsgStr){InfoNotify(MsgStr.CStr());}$/;"	f
Infomap	snap-core/cmty.cpp	/^double Infomap(PUNGraph& Graph, TCnComV& CmtyV){$/;"	f	namespace:TSnap
InfomapOnline	snap-core/cmty.cpp	/^double InfomapOnline(PUNGraph& Graph, int n1, int n2, TIntFltH& PAlpha, double& SumPAlphaLogPAlpha, TIntFltH& Qi, TIntH& Module, int& Br, TCnComV& CmtyV) {$/;"	f	namespace:TSnap
InfomapOnlineIncrement	snap-core/cmty.cpp	/^double InfomapOnlineIncrement(PUNGraph& Graph, int n1, int n2, TIntFltH& PAlpha, double& SumPAlphaLogPAlpha, TIntFltH& Qi, TIntH& Module, int& Br) {$/;"	f	namespace:TSnap::TSnapDetail
Init	glib-core/md5.cpp	/^void TMd5::Init(){$/;"	f	class:TMd5
Init	glib-core/unicode.h	/^	void Init() { InitCodecs(); }$/;"	f	class:TUnicode
Init	snap-adv/cascdynetinf.cpp	/^void TNIBs::Init(const TFltV& Steps) {$/;"	f	class:TNIBs
Init	snap-adv/cascnetinf.cpp	/^void TNetInfBs::Init() {$/;"	f	class:TNetInfBs
Init	snap-adv/mag.cpp	/^void TMAGFitBern::Init(const TFltV& MuV, const TMAGAffMtxV& AffMtxV) {$/;"	f	class:TMAGFitBern
Init	snap-core/cmty.cpp	/^  void Init(const PUNGraph& Graph) {$/;"	f	class:TSnap::TSnapDetail::TCNMQMatrix
Init	snap-core/kcore.h	/^void TKCore<PGraph>::Init() {$/;"	f	class:TKCore
Init	snap-exp/lsh.cpp	/^void TLSHash::Init() {$/;"	f	class:TLSHash
InitAfterLoad	glib-core/unicode.cpp	/^void TUniChDb::InitAfterLoad()$/;"	f	class:TUniChDb
InitAfterLoad	glib-core/unicode.h	/^	void InitAfterLoad() {$/;"	f	class:TUniChInfo
InitAlpha	snap-adv/cascdynetinf.h	/^  TFlt Tol, MaxAlpha, MinAlpha, InitAlpha;$/;"	m	class:TNIBs
InitAnfBits	snap-core/anf.h	/^void TGraphAnf<PGraph>::InitAnfBits(TAnfBitV& BitV) {$/;"	f	class:TGraphAnf
InitBigV	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  bool InitBigV;$/;"	m	class:TBreathFS_Hybrid_Test
InitBigV	snap-exp/bfs-dev/bfs-hybrid.h	/^  bool InitBigV;$/;"	m	class:TBreathFS_Hybrid
InitBigV	snap-exp/bfs-dev/bfs-parallel.h	/^  bool InitBigV;$/;"	m	class:TBreathFS_Parallel
InitCodecs	glib-core/unicode.cpp	/^void TUnicode::InitCodecs()$/;"	f	class:TUnicode
InitDayOfWeekNmV	glib-core/tm.cpp	/^void TTmInfo::InitDayOfWeekNmV(){$/;"	f	class:TTmInfo
InitDerivedCoreProperties	glib-core/unicode.cpp	/^void TUniChDb::InitDerivedCoreProperties(const TStr& basePath)$/;"	f	class:TUniChDb
InitDomains	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^bool InitDomains(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Target,$/;"	f
InitGraph	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
InitIds	snap-core/table.cpp	/^void TTable::InitIds() {$/;"	f	class:TTable
InitIds	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::InitIds() {$/;"	f	class:ExplicitStringTable
InitIds	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::InitIds() {$/;"	f	class:PhysicalOrderTable
InitItemSets	snap-exp/trawling.cpp	/^void TTrawling::InitItemSets() {$/;"	f	class:TTrawling
InitLL	snap-adv/kronecker.cpp	/^void TKroneckerLL::InitLL(const PNGraph& GraphPt, const TKronMtx& ParamMtx) {$/;"	f	class:TKroneckerLL
InitLL	snap-adv/kronecker.cpp	/^void TKroneckerLL::InitLL(const TFltV& ParamV) {$/;"	f	class:TKroneckerLL
InitLL	snap-adv/kronecker.cpp	/^void TKroneckerLL::InitLL(const TKronMtx& ParamMtx) {$/;"	f	class:TKroneckerLL
InitLineBreaks	glib-core/unicode.cpp	/^void TUniChDb::InitLineBreaks(const TStr& basePath)$/;"	f	class:TUniChDb
InitMonthNmV	glib-core/tm.cpp	/^void TTmInfo::InitMonthNmV(){$/;"	f	class:TTmInfo
InitNodeData	snap-adv/agmfit.cpp	/^void TAGMFit::InitNodeData() {$/;"	f	class:TAGMFit
InitP	glib-core/tm.cpp	/^bool TTmInfo::InitP=false;$/;"	m	class:TTmInfo	file:
InitP	glib-core/tm.h	/^  static bool InitP;$/;"	m	class:TTmInfo
InitPermutations	snap-core/ghash.h	/^void TGHash<TDat>::InitPermutations() {$/;"	f	class:TGHash
InitProb	snap-adv/cascnetinf.cpp	/^void TCascade::InitProb() {$/;"	f	class:TCascade
InitPropList	glib-core/unicode.cpp	/^void TUniChDb::InitPropList(const TStr& basePath)$/;"	f	class:TUniChDb
InitQGraph	snap-exp/linkpred.cpp	/^void TLpExample::InitQGraph() {$/;"	f	class:TLpExample
InitRowIdBuckets	snap-core/table.cpp	/^void TTable::InitRowIdBuckets(int NumBuckets) {$/;"	f	class:TTable
InitScripts	glib-core/unicode.cpp	/^void TUniChDb::InitScripts(const TStr& basePath)$/;"	f	class:TUniChDb
InitSpecialCasing	glib-core/unicode.cpp	/^void TUniChDb::InitSpecialCasing(const TStr& basePath)$/;"	f	class:TUniChDb
InitW	snap-adv/agmattr.h	/^  void InitW() { \/\/ initialize W$/;"	f	class:TCesna
InitWordAndSentenceBoundaryFlags	glib-core/unicode.cpp	/^void TUniChDb::InitWordAndSentenceBoundaryFlags(const TStr& basePath)$/;"	f	class:TUniChDb
Initialize	snap-adv/motifcluster.cpp	/^void ChibaNishizekiWeighter::Initialize(int k) {$/;"	f	class:ChibaNishizekiWeighter
InitializeJointTable	snap-core/table.cpp	/^ PTable TTable::InitializeJointTable(const TTable& Table) {$/;"	f	class:TTable
InitializeJointTable	snap-exp/alternativetable.cpp	/^PExplicitStringTable ExplicitStringTable::InitializeJointTable(const ExplicitStringTable& Table) {$/;"	f	class:ExplicitStringTable
Inner	snap-adv/circles.h	/^TFlt Inner(TIntIntH& Feature, TFlt* Parameter) {$/;"	f
Ins	glib-core/ds.h	/^TLstNd<TVal>* TLst<TVal>::Ins(const PLstNd& Nd, const TVal& Val){$/;"	f	class:TLst
Ins	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Ins(const TSizeTy& ValN, const TVal& Val){$/;"	f	class:TVec
Ins	glib-core/dt.cpp	/^void TChA::Ins(const int& BChN, const char* CStr){$/;"	f	class:TChA
InsStr	glib-core/dt.cpp	/^void TStr::InsStr(const int& BChN, const TStr& Str){$/;"	f	class:TStr
Insert	glib-core/priorityqueue.h	/^  void Insert(const TVal& X, float Priority) {$/;"	f	class:TMaxPriorityQueue
InsertLineBreaks	snap-exp/memes.cpp	/^TChA InsertLineBreaks(const TChA& ChA, const int& BreakAtPost) {$/;"	f
IntAttrNameEI	snap-core/mmnet.cpp	/^void TCrossNet::IntAttrNameEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TStrV& Names) const {$/;"	f	class:TCrossNet
IntAttrNameEI	snap-core/mmnet.h	/^  void IntAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TCrossNet
IntAttrNameEI	snap-core/network.cpp	/^void TNEANet::IntAttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANet
IntAttrNameEI	snap-core/network.h	/^  void IntAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANet
IntAttrNameEI	snap-core/networkmp.cpp	/^void TNEANetMP::IntAttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
IntAttrNameEI	snap-core/networkmp.h	/^  void IntAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANetMP
IntAttrNameNI	snap-core/network.cpp	/^void TNEANet::IntAttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANet
IntAttrNameNI	snap-core/network.h	/^  void IntAttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANet
IntAttrNameNI	snap-core/networkmp.cpp	/^void TNEANetMP::IntAttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
IntAttrNameNI	snap-core/networkmp.h	/^  void IntAttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANetMP
IntAttrVals	snap-core/attr.h	/^  TIntIntPrPrIntH IntAttrVals;$/;"	m	class:TAttrPair
IntAttrVals	snap-core/attr.h	/^  TIntPrIntH IntAttrVals;$/;"	m	class:TAttr
IntAttrValueEI	snap-core/mmnet.cpp	/^void TCrossNet::IntAttrValueEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TIntV& Values) const {$/;"	f	class:TCrossNet
IntAttrValueEI	snap-core/mmnet.h	/^  void IntAttrValueEI(const TInt& EId, TIntV& Values) const {$/;"	f	class:TCrossNet
IntAttrValueEI	snap-core/network.cpp	/^void TNEANet::IntAttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TIntV& Values) const {$/;"	f	class:TNEANet
IntAttrValueEI	snap-core/network.h	/^  void IntAttrValueEI(const TInt& EId, TIntV& Values) const {$/;"	f	class:TNEANet
IntAttrValueEI	snap-core/networkmp.cpp	/^void TNEANetMP::IntAttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TIntV& Values) const {$/;"	f	class:TNEANetMP
IntAttrValueEI	snap-core/networkmp.h	/^  void IntAttrValueEI(const TInt& EId, TIntV& Values) const {$/;"	f	class:TNEANetMP
IntAttrValueNI	snap-core/network.cpp	/^void TNEANet::IntAttrValueNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TIntV& Values) const {$/;"	f	class:TNEANet
IntAttrValueNI	snap-core/network.h	/^  void IntAttrValueNI(const TInt& NId, TIntV& Values) const {$/;"	f	class:TNEANet
IntAttrValueNI	snap-core/networkmp.cpp	/^void TNEANetMP::IntAttrValueNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TIntV& Values) const {$/;"	f	class:TNEANetMP
IntAttrValueNI	snap-core/networkmp.h	/^  void IntAttrValueNI(const TInt& NId, TIntV& Values) const {$/;"	f	class:TNEANetMP
IntColIndexes	snap-core/table.h	/^  THash<TStr, THash<TInt, TIntV> > IntColIndexes; \/\/\/< Indexes for Int Columns.$/;"	m	class:TTable
IntCols	snap-core/table.h	/^  TVec<TIntV> IntCols; \/\/\/< Data columns of integer attributes.$/;"	m	class:TTable
IntCols	snap-exp/alternativetable.h	/^  TVec<TIntV> IntCols; \/\/\/< Data columns of integer attributes.$/;"	m	class:ExplicitStringTable
IntCols	snap-exp/alternativetable.h	/^  TVec<TIntV> IntCols; \/\/\/< Data columns of integer attributes.$/;"	m	class:PhysicalOrderTable
IntConst	snap-core/table.h	/^    TInt IntConst; \/\/\/< Int const value if this object is an integer constant$/;"	m	class:TAtomicPredicate
IntDefaultsE	snap-core/mmnet.h	/^  THash<TStr, TInt> IntDefaultsE;$/;"	m	class:TCrossNet
IntDefaultsE	snap-core/network.h	/^  THash<TStr, TInt> IntDefaultsN, IntDefaultsE;$/;"	m	class:TNEANet
IntDefaultsE	snap-core/networkmp.h	/^  THashMP<TStr, TInt> IntDefaultsN, IntDefaultsE;$/;"	m	class:TNEANetMP
IntDefaultsN	snap-core/network.h	/^  THash<TStr, TInt> IntDefaultsN, IntDefaultsE;$/;"	m	class:TNEANet
IntDefaultsN	snap-core/networkmp.h	/^  THashMP<TStr, TInt> IntDefaultsN, IntDefaultsE;$/;"	m	class:TNEANetMP
IntFlowBiDBFS	snap-core/flow.cpp	/^int IntFlowBiDBFS (const PNEANet &Net, const int& CapIndex, TIntV &Flow, TIntQ &FwdNodeQ, TIntH &PredEdgeH, TIntQ &BwdNodeQ, TIntH &SuccEdgeH, const int& SrcNId, const int& SnkNId) {$/;"	f	namespace:TSnap
IntStr	glib-core/lx.cpp	/^const TStr TLxSymStr::IntStr="<integer>";$/;"	m	class:TLxSymStr	file:
IntType	snap-core/mmnet.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TCrossNet::__anon110
IntType	snap-core/network.h	/^  enum { IntType, StrType, FltType, IntVType };$/;"	e	enum:TNEANet::__anon96
IntType	snap-core/networkmp.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TNEANetMP::__anon77
IntType	snap-exp/mmgraph-exp.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TMNet::__anon2
IntVAttrNameEI	snap-core/network.cpp	/^void TNEANet::IntVAttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANet
IntVAttrNameEI	snap-core/network.h	/^  void IntVAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANet
IntVAttrNameNI	snap-core/network.cpp	/^void TNEANet::IntVAttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANet
IntVAttrNameNI	snap-core/network.h	/^  void IntVAttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANet
IntVAttrValueEI	snap-core/network.cpp	/^void TNEANet::IntVAttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TVec<TIntV>& Values) const {$/;"	f	class:TNEANet
IntVAttrValueEI	snap-core/network.h	/^  void IntVAttrValueEI(const TInt& EId, TVec<TIntV>& Values) const {$/;"	f	class:TNEANet
IntVAttrValueNI	snap-core/network.cpp	/^void TNEANet::IntVAttrValueNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TVec<TIntV>& Values) const {$/;"	f	class:TNEANet
IntVAttrValueNI	snap-core/network.h	/^  void IntVAttrValueNI(const TInt& NId, TVec<TIntV>& Values) const {$/;"	f	class:TNEANet
IntVType	snap-core/network.h	/^  enum { IntType, StrType, FltType, IntVType };$/;"	e	enum:TNEANet::__anon96
IntVal	snap-core/table.h	/^  TInt IntVal;$/;"	m	class:TPrimitive
IntVals	snap-core/table.h	/^  TIntV IntVals; \/\/\/< Values of the int columns for this row.$/;"	m	class:TTableRow
IntVals	snap-exp/alternativetable.h	/^  TIntV IntVals;$/;"	m	class:RowBasedTableRow
IntVars	snap-core/table.h	/^		THash<TStr, TInt> IntVars; \/\/\/< Int variables in the current predicate tree$/;"	m	class:TPredicate
InternalErrStatusCd	glib-core/http.cpp	/^const int THttp::InternalErrStatusCd=500;$/;"	m	class:THttp	file:
InternalErrStatusCd	glib-core/http.h	/^  static const int InternalErrStatusCd;$/;"	m	class:THttp
Intersect	snap-core/centr.cpp	/^int Intersect(TUNGraph::TNodeI Node, TIntH NNodes){$/;"	f	namespace:TSnap
Intersect	snap-core/centr.cpp	/^int Intersect(TUNGraph::TNodeI Node, TStr NNodes){$/;"	f	namespace:TSnap
Intersect	snap-core/centr.cpp	/^int Intersect(TUNGraph::TNodeI Node, int *NNodes, int NNodes_br){$/;"	f	namespace:TSnap
Intersect1	snap-core/centr.cpp	/^int Intersect1(TUNGraph::TNodeI Node, TStr NNodes){$/;"	f	namespace:TSnap
Intersection	glib-core/dt.cpp	/^bool TFltRect::Intersection(const TFltRect& Rect1, const TFltRect& Rect2){$/;"	f	class:TFltRect
Intersection	snap-adv/agm.cpp	/^int TAGMUtil::Intersection(const THashSet<TInt>& A, const THashSet<TInt>& B) {$/;"	f	class:TAGMUtil
Intersection	snap-adv/agm.cpp	/^int TAGMUtil::Intersection(const TIntV& C1, const TIntV& C2) {$/;"	f	class:TAGMUtil
Intersection	snap-adv/cliques.cpp	/^int TCliqueOverlap::Intersection(const THashSet<TInt>& A, const THashSet<TInt>& B) {$/;"	f	class:TCliqueOverlap
Intersection	snap-core/table.cpp	/^PTable TTable::Intersection(const TTable& Table) {$/;"	f	class:TTable
Intersection	snap-core/table.h	/^  PTable Intersection(const PTable& Table) { return Intersection(*Table); };$/;"	f	class:TTable
Intrs	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Intrs(const TVec<TVal, TSizeTy>& ValV){$/;"	f	class:TVec
Intrs	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Intrs(const TVec<TVal, TSizeTy>& ValV, TVec<TVal, TSizeTy>& DstValV) const {$/;"	f	class:TVec
IntrsLen	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::IntrsLen(const TVec<TVal, TSizeTy>& ValV) const {$/;"	f	class:TVec
Inv	glib-core/xmath.h	/^  static double Inv(const double& x){IAssert(x!=0.0); return (1.0\/x);}$/;"	f	class:TMath
Invalid	snap-core/table.cpp	/^TInt const TTable::Invalid = -2;$/;"	m	class:TTable	file:
Invalid	snap-core/table.h	/^  static const TInt Invalid; \/\/\/< Special value for Next vector entry - logically removed row.$/;"	m	class:TTable
Invalid	snap-exp/alternativetable.cpp	/^TInt const ExplicitStringTable::Invalid = -2;$/;"	m	class:ExplicitStringTable	file:
Invalid	snap-exp/alternativetable.cpp	/^TInt const RowBasedTable::Invalid = -2;$/;"	m	class:RowBasedTable	file:
Invalid	snap-exp/alternativetable.h	/^  	static const TInt Invalid; $/;"	m	class:RowBasedTable
Invalid	snap-exp/alternativetable.h	/^  static const TInt Invalid; \/\/\/< Special value for Next vector entry - logically removed row.$/;"	m	class:ExplicitStringTable
Invalidate	snap-core/table.h	/^	void Invalidate(){ Valid = false;}$/;"	f	class:GroupStmt
InvalidateAffectedGroupings	snap-core/table.cpp	/^void TTable::InvalidateAffectedGroupings(const TStr& Attr){$/;"	f	class:TTable
InvalidatePhysicalGroupings	snap-core/table.cpp	/^void TTable::InvalidatePhysicalGroupings(){$/;"	f	class:TTable
Inverse	glib-core/linalg.cpp	/^void TLinAlg::Inverse(const TFltVV& A, TFltVV& B, const TLinAlgInverseType& DecompType) {$/;"	f	class:TLinAlg
InverseSVD	glib-core/linalg.cpp	/^void TLinAlg::InverseSVD(const TFltVV& M, TFltVV& B) {$/;"	f	class:TLinAlg
InverseSubstitute	glib-core/linalg.cpp	/^void TNumericalStuff::InverseSubstitute(TFltVV& A, const TFltV& p) {$/;"	f	class:TNumericalStuff
InverseSymetric	glib-core/linalg.cpp	/^void TNumericalStuff::InverseSymetric(TFltVV& A) {$/;"	f	class:TNumericalStuff
InverseTriagonal	glib-core/linalg.cpp	/^void TNumericalStuff::InverseTriagonal(TFltVV& A) {$/;"	f	class:TNumericalStuff
InvertFromSources	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::InvertFromSources(uint ExpectNodes) {$/;"	f	class:TBigNet
InvertPerm	snap-adv/kronecker.h	/^  TIntV InvertPerm;      \/\/ current invert permutation$/;"	m	class:TKroneckerLL
IpNum	glib-core/url.h	/^  TStr IpNum;$/;"	v
Is32Bit	glib-core/os.h	/^  static bool Is32Bit(){return sizeof(char*)==4;}$/;"	f
Is64Bit	glib-core/os.h	/^  static bool Is64Bit(){return sizeof(char*)==8;}$/;"	f
IsAVote	snap-exp/wikinet.h	/^  TBool IsAVote;   \/\/ is vote or a comment$/;"	m	class:TWikiVote
IsAbs	glib-core/url.cpp	/^bool TUrl::IsAbs(const TStr& UrlStr){$/;"	f	class:TUrl
IsAbsFPath	glib-core/dt.cpp	/^bool TStr::IsAbsFPath(const TStr& FPath){$/;"	f	class:TStr
IsActive	snap-core/flow.cpp	/^  int IsActive(int NId) {$/;"	f	class:TSnap::TPRManager
IsActor	snap-exp/imdbnet.h	/^  bool IsActor() const { return GetTy() == mtyActor; }$/;"	f	class:TImdbNode
IsAdmin	snap-exp/wikinet.h	/^  bool IsAdmin() const { return Admin; }$/;"	f	class:TWikiUsr
IsAlNum	glib-core/html.h	/^  bool IsAlNum(const char& Ch) const {$/;"	f
IsAlNum	glib-core/lx.h	/^  bool IsAlNum(const char& Ch) const {$/;"	f
IsAllValVNeg	snap-core/gsvd.cpp	/^bool IsAllValVNeg(TFltV& ValV, const bool& InvertSign) {$/;"	f	namespace:TSnap
IsAlpha	glib-core/html.h	/^  bool IsAlpha(const char& Ch) const {return int(ChTyV[Ch-TCh::Mn])==hlctAlpha;}$/;"	f
IsAlpha	glib-core/http.cpp	/^  bool IsAlpha(const char& Ch){return ChTyV[Ch-TCh::Mn]==int(hpctAlpha);}$/;"	f	class:THttpChDef
IsAlpha	glib-core/lx.h	/^  bool IsAlpha(const char& Ch) const {return ChTyV[Ch-TCh::Mn]==TInt(lctAlpha);}$/;"	f
IsAlphaV	glib-core/url.cpp	/^  TBoolV IsLoAlphaV, IsHiAlphaV, IsAlphaV;$/;"	m	class:TUrlLxChDef	file:
IsAlphabetic	glib-core/unicode.h	/^	bool IsAlphabetic() const { return IsDcpFlag(ucfDcpAlphabetic); }$/;"	f	class:TUniChInfo
IsAlphabetic	glib-core/unicodestring.cpp	/^bool TUStr::IsAlphabetic(const int& UniCh){$/;"	f	class:TUStr
IsArgPrefix	glib-core/env.h	/^  bool IsArgPrefix(const TStr& PrefixStr) const {$/;"	f	class:TEnv
IsArgStr	glib-core/env.cpp	/^bool TEnv::IsArgStr(const TStr& ArgStr) {$/;"	f	class:TEnv
IsArgStr	glib-core/env.cpp	/^bool TEnv::IsArgStr(const TStr& ArgStr, const TStr& DNm) {$/;"	f	class:TEnv
IsArr	glib-core/json.h	/^  bool IsArr() const {return JsonValType==jvtArr;}$/;"	f
IsAsc	glib-core/ds.h	/^  bool IsAsc;$/;"	m	class:TCmpKeyDatByDat
IsAsc	glib-core/ds.h	/^  bool IsAsc;$/;"	m	class:TCmpPairByVal2
IsAsc	glib-core/ds.h	/^  bool IsAsc;$/;"	m	class:TCmpTripleByVal2
IsAsc	glib-core/ds.h	/^  bool IsAsc;$/;"	m	class:TCmpTripleByVal3
IsAsciiHexDigit	glib-core/unicode.h	/^	bool IsAsciiHexDigit() const { return IsProperty(ucfPrAsciiHexDigit); }$/;"	f	class:TUniChInfo
IsAttr	snap-core/table.cpp	/^TBool TTable::IsAttr(const TStr& Attr) {$/;"	f	class:TTable
IsAttrDeletedE	snap-core/mmnet.cpp	/^bool TCrossNet::IsAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TCrossNet
IsAttrDeletedE	snap-core/network.cpp	/^bool TNEANet::IsAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TNEANet
IsAttrDeletedN	snap-core/network.cpp	/^bool TNEANet::IsAttrDeletedN(const int& NId, const TStr& attr) const {$/;"	f	class:TNEANet
IsAutoSize	glib-core/hash.h	/^  bool IsAutoSize() const {return AutoSizeP;}$/;"	f	class:THash
IsAutoSize	glib-core/shash.h	/^  bool IsAutoSize() const {return AutoSizeP; }$/;"	f	class:THashSet
IsAutoSize	snap-core/ghash.h	/^  bool IsAutoSize() const { return GraphH.IsAutoSize(); }$/;"	f	class:TGHash
IsBalanceFrac	snap-exp/signnet.cpp	/^bool TSignMicroEvol::IsBalanceFrac(const int& OpnTriadId) const {$/;"	f	class:TSignMicroEvol
IsBalanceSurp	snap-exp/signnet.cpp	/^bool TSignMicroEvol::IsBalanceSurp(const int& OpnTriadId) const {$/;"	f	class:TSignMicroEvol
IsBalanced	snap-exp/signnet.cpp	/^bool TSignNet::IsBalanced() const {$/;"	f	class:TSignNet
IsBalancedSwapEdge	snap-exp/signnet.cpp	/^bool IsBalancedSwapEdge(const PSignNet& Net, const TIntPr& BackEdge, const int& Sign) {$/;"	f
IsBaseUrl	glib-core/url.h	/^  bool IsBaseUrl(){return !BaseUrlStr.Empty();}$/;"	f
IsBidiControl	glib-core/unicode.h	/^	bool IsBidiControl() const { return IsProperty(ucfPrBidiControl); }$/;"	f	class:TUniChInfo
IsBidirEdge	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsBidirEdge(PNGraph graph, int u, int v) {$/;"	f	class:MotifCluster
IsBipart	snap-core/gbase.h	/^template <class TGraph> struct IsBipart     { enum { Val = 0 }; };$/;"	s	namespace:TSnap
IsBipart	snap-core/graph.h	/^template <> struct IsBipart<TBPGraph> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsBody	glib-core/http.h	/^  bool IsBody() const { return !BodyMem.Empty(); }$/;"	f
IsBool	glib-core/dt.cpp	/^bool TStr::IsBool(bool& Val) const {$/;"	f	class:TStr
IsBool	glib-core/json.h	/^  bool IsBool() const {return JsonValType==jvtBool;}$/;"	f
IsBreakTag	glib-core/html.cpp	/^bool THtmlTok::IsBreakTag(const TStr& TagNm){$/;"	f	class:THtmlTok
IsBreakTok	glib-core/html.cpp	/^bool THtmlTok::IsBreakTok(const PHtmlTok& Tok){$/;"	f	class:THtmlTok
IsCascade	snap-adv/cascdynetinf.h	/^  bool IsCascade(int c) { return CascH.IsKey(c); }$/;"	f	class:TNIBs
IsCase	glib-core/unicodestring.cpp	/^bool TUStr::IsCase(const int& UniCh){$/;"	f	class:TUStr
IsCased	glib-core/unicode.h	/^	bool IsCased() const { return IsUppercase() || IsLowercase() || (subCat == ucLetterTitlecase); }$/;"	f	class:TUniChInfo
IsChIn	glib-core/wch.h	/^  bool IsChIn(const char& Ch) const {return SearchCh(Ch)!=-1;}$/;"	f	class:TWChA
IsChar	glib-core/xml.h	/^  bool IsChar(const uchar& Ch) const {return CharChSet.GetBit(Ch);}$/;"	f
IsClosedTriad	snap-exp/signnet.cpp	/^bool TSignNet::IsClosedTriad() const {$/;"	f	class:TSignNet
IsClust	snap-exp/memes.h	/^  bool IsClust(const int& CId) const { return ClustQtIdVH.IsKey(CId); }$/;"	f	class:TQuoteBs
IsCmt	glib-core/ssmp.h	/^  bool IsCmt() const { return Len()>0 && GetFld(0)[0] == '#'; }$/;"	f
IsColName	snap-core/table.h	/^  TBool IsColName(const TStr& ColName) const {$/;"	f	class:TTable
IsColName	snap-exp/alternativetable.h	/^  TBool IsColName(const TStr& ColName) const {$/;"	f	class:ExplicitStringTable
IsComb	glib-core/xml.h	/^  bool IsComb(const uchar& Ch) const {return CombChSet.GetBit(Ch);}$/;"	f
IsCompatibilityDecomposition	glib-core/unicode.h	/^	bool IsCompatibilityDecomposition() const { return (flags & ucfCompatibilityDecomposition) == ucfCompatibilityDecomposition; }$/;"	f	class:TUniChInfo
IsComplete	glib-core/http.h	/^  bool IsComplete() const {return CompleteP;}$/;"	f
IsCompositionExclusion	glib-core/unicode.h	/^	bool IsCompositionExclusion() const { return (flags & ucfCompositionExclusion) == ucfCompositionExclusion; }$/;"	f	class:TUniChInfo
IsConnected	snap-core/cncom.h	/^bool IsConnected(const PGraph& Graph) {$/;"	f	namespace:TSnap
IsConst	snap-core/table.h	/^    TBool IsConst; \/\/\/< Flag if this atomic node represents a constant value$/;"	m	class:TAtomicPredicate
IsContLen	glib-core/http.h	/^  bool IsContLen(int& ContLen) const {$/;"	f
IsContType	glib-core/http.h	/^  bool IsContType(const TStr& ContTypeStr) const {$/;"	f
IsCr	glib-core/http.cpp	/^  bool IsCr(const char& Ch){return Ch==13;}$/;"	f	class:THttpChDef
IsCrLf	glib-core/http.cpp	/^bool THttpLx::IsCrLf(){$/;"	f	class:THttpLx
IsCrLfLn	glib-core/fl.cpp	/^bool TMOut::IsCrLfLn() const {$/;"	f	class:TMOut
IsCtl	glib-core/http.cpp	/^  bool IsCtl(const char& Ch){return ChTyV[Ch-TCh::Mn]==int(hpctCtl);}$/;"	f	class:THttpChDef
IsCurrency	glib-core/unicode.h	/^	bool IsCurrency() const { return subCat == ucSymbolCurrency; }$/;"	f	class:TUniChInfo
IsDQuote	glib-core/http.cpp	/^  bool IsDQuote(const char& Ch){return Ch=='"';}$/;"	f	class:THttpChDef
IsDash	glib-core/unicode.h	/^	bool IsDash() const { return IsProperty(ucfPrDash); }$/;"	f	class:TUniChInfo
IsDayOfWeekNm	glib-core/tm.h	/^  static bool IsDayOfWeekNm(const TStr& DayOfWeekNm, const TLoc& Loc=lUs){$/;"	f	class:TTmInfo
IsDcpFlag	glib-core/unicode.h	/^	bool IsDcpFlag(const TUniChFlags flag) const { Assert((flag & ucfDcpMask) == flag); return (flags & flag) == flag; }$/;"	f	class:TUniChInfo
IsDef	glib-core/json.h	/^  bool IsDef() const {return JsonValType!=jvtUndef;}$/;"	f
IsDef	glib-core/tm.h	/^  bool IsDef() const {$/;"	f	class:TTm
IsDef	glib-core/tm.h	/^  bool IsDef() const {return uint(AbsSecs)!=TUInt::Mx;}$/;"	f	class:TSecTm
IsDef	glib-core/unicodestring.h	/^  static bool IsDef(){$/;"	f	class:TUnicodeDef
IsDef	glib-core/xmath.h	/^  bool IsDef() const {return DefP;}$/;"	f
IsDefFinalUrl	glib-core/url.h	/^  bool IsDefFinalUrl() const {$/;"	f
IsDefaultIgnorable	glib-core/unicode.h	/^	bool IsDefaultIgnorable() const { return IsDcpFlag(ucfDcpDefaultIgnorableCodePoint); }$/;"	f	class:TUniChInfo
IsDeleted	snap-core/mmnet.h	/^    bool IsDeleted() const { return GetDat() == Graph->GetFltAttrDefaultE(attr); };$/;"	f	class:TCrossNet::TAFltI
IsDeleted	snap-core/mmnet.h	/^    bool IsDeleted() const { return GetDat() == Graph->GetIntAttrDefaultE(attr); };$/;"	f	class:TCrossNet::TAIntI
IsDeleted	snap-core/mmnet.h	/^    bool IsDeleted() const { return GetDat() == Graph->GetStrAttrDefaultE(attr); };$/;"	f	class:TCrossNet::TAStrI
IsDeleted	snap-core/network.h	/^    bool IsDeleted() const { return isNode ? GetDat() == Graph->GetFltAttrDefaultN(attr) : GetDat() == Graph->GetFltAttrDefaultE(attr); };$/;"	f	class:TNEANet::TAFltI
IsDeleted	snap-core/network.h	/^    bool IsDeleted() const { return isNode ? GetDat() == Graph->GetIntAttrDefaultN(attr) : GetDat() == Graph->GetIntAttrDefaultE(attr); };$/;"	f	class:TNEANet::TAIntI
IsDeleted	snap-core/network.h	/^    bool IsDeleted() const { return isNode ? GetDat() == Graph->GetStrAttrDefaultN(attr) : GetDat() == Graph->GetStrAttrDefaultE(attr); };$/;"	f	class:TNEANet::TAStrI
IsDeleted	snap-core/networkmp.h	/^    bool IsDeleted() const { return isNode ? GetDat() == Graph->GetFltAttrDefaultN(attr) : GetDat() == Graph->GetFltAttrDefaultE(attr); };$/;"	f	class:TNEANetMP::TAFltI
IsDeleted	snap-core/networkmp.h	/^    bool IsDeleted() const { return isNode ? GetDat() == Graph->GetIntAttrDefaultN(attr) : GetDat() == Graph->GetIntAttrDefaultE(attr); };$/;"	f	class:TNEANetMP::TAIntI
IsDeleted	snap-core/networkmp.h	/^    bool IsDeleted() const { return isNode ? GetDat() == Graph->GetStrAttrDefaultN(attr) : GetDat() == Graph->GetStrAttrDefaultE(attr); };$/;"	f	class:TNEANetMP::TAStrI
IsDeprecated	glib-core/unicode.h	/^	bool IsDeprecated() const { return IsProperty(ucfPrDeprecated); }$/;"	f	class:TUniChInfo
IsDiacritic	glib-core/unicode.h	/^	bool IsDiacritic() const { return IsProperty(ucfPrDiacritic); }$/;"	f	class:TUniChInfo
IsDigit	glib-core/http.cpp	/^  bool IsDigit(const char& Ch){return ChTyV[Ch-TCh::Mn]==int(hpctDigit);}$/;"	f	class:THttpChDef
IsDigit	glib-core/xml.h	/^  bool IsDigit(const uchar& Ch) const {return DigitChSet.GetBit(Ch);}$/;"	f
IsDigitCh	glib-core/url.cpp	/^  bool IsDigitCh() const {return ChDef.IsDigitCh(PeekCh());}$/;"	f	class:TUrlLx
IsDigitCh	glib-core/url.cpp	/^  bool IsDigitCh(const char& Ch) const {return (Ch>=0)&&IsDigitV[Ch];}$/;"	f	class:TUrlLxChDef
IsDigitV	glib-core/url.cpp	/^  TBoolV IsDigitV, IsSafeV, IsExtraV;$/;"	m	class:TUrlLxChDef	file:
IsDir	glib-core/xfl.cpp	/^bool TFFileDesc::IsDir() const {$/;"	f	class:TFFileDesc
IsDirect	snap-core/mmnet.h	/^  TBool IsDirect;$/;"	m	class:TCrossNet
IsDirected	snap-core/bignet.h	/^template <class TNodeData, bool IsDir> struct IsDirected<TBigNet<TNodeData, IsDir> > { enum { Val = 0 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/bignet.h	/^template <class TNodeData> struct IsDirected<TBigNet<TNodeData, true> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/gbase.h	/^template <class TGraph> struct IsDirected   { enum { Val = 0 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/graph.h	/^template <> struct IsDirected<TNEGraph> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/graph.h	/^template <> struct IsDirected<TNGraph> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/graphmp.h	/^template <> struct IsDirected<TNGraphMP> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/mmnet.h	/^    bool IsDirected() const { return Graph->IsDirected(); }$/;"	f	class:TCrossNet::TCrossEdgeI
IsDirected	snap-core/mmnet.h	/^  bool IsDirected() const { return IsDirect;}$/;"	f	class:TCrossNet
IsDirected	snap-core/mmnet.h	/^template <> struct IsDirected<TModeNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/network.h	/^template <> struct IsDirected<TDirNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/network.h	/^template <> struct IsDirected<TNEANet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsDirected<TNodeEDatNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsDirected<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/network.h	/^template <class TNodeData> struct IsDirected<TNodeNet<TNodeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/networkmp.h	/^template <> struct IsDirected<TNEANetMP> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/timenet.h	/^template <> struct IsDirected<TTimeNENet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-core/timenet.h	/^template <> struct IsDirected<TTimeNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-exp/graphmp-exp.h	/^template <> struct IsDirected<TUNGraphMP> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-exp/imdbnet.h	/^template <> struct IsDirected<TImdbNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-exp/signnet.h	/^template <> struct IsDirected<TSignNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-exp/wgtnet.h	/^template <> struct IsDirected<TWgtNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDirected	snap-exp/wikinet.h	/^template <> struct IsDirected<TWikiTalkNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsDomainNm	snap-adv/cascdynetinf.h	/^  bool IsDomainNm(const TStr& Domain) const { return DomainsIdH.IsKey(Domain); }$/;"	f	class:TNIBs
IsEdge	snap-adv/graphcounter.h	/^  static inline bool IsEdge(const PNGraph &G, int SrcNId, int DstNId) {$/;"	f	class:TGraphEnumUtils
IsEdge	snap-core/bignet.h	/^bool TBigNet<TNodeData, IsDir>::IsEdge(const int& SrcNId, const int& DstNId, const bool& Dir) const {$/;"	f	class:TBigNet
IsEdge	snap-core/graph.cpp	/^bool TBPGraph::IsEdge(const int& LeftNId, const int& RightNId) const {$/;"	f	class:TBPGraph
IsEdge	snap-core/graph.cpp	/^bool TNEGraph::IsEdge(const int& SrcNId, const int& DstNId, int& EId, const bool& IsDir) const {$/;"	f	class:TNEGraph
IsEdge	snap-core/graph.cpp	/^bool TNGraph::IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) const {$/;"	f	class:TNGraph
IsEdge	snap-core/graph.cpp	/^bool TUNGraph::IsEdge(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TUNGraph
IsEdge	snap-core/graph.h	/^  bool IsEdge(const int& EId) const { return EdgeH.IsKey(EId); }$/;"	f	class:TNEGraph
IsEdge	snap-core/graph.h	/^  bool IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir = true) const { int EId; return IsEdge(SrcNId, DstNId, EId, IsDir); }$/;"	f	class:TNEGraph
IsEdge	snap-core/graphmp.cpp	/^bool TNGraphMP::IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) const {$/;"	f	class:TNGraphMP
IsEdge	snap-core/mmnet.h	/^  bool IsEdge(const int& EId) const { return CrossH.IsKey(EId); }$/;"	f	class:TCrossNet
IsEdge	snap-core/network.cpp	/^bool TDirNet::IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) const {$/;"	f	class:TDirNet
IsEdge	snap-core/network.cpp	/^bool TNEANet::IsEdge(const int& SrcNId, const int& DstNId, int& EId, const bool& IsDir) const {$/;"	f	class:TNEANet
IsEdge	snap-core/network.cpp	/^bool TUndirNet::IsEdge(const int& SrcNId, const int& DstNId) const {$/;"	f	class:TUndirNet
IsEdge	snap-core/network.h	/^  bool IsEdge(const int& EId) const { return EdgeH.IsKey(EId); }$/;"	f	class:TNEANet
IsEdge	snap-core/network.h	/^  bool IsEdge(const int& EId) const { return EdgeH.IsKey(EId); }$/;"	f	class:TNodeEdgeNet
IsEdge	snap-core/network.h	/^  bool IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir = true) const { int EId;  return IsEdge(SrcNId, DstNId, EId, IsDir); }$/;"	f	class:TNodeEdgeNet
IsEdge	snap-core/network.h	/^  bool IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir = true) const { int EId; return IsEdge(SrcNId, DstNId, EId, IsDir); }$/;"	f	class:TNEANet
IsEdge	snap-core/network.h	/^bool TNodeEDatNet<TNodeData, TEdgeData>::IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) const {$/;"	f	class:TNodeEDatNet
IsEdge	snap-core/network.h	/^bool TNodeEdgeNet<TNodeData, TEdgeData>::IsEdge(const int& SrcNId, const int& DstNId, int& EId, const bool& IsDir) const {$/;"	f	class:TNodeEdgeNet
IsEdge	snap-core/network.h	/^bool TNodeNet<TNodeData>::IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir) const {$/;"	f	class:TNodeNet
IsEdge	snap-core/networkmp.cpp	/^bool TNEANetMP::IsEdge(const int& SrcNId, const int& DstNId, int& EId, const bool& IsDir) const {$/;"	f	class:TNEANetMP
IsEdge	snap-core/networkmp.h	/^  bool IsEdge(const int& EId) const { return EdgeH.IsKey(EId); }$/;"	f	class:TNEANetMP
IsEdge	snap-core/networkmp.h	/^  bool IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir = true) const { int EId; return IsEdge(SrcNId, DstNId, EId, IsDir); }$/;"	f	class:TNEANetMP
IsEdge	snap-exp/mmgraph-exp.h	/^  bool IsEdge(const int& EId) const { return EdgeH.IsKey(EId); }$/;"	f	class:TMNet
IsEdge	snap-exp/mmgraph-exp.h	/^  bool IsEdge(const int& SrcNId, const int& DstNId, const bool& IsDir = true) const { int EId; return IsEdge(SrcNId, DstNId, EId, IsDir); }$/;"	f	class:TMNet
IsEdge	snap-exp/mmgraph-exp.h	/^  bool IsEdge(const int& SrcNId, const int& DstNId, int& EId, const bool& IsDir = true) const {$/;"	f	class:TMNet
IsEdgeDat	snap-core/gbase.h	/^template <class TGraph> struct IsEdgeDat    { enum { Val = 0 }; };$/;"	s	namespace:TSnap
IsEdgeDat	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsEdgeDat<TNodeEDatNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsEdgeDat	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsEdgeDat<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsEdgeDat	snap-core/timenet.h	/^template <> struct IsEdgeDat<TTimeNENet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsEdgeDat	snap-exp/signnet.h	/^template <> struct IsEdgeDat<TSignNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsEdgeDat	snap-exp/wgtnet.h	/^template <> struct IsEdgeDat<TWgtNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsEdgeDat	snap-exp/wikinet.h	/^template <> struct IsEdgeDat<TWikiTalkNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsEdgePlace	snap-adv/kronecker.cpp	/^bool TKronMtx::IsEdgePlace(int NId1, int NId2, const int& NKronIters, const double& ProbTresh) const {$/;"	f	class:TKronMtx
IsElec	snap-exp/wikinet.h	/^  bool IsElec() const { return ElecTm.IsDef(); }$/;"	f	class:TWikiUsr
IsEmpty	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	bool IsEmpty() {$/;"	f	class:TSBitSet
IsEmpty	glib-core/hash.h	/^  bool IsEmpty() const { return KeyDatI == NULL; }$/;"	f	class:THashKeyDatI
IsEmpty	glib-core/hashmp.h	/^  bool IsEmpty() const { return KeyDatI == NULL; }$/;"	f	class:THashMPKeyDatI
IsEmpty	glib-core/priorityqueue.h	/^  bool IsEmpty() {$/;"	f	class:TMaxPriorityQueue
IsEmpty	glib-core/shash.h	/^  bool IsEmpty() const { return KeyI == NULL; }$/;"	f	class:THashSetKeyI
IsEmpty	glib-core/shash.h	/^  bool IsEmpty(const int& ValN) const { return ! BMTest(ValN); }$/;"	f	class:TSparseGroup
IsEmpty	glib-core/shash.h	/^  bool IsEmpty(const int& ValN) const { return GroupV[GroupNum(ValN)].IsEmpty(PosInGroup(ValN)); }$/;"	f	class:TSparseTable
IsEnd	glib-core/hash.h	/^  bool IsEnd() const { return EndI == KeyDatI; }$/;"	f	class:THashKeyDatI
IsEnd	glib-core/hashmp.h	/^  bool IsEnd() const { return EndI == KeyDatI; }$/;"	f	class:THashMPKeyDatI
IsEnd	glib-core/shash.h	/^  bool IsEnd() const { return EndI == KeyI; }$/;"	f	class:THashSetKeyI
IsEnd	glib-core/shash.h	/^  bool IsEnd() const { return GroupI==EndI; }$/;"	f	class:TSparseTableI
IsEndOfRun	glib-core/env.cpp	/^bool TEnv::IsEndOfRun() const {$/;"	f	class:TEnv
IsEntityNm	glib-core/xml.h	/^  bool IsEntityNm(const TStr& EntityNm, TStr& EntityVal) const {$/;"	f
IsEoln	glib-core/html.h	/^  bool IsEoln(const char& Ch) const {return (Ch==TCh::CrCh)||(Ch==TCh::LfCh);}$/;"	f
IsEoln	glib-core/xml.h	/^  bool IsEoln(const uchar& Ch) const {$/;"	f
IsEolnLn	glib-core/fl.cpp	/^bool TMOut::IsEolnLn() const {$/;"	f	class:TMOut
IsExt	glib-core/ds.h	/^  bool IsExt() const {return MxVals==-1;}$/;"	f	class:TVec
IsExt	glib-core/xml.h	/^  bool IsExt(const uchar& Ch) const {return ExtChSet.GetBit(Ch);}$/;"	f
IsExtender	glib-core/unicode.h	/^	bool IsExtender() const { return IsProperty(ucfPrExtender); }$/;"	f	class:TUniChInfo
IsExtraV	glib-core/url.cpp	/^  TBoolV IsDigitV, IsSafeV, IsExtraV;$/;"	m	class:TUrlLxChDef	file:
IsFastMode	glib-core/fl.h	/^  bool IsFastMode() const {return FastMode;}$/;"	f	class:TSIn
IsFirst	snap-core/table.cpp	/^TBool TRowIteratorWithRemove::IsFirst() const {$/;"	f	class:TRowIteratorWithRemove
IsFirst	snap-exp/alternativetable.cpp	/^TBool ExplicitStringRowIteratorWithRemove::IsFirst() const {$/;"	f	class:ExplicitStringRowIteratorWithRemove
IsFirstNameCh	glib-core/xml.h	/^  bool IsFirstNameCh(const uchar& Ch) const {$/;"	f
IsFlag	glib-core/blobbs.cpp	/^bool TBlobPt::IsFlag(const int& FlagN) const {$/;"	f	class:TBlobPt
IsFldNm	glib-core/http.cpp	/^bool THttpResp::IsFldNm(const TStr& FldNm) const {$/;"	f	class:THttpResp
IsFldNm	glib-core/http.cpp	/^bool THttpRq::IsFldNm(const TStr& FldNm) const {$/;"	f	class:THttpRq
IsFldVal	glib-core/http.cpp	/^bool THttpResp::IsFldVal(const TStr& FldNm, const TStr& FldVal) const {$/;"	f	class:THttpResp
IsFldVal	glib-core/http.cpp	/^bool THttpRq::IsFldVal(const TStr& FldNm, const TStr& FldVal) const {$/;"	f	class:THttpRq
IsFlt	glib-core/dt.cpp	/^bool TStr::IsFlt(const bool& Check, const double& MnVal, const double& MxVal,$/;"	f	class:TStr
IsFlt	glib-core/ssmp.h	/^  bool IsFlt(const int& FldN) const { double v; return GetFlt(FldN, v); }$/;"	f
IsFltAttrDeletedE	snap-core/mmnet.cpp	/^bool TCrossNet::IsFltAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TCrossNet
IsFltAttrDeletedE	snap-core/network.cpp	/^bool TNEANet::IsFltAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TNEANet
IsFltAttrDeletedN	snap-core/network.cpp	/^bool TNEANet::IsFltAttrDeletedN(const int& NId, const TStr& attr) const {$/;"	f	class:TNEANet
IsFltAttrE	snap-core/network.cpp	/^bool TNEANet::IsFltAttrE(const TStr& attr) {$/;"	f	class:TNEANet
IsFltAttrE	snap-core/networkmp.cpp	/^bool TNEANetMP::IsFltAttrE(const TStr& attr) {$/;"	f	class:TNEANetMP
IsGbExtend	glib-core/unicode.h	/^	bool IsGbExtend() const { return IsGraphemeExtend(); }$/;"	f	class:TUniChInfo
IsGetBTag	glib-core/html.cpp	/^bool THtmlLx::IsGetBTag(const TStr& TagNm){$/;"	f	class:THtmlLx
IsGetChInfo	glib-core/unicode.h	/^	bool IsGetChInfo(const int cp, TUniChInfo& ChInfo) {$/;"	f	class:TUniChDb
IsGetETag	glib-core/html.cpp	/^bool THtmlLx::IsGetETag(const TStr& TagNm){$/;"	f	class:THtmlLx
IsGetKeyId	snap-core/ghash.h	/^int TGHash<TDat>::IsGetKeyId(const PNGraph& Graph) const {$/;"	f	class:TGHash
IsGetKeyId	snap-core/ghash.h	/^int TGHash<TDat>::IsGetKeyId(const PNGraph& Graph, TGraphKey& GKey) const {$/;"	f	class:TGHash
IsGifFExt	glib-core/http.cpp	/^bool THttp::IsGifFExt(const TStr& FExt){$/;"	f	class:THttp
IsGraphemeBase	glib-core/unicode.h	/^	bool IsGraphemeBase() const { return IsDcpFlag(ucfDcpGraphemeBase); }$/;"	f	class:TUniChInfo
IsGraphemeExtend	glib-core/unicode.h	/^	bool IsGraphemeExtend() const { return IsDcpFlag(ucfDcpGraphemeExtend); }$/;"	f	class:TUniChInfo
IsGraphemeLink	glib-core/unicode.h	/^	bool IsGraphemeLink() const { return IsProperty(ucfPrGraphemeLink); }$/;"	f	class:TUniChInfo
IsHSegmentCh	glib-core/url.cpp	/^  bool IsHSegmentCh() const {return ChDef.IsHSegmentCh(PeekCh());}$/;"	f	class:TUrlLx
IsHSegmentCh	glib-core/url.cpp	/^  bool IsHSegmentCh(const char& Ch) const {$/;"	f	class:TUrlLxChDef
IsHSegmentV	glib-core/url.cpp	/^  TBoolV IsSchemeV, IsHostV, IsHSegmentV;$/;"	m	class:TUrlLxChDef	file:
IsHTag	glib-core/html.cpp	/^bool THtmlTok::IsHTag(const TStr& TagNm, int& HTagN){$/;"	f	class:THtmlTok
IsHexDigit	glib-core/unicode.h	/^	bool IsHexDigit() const { return IsProperty(ucfPrHexDigit); }$/;"	f	class:TUniChInfo
IsHexInt	glib-core/dt.cpp	/^bool TStr::IsHexInt( const bool& Check, const int& MnVal, const int& MxVal, int& Val) const {$/;"	f	class:TStr
IsHexInt64	glib-core/dt.cpp	/^bool TStr::IsHexInt64($/;"	f	class:TStr
IsHexV	glib-core/url.cpp	/^  TBoolV IsReservedV, IsHexV;$/;"	m	class:TUrlLxChDef	file:
IsHiAlphaV	glib-core/url.cpp	/^  TBoolV IsLoAlphaV, IsHiAlphaV, IsAlphaV;$/;"	m	class:TUrlLxChDef	file:
IsHostCh	glib-core/url.cpp	/^  bool IsHostCh(const char& Ch) const {return (Ch>=0)&&IsHostV[Ch];}$/;"	f	class:TUrlLxChDef
IsHostV	glib-core/url.cpp	/^  TBoolV IsSchemeV, IsHostV, IsHSegmentV;$/;"	m	class:TUrlLxChDef	file:
IsHt	glib-core/http.cpp	/^  bool IsHt(const char& Ch){return Ch==9;}$/;"	f	class:THttpChDef
IsHtmlFExt	glib-core/http.cpp	/^bool THttp::IsHtmlFExt(const TStr& FExt){$/;"	f	class:THttp
IsHttpRqStr	glib-core/url.h	/^  bool IsHttpRqStr() const {return !HttpRqStr.Empty();}$/;"	f
IsHyphen	glib-core/unicode.h	/^	bool IsHyphen() const { return IsProperty(ucfPrHyphen); }$/;"	f	class:TUniChInfo
IsIdContinue	glib-core/unicode.h	/^	bool IsIdContinue() const { return IsDcpFlag(ucfDcpIdContinue); }$/;"	f	class:TUniChInfo
IsIdStart	glib-core/unicode.h	/^	bool IsIdStart() const { return IsDcpFlag(ucfDcpIdStart); }$/;"	f	class:TUniChInfo
IsIdeographic	glib-core/unicode.h	/^	bool IsIdeographic() const { return IsProperty(ucfPrIdeographic); }$/;"	f	class:TUniChInfo
IsIn	glib-core/ds.h	/^  bool IsIn(const TVal& Val) const {return SearchForw(Val)!=-1;}$/;"	f	class:TVec
IsIn	glib-core/ds.h	/^  bool IsIn(const TVal& Val) const {return ValV.IsIn(Val);}$/;"	f	class:TSStack
IsIn	glib-core/ds.h	/^  bool IsIn(const TVal& Val, TSizeTy& ValN) const { ValN=SearchForw(Val); return ValN!=-1;}$/;"	f	class:TVec
IsIn	snap-exp/trawling.cpp	/^bool TTrawling::IsIn(const TIntV& BigV, const TIntV& SmallV) {$/;"	f	class:TTrawling
IsInBin	glib-core/ds.h	/^  bool IsInBin(const TVal& Val) const {return SearchBin(Val)!=-1;}$/;"	f	class:TVec
IsInEId	snap-core/graph.h	/^    bool IsInEId(const int& EId) const { return InEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNEGraph::TNode
IsInEId	snap-core/graph.h	/^    bool IsInEId(const int& EId) const { return NodeHI.GetDat().IsInEId(EId); }$/;"	f	class:TNEGraph::TNodeI
IsInEId	snap-core/network.h	/^    bool IsInEId(const int& EId) const { return InEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNEANet::TNode
IsInEId	snap-core/network.h	/^    bool IsInEId(const int& EId) const { return InEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNodeEdgeNet::TNode
IsInEId	snap-core/network.h	/^    bool IsInEId(const int& EId) const { return NodeHI.GetDat().IsInEId(EId); }$/;"	f	class:TNEANet::TNodeI
IsInEId	snap-core/network.h	/^    bool IsInEId(const int& EId) const { return NodeHI.GetDat().IsInEId(EId); }$/;"	f	class:TNodeEdgeNet::TNodeI
IsInEId	snap-core/networkmp.h	/^    bool IsInEId(const int& EId) const { return InEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNEANetMP::TNode
IsInEId	snap-core/networkmp.h	/^    bool IsInEId(const int& EId) const { return NodeHI.GetDat().IsInEId(EId); }$/;"	f	class:TNEANetMP::TNodeI
IsInEId	snap-exp/mmgraph-exp.h	/^    bool IsInEId(const int& EId) const { return HashI.GetDat().IsInEId(EId); }$/;"	f	class:TMNet::TMNodeI
IsInEId	snap-exp/mmgraph-exp.h	/^  bool IsInEId(const int& EId) const { return InEIdV.SearchForw(EId) != -1; }$/;"	f	class:TMVNode
IsInEps	glib-core/xmath.h	/^  static bool IsInEps(const T& Val, const T& Eps) {$/;"	f	class:TMath
IsInHost	glib-core/url.h	/^  bool IsInHost(const TStr& _HostNm) const {$/;"	f
IsInNId	snap-core/bignet.h	/^    bool IsInNId(const int& NId) const { return BinSearch(InNIdV, InNIdV+InDeg, NId)!=NULL; }$/;"	f	class:TBigNet::TNodeI
IsInNId	snap-core/graph.cpp	/^bool TNEGraph::TNodeI::IsInNId(const int& NId) const {$/;"	f	class:TNEGraph::TNodeI
IsInNId	snap-core/graph.h	/^    bool IsInNId(const int& NId) const { return HI().GetDat().IsInNId(NId); }$/;"	f	class:TBPGraph::TNodeI
IsInNId	snap-core/graph.h	/^    bool IsInNId(const int& NId) const { return InNIdV.SearchBin(NId) != -1; }$/;"	f	class:TNGraph::TNode
IsInNId	snap-core/graph.h	/^    bool IsInNId(const int& NId) const { return IsNbrNId(NId); }$/;"	f	class:TBPGraph::TNode
IsInNId	snap-core/graph.h	/^    bool IsInNId(const int& NId) const { return IsNbrNId(NId); }$/;"	f	class:TUNGraph::TNode
IsInNId	snap-core/graph.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TNGraph::TNodeI
IsInNId	snap-core/graph.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TUNGraph::TNodeI
IsInNId	snap-core/graphmp.h	/^    bool IsInNId(const int& NId) const { return InNIdV.SearchBin(NId) != -1; }$/;"	f	class:TNGraphMP::TNode
IsInNId	snap-core/graphmp.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TNGraphMP::TNodeI
IsInNId	snap-core/network.cpp	/^bool TNEANet::TNodeI::IsInNId(const int& NId) const {$/;"	f	class:TNEANet::TNodeI
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return InNIdV.SearchBin(NId) != -1; }$/;"	f	class:TDirNet::TNode
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return InNIdV.SearchBin(NId) != -1; }$/;"	f	class:TNodeNet::TNode
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return InNIdV.SearchBin(NId)!=-1; }$/;"	f	class:TNodeEDatNet::TNode
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return IsNbrNId(NId); }$/;"	f	class:TUndirNet::TNode
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TDirNet::TNodeI
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TNodeEDatNet::TNodeI
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TNodeNet::TNodeI
IsInNId	snap-core/network.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TUndirNet::TNodeI
IsInNId	snap-core/network.h	/^bool TNodeEdgeNet<TNodeData, TEdgeData>::TNodeI::IsInNId(const int& NId) const {$/;"	f	class:TNodeEdgeNet::TNodeI
IsInNId	snap-core/networkmp.cpp	/^bool TNEANetMP::TNodeI::IsInNId(const int& NId) const {$/;"	f	class:TNEANetMP::TNodeI
IsInNId	snap-exp/graphmp-exp.h	/^    bool IsInNId(const int& NId) const { return IsNbrNId(NId);}$/;"	f	class:TUNGraphMP::TNode
IsInNId	snap-exp/graphmp-exp.h	/^    bool IsInNId(const int& NId) const { return NodeHI.GetDat().IsInNId(NId); }$/;"	f	class:TUNGraphMP::TNodeI
IsInNId	snap-exp/mmgraph-exp.h	/^    bool IsInNId(const int& NId) const {$/;"	f	class:TMNet::TMNodeI
IsInPath	glib-core/url.h	/^  bool IsInPath(const TStr& _PathStr) const {$/;"	f
IsInRange	glib-core/xmath.h	/^  static bool IsInRange(const T& Val, const T& Mn, const T& Mx) {$/;"	f	class:TMath
IsInt	glib-core/dt.cpp	/^bool TStr::IsInt($/;"	f	class:TStr
IsInt	glib-core/ssmp.h	/^  bool IsInt(const int& FldN) const { int v; return GetInt(FldN, v); }$/;"	f
IsInt64	glib-core/dt.cpp	/^bool TStr::IsInt64($/;"	f	class:TStr
IsIntAttrDeletedE	snap-core/mmnet.cpp	/^bool TCrossNet::IsIntAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TCrossNet
IsIntAttrDeletedE	snap-core/network.cpp	/^bool TNEANet::IsIntAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TNEANet
IsIntAttrDeletedN	snap-core/network.cpp	/^bool TNEANet::IsIntAttrDeletedN(const int& NId, const TStr& attr) const {$/;"	f	class:TNEANet
IsIntAttrE	snap-core/network.cpp	/^bool TNEANet::IsIntAttrE(const TStr& attr) {$/;"	f	class:TNEANet
IsIntAttrE	snap-core/networkmp.cpp	/^bool TNEANetMP::IsIntAttrE(const TStr& attr) {$/;"	f	class:TNEANetMP
IsIntVAttrDeletedE	snap-core/network.cpp	/^bool TNEANet::IsIntVAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TNEANet
IsIntVAttrDeletedN	snap-core/network.cpp	/^bool TNEANet::IsIntVAttrDeletedN(const int& NId, const TStr& attr) const {$/;"	f	class:TNEANet
IsIpAddr	snap-exp/wikinet.cpp	/^bool TWikiMetaLoader::IsIpAddr(const TChA& Usr) {$/;"	f	class:TWikiMetaLoader
IsIpAddrUsr	snap-exp/wikinet.cpp	/^bool TWikiMetaLoader::IsIpAddrUsr() const {$/;"	f	class:TWikiMetaLoader
IsIpNum	glib-core/url.h	/^  bool IsIpNum() const {return !IpNum.Empty();}$/;"	f
IsIpStr	glib-core/dt.cpp	/^bool TUInt::IsIpStr(const TStr& IpStr, uint& Ip, const char& SplitCh) {$/;"	f	class:TUInt
IsIpv6Str	glib-core/dt.cpp	/^bool TUInt::IsIpv6Str(const TStr& IpStr, const char& SplitCh) {$/;"	f	class:TUInt
IsIsoNode	snap-core/bignet.h	/^bool TBigNet<TNodeData, IsDir>::IsIsoNode(const int& NId) const {$/;"	f	class:TBigNet
IsIsomorph	snap-core/ghash.cpp	/^bool TGraphKey::IsIsomorph(const TGraphKey& Key1, const TGraphKey& Key2, const TIntV& NodeIdMap) {$/;"	f	class:TGraphKey
IsIsomorph	snap-core/ghash.cpp	/^bool TGraphKey::IsIsomorph(const TGraphKey& Key1, const TGraphKey& Key2, const TVec<TIntV>& NodeIdMapV) {$/;"	f	class:TGraphKey
IsIsomorph	snap-core/ghash.cpp	/^bool TGraphKey::IsIsomorph(const TGraphKey& Key1, const TGraphKey& Key2, const TVec<TIntV>& NodeIdMapV, int& IsoPermId) {$/;"	f	class:TGraphKey
IsJoinControl	glib-core/unicode.h	/^	bool IsJoinControl() const { return IsProperty(ucfPrJoinControl); }$/;"	f	class:TUniChInfo
IsKey	glib-core/hash.h	/^  bool IsKey(const TKey& Key) const {return GetKeyId(Key)!=-1;}$/;"	f	class:THash
IsKey	glib-core/hash.h	/^  bool IsKey(const TKey& Key, int& KeyId) const { KeyId=GetKeyId(Key); return KeyId!=-1;}$/;"	f	class:THash
IsKey	glib-core/hashmp.h	/^  bool IsKey(const TKey& Key) const {return GetKeyId(Key)!=-1;}$/;"	f	class:THashMP
IsKey	glib-core/hashmp.h	/^  bool IsKey(const TKey& Key, int& KeyId) const { KeyId=GetKeyId(Key); return KeyId!=-1;}$/;"	f	class:THashMP
IsKey	glib-core/shash.h	/^  bool IsKey(const TKey& Key) const { return GetKeyId(Key) != -1; }$/;"	f	class:TSparseHash
IsKey	glib-core/shash.h	/^  bool IsKey(const TKey& Key) const { return GetKeyId(Key) != -1; }$/;"	f	class:TSparseSet
IsKey	glib-core/shash.h	/^  bool IsKey(const TKey& Key) const {return GetKeyId(Key)!=-1; }$/;"	f	class:THashSet
IsKey	glib-core/shash.h	/^  bool IsKey(const TKey& Key, int& KeyId) const {$/;"	f	class:THashSet
IsKey	glib-core/shash.h	/^  bool IsKey(const TKey& Key, int& KeyId) const {$/;"	f	class:TSparseHash
IsKey	glib-core/shash.h	/^  bool IsKey(const TKey& Key, int& KeyId) const {$/;"	f	class:TSparseSet
IsKey	snap-adv/subgraphenum.h	/^		inline bool IsKey(int i) const { return m_nodes[i]; }$/;"	f	class:TSubGraphEnum::TSSet
IsKey	snap-core/gbase.h	/^  bool IsKey(const int& Key) const { return KIdSetH.IsKey(Key); }$/;"	f	class:TUnionFind
IsKey	snap-core/ghash.h	/^  bool IsKey(const PNGraph& Graph) const { int k=IsGetKeyId(Graph); return k!=-1; }$/;"	f	class:TGHash
IsKey	snap-core/ghash.h	/^  bool IsKey(const TGraphKey& Key) const { return GraphH.IsKey(Key); }$/;"	f	class:TGHash
IsKey	snap-core/ghash.h	/^  bool IsKey(const TGraphKey& Key, int& KeyId) const { return GraphH.IsKey(Key, KeyId); }$/;"	f	class:TGHash
IsKeyGetDat	glib-core/hash.h	/^  bool IsKeyGetDat(const TKey& Key, TDat& Dat) const {int KeyId;$/;"	f	class:THash
IsKeyGetDat	glib-core/hashmp.h	/^  bool IsKeyGetDat(const TKey& Key, TDat& Dat) const {int KeyId;$/;"	f	class:THashMP
IsKeyGetDat	glib-core/shash.h	/^bool TSparseHash<TKey, TDat, GroupSize>::IsKeyGetDat(const TKey& Key, TDat& Dat) const {$/;"	f	class:TSparseHash
IsKeyGetDat	snap-core/ghash.h	/^  bool IsKeyGetDat(const TGraphKey& Key, TDat& Dat) const { return GraphH.IsKeyGetDat(Key, Dat); }$/;"	f	class:TGHash
IsKeyId	glib-core/hash.h	/^  bool IsKeyId(const int& KeyId) const {$/;"	f	class:THash
IsKeyId	glib-core/hashmp.h	/^  bool IsKeyId(const int& KeyId) const {$/;"	f	class:THashMP
IsKeyId	glib-core/shash.h	/^  bool IsKeyId(const int& KeyId) const { return ! Table.IsEmpty(KeyId); }$/;"	f	class:TSparseHash
IsKeyId	glib-core/shash.h	/^  bool IsKeyId(const int& KeyId) const { return ! Table.IsEmpty(KeyId); }$/;"	f	class:TSparseSet
IsKeyId	glib-core/shash.h	/^  bool IsKeyId(const int& KeyId) const {$/;"	f	class:THashSet
IsKeyId	snap-core/ghash.h	/^  bool IsKeyId(const int& KeyId) const { return GraphH.IsKeyId(KeyId); }$/;"	f	class:TGHash
IsKeyIdEqKeyN	glib-core/hash.h	/^  bool IsKeyIdEqKeyN() const {return FreeKeys==0;}$/;"	f	class:THash
IsKeyIdEqKeyN	glib-core/shash.h	/^  bool IsKeyIdEqKeyN() const {return FreeKeys==0; }$/;"	f	class:THashSet
IsKeyIdEqKeyN	snap-core/ghash.h	/^  bool IsKeyIdEqKeyN() const { return GraphH.IsKeyIdEqKeyN(); }$/;"	f	class:TGHash
IsLNode	snap-core/graph.h	/^  bool IsLNode(const int& NId) const { return LeftH.IsKey(NId); }$/;"	f	class:TBPGraph
IsLastGraphOfSequence	snap-core/table.cpp	/^TBool TTable::IsLastGraphOfSequence() {$/;"	f	class:TTable
IsLatentEdge	snap-adv/kronecker.h	/^  bool IsLatentEdge(const int& NId1, const int& NId2) const { return !IsObsEdge(NId1, NId2);	}$/;"	f	class:TKroneckerLL
IsLatentNode	snap-adv/kronecker.h	/^  bool IsLatentNode(const int& NId) const { return !IsObsNode(NId);	}$/;"	f	class:TKroneckerLL
IsLatinStr	snap-core/util.cpp	/^bool TStrUtil::IsLatinStr(const TChA& Str, const double& MinAlFrac) {$/;"	f	class:TStrUtil
IsLc	glib-core/dt.cpp	/^bool TRStr::IsLc() const {$/;"	f	class:TRStr
IsLc	glib-core/html.h	/^  bool IsLc(const char& Ch) const {return Ch==LcChV[Ch-TCh::Mn];}$/;"	f
IsLeft	snap-core/graph.h	/^    bool IsLeft() const { return ! LeftHI.IsEnd(); }$/;"	f	class:TBPGraph::TNodeI
IsLetter	glib-core/xml.h	/^  bool IsLetter(const uchar& Ch) const {return LetterChSet.GetBit(Ch);}$/;"	f
IsLf	glib-core/http.cpp	/^  bool IsLf(const char& Ch){return Ch==10;}$/;"	f	class:THttpChDef
IsLinkPhrases	snap-exp/memes.cpp	/^bool IsLinkPhrases(const PQuoteBs& QtBs, const int& QtN1, const int& QtN2, TStrHash<TInt>& WordIdH, THash<TInt, TIntV>& QtToWordIdVH) {$/;"	f
IsLoAlphaV	glib-core/url.cpp	/^  TBoolV IsLoAlphaV, IsHiAlphaV, IsAlphaV;$/;"	m	class:TUrlLxChDef	file:
IsLogicalOrderException	glib-core/unicode.h	/^	bool IsLogicalOrderException() const { return IsProperty(ucfPrLogicalOrderException); }$/;"	f	class:TUniChInfo
IsLowerCase	glib-core/unicodestring.cpp	/^bool TUStr::IsLowerCase(const int& UniCh){$/;"	f	class:TUStr
IsLowercase	glib-core/unicode.h	/^	bool IsLowercase() const { return IsDcpFlag(ucfDcpLowercase); }$/;"	f	class:TUniChInfo
IsLws	glib-core/http.cpp	/^  bool IsLws(const char& Ch){$/;"	f	class:THttpChDef
IsLws	glib-core/http.cpp	/^bool THttpLx::IsLws(){$/;"	f	class:THttpLx
IsMachineLittleEndian	glib-core/unicode.cpp	/^bool TUniCodec::IsMachineLittleEndian()$/;"	f	class:TUniCodec
IsMale	snap-exp/imdbnet.h	/^  bool IsMale() const { return IsMaleAct; }$/;"	f	class:TImdbNode
IsMaleAct	snap-exp/imdbnet.h	/^  TCh Type; TBool IsMaleAct;$/;"	m	class:TImdbNode
IsMath	glib-core/unicode.h	/^	bool IsMath() const { return IsDcpFlag(ucfDcpMath); }$/;"	f	class:TUniChInfo
IsMath	glib-core/unicodestring.cpp	/^bool TUStr::IsMath(const int& UniCh){$/;"	f	class:TUStr
IsMemoryMapped	glib-core/fl.h	/^  bool IsMemoryMapped;$/;"	m	class:TMIn
IsMonthNm	glib-core/tm.h	/^  static bool IsMonthNm(const TStr& MonthNm, const TLoc& Loc=lUs){$/;"	f	class:TTmInfo
IsMotifM1	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM1(PNGraph graph, int u, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM10	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM10(PNGraph graph, int center, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM11	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM11(PNGraph graph, int center, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM12	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM12(PNGraph graph, int center, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM13	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM13(PNGraph graph, int center, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM2	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM2(PNGraph graph, int u, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM3	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM3(PNGraph graph, int u, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM4	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM4(PNGraph graph, int u, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM5	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM5(PNGraph graph, int u, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM6	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM6(PNGraph graph, int u, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM7	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM7(PNGraph graph, int u, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM8	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM8(PNGraph graph, int center, int v, int w) {$/;"	f	class:MotifCluster
IsMotifM9	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsMotifM9(PNGraph graph, int center, int v, int w) {$/;"	f	class:MotifCluster
IsMovie	snap-exp/imdbnet.h	/^  bool IsMovie() const { return GetTy() != mtyActor; }$/;"	f	class:TImdbNode
IsMultiGraph	snap-core/gbase.h	/^template <class TGraph> struct IsMultiGraph { enum { Val = 0 }; };$/;"	s	namespace:TSnap
IsMultiGraph	snap-core/graph.h	/^template <> struct IsMultiGraph<TNEGraph> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsMultiGraph	snap-core/mmnet.h	/^template <> struct IsMultiGraph<TModeNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsMultiGraph	snap-core/network.h	/^template <> struct IsMultiGraph<TNEANet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsMultiGraph	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsMultiGraph<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsMultiGraph	snap-core/networkmp.h	/^template <> struct IsMultiGraph<TNEANetMP> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsMultiGraph	snap-core/timenet.h	/^template <> struct IsMultiGraph<TTimeNENet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNIdIn	snap-core/cncom.h	/^  bool IsNIdIn(const int& NId) const { return NIdV.SearchBin(NId) != -1; }$/;"	f	class:TCnCom
IsNTypeId	snap-exp/mmgraph-exp.h	/^  bool IsNTypeId(const int NTypeId) const { return NTypeId >= 0 && NTypeId < TypeNodeV.Len(); }$/;"	f	class:TMNet
IsName	glib-core/xml.h	/^  bool IsName(const uchar& Ch) const {return NameChSet.GetBit(Ch);}$/;"	f
IsNationalV	glib-core/url.cpp	/^  TBoolV IsNationalV, IsPunctuationV;$/;"	m	class:TUrlLxChDef	file:
IsNbrEId	snap-core/graph.h	/^    bool IsNbrEId(const int& EId) const { return IsInEId(EId) || IsOutEId(EId); }$/;"	f	class:TNEGraph::TNodeI
IsNbrEId	snap-core/network.h	/^    bool IsNbrEId(const int& EId) const { return IsInEId(EId) || IsOutEId(EId); }$/;"	f	class:TNEANet::TNodeI
IsNbrEId	snap-core/network.h	/^    bool IsNbrEId(const int& EId) const { return IsInEId(EId) || IsOutEId(EId); }$/;"	f	class:TNodeEdgeNet::TNode
IsNbrEId	snap-core/network.h	/^    bool IsNbrEId(const int& EId) const { return NodeHI.GetDat().IsNbrEId(EId); }$/;"	f	class:TNodeEdgeNet::TNodeI
IsNbrEId	snap-core/networkmp.h	/^    bool IsNbrEId(const int& EId) const { return IsInEId(EId) || IsOutEId(EId); }$/;"	f	class:TNEANetMP::TNodeI
IsNbrEId	snap-exp/mmgraph-exp.h	/^    bool IsNbrEId(const int& EId) const { return IsInEId(EId) || IsOutEId(EId); }$/;"	f	class:TMNet::TMNodeI
IsNbrNId	snap-core/bignet.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TBigNet::TNodeI
IsNbrNId	snap-core/graph.h	/^    bool IsNbrNId(const int& NId) const { return HI().GetDat().IsNbrNId(NId); }$/;"	f	class:TBPGraph::TNodeI
IsNbrNId	snap-core/graph.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNEGraph::TNodeI
IsNbrNId	snap-core/graph.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNGraph::TNode
IsNbrNId	snap-core/graph.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNGraph::TNodeI
IsNbrNId	snap-core/graph.h	/^    bool IsNbrNId(const int& NId) const { return NIdV.SearchBin(NId)!=-1; }$/;"	f	class:TBPGraph::TNode
IsNbrNId	snap-core/graph.h	/^    bool IsNbrNId(const int& NId) const { return NIdV.SearchBin(NId)!=-1; }$/;"	f	class:TUNGraph::TNode
IsNbrNId	snap-core/graph.h	/^    bool IsNbrNId(const int& NId) const { return NodeHI.GetDat().IsNbrNId(NId); }$/;"	f	class:TUNGraph::TNodeI
IsNbrNId	snap-core/graphmp.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNGraphMP::TNode
IsNbrNId	snap-core/graphmp.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNGraphMP::TNodeI
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TDirNet::TNode
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TDirNet::TNodeI
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNEANet::TNodeI
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNodeEDatNet::TNode
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNodeEDatNet::TNodeI
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNodeEdgeNet::TNodeI
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNodeNet::TNode
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNodeNet::TNodeI
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return NIdV.SearchBin(NId)!=-1; }$/;"	f	class:TUndirNet::TNode
IsNbrNId	snap-core/network.h	/^    bool IsNbrNId(const int& NId) const { return NodeHI.GetDat().IsNbrNId(NId); }$/;"	f	class:TUndirNet::TNodeI
IsNbrNId	snap-core/networkmp.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TNEANetMP::TNodeI
IsNbrNId	snap-exp/graphmp-exp.h	/^    bool IsNbrNId(const int& NId) const { return NIdV.SearchBin(NId) != -1;}$/;"	f	class:TUNGraphMP::TNode
IsNbrNId	snap-exp/graphmp-exp.h	/^    bool IsNbrNId(const int& NId) const { return NodeHI.GetDat().IsNbrNId(NId); }$/;"	f	class:TUNGraphMP::TNodeI
IsNbrNId	snap-exp/mmgraph-exp.h	/^    bool IsNbrNId(const int& NId) const { return IsOutNId(NId) || IsInNId(NId); }$/;"	f	class:TMNet::TMNodeI
IsNear	snap-exp/lsh.cpp	/^bool TLSHash::IsNear(TFltV Datum1, TFltV Datum2) {$/;"	f	class:TLSHash
IsNext	glib-core/ds.h	/^  bool IsNext() const {return (NextNd != NULL); }$/;"	f	class:TLstNd
IsNextDirty	snap-core/table.h	/^  TInt IsNextDirty; \/\/\/< Flag to signify whether the rows are stored in logical sequence or reordered. Used for optimizing GetPartitionRanges.$/;"	m	class:TTable
IsNextK	snap-core/table.cpp	/^PTable TTable::IsNextK(const TStr& OrderCol, TInt K, const TStr& GroupBy, const TStr& RankColName) {$/;"	f	class:TTable
IsNmStr	glib-core/lx.cpp	/^bool TLxChDef::IsNmStr(const TStr& Str) const {$/;"	f	class:TLxChDef
IsNoEdge	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsNoEdge(PNGraph graph, int u, int v) {$/;"	f	class:MotifCluster
IsNode	snap-adv/cascdynetinf.h	/^  bool IsNode(const int& NId) const { return NIdHitH.IsKey(NId); }$/;"	f	class:TCascade
IsNode	snap-adv/cascnetinf.h	/^  bool IsNode(const int& NId) const { return NIdHitH.IsKey(NId); }$/;"	f	class:TCascade
IsNode	snap-core/bignet.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TBigNet
IsNode	snap-core/bignet.h	/^  bool IsNode(const int& NId, TNode& Node) const { return NodeH.IsKeyGetDat(NId, Node); }$/;"	f	class:TBigNet
IsNode	snap-core/graph.h	/^  bool IsNode(const int& NId) const { return IsLNode(NId) || IsRNode(NId); }$/;"	f	class:TBPGraph
IsNode	snap-core/graph.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNEGraph
IsNode	snap-core/graph.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNGraph
IsNode	snap-core/graph.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TUNGraph
IsNode	snap-core/graphmp.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNGraphMP
IsNode	snap-core/network.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TDirNet
IsNode	snap-core/network.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNEANet
IsNode	snap-core/network.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNodeEDatNet
IsNode	snap-core/network.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNodeEdgeNet
IsNode	snap-core/network.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNodeNet
IsNode	snap-core/network.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TUndirNet
IsNode	snap-core/networkmp.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TNEANetMP
IsNode	snap-exp/graphmp-exp.h	/^  bool IsNode(const int& NId) const { return NodeH.IsKey(NId); }$/;"	f	class:TUNGraphMP
IsNode	snap-exp/mmgraph-exp.h	/^  bool IsNode(const int& NId) const { return IsNode(GetNTypeId(NId), GetLocalNId(NId)); }$/;"	f	class:TMNet
IsNode	snap-exp/mmgraph-exp.h	/^  bool IsNode(const int& NTypeId, const int& NId) const {$/;"	f	class:TMNet
IsNodeDat	snap-core/bignet.h	/^template <class TNodeData, bool IsDir> struct IsNodeDat<TBigNet<TNodeData, IsDir> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-core/gbase.h	/^template <class TGraph> struct IsNodeDat    { enum { Val = 0 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsNodeDat<TNodeEDatNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsNodeDat<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-core/network.h	/^template <class TNodeData> struct IsNodeDat<TNodeNet<TNodeData> > { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-core/timenet.h	/^template <> struct IsNodeDat<TTimeNENet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-core/timenet.h	/^template <> struct IsNodeDat<TTimeNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-exp/imdbnet.h	/^template <> struct IsNodeDat<TImdbNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-exp/signnet.h	/^template <> struct IsNodeDat<TSignNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-exp/wgtnet.h	/^template <> struct IsNodeDat<TWgtNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeDat	snap-exp/wikinet.h	/^template <> struct IsNodeDat<TWikiTalkNet> { enum { Val = 1 }; };$/;"	s	namespace:TSnap
IsNodeNm	snap-adv/cascdynetinf.h	/^  bool IsNodeNm(const int& NId) const { return NodeNmH.IsKey(NId); }$/;"	f	class:TNIBs
IsNodeNm	snap-adv/cascnetinf.h	/^  bool IsNodeNm(const int& NId) const { return NodeNmH.IsKey(NId); }$/;"	f	class:TNetInfBs
IsNodeTerminal	glib-core/unicode.h	/^	bool IsNodeTerminal(const int nodeIdx) const { return nodes[nodeIdx].terminal; }$/;"	f	class:TUniTrie
IsNoncharacter	glib-core/unicode.h	/^	bool IsNoncharacter() const { return IsProperty(ucfPrNoncharacterCodePoint); }$/;"	f	class:TUniChInfo
IsNull	glib-core/json.h	/^  bool IsNull() const {return JsonValType==jvtNull;}$/;"	f
IsNum	glib-core/html.h	/^  bool IsNum(const char& Ch) const {return int(ChTyV[Ch-TCh::Mn])==hlctNum;}$/;"	f
IsNum	glib-core/json.h	/^  bool IsNum() const {return JsonValType==jvtNum;}$/;"	f
IsNum	glib-core/lx.h	/^  bool IsNum(const char& Ch) const {return ChTyV[Ch-TCh::Mn]==TInt(lctNum);}$/;"	f
IsObj	glib-core/json.h	/^  bool IsObj() const {return JsonValType==jvtObj;}$/;"	f
IsObjKey	glib-core/json.h	/^  bool IsObjKey(const TStr& Key) const {EAssert(IsObj()); return KeyValH.IsKey(Key);}$/;"	f
IsObjKey	glib-core/json.h	/^  bool IsObjKey(const char *Key) const {EAssert(IsObj()); return KeyValH.IsKey(Key);}$/;"	f
IsObsEdge	snap-adv/kronecker.h	/^  bool IsObsEdge(const int& NId1, const int& NId2) const { IAssert(RealNodes > 0);	return ((NId1 < RealNodes) && (NId2 < RealNodes));	}$/;"	f	class:TKroneckerLL
IsObsNode	snap-adv/kronecker.h	/^  bool IsObsNode(const int& NId) const { IAssert(RealNodes > 0);	return (NId < RealNodes);	}$/;"	f	class:TKroneckerLL
IsOk	glib-core/http.h	/^  bool IsOk() const {return Ok;}$/;"	f
IsOk	glib-core/url.h	/^  bool IsOk(const TUrlScheme _Scheme=usUndef) const {$/;"	f
IsOk	snap-core/bignet.h	/^bool TBigNet<TNodeData, IsDir>::IsOk() const {$/;"	f	class:TBigNet
IsOk	snap-core/graph.cpp	/^bool TBPGraph::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TBPGraph
IsOk	snap-core/graph.cpp	/^bool TNEGraph::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNEGraph
IsOk	snap-core/graph.cpp	/^bool TNGraph::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNGraph
IsOk	snap-core/graph.cpp	/^bool TUNGraph::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TUNGraph
IsOk	snap-core/graphmp.cpp	/^bool TNGraphMP::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNGraphMP
IsOk	snap-core/network.cpp	/^bool TDirNet::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TDirNet
IsOk	snap-core/network.cpp	/^bool TNEANet::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNEANet
IsOk	snap-core/network.cpp	/^bool TUndirNet::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TUndirNet
IsOk	snap-core/network.h	/^bool TNodeEDatNet<TNodeData, TEdgeData>::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNodeEDatNet
IsOk	snap-core/network.h	/^bool TNodeEdgeNet<TNodeData, TEdgeData>::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNodeEdgeNet
IsOk	snap-core/network.h	/^bool TNodeNet<TNodeData>::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNodeNet
IsOk	snap-core/networkmp.cpp	/^bool TNEANetMP::IsOk(const bool& ThrowExcept) const {$/;"	f	class:TNEANetMP
IsOnExeStopF	glib-core/bd.h	/^  static bool IsOnExeStopF(){return OnExeStopF!=NULL;}$/;"	f	class:TOnExeStop
IsOutEId	snap-core/graph.h	/^    bool IsOutEId(const int& EId) const { return NodeHI.GetDat().IsOutEId(EId); }$/;"	f	class:TNEGraph::TNodeI
IsOutEId	snap-core/graph.h	/^    bool IsOutEId(const int& EId) const { return OutEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNEGraph::TNode
IsOutEId	snap-core/network.h	/^    bool IsOutEId(const int& EId) const { return NodeHI.GetDat().IsOutEId(EId); }$/;"	f	class:TNEANet::TNodeI
IsOutEId	snap-core/network.h	/^    bool IsOutEId(const int& EId) const { return NodeHI.GetDat().IsOutEId(EId); }$/;"	f	class:TNodeEdgeNet::TNodeI
IsOutEId	snap-core/network.h	/^    bool IsOutEId(const int& EId) const { return OutEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNEANet::TNode
IsOutEId	snap-core/network.h	/^    bool IsOutEId(const int& EId) const { return OutEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNodeEdgeNet::TNode
IsOutEId	snap-core/networkmp.h	/^    bool IsOutEId(const int& EId) const { return NodeHI.GetDat().IsOutEId(EId); }$/;"	f	class:TNEANetMP::TNodeI
IsOutEId	snap-core/networkmp.h	/^    bool IsOutEId(const int& EId) const { return OutEIdV.SearchBin(EId) != -1; }$/;"	f	class:TNEANetMP::TNode
IsOutEId	snap-exp/mmgraph-exp.h	/^    bool IsOutEId(const int& EId) const { return HashI.GetDat().IsOutEId(EId); }$/;"	f	class:TMNet::TMNodeI
IsOutEId	snap-exp/mmgraph-exp.h	/^  bool IsOutEId(const int& EId) const { return OutEIdV.SearchForw(EId) != -1; }$/;"	f	class:TMVNode
IsOutNId	snap-core/bignet.h	/^    bool IsOutNId(const int& NId) const { return BinSearch(OutNIdV, OutNIdV+OutDeg, NId)!=NULL; }$/;"	f	class:TBigNet::TNodeI
IsOutNId	snap-core/graph.cpp	/^bool TNEGraph::TNodeI::IsOutNId(const int& NId) const {$/;"	f	class:TNEGraph::TNodeI
IsOutNId	snap-core/graph.h	/^    bool IsOutNId(const int& NId) const { return HI().GetDat().IsOutNId(NId); }$/;"	f	class:TBPGraph::TNodeI
IsOutNId	snap-core/graph.h	/^    bool IsOutNId(const int& NId) const { return IsNbrNId(NId); }$/;"	f	class:TBPGraph::TNode
IsOutNId	snap-core/graph.h	/^    bool IsOutNId(const int& NId) const { return IsNbrNId(NId); }$/;"	f	class:TUNGraph::TNode
IsOutNId	snap-core/graph.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TNGraph::TNodeI
IsOutNId	snap-core/graph.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TUNGraph::TNodeI
IsOutNId	snap-core/graph.h	/^    bool IsOutNId(const int& NId) const { return OutNIdV.SearchBin(NId) != -1; }$/;"	f	class:TNGraph::TNode
IsOutNId	snap-core/graphmp.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TNGraphMP::TNodeI
IsOutNId	snap-core/graphmp.h	/^    bool IsOutNId(const int& NId) const { return OutNIdV.SearchBin(NId) != -1; }$/;"	f	class:TNGraphMP::TNode
IsOutNId	snap-core/network.cpp	/^bool TNEANet::TNodeI::IsOutNId(const int& NId) const {$/;"	f	class:TNEANet::TNodeI
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return IsNbrNId(NId); }$/;"	f	class:TUndirNet::TNode
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TDirNet::TNodeI
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TNodeEDatNet::TNodeI
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TNodeNet::TNodeI
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TUndirNet::TNodeI
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return OutNIdV.SearchBin(NId) != -1; }$/;"	f	class:TDirNet::TNode
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return OutNIdV.SearchBin(NId) != -1; }$/;"	f	class:TNodeNet::TNode
IsOutNId	snap-core/network.h	/^    bool IsOutNId(const int& NId) const { return TNodeEDatNet::GetNIdPos(OutNIdV, NId)!=-1; }$/;"	f	class:TNodeEDatNet::TNode
IsOutNId	snap-core/network.h	/^bool TNodeEdgeNet<TNodeData, TEdgeData>::TNodeI::IsOutNId(const int& NId) const {$/;"	f	class:TNodeEdgeNet::TNodeI
IsOutNId	snap-core/networkmp.cpp	/^bool TNEANetMP::TNodeI::IsOutNId(const int& NId) const {$/;"	f	class:TNEANetMP::TNodeI
IsOutNId	snap-exp/graphmp-exp.h	/^    bool IsOutNId(const int& NId) const { return IsNbrNId(NId); }$/;"	f	class:TUNGraphMP::TNode
IsOutNId	snap-exp/graphmp-exp.h	/^    bool IsOutNId(const int& NId) const { return NodeHI.GetDat().IsOutNId(NId); }$/;"	f	class:TUNGraphMP::TNodeI
IsOutNId	snap-exp/mmgraph-exp.h	/^    bool IsOutNId(const int& NId) const {$/;"	f	class:TMNet::TMNodeI
IsPeekAheadSkippable	glib-core/unicode.h	2729;"	d
IsPeekAheadSkippable	glib-core/unicode.h	2749;"	d
IsPortOk	glib-core/url.h	/^  bool IsPortOk() const { EAssert(IsOk()); return (PortN > 0); }$/;"	f
IsPrefix	glib-core/bits.h	/^  bool IsPrefix(const TB32Set& BSet, const int& MnBitN) const {$/;"	f	class:TB32Set
IsPrefix	glib-core/bits.h	/^  bool IsPrefix(const TB8Set& BSet, const int& MnBitN) const {$/;"	f	class:TB8Set
IsPrefix	glib-core/dt.cpp	/^bool TChA::IsPrefix(const TChA& Str) const {$/;"	f	class:TChA
IsPrefix	glib-core/dt.cpp	/^bool TChA::IsPrefix(const TStr& Str) const {$/;"	f	class:TChA
IsPrefix	glib-core/dt.cpp	/^bool TChA::IsPrefix(const char* CStr, const int& BChN) const {$/;"	f	class:TChA
IsPrefix	glib-core/dt.cpp	/^bool TStr::IsPrefix(const char *Str) const {$/;"	f	class:TStr
IsPrefix	glib-core/wch.h	/^  bool IsPrefix(const TWChA& WChA) const {$/;"	f	class:TWChA
IsPrev	glib-core/ds.h	/^  bool IsPrev() const {return (PrevNd != NULL); }$/;"	f	class:TLstNd
IsPrime	test/test-THash.cpp	/^bool IsPrime(const int& d) {$/;"	f
IsPrivateUse	glib-core/unicode.h	/^	bool IsPrivateUse() const { return subCat == ucOtherPrivateUse; }$/;"	f	class:TUniChInfo
IsPrivateUse	glib-core/unicode.h	/^	bool IsPrivateUse(const int cp) const {$/;"	f	class:TUniChDb
IsProbMtx	snap-adv/kronecker.cpp	/^bool TKronMtx::IsProbMtx() const {$/;"	f	class:TKronMtx
IsProbMtx	snap-adv/mag.cpp	/^bool TMAGAffMtx::IsProbMtx() const {$/;"	f	class:TMAGAffMtx
IsProperty	glib-core/unicode.h	/^	bool IsProperty(const TUniChProperties flag) const { return (properties & flag) == flag; }$/;"	f	class:TUniChInfo
IsPropertyX	glib-core/unicode.h	/^	bool IsPropertyX(const TUniChPropertiesX flag) const { return (propertiesX & flag) == flag; }$/;"	f	class:TUniChInfo
IsPubid	glib-core/xml.h	/^  bool IsPubid(const uchar& Ch) const {return PubidChSet.GetBit(Ch);}$/;"	f
IsPunctuationV	glib-core/url.cpp	/^  TBoolV IsNationalV, IsPunctuationV;$/;"	m	class:TUrlLxChDef	file:
IsQt	snap-exp/memes.h	/^  bool IsQt(const char* CStr) const { return GetQtId(CStr)!=-1; }$/;"	f	class:TQuoteBs
IsQtId	snap-exp/memes.h	/^  bool IsQtId(const int& QtId) const { return QuoteH.IsKey(QtId); }$/;"	f	class:TQuoteBs
IsQuotationMark	glib-core/unicode.h	/^	bool IsQuotationMark() const { return IsProperty(ucfPrQuotationMark); }$/;"	f	class:TUniChInfo
IsRNode	snap-core/graph.h	/^  bool IsRNode(const int& NId) const { return RightH.IsKey(NId); }$/;"	f	class:TBPGraph
IsRedirUrlTok	glib-core/html.cpp	/^bool THtmlTok::IsRedirUrlTok() const {$/;"	f	class:THtmlTok
IsReservedV	glib-core/url.cpp	/^  TBoolV IsReservedV, IsHexV;$/;"	m	class:TUrlLxChDef	file:
IsRespStatusLn	glib-core/http.cpp	/^bool THttpLx::IsRespStatusLn(){$/;"	f	class:THttpLx
IsRight	snap-core/graph.h	/^    bool IsRight() const { return ! IsLeft(); }$/;"	f	class:TBPGraph::TNodeI
IsRowValid	snap-core/table.h	/^  bool IsRowValid(TInt RowIdx) const{ return Next[RowIdx] != Invalid;}$/;"	f	class:TTable
IsRowValid	snap-exp/alternativetable.h	/^  bool IsRowValid(TInt RowIdx) const{ return Next[RowIdx] != Invalid;}$/;"	f	class:ExplicitStringTable
IsSTerminal	glib-core/unicode.h	/^	bool IsSTerminal() const { return IsProperty(ucfPrSTerm); }$/;"	f	class:TUniChInfo
IsSafeV	glib-core/url.cpp	/^  TBoolV IsDigitV, IsSafeV, IsExtraV;$/;"	m	class:TUrlLxChDef	file:
IsSameOpnTriad	snap-exp/signnet.cpp	/^int TSignMicroEvol::IsSameOpnTriad(const PSignNet& Net1, const PSignNet& Net2) {$/;"	f	class:TSignMicroEvol
IsSameSet	snap-core/gbase.h	/^  bool IsSameSet(const int& Key1, const int& Key2) {$/;"	f	class:TUnionFind
IsSameTriad	snap-exp/signnet.cpp	/^bool TSignMicroEvol::IsSameTriad(const PSignNet& Net1, const PSignNet& Net2, const TIntV& Perm) const {$/;"	f	class:TSignMicroEvol
IsSameTriad	snap-exp/signnet.cpp	/^bool TSignMicroEvol::IsSameTriad(const PSignNet& Net1, const PSignNet& Net2, int& PermId) const {$/;"	f	class:TSignMicroEvol
IsSameTriad	snap-exp/signnet.cpp	/^int TSignNet::IsSameTriad(const PSignNet& Net1, const PSignNet& Net2) {$/;"	f	class:TSignNet
IsSameXCol	glib-core/gnuplot.cpp	/^int TGnuPlot::IsSameXCol(const int& CurId, const int& PrevId) const {$/;"	f	class:TGnuPlot
IsSbFlag	glib-core/unicode.h	/^	bool IsSbFlag(const TUniChFlags flag) const { Assert((flag & ucfSbMask) == flag); return (flags & flag) == flag; }$/;"	f	class:TUniChInfo
IsSbFlag	glib-core/unicode.h	/^	bool IsSbFlag(const int cp, const TUniChFlags flag) const { int i = h.GetKeyId(cp); if (i < 0) return false; else return h[i].IsSbFlag(flag); }$/;"	f	class:TUniChDb
IsSbFormat	glib-core/unicode.h	/^	bool IsSbFormat() const { return IsSbFlag(ucfSbFormat); }$/;"	f	class:TUniChInfo
IsSbSep	glib-core/unicode.h	/^	bool IsSbSep() const { return (flags & ucfSbSep) == ucfSbSep; }$/;"	f	class:TUniChInfo
IsSchemeCh	glib-core/url.cpp	/^  bool IsSchemeCh() const {return ChDef.IsSchemeCh(PeekCh());}$/;"	f	class:TUrlLx
IsSchemeCh	glib-core/url.cpp	/^  bool IsSchemeCh(const char& Ch) const {return (Ch>=0)&&IsSchemeV[Ch];}$/;"	f	class:TUrlLxChDef
IsSchemeV	glib-core/url.cpp	/^  TBoolV IsSchemeV, IsHostV, IsHSegmentV;$/;"	m	class:TUrlLxChDef	file:
IsScript	glib-core/url.cpp	/^bool TUrl::IsScript(const TStr& UrlStr){$/;"	f	class:TUrl
IsSep	glib-core/lx.cpp	/^bool TLxSymStr::IsSep(const TLxSym& PrevSym, const TLxSym& Sym){$/;"	f	class:TLxSymStr
IsSilent	glib-core/env.h	/^  bool IsSilent() const {return SilentP;}$/;"	f	class:TEnv
IsSimilarFeature	snap-adv/rolx.cpp	/^bool IsSimilarFeature(const TFtr& F1, const TFtr& F2,$/;"	f
IsSinglePeak	snap-exp/memes.cpp	/^bool TQuote::IsSinglePeak(const TTmUnit& TmUnit, const TSecTm& AfterTm, const TUrlTy& UrlTy, const TQuoteBs& QtBs) const {$/;"	f	class:TQuote
IsSite	glib-core/url.cpp	/^bool TUrl::IsSite(const TStr& UrlStr){$/;"	f	class:TUrl
IsSoftDotted	glib-core/unicode.h	/^	bool IsSoftDotted() const { return IsProperty(ucfPrSoftDotted); }$/;"	f	class:TUniChInfo
IsSorted	glib-core/ds.h	/^bool TVec<TVal, TSizeTy>::IsSorted(const bool& Asc) const {$/;"	f	class:TVec
IsSortedCmp	glib-core/ds.h	/^  bool IsSortedCmp(const TCmp& Cmp) const {$/;"	f	class:TVec
IsSources	snap-core/gbase.h	/^template <class TGraph> struct IsSources    { enum { Val = 0 }; };$/;"	s	namespace:TSnap
IsSp	glib-core/http.cpp	/^  bool IsSp(const char& Ch){return Ch==32;}$/;"	f	class:THttpChDef
IsSpace	glib-core/html.h	/^  bool IsSpace(const char& Ch) const {return int(ChTyV[Ch-TCh::Mn])==hlctSpace;}$/;"	f
IsSpace	glib-core/lx.h	/^  bool IsSpace(const char& Ch) const {return ChTyV[Ch-TCh::Mn]==TInt(lctSpace);}$/;"	f
IsSpec	glib-core/http.cpp	/^  bool IsSpec(const char& Ch){$/;"	f	class:THttpChDef
IsStatusFrac	snap-exp/signnet.cpp	/^bool TSignMicroEvol::IsStatusFrac(const int& OpnTriadId, const bool& DstNode) const {$/;"	f	class:TSignMicroEvol
IsStatusSurp	snap-exp/signnet.cpp	/^bool TSignMicroEvol::IsStatusSurp(const int& OpnTriadId, const bool& DstNode) const {$/;"	f	class:TSignMicroEvol
IsStr	glib-core/json.h	/^  bool IsStr() const {return JsonValType==jvtStr;}$/;"	f
IsStr	snap-exp/imdbnet.h	/^  bool IsStr(const TStr& Str) const { return StrIdH.IsKey(Str); }$/;"	f	class:TImdbNet
IsStr	snap-exp/imdbnet.h	/^  bool IsStr(const TStr& Str, int& StrId) const { StrId=StrIdH.GetKeyId(Str); return StrId!=-1; }$/;"	f	class:TImdbNet
IsStr	snap-exp/memes.h	/^  bool IsStr(const TChA& Str) const { return StrQtIdH.IsKey(Str.CStr()); }$/;"	f	class:TQuoteBs
IsStr	snap-exp/memes.h	/^  bool IsStr(const char* CStr) const { return StrQtIdH.IsKey(CStr); }$/;"	f	class:TQuoteBs
IsStrAttrDeletedE	snap-core/mmnet.cpp	/^bool TCrossNet::IsStrAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TCrossNet
IsStrAttrDeletedE	snap-core/network.cpp	/^bool TNEANet::IsStrAttrDeletedE(const int& EId, const TStr& attr) const {$/;"	f	class:TNEANet
IsStrAttrDeletedN	snap-core/network.cpp	/^bool TNEANet::IsStrAttrDeletedN(const int& NId, const TStr& attr) const {$/;"	f	class:TNEANet
IsStrAttrE	snap-core/network.cpp	/^bool TNEANet::IsStrAttrE(const TStr& attr) {$/;"	f	class:TNEANet
IsStrAttrE	snap-core/networkmp.cpp	/^bool TNEANetMP::IsStrAttrE(const TStr& attr) {$/;"	f	class:TNEANetMP
IsStrId	snap-exp/memes.h	/^  bool IsStrId(const int& StrId) const { return StrId < StrQtIdH.Len(); }$/;"	f	class:TQuoteBs
IsStrIn	glib-core/wch.h	/^  bool IsStrIn(const TWChA& WChA) const {return SearchStr(WChA)!=-1;}$/;"	f	class:TWChA
IsSubstId	glib-core/lx.cpp	/^bool TPreproc::IsSubstId(const TStr& SubstId, TStr& SubstValStr) const {$/;"	f	class:TPreproc
IsSucc	snap-exp/wikinet.h	/^  TBool IsSucc;    \/\/ was the election outcome successful$/;"	m	class:TWikiElec
IsSuffix	glib-core/dt.cpp	/^bool TChA::IsSuffix(const TChA& Str) const {$/;"	f	class:TChA
IsSuffix	glib-core/dt.cpp	/^bool TChA::IsSuffix(const TStr& Str) const {$/;"	f	class:TChA
IsSuffix	glib-core/dt.cpp	/^bool TChA::IsSuffix(const char* CStr) const {$/;"	f	class:TChA
IsSuffix	glib-core/dt.cpp	/^bool TStr::IsSuffix(const char *Str) const {$/;"	f	class:TStr
IsSufix	glib-core/wch.h	/^  bool IsSufix(const TWChA& WChA) const {$/;"	f	class:TWChA
IsSurrogate	glib-core/unicode.h	/^	bool IsSurrogate() const { return subCat == ucOtherSurrogate; }$/;"	f	class:TUniChInfo
IsSurrogate	glib-core/unicode.h	/^	bool IsSurrogate(const int cp) const {$/;"	f	class:TUniChDb
IsSym	glib-core/html.h	/^  bool IsSym(const char& Ch) const {return int(ChTyV[Ch-TCh::Mn])==hlctSym;}$/;"	f
IsTagNm	glib-core/xml.cpp	/^bool TXmlLx::IsTagNm(const TStr& Str){$/;"	f	class:TXmlLx
IsTalkE	snap-exp/wikinet.h	/^  bool IsTalkE() const { return TotTalks>0; }$/;"	f	class:TWikiTalkEdge
IsTerm	glib-core/lx.h	/^  bool IsTerm(const char& Ch) const {return ChTyV[Ch-TCh::Mn]==TInt(lctTerm);}$/;"	f
IsTerminalPunctuation	glib-core/unicode.h	/^	bool IsTerminalPunctuation() const { return IsProperty(ucfPrTerminalPunctuation); }$/;"	f	class:TUniChInfo
IsText	glib-core/http.cpp	/^  bool IsText(const char& Ch){return !IsCtl(Ch)||IsLws(Ch);}$/;"	f	class:THttpChDef
IsTimeDef	glib-core/tm.h	/^  bool IsTimeDef() const { return !(Hour==0 && Min==0 && Sec==0 && MSec==0); }$/;"	f	class:TTm
IsTree	snap-core/alg.h	/^bool IsTree(const PGraph& Graph, int& RootNId) {$/;"	f	namespace:TSnap
IsTxt	glib-core/html.cpp	/^bool TWebPg::IsTxt() const {$/;"	f	class:TWebPg
IsUCharV	glib-core/url.cpp	/^  TBoolV IsUnreservedV, IsUCharV, IsXCharV;$/;"	m	class:TUrlLxChDef	file:
IsUId	snap-exp/wikinet.h	/^  bool IsUId(const int& UId) const { return UId < UsrH.Len(); }$/;"	f	class:TWikiElecBs
IsUInt	glib-core/dt.cpp	/^bool TStr::IsUInt($/;"	f	class:TStr
IsUInt64	glib-core/dt.cpp	/^bool TStr::IsUInt64($/;"	f	class:TStr
IsUc	glib-core/dt.cpp	/^bool TRStr::IsUc() const {$/;"	f	class:TRStr
IsUc	glib-core/html.h	/^  bool IsUc(const char& Ch) const {return Ch==UcChV[Ch-TCh::Mn];}$/;"	f
IsUnidirEdge	snap-adv/motifcluster.cpp	/^bool MotifCluster::IsUnidirEdge(PNGraph graph, int u, int v) {$/;"	f	class:MotifCluster
IsUnreservedV	glib-core/url.cpp	/^  TBoolV IsUnreservedV, IsUCharV, IsXCharV;$/;"	m	class:TUrlLxChDef	file:
IsUnused	snap-core/bignet.h	/^    bool IsUnused() const { return InVId==-1 && OutVId==-1; }$/;"	f	class:TBigNet::TNode
IsUpperCase	glib-core/unicodestring.cpp	/^bool TUStr::IsUpperCase(const int& UniCh){$/;"	f	class:TUStr
IsUppercase	glib-core/unicode.h	/^	bool IsUppercase() const { return IsDcpFlag(ucfDcpUppercase); }$/;"	f	class:TUniChInfo
IsUrl	glib-core/html.h	/^  bool IsUrl(const char& Ch) const {$/;"	f
IsUrl	snap-exp/memenet.h	/^  bool IsUrl(const char* UrlStr) const { return UrlH.IsKey(UrlStr); }$/;"	f	class:TMemeNetBs
IsUrlId	snap-exp/memenet.h	/^  bool IsUrlId(const int& UrlId) const { return UrlId < UrlH.Len(); }$/;"	f	class:TMemeNetBs
IsUrlTok	glib-core/html.cpp	/^bool THtmlTok::IsUrlTok(TStr& RelUrlStr) const {$/;"	f	class:THtmlTok
IsUsable	glib-core/xmath.h	/^  bool IsUsable() const {Assert(DefP); return UsableP;}$/;"	f
IsUsableV	glib-core/xmath.h	/^  static bool IsUsableV(const TMomV& MomV){$/;"	f
IsUsableVV	glib-core/xmath.h	/^  static bool IsUsableVV(const TVVec<PMom>& MomVV){$/;"	f
IsUsr	snap-exp/wikinet.cpp	/^bool TWikiTalkNet::IsUsr(const TStr& UsrStr) const {$/;"	f	class:TWikiTalkNet
IsUsr	snap-exp/wikinet.h	/^  bool IsUsr(const TChA& Str) const { return UsrH.IsKey(Str.CStr()); }$/;"	f	class:TWikiElecBs
IsUsr	snap-exp/wikinet.h	/^  bool IsUsr(const char* CStr) const { return UsrH.IsKey(CStr); }$/;"	f	class:TWikiElecBs
IsVId	glib-core/ds.h	/^  bool IsVId(const int& VId) const { return (0 <= VId) && (VId < IdToOffV.Len()); }$/;"	f	class:TGLib_OLD::TVecPool
IsVId	glib-core/ds.h	/^  bool IsVId(const int& VId) const { return (0 <= VId) && (VId < IdToOffV.Len()); }$/;"	f	class:TVecPool
IsValStr	glib-core/dt.cpp	/^bool TBool::IsValStr(const TStr& Str){$/;"	f	class:TBool
IsValid	snap-core/table.h	/^	TBool IsValid(){ return Valid;}$/;"	f	class:GroupStmt
IsValidSubCat	glib-core/unicode.h	/^	inline static bool IsValidSubCat(const char chCat, const char chSubCat) {$/;"	f	class:TUniChInfo
IsVariationSelector	glib-core/unicode.h	/^	bool IsVariationSelector() const { return IsProperty(ucfPrVariationSelector); }$/;"	f	class:TUniChInfo
IsVote	snap-exp/wikinet.h	/^  bool IsVote() const { return IsAVote; }$/;"	f	class:TWikiVote
IsVoteE	snap-exp/wikinet.h	/^  bool IsVoteE() const { return VoteTm.IsDef(); }$/;"	f	class:TWikiTalkEdge
IsVoteTalkE	snap-exp/wikinet.h	/^  bool IsVoteTalkE() const { return IsTalkE()&&IsVoteE(); }$/;"	f	class:TWikiTalkEdge
IsWbFlag	glib-core/unicode.h	/^	bool IsWbFlag(const TUniChFlags flag) const { Assert((flag & ucfWbMask) == flag); return (flags & flag) == flag; }$/;"	f	class:TUniChInfo
IsWbFlag	glib-core/unicode.h	/^	bool IsWbFlag(const int cp, const TUniChFlags flag) const { int i = h.GetKeyId(cp); if (i < 0) return false; else return h[i].IsWbFlag(flag); }$/;"	f	class:TUniChDb
IsWbFormat	glib-core/unicode.h	/^	bool IsWbFormat() const { return IsWbFlag(ucfWbFormat); }$/;"	f	class:TUniChInfo
IsWbIgnored	glib-core/unicode.h	/^	bool IsWbIgnored(const int cp) const { int i = h.GetKeyId(cp); if (i < 0) return false; else return IsWbIgnored(h[i]); }$/;"	f	class:TUniChDb
IsWbIgnored	glib-core/unicode.h	/^	static bool IsWbIgnored(const TUniChInfo& ci) { return ci.IsGbExtend() || ci.IsWbFormat(); }$/;"	f	class:TUniChDb
IsWcMatch	glib-core/dt.cpp	/^bool TStr::IsWcMatch($/;"	f	class:TStr
IsWcMatch	glib-core/dt.cpp	/^bool TStr::IsWcMatch(const TStr& WcStr) const {$/;"	f	class:TStr
IsWcMatch	glib-core/dt.cpp	/^bool TStr::IsWcMatch(const TStr& WcStr, const int& StarStrN, TStr& StarStr) const {$/;"	f	class:TStr
IsWeaklyConn	snap-core/cncom.h	/^bool IsWeaklyConn(const PGraph& Graph) {$/;"	f	namespace:TSnap
IsWhiteSpace	glib-core/unicode.h	/^	bool IsWhiteSpace() const { return IsProperty(ucfPrWhiteSpace); }$/;"	f	class:TUniChInfo
IsWord	glib-core/dt.cpp	/^bool TStr::IsWord(const bool& WsPrefixP, const bool& FirstUcAllowedP) const {$/;"	f	class:TStr
IsWs	glib-core/dt.cpp	/^bool TStr::IsWs() const {$/;"	f	class:TStr
IsWs	glib-core/html.h	/^  bool IsWs(const char& Ch) const {$/;"	f
IsWs	glib-core/xml.h	/^  bool IsWs(const uchar& Ch) const {$/;"	f
IsXCharV	glib-core/url.cpp	/^  TBoolV IsUnreservedV, IsUCharV, IsXCharV;$/;"	m	class:TUrlLxChDef	file:
IsXLoadFromFileOk	glib-core/xmlser.h	/^bool IsXLoadFromFileOk(const TStr& FNm, const TStr& Nm, TRec& Rec, TStr& MsgStr){$/;"	f
IsXidContinue	glib-core/unicode.h	/^	bool IsXidContinue() const { return IsDcpFlag(ucfDcpXidContinue); }$/;"	f	class:TUniChInfo
IsXidStart	glib-core/unicode.h	/^	bool IsXidStart() const { return IsDcpFlag(ucfDcpXidStart); }$/;"	f	class:TUniChInfo
IsZipExt	glib-core/zipfl.cpp	/^bool TZipIn::IsZipExt(const TStr& FNmExt) {$/;"	f	class:TZipIn
IsZipExt	glib-core/zipfl.cpp	/^bool TZipOut::IsZipExt(const TStr& FNmExt) {$/;"	f	class:TZipOut
IsZipFNm	glib-core/zipfl.h	/^  static bool IsZipFNm(const TStr& FNm) { return IsZipExt(FNm.GetFExt()); }$/;"	f	class:TZipIn
IsZipFNm	glib-core/zipfl.h	/^  static bool IsZipFNm(const TStr& FNm) { return IsZipExt(FNm.GetFExt()); }$/;"	f	class:TZipOut
IsolateNode	snap-core/bignet.h	/^int  TBigNet<TNodeData, IsDir>::IsolateNode(int NId) {$/;"	f	class:TBigNet
JACCARD	snap-exp/lsh.h	/^  enum DistMeasure {JACCARD, COSINE, EUCLIDEAN};$/;"	e	enum:TLSHash::DistMeasure
Jaccard	snap-core/table.h	/^typedef enum {L1Norm, L2Norm, Jaccard, Haversine} TSimType;$/;"	e	enum:__anon83
JaccardHash	snap-exp/lsh.cpp	/^TLSHash::JaccardHash::JaccardHash(TIntV Perm) : Perm(Perm) { }$/;"	f	class:TLSHash::JaccardHash
JaccardHash	snap-exp/lsh.cpp	/^TLSHash::JaccardHash::JaccardHash(TRnd &Gen, int Dim) {$/;"	f	class:TLSHash::JaccardHash
JaccardHash	snap-exp/lsh.h	/^  class JaccardHash : public HashFunc {$/;"	c	class:TLSHash
JanN	glib-core/tm.cpp	/^const int TTmInfo::JanN=1; const int TTmInfo::FebN=2;$/;"	m	class:TTmInfo	file:
JanN	glib-core/tm.h	/^  static const int JanN; static const int FebN;$/;"	m	class:TTmInfo
JarFExt	glib-core/fl.cpp	/^const TStr TFile::JarFExt=".Jar";$/;"	m	class:TFile	file:
Join	snap-core/ghash.cpp	/^bool TSimpleGraph::Join(const TSimpleGraph& G1, const TSimpleGraph& G2) {$/;"	f	class:TSimpleGraph
Join	snap-core/table.cpp	/^PTable TTable::Join(const TStr& Col1, const TTable& Table, const TStr& Col2) {$/;"	f	class:TTable
Join	snap-core/table.h	/^  PTable Join(const TStr& Col1, const PTable& Table, const TStr& Col2) {$/;"	f	class:TTable
Join	snap-exp/alternativetable.cpp	/^PExplicitStringTable ExplicitStringTable::Join(const TStr& Col1, const ExplicitStringTable& Table, const TStr& Col2) {$/;"	f	class:ExplicitStringTable
Join	snap-exp/alternativetable.h	/^  PExplicitStringTable Join(const TStr& Col1, const PExplicitStringTable& Table, const TStr& Col2) { $/;"	f	class:ExplicitStringTable
JoinCom	snap-adv/agmfit.cpp	/^void TAGMFit::JoinCom(const int& NID, const int& JoinCID) {$/;"	f	class:TAGMFit
JoinItems	snap-exp/trawling.cpp	/^void TTrawling::JoinItems(const TIntV& Item1, const TIntV& Item2, TIntV& JoinItem) {$/;"	f	class:TTrawling
JsonValType	glib-core/json.h	/^  TJsonValType JsonValType;$/;"	v
JulN	glib-core/tm.cpp	/^const int TTmInfo::JulN=7; const int TTmInfo::AugN=8;$/;"	m	class:TTmInfo	file:
JulN	glib-core/tm.h	/^  static const int JulN; static const int AugN;$/;"	m	class:TTmInfo
JunN	glib-core/tm.cpp	/^const int TTmInfo::MayN=5; const int TTmInfo::JunN=6;$/;"	m	class:TTmInfo	file:
JunN	glib-core/tm.h	/^  static const int MayN; static const int JunN;$/;"	m	class:TTmInfo
K	snap-adv/cascdynetinf.h	/^  TFlt Delta, K;$/;"	m	class:TNIBs
K	snap-adv/circles.h	/^  TInt K;$/;"	m	class:TCluster
K	snap-exp/circles/circles.h	/^  TInt K;$/;"	m	class:TCluster
KFac	snap-adv/ncp.h	/^  TFlt Alpha, SizeFrac, KFac;$/;"	m	class:TLocClustStat
KIdSetH	snap-core/gbase.h	/^  THash<TInt, TIntPr> KIdSetH; \/\/ key id to (parent, rank)$/;"	m	class:TUnionFind
KMax	snap-adv/ncp.h	/^  TInt KMin, KMax, Coverage;$/;"	m	class:TLocClustStat
KMin	snap-adv/ncp.h	/^  TInt KMin, KMax, Coverage;$/;"	m	class:TLocClustStat
KeepFqVoters	snap-exp/wikinet.cpp	/^void TWikiElecBs::KeepFqVoters(const int& MinVotes, const int& MinElecLen, const bool& OnlyAdmins) {$/;"	f	class:TWikiElecBs
KeepOnlyTree	snap-exp/memes.cpp	/^void TClustNet::KeepOnlyTree(const TIntPrV& KeepEdgeV) {$/;"	f	class:TClustNet
KeepSortedRows	snap-core/table.cpp	/^void TTable::KeepSortedRows(const TIntV& KeepV) {$/;"	f	class:TTable
KeepTopVoters	snap-exp/wikinet.cpp	/^void TWikiElecBs::KeepTopVoters(const int& Votes, const bool& KeepTop) {$/;"	f	class:TWikiElecBs
KeepVoters	snap-exp/wikinet.cpp	/^void TWikiElecBs::KeepVoters(const bool& KeepAdmins, const bool& KeepNonAdmins) {$/;"	f	class:TWikiElecBs
KeepVotes	snap-exp/wikinet.cpp	/^void TWikiElec::KeepVotes(const TIntSet& UIdSet) {$/;"	f	class:TWikiElec
Key	glib-core/ds.h	/^  TKey Key;$/;"	m	class:TKeyDat
Key	glib-core/hash.h	/^  TKey Key;$/;"	m	class:THashKeyDat
Key	glib-core/hashmp.h	/^  TKey Key;$/;"	m	class:THashMPKeyDat
Key	glib-core/shash.h	/^  TKey Key;$/;"	m	class:THashSetKey
Key	glib-core/shash.h	/^  TKey Key;$/;"	m	class:TKeyDatFl
Key	glib-core/shash.h	/^  TKey Key;$/;"	m	class:TSHashKeyDat
KeyDatI	glib-core/hash.h	/^  THKeyDat* KeyDatI;$/;"	m	class:THashKeyDatI
KeyDatI	glib-core/hashmp.h	/^  TPHKeyDat* KeyDatI;$/;"	m	class:THashMPKeyDatI
KeyDatV	glib-core/hash.h	/^  TVec<THKeyDat> KeyDatV;$/;"	m	class:THash
KeyI	glib-core/shash.h	/^  TSetKey* KeyI;$/;"	m	class:THashSetKeyI
KeyToIndexTypeE	snap-core/mmnet.h	/^  TStrIntPrH KeyToIndexTypeE;$/;"	m	class:TCrossNet
KeyToIndexTypeE	snap-core/network.h	/^  TStrIntPrH KeyToIndexTypeN, KeyToIndexTypeE;$/;"	m	class:TNEANet
KeyToIndexTypeE	snap-core/networkmp.h	/^  TStrIntPrH KeyToIndexTypeN, KeyToIndexTypeE;$/;"	m	class:TNEANetMP
KeyToIndexTypeE	snap-exp/mmgraph-exp.h	/^  TStrIntPrH KeyToIndexTypeN, KeyToIndexTypeE;$/;"	m	class:TMNet
KeyToIndexTypeN	snap-core/network.h	/^  TStrIntPrH KeyToIndexTypeN, KeyToIndexTypeE;$/;"	m	class:TNEANet
KeyToIndexTypeN	snap-core/networkmp.h	/^  TStrIntPrH KeyToIndexTypeN, KeyToIndexTypeE;$/;"	m	class:TNEANetMP
KeyToIndexTypeN	snap-exp/mmgraph-exp.h	/^  TStrIntPrH KeyToIndexTypeN, KeyToIndexTypeE;$/;"	m	class:TMNet
KeyV	glib-core/shash.h	/^  TVec<TSetKey> KeyV;$/;"	m	class:THashSet
KeyValH	glib-core/json.h	/^  THash<TStr, PJsonVal> KeyValH;$/;"	v
Keywords	snap-adv/cascdynetinf.h	/^  TIntV Keywords;$/;"	m	class:THitInfo
Kilo	glib-core/dt.cpp	/^const int TInt::Kilo=1024;$/;"	m	class:TInt	file:
Kilo	snap-core/gbase.h	3;"	d
KnownVV	snap-adv/mag.h	/^	TBoolVV KnownVV;$/;"	m	class:TMAGFitBern
KronIters	snap-adv/kronecker.h	/^  TInt Nodes, KronIters;$/;"	m	class:TKroneckerLL
KronLL	snap-adv/kronecker.h	/^  TKroneckerLL KronLL;$/;"	m	class:TKronMaxLL
KronMul	snap-adv/kronecker.cpp	/^void TKronMtx::KronMul(const TKronMtx& Left, const TKronMtx& Right, TKronMtx& Result) {$/;"	f	class:TKronMtx
KronPwr	snap-adv/kronecker.cpp	/^void TKronMtx::KronPwr(const TKronMtx& KronMtx, const int& NIter, TKronMtx& OutMtx) {$/;"	f	class:TKronMtx
KronSum	snap-adv/kronecker.cpp	/^void TKronMtx::KronSum(const TKronMtx& Left, const TKronMtx& Right, TKronMtx& Result) {$/;"	f	class:TKronMtx
KsProb	glib-core/xmath.cpp	/^double TStatTest::KsProb(const double& Alam) {$/;"	f	class:TStatTest
KsTest	glib-core/xmath.cpp	/^void TStatTest::KsTest(const TFltPrV& ValCntV1, const TFltPrV& ValCntV2, double& DStat, double& PVal) {$/;"	f	class:TStatTest
KsTest	glib-core/xmath.cpp	/^void TStatTest::KsTest(const TFltV& ValV1, const TFltV& ValV2, double& DStat, double& PVal) {$/;"	f	class:TStatTest
L1Norm	snap-core/table.h	/^typedef enum {L1Norm, L2Norm, Jaccard, Haversine} TSimType;$/;"	e	enum:__anon83
L2Norm	snap-core/table.h	/^typedef enum {L1Norm, L2Norm, Jaccard, Haversine} TSimType;$/;"	e	enum:__anon83
L2REG	snap-adv/cascdynetinf.h	/^  L2REG \/\/ L2 regularizer$/;"	e	enum:__anon62
LBraceStr	glib-core/lx.cpp	/^const TStr TLxSymStr::LBraceStr="{";$/;"	m	class:TLxSymStr	file:
LBracketStr	glib-core/lx.cpp	/^const TStr TLxSymStr::LBracketStr="[";$/;"	m	class:TLxSymStr	file:
LEdgeV	snap-adv/kronecker.h	/^  TIntTrV LEdgeV;        \/\/ latent edge vector$/;"	m	class:TKroneckerLL
LEqStr	glib-core/lx.cpp	/^const TStr TLxSymStr::LEqStr="<=";$/;"	m	class:TLxSymStr	file:
LINEAR	snap-adv/cascdynetinf.h	/^  LINEAR, \/\/ linear trend up\/down$/;"	e	enum:__anon59
LLHisV	snap-adv/mag.h	/^	TFltV LLHisV;$/;"	m	class:TMAGFitBern
LLMtx	snap-adv/kronecker.h	/^  TKronMtx ProbMtx, LLMtx; \/\/ Prob and LL matrices (parameters)$/;"	m	class:TKroneckerLL
LLV	snap-adv/kronecker.h	/^  TFltV LLV;			\/\/ Log-likelihood (per EM iteration)$/;"	m	class:TKroneckerLL
LParenStr	glib-core/lx.cpp	/^const TStr TLxSymStr::LParenStr="(";$/;"	m	class:TLxSymStr	file:
LSelfEdge	snap-adv/kronecker.h	/^  TInt LSelfEdge;        \/\/ latent self edges$/;"	m	class:TKroneckerLL
LT	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
LTE	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
LUDecomposition	glib-core/linalg.cpp	/^void TNumericalStuff::LUDecomposition(TFltVV& A, TIntV& indx, double& d) {$/;"	f	class:TNumericalStuff
LUSolve	glib-core/linalg.cpp	/^void TNumericalStuff::LUSolve(const TFltVV& A, const TIntV& indx, TFltV& b) {$/;"	f	class:TNumericalStuff
Label	glib-core/gnuplot.h	/^    TStr Label, WithStyle, DataFNm;$/;"	m	class:TGnuPlot::TGpSeries
Label	snap-core/flow.cpp	/^  int Label (int NId) {$/;"	f	class:TSnap::TPRManager
LabelBurstAutomaton	snap-adv/cascdynetinf.cpp	/^void TNIBs::LabelBurstAutomaton( const int& SrcId, const int& DstId, TIntV &state_labels, TFltV &state_times, const bool& inferred, const int& k, const double& s, const double& gamma, const TSecTm& MinTime, const TSecTm& MaxTime ){$/;"	f	class:TNIBs
LabelCounts	snap-core/flow.cpp	/^  TIntV LabelCounts;$/;"	m	class:TSnap::TPRManager	file:
LabelLimit	snap-core/flow.cpp	/^  int LabelLimit;$/;"	m	class:TSnap::TPRManager	file:
LabelsV	snap-core/flow.cpp	/^  TIntV LabelsV;$/;"	m	class:TSnap::TPRManager	file:
Lambda	snap-adv/circles.h	/^  TFlt Lambda;$/;"	m	class:TCluster
Lambda	snap-exp/linkpred.h	/^  TFlt Lambda; \/\/ regularization parameter$/;"	m	class:__OLD__::TLpBase
Lambda	snap-exp/linkpred.h	/^  double Lambda;  \/\/ regularization parameter$/;"	m	class:TLpPredictor
LambdaV	snap-adv/agmfit.h	/^  TFltV LambdaV; \/\/\/< Parametrization of P_c (edge probability in community c), P_c = 1 - exp(-lambda).$/;"	m	class:TAGMFit
Lanczos	glib-core/linalg.cpp	/^void TSparseSVD::Lanczos(const TMatrix& Matrix, int NumEig,$/;"	f	class:TSparseSVD
Lanczos2	glib-core/linalg.cpp	/^void TSparseSVD::Lanczos2(const TMatrix& Matrix, int MaxNumEig,$/;"	f	class:TSparseSVD
LanczosSVD	glib-core/linalg.cpp	/^void TSparseSVD::LanczosSVD(const TMatrix& Matrix, int NumSV,$/;"	f	class:TSparseSVD
Lang	snap-exp/imdbnet.h	/^  TInt Cntry, Lang;          \/\/ movie country and language$/;"	m	class:TImdbNode
LassoCoef	snap-adv/agmattr.h	/^  TFlt LassoCoef; \/\/ L1 regularization coefficient for W (MLE = argmax P(X|F, W) - LassoCoef * |W|)$/;"	m	class:TCesna
Last	glib-core/ds.h	/^  PLstNd Last() const {return LastNd;}$/;"	f	class:TLst
Last	glib-core/ds.h	/^  TInt First, Last;$/;"	m	class:TQQueue
Last	glib-core/ds.h	/^  TVal& Last(){return GetVal(Len()-1);}$/;"	f	class:TVec
Last	glib-core/ds.h	/^  const TVal& Last() const {return GetVal(Len()-1);}$/;"	f	class:TVec
Last	glib-core/shash.h	/^  TVal& Last() { return ValT[Len()-1]; }$/;"	f	class:TPackVec
Last	glib-core/shash.h	/^  const TVal& Last() const { return ValT[Len()-1]; }$/;"	f	class:TPackVec
Last	snap-core/gbase.h	/^  TInt First, Last;$/;"	m	class:TSnapQueue
Last	snap-core/gstat.h	/^  PGStat Last() const { return GStatV.Last(); }$/;"	f	class:TGStatVec
Last	snap-core/table.cpp	/^TInt const TTable::Last = -1;$/;"	m	class:TTable	file:
Last	snap-core/table.h	/^  static const TInt Last; \/\/\/< Special value for Next vector entry - last row in table.$/;"	m	class:TTable
Last	snap-exp/alternativetable.cpp	/^TInt const ExplicitStringTable::Last = -1;$/;"	m	class:ExplicitStringTable	file:
Last	snap-exp/alternativetable.cpp	/^TInt const RowBasedTable::Last = -1;$/;"	m	class:RowBasedTable	file:
Last	snap-exp/alternativetable.h	/^	static const TInt Last; $/;"	m	class:RowBasedTable
Last	snap-exp/alternativetable.h	/^  static const TInt Last; \/\/\/< Special value for Next vector entry - last row in table.$/;"	m	class:ExplicitStringTable
LastB4Mask	glib-core/bits.h	/^  TB4Def::TB4 LastB4Mask;$/;"	v
LastJulianDate	glib-core/tm.cpp	/^int TJulianDate::LastJulianDate=15821004; \/* last day to use Julian calendar *\/$/;"	m	class:TJulianDate	file:
LastJulianDate	glib-core/tm.h	/^  static int LastJulianDate; \/* last day to use Julian calendar *\/$/;"	m	class:TJulianDate
LastJulianDateN	glib-core/tm.cpp	/^int TJulianDate::LastJulianDateN=2299160; \/* jdn of same *\/$/;"	m	class:TJulianDate	file:
LastJulianDateN	glib-core/tm.h	/^  static int LastJulianDateN; \/* jdn of same *\/$/;"	m	class:TJulianDate
LastLast	glib-core/ds.h	/^  TVal& LastLast(){ AssertR(1<Vals, GetXOutOfBoundsErrMsg(Vals-2)); return ValT[Vals-2];}$/;"	f	class:TVec
LastLast	glib-core/ds.h	/^  const TVal& LastLast() const { AssertR(1<Vals, GetXOutOfBoundsErrMsg(Vals-2)); return ValT[Vals-2];}$/;"	f	class:TVec
LastNd	glib-core/ds.h	/^  PLstNd LastNd;$/;"	m	class:TLst
LastTalk	snap-exp/wikinet.h	/^  TSecTm FirstTalk, LastTalk, VoteTm;$/;"	m	class:TWikiTalkEdge
LastTick	glib-core/tm.h	/^  int LastTick;$/;"	m	class:TExeTm
LastVal	glib-core/ds.h	/^  TVal& LastVal() const {return LastNd->GetVal();}$/;"	f	class:TLst
LastValN	glib-core/ds.h	/^  TSizeTy LastValN() const {return Len()-1;}$/;"	f	class:TVec
LastValidRow	snap-core/table.h	/^  TInt LastValidRow; \/\/\/< Physical index of last valid row.$/;"	m	class:TTable
LastValidRow	snap-exp/alternativetable.h	/^    TInt LastValidRow; $/;"	m	class:RowBasedTable
LastValidRow	snap-exp/alternativetable.h	/^  TInt LastValidRow; \/\/\/< Physical index of last valid row.$/;"	m	class:ExplicitStringTable
LblX	glib-core/gnuplot.h	/^  TStr Title, LblX, LblY;$/;"	m	class:TGnuPlot
LblY	glib-core/gnuplot.h	/^  TStr Title, LblX, LblY;$/;"	m	class:TGnuPlot
LcChV	glib-core/html.h	/^  TChV LcChV;$/;"	v
LcChV	glib-core/http.cpp	/^  TChV LcChV;$/;"	m	class:THttpChDef	file:
LeaveCom	snap-adv/agmfit.cpp	/^void TAGMFit::LeaveCom(const int& NID, const int& CID) {$/;"	f	class:TAGMFit
Left	glib-core/priorityqueue.h	/^  int Left(int i) { return i * 2 + 1; }$/;"	f	class:TMaxPriorityQueue
Left	snap-core/table.h	/^		TPredicateNode* Left; \/\/\/< Left child of this node$/;"	m	class:TPredicateNode
LeftH	snap-core/graph.h	/^  THash<TInt, TNode> LeftH;   \/\/ 'left' nodes$/;"	m	class:TBPGraph
LeftHI	snap-core/graph.h	/^    THashIter LeftHI, RightHI; \/\/ iterator over left and right hand-side nodes$/;"	m	class:TBPGraph::TNodeI
LeftOf	glib-core/dt.cpp	/^TStr TStr::LeftOf(const char& SplitCh) const {$/;"	f	class:TStr
LeftOfLast	glib-core/dt.cpp	/^TStr TStr::LeftOfLast(const char& SplitCh) const {$/;"	f	class:TStr
Len	glib-core/bd.h	/^  int Len() const {return int(strlen(Bf));}$/;"	f	class:TSStr
Len	glib-core/ds.h	/^  TSizeTy Len() const {return Vals;}$/;"	f	class:TVec
Len	glib-core/ds.h	/^  int Len() const { return NVals; }$/;"	f	class:TTuple
Len	glib-core/ds.h	/^  int Len() const {return First-Last;}$/;"	f	class:TQQueue
Len	glib-core/ds.h	/^  int Len() const {return Nds;}$/;"	f	class:TLst
Len	glib-core/ds.h	/^  int Len() const {return V.Len();}$/;"	f	class:PVec
Len	glib-core/ds.h	/^  int Len(){return ValV.Len();}$/;"	f	class:TSStack
Len	glib-core/dt.h	/^  int Len() const {return BfL;}$/;"	f
Len	glib-core/fl.h	/^  int Len() const { return GetSize() - GetPos(); } \/\/ bytes till eof$/;"	f	class:TFInOut
Len	glib-core/fl.h	/^  int Len() const {return -1;}$/;"	f	class:TStdIn
Len	glib-core/fl.h	/^  int Len() const {return BfL;}$/;"	f	class:TMOut
Len	glib-core/fl.h	/^  int Len() const {return GetFLen()-(GetFPos()-BfL+BfC);}$/;"	f	class:TFIn
Len	glib-core/fl.h	/^  int Len() const {return static_cast<int>(BfL-BfC);}$/;"	f	class:TMIn
Len	glib-core/hash.h	/^  TSize Len() const { return BfL; }$/;"	f
Len	glib-core/hash.h	/^  int Len() const {return KeyDatV.Len()-FreeKeys;}$/;"	f	class:THash
Len	glib-core/hashmp.h	/^  int Len() const {return NumVals;}$/;"	f	class:THashMP
Len	glib-core/http.cpp	/^  int Len(){return EofChPrS.Len()+SIn->Len();}$/;"	f	class:THttpLx
Len	glib-core/shash.h	/^  int Len() const { return Buckets; }$/;"	f	class:TSparseGroup
Len	glib-core/shash.h	/^  int Len() const { return ElemCnt; }$/;"	f	class:TKeyDatFl
Len	glib-core/shash.h	/^  int Len() const { return Table.Len(); }$/;"	f	class:TSparseHash
Len	glib-core/shash.h	/^  int Len() const { return Table.Len(); }$/;"	f	class:TSparseSet
Len	glib-core/shash.h	/^  int Len() const { return Vals; }$/;"	f	class:TSparseTable
Len	glib-core/shash.h	/^  int Len() const {return KeyV.Len()-FreeKeys; }$/;"	f	class:THashSet
Len	glib-core/shash.h	/^  int Len() const {return Vals; }$/;"	f	class:TPackVec
Len	glib-core/ssmp.h	/^  int Len() const { return FldV.Len(); }$/;"	f
Len	glib-core/unicodestring.h	/^  int Len() const {return UniChV.Len();}$/;"	f	class:TUStr
Len	glib-core/wch.h	/^  int Len() const {return WChV.Len();}$/;"	f	class:TWChA
Len	glib-core/zipfl.h	/^  int Len() const { return int(FLen-CurFPos+BfL-BfC); }$/;"	f	class:TZipIn
Len	snap-adv/cascdynetinf.h	/^  int Len() const { return NIdHitH.Len(); }$/;"	f	class:TCascade
Len	snap-adv/cascnetinf.h	/^  int Len() const { return NIdHitH.Len(); }$/;"	f	class:TCascade
Len	snap-adv/graphcounter.h	/^  int Len() const  { return m_graphCounters.Len(); }$/;"	f	class:TD34GraphCounter
Len	snap-adv/kronecker.h	/^  int Len() const { return SeedMtx.Len(); }$/;"	f	class:TKronMtx
Len	snap-adv/mag.h	/^  int Len() const { return SeedMtx.Len(); }$/;"	f	class:TMAGAffMtx
Len	snap-adv/ncp.h	/^    int Len() const { return SweepV.Len(); }$/;"	f	class:TLocClustStat::TNodeSweep
Len	snap-adv/ncp.h	/^  int Len() const { return GetRndWalkSup(); }$/;"	f	class:TLocClust
Len	snap-core/cncom.h	/^  int Len() const { return NIdV.Len(); }$/;"	f	class:TCnCom
Len	snap-core/gbase.h	/^  int Len() const { return HeapV.Len(); }$/;"	f	class:THeap
Len	snap-core/gbase.h	/^  int Len() const { return KIdSetH.Len(); }$/;"	f	class:TUnionFind
Len	snap-core/gbase.h	/^  int Len() const {return Last-First;}$/;"	f	class:TSnapQueue
Len	snap-core/ghash.h	/^  int Len() const {  return GraphH.Len(); }$/;"	f	class:TGHash
Len	snap-core/gstat.h	/^  int Len() const { return GStatV.Len(); }$/;"	f	class:TGStatVec
Len	snap-core/triad.h	/^  int Len() const { return NodePrCH.Len(); }$/;"	f	class:TNetConstraint
Len	snap-exp/memes.h	/^  int Len() const { return QuoteH.Len(); }$/;"	f	class:TQuoteBs
Len	snap-exp/wikinet.h	/^  int Len() const { return ElecV.Len(); }$/;"	f	class:TWikiElecBs
Len	snap-exp/wikinet.h	/^  int Len() const { return VoteV.Len(); }$/;"	f	class:TWikiElec
LenAfterT	snap-adv/cascdynetinf.h	/^  int LenAfterT(const double& T) { int len = 0; while (len < NIdHitH.Len() && NIdHitH[NIdHitH.Len()-1-len].Tm >= T) { len++; } return len; }$/;"	f	class:TCascade
LenBeforeT	snap-adv/cascdynetinf.h	/^  int LenBeforeT(const double& T) { int len = 0; while (len < NIdHitH.Len() && NIdHitH[len].Tm <= T) { len++; } return len; }$/;"	f	class:TCascade
LetterChSet	glib-core/xml.h	/^  TBSet LetterChSet, DigitChSet, NameChSet, PubidChSet;$/;"	v
LfCh	glib-core/dt.cpp	/^const char TCh::LfCh=char(10);$/;"	m	class:TCh	file:
LfWCh	glib-core/wch.h	/^  static const TWCh LfWCh;$/;"	m	class:TWCh
LiTagNm	glib-core/html.cpp	/^const TStr THtmlTok::LiTagNm="<LI>";$/;"	m	class:THtmlTok	file:
Likelihood	snap-adv/agm.cpp	/^double TLogRegFit::Likelihood(const TFltV& NewTheta) {$/;"	f	class:TLogRegFit
Likelihood	snap-adv/agm.h	/^  double Likelihood() { return Likelihood(Theta); }$/;"	f	class:TLogRegFit
Likelihood	snap-adv/agmattr.cpp	/^double TCesna::Likelihood(const bool _DoParallel) { $/;"	f	class:TCesna
Likelihood	snap-adv/agmdirected.cpp	/^double TCoda::Likelihood(const bool _DoParallel) { $/;"	f	class:TCoda
Likelihood	snap-adv/agmfast.cpp	/^double TAGMFast::Likelihood(const bool _DoParallel) { $/;"	f	class:TAGMFast
Likelihood	snap-adv/agmfit.cpp	/^double TAGMFit::Likelihood() { $/;"	f	class:TAGMFit
Likelihood	snap-adv/agmfit.cpp	/^double TAGMFit::Likelihood(const TFltV& NewLambdaV, double& LEdges, double& LNoEdges) {$/;"	f	class:TAGMFit
Likelihood	snap-adv/agmfit.h	/^  double Likelihood(const TFltV& NewLambdaV) { double Tmp1, Tmp2; return Likelihood(NewLambdaV, Tmp1, Tmp2); }$/;"	f	class:TAGMFit
LikelihoodAttr	snap-adv/agmattr.h	/^  double LikelihoodAttr() {$/;"	f	class:TCesna
LikelihoodAttrKForRow	snap-adv/agmattr.cpp	/^double TCesna::LikelihoodAttrKForRow(const int UID, const int K, const TIntFltH& FU, const TFltV& WK) {$/;"	f	class:TCesna
LikelihoodAttrKForRow	snap-adv/agmattr.h	/^  double LikelihoodAttrKForRow(const int UID, const int K) { return LikelihoodAttrKForRow(UID, K, F[UID]); }$/;"	f	class:TCesna
LikelihoodAttrKForRow	snap-adv/agmattr.h	/^  double LikelihoodAttrKForRow(const int UID, const int K, const TIntFltH& FU) { return LikelihoodAttrKForRow(UID, K, FU, W[K]); }$/;"	f	class:TCesna
LikelihoodForNode	snap-adv/agmdirected.cpp	/^double TCoda::LikelihoodForNode(const bool IsRow, const int UID) {$/;"	f	class:TCoda
LikelihoodForNode	snap-adv/agmdirected.cpp	/^double TCoda::LikelihoodForNode(const bool IsRow, const int UID, const TIntFltH& FU) {$/;"	f	class:TCoda
LikelihoodForOneVar	snap-adv/agmfast.cpp	/^double TAGMFast::LikelihoodForOneVar(const TFltV& AlphaKV, const int UID, const int CID, const double& Val) {$/;"	f	class:TAGMFast
LikelihoodForRow	snap-adv/agmattr.cpp	/^double TCesna::LikelihoodForRow(const int UID) {$/;"	f	class:TCesna
LikelihoodForRow	snap-adv/agmattr.cpp	/^double TCesna::LikelihoodForRow(const int UID, const TIntFltH& FU) {$/;"	f	class:TCesna
LikelihoodForRow	snap-adv/agmfast.cpp	/^double TAGMFast::LikelihoodForRow(const int UID) {$/;"	f	class:TAGMFast
LikelihoodForRow	snap-adv/agmfast.cpp	/^double TAGMFast::LikelihoodForRow(const int UID, const TIntFltH& FU) {$/;"	f	class:TAGMFast
LikelihoodForWK	snap-adv/agmattr.h	/^  double LikelihoodForWK(const int K) { return LikelihoodForWK(K, W[K]); }$/;"	f	class:TCesna
LikelihoodForWK	snap-adv/agmattr.h	/^  double LikelihoodForWK(const int K, const TFltV& WK) {$/;"	f	class:TCesna
LikelihoodGraph	snap-adv/agmattr.h	/^  double LikelihoodGraph() {$/;"	f	class:TCesna
LikelihoodHoldOut	snap-adv/agmattr.cpp	/^double TCesna::LikelihoodHoldOut() { $/;"	f	class:TCesna
LikelihoodHoldOut	snap-adv/agmdirected.cpp	/^double TCoda::LikelihoodHoldOut(const bool DoParallel) { $/;"	f	class:TCoda
LikelihoodHoldOut	snap-adv/agmfast.cpp	/^double TAGMFast::LikelihoodHoldOut(const bool DoParallel) { $/;"	f	class:TAGMFast
LinComb	glib-core/linalg.cpp	/^void TLinAlg::LinComb(const double& p, const TFltV& x,$/;"	f	class:TLinAlg
Line	snap-exp/lsh.h	/^    TFltV Line;$/;"	m	class:TLSHash::EuclideanHash
LineBreak_ComplexContext	glib-core/unicode.cpp	/^const ushort TUniChInfo::LineBreak_ComplexContext = TUniChInfo::GetLineBreakCode('S', 'A');$/;"	m	class:TUniChInfo	file:
LineBreak_ComplexContext	glib-core/unicode.h	/^	static const ushort LineBreak_Unknown, LineBreak_ComplexContext, LineBreak_Numeric, LineBreak_InfixNumeric, LineBreak_Quotation;$/;"	m	class:TUniChInfo
LineBreak_InfixNumeric	glib-core/unicode.cpp	/^const ushort TUniChInfo::LineBreak_InfixNumeric = TUniChInfo::GetLineBreakCode('I', 'S');$/;"	m	class:TUniChInfo	file:
LineBreak_InfixNumeric	glib-core/unicode.h	/^	static const ushort LineBreak_Unknown, LineBreak_ComplexContext, LineBreak_Numeric, LineBreak_InfixNumeric, LineBreak_Quotation;$/;"	m	class:TUniChInfo
LineBreak_Numeric	glib-core/unicode.cpp	/^const ushort TUniChInfo::LineBreak_Numeric = TUniChInfo::GetLineBreakCode('N', 'U');$/;"	m	class:TUniChInfo	file:
LineBreak_Numeric	glib-core/unicode.h	/^	static const ushort LineBreak_Unknown, LineBreak_ComplexContext, LineBreak_Numeric, LineBreak_InfixNumeric, LineBreak_Quotation;$/;"	m	class:TUniChInfo
LineBreak_Quotation	glib-core/unicode.cpp	/^const ushort TUniChInfo::LineBreak_Quotation = TUniChInfo::GetLineBreakCode('Q', 'U');$/;"	m	class:TUniChInfo	file:
LineBreak_Quotation	glib-core/unicode.h	/^	static const ushort LineBreak_Unknown, LineBreak_ComplexContext, LineBreak_Numeric, LineBreak_InfixNumeric, LineBreak_Quotation;$/;"	m	class:TUniChInfo
LineBreak_Unknown	glib-core/unicode.cpp	/^const ushort TUniChInfo::LineBreak_Unknown = TUniChInfo::GetLineBreakCode('X', 'X');$/;"	m	class:TUniChInfo	file:
LineBreak_Unknown	glib-core/unicode.h	/^	static const ushort LineBreak_Unknown, LineBreak_ComplexContext, LineBreak_Numeric, LineBreak_InfixNumeric, LineBreak_Quotation;$/;"	m	class:TUniChInfo
LineCnt	glib-core/ssmp.h	/^  uint64 LineCnt;       \/\/\/< Number of processed lines so far.$/;"	v
LineCnt	snap-exp/memes.h	/^  uint64 LineCnt;$/;"	m	class:TMemesDataLoader
LineStr	glib-core/ssmp.h	/^  TChA LineStr;         \/\/\/< Current line.$/;"	v
LinearFit	glib-core/xmath.cpp	/^void TSpecFunc::LinearFit($/;"	f	class:TSpecFunc
LinkDomainSvd	snap-exp/memenet.cpp	/^void TMemeNetBs::LinkDomainSvd() const {$/;"	f	class:TMemeNetBs
LinkPosV	snap-exp/memes.h	/^  TVec<TInt> LinkPosV;    \/\/ url begins at ContentStr[LinkPosV[i]]$/;"	m	class:TMemesDataLoader
LinkPostCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFeedItem
LinkPostCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFullItem
LinkV	snap-exp/memes.h	/^  TVec<TChA> LinkV;       \/\/ link url$/;"	m	class:TMemesDataLoader
LinkV	snap-exp/memes.h	/^  TVec<TChA> LinkV;$/;"	m	class:TQuoteLoader
LinkV	snap-exp/spinn3r.h	/^  TVec<TChA> LinkV;$/;"	m	class:TSpinn3rFeedItem
LinkV	snap-exp/spinn3r.h	/^  TVec<TChA> LinkV;$/;"	m	class:TSpinn3rFullItem
LinksCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFeedItem
LinksCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFullItem
LnComb	glib-core/xmath.cpp	/^double TSpecFunc::LnComb(const int& n, const int& k){$/;"	f	class:TSpecFunc
LnGamma	glib-core/xmath.cpp	/^double TSpecFunc::LnGamma\/*gammln*\/(const double& xx){$/;"	f	class:TSpecFunc
LnLen	glib-core/fl.h	/^  int MxLnLen, LnLen;$/;"	m	class:TSOut
LnStr	glib-core/lx.cpp	/^const TStr TLxSymStr::LnStr="<line>";$/;"	m	class:TLxSymStr	file:
Load	glib-core/bits.h	/^  static PBSet Load(TSIn& SIn){return new TBSet(SIn);}$/;"	f
Load	glib-core/blobbs.h	/^  static TBlobPt Load(const PFRnd& FRnd){$/;"	f
Load	glib-core/ds.h	/^  static PVecPool Load(TSIn& SIn) { return new TVecPool(SIn); }$/;"	f	class:TGLib_OLD::TVecPool
Load	glib-core/ds.h	/^  static PVecPool Load(TSIn& SIn) { return new TVecPool(SIn); }$/;"	f	class:TVecPool
Load	glib-core/ds.h	/^  static PVecPool Load(const TStr& FNm) { TFIn FIn(FNm); return Load(FIn); }$/;"	f	class:TGLib_OLD::TVecPool
Load	glib-core/ds.h	/^  static PVecPool Load(const TStr& FNm) { TFIn FIn(FNm); return Load(FIn); }$/;"	f	class:TVecPool
Load	glib-core/ds.h	/^  static TPt<PVec<TVal> > Load(TSIn& SIn){return new PVec<TVal>(SIn);}$/;"	f	class:PVec
Load	glib-core/ds.h	/^  void Load(TSIn& SIn) { for (int i=0; i<Len(); i++) ValV[i].Load(SIn); }$/;"	f	class:TTuple
Load	glib-core/ds.h	/^  void Load(TSIn& SIn) {Val1.Load(SIn); Val2.Load(SIn);}$/;"	f	class:TPair
Load	glib-core/ds.h	/^  void Load(TSIn& SIn){XDim.Load(SIn); YDim.Load(SIn); ValV.Load(SIn);}$/;"	f	class:TVVec
Load	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Load(TSIn& SIn){$/;"	f	class:TVec
Load	glib-core/fl.cpp	/^void TSIn::Load(char*& CStr){$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(bool& Bool){Cs+=GetBf(&Bool, sizeof(Bool));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(char& Ch){Cs+=GetBf(&Ch, sizeof(Ch));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(char*& CStr, const int& MxCStrLen, const int& CStrLen){$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(double& Flt){Cs+=GetBf(&Flt, sizeof(Flt));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(int& Int){Cs+=GetBf(&Int, sizeof(Int));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(int64& Int){Cs+=GetBf(&Int, sizeof(Int));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(ldouble& LFlt){Cs+=GetBf(&LFlt, sizeof(LFlt));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(sdouble& SFlt){Cs+=GetBf(&SFlt, sizeof(SFlt));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(short& Short){Cs+=GetBf(&Short, sizeof(Short));} \/\/J:$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(uchar& UCh){Cs+=GetBf(&UCh, sizeof(UCh));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(uint& UInt){Cs+=GetBf(&UInt, sizeof(UInt));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(uint64& UInt){Cs+=GetBf(&UInt, sizeof(UInt));}$/;"	f	class:TSIn
Load	glib-core/fl.h	/^  void Load(ushort& UShort){Cs+=GetBf(&UShort, sizeof(UShort));} \/\/J:$/;"	f	class:TSIn
Load	glib-core/hash.h	/^  static PBigStrPool Load(TSIn& SIn, bool LoadCompacted = true) { return PBigStrPool(new TBigStrPool(SIn, LoadCompacted)); }$/;"	f
Load	glib-core/hash.h	/^  static TPt<PHash<TKey, TDat> > Load(TSIn& SIn){return new PHash<TKey, TDat>(SIn);}$/;"	f	class:PHash
Load	glib-core/hash.h	/^  void Load(TSIn& SIn){$/;"	f	class:THash
Load	glib-core/hashmp.h	/^  void Load(TSIn& SIn){$/;"	f	class:THashMP
Load	glib-core/html.h	/^  static PHtmlLxChDef Load(TSIn& SIn){return new THtmlLxChDef(SIn);}$/;"	f
Load	glib-core/http.h	/^  static PHttpRq Load(TSIn&){Fail; return NULL;}$/;"	f
Load	glib-core/json.h	/^  static PJsonVal Load(TSIn& SIn){return new TJsonVal(SIn);}$/;"	f
Load	glib-core/linalg.h	/^    void Load(TSIn& SIn) { A.Load(SIn); B.Load(SIn); }$/;"	f	class:TSigmoid
Load	glib-core/linalg.h	/^    void Load(TSIn& SIn) { ColV.Load(SIn); }$/;"	f	class:TFullColMatrix
Load	glib-core/linalg.h	/^    void Load(TSIn& SIn) {$/;"	f	class:TSparseColMatrix
Load	glib-core/linalg.h	/^    void Load(TSIn& SIn) {$/;"	f	class:TSparseRowMatrix
Load	glib-core/lx.h	/^  static PLxChDef Load(TSIn& SIn){return new TLxChDef(SIn);}$/;"	f
Load	glib-core/md5.h	/^  static PMd5 Load(TSIn& SIn){return new TMd5(SIn);}$/;"	f
Load	glib-core/os.h	/^  static TPt<TSysMemStat> Load(TSIn&){Fail; return NULL;}$/;"	f
Load	glib-core/shash.h	/^  void Load(TSIn& SIn) { MxVals.Load(SIn);  Vals.Load(SIn);  GroupV.Load(SIn); }$/;"	f	class:TSparseTable
Load	glib-core/shash.h	/^  void Load(TSIn& SIn) { ShrinkThresh.Load(SIn);  ExpandThresh.Load(SIn);  Table.Load(SIn); }$/;"	f	class:TSparseHash
Load	glib-core/shash.h	/^  void Load(TSIn& SIn) { ShrinkThresh.Load(SIn);  ExpandThresh.Load(SIn);  Table.Load(SIn); }$/;"	f	class:TSparseSet
Load	glib-core/shash.h	/^  void Load(TSIn& SIn) {$/;"	f	class:THashSet
Load	glib-core/shash.h	/^void TPackVec<TVal>::Load(TSIn& SIn) {$/;"	f	class:TPackVec
Load	glib-core/shash.h	/^void TSparseGroup<TVal, GroupSize>::Load(TSIn& SIn) {$/;"	f	class:TSparseGroup
Load	glib-core/ss.h	/^  static PSs Load(TSIn& SIn){return new TSs(SIn);}$/;"	f
Load	glib-core/tm.h	/^  void Load(TSIn& SIn){AbsSecs.Load(SIn);}$/;"	f	class:TSecTm
Load	glib-core/unicode.h	/^	void Load(TSIn& SIn) { cfCommon.Load(SIn); cfSimple.Load(SIn); cfFull.Load(SIn); cfTurkic.Load(SIn); SIn.LoadCs(); }$/;"	f	class:TUniCaseFolding
Load	glib-core/unicode.h	/^	void Load(TSIn& SIn) {$/;"	f	class:TUniChDb
Load	glib-core/unicode.h	/^	void Load(TSIn& SIn) {$/;"	f	class:TUniChInfo
Load	glib-core/unicodestring.h	/^  static void Load(){$/;"	f	class:TUnicodeDef
Load	glib-core/unicodestring.h	/^  static void Load(const TStr& FNm){$/;"	f	class:TUnicodeDef
Load	glib-core/url.h	/^  static PUrl Load(TSIn&){Fail; return NULL;}$/;"	f
Load	glib-core/xfl.h	/^  static PFFileDesc Load(TSIn& SIn){return new TFFileDesc(SIn);}$/;"	f
Load	glib-core/xmath.h	/^  static PMom Load(TSIn& SIn){return new TMom(SIn);}$/;"	f
Load	glib-core/xml.h	/^  static PXmlChDef Load(TSIn& SIn){return new TXmlChDef(SIn);}$/;"	f
Load	snap-adv/agm.h	/^    static PLogRegPredict Load(TSIn& SIn) { return new TLogRegPredict(SIn); };$/;"	f	class:TLogRegPredict
Load	snap-adv/agmattr.h	/^  void Load(TSIn& SIn, const int& RndSeed = 0) {$/;"	f	class:TCesna
Load	snap-adv/agmdirected.cpp	/^void TCoda::Load(TSIn& SIn, const int& RndSeed) {$/;"	f	class:TCoda
Load	snap-adv/agmfast.cpp	/^void TAGMFast::Load(TSIn& SIn, const int& RndSeed) {$/;"	f	class:TAGMFast
Load	snap-adv/agmfit.cpp	/^void TAGMFit::Load(TSIn& SIn, const int& RndSeed) {$/;"	f	class:TAGMFit
Load	snap-core/bignet.h	/^  static PBigNet Load(TSIn& SIn) { return PBigNet(new TBigNet(SIn)); }$/;"	f	class:TBigNet
Load	snap-core/graph.h	/^  static PBPGraph Load(TSIn& SIn) { return PBPGraph(new TBPGraph(SIn)); }$/;"	f	class:TBPGraph
Load	snap-core/graph.h	/^  static PNEGraph Load(TSIn& SIn) { return PNEGraph(new TNEGraph(SIn)); }$/;"	f	class:TNEGraph
Load	snap-core/graph.h	/^  static PNGraph Load(TSIn& SIn) { return PNGraph(new TNGraph(SIn)); }$/;"	f	class:TNGraph
Load	snap-core/graph.h	/^  static PUNGraph Load(TSIn& SIn) { return PUNGraph(new TUNGraph(SIn)); }$/;"	f	class:TUNGraph
Load	snap-core/graphmp.h	/^  static PNGraphMP Load(TSIn& SIn) { return PNGraphMP(new TNGraphMP(SIn)); }$/;"	f	class:TNGraphMP
Load	snap-core/gstat.h	/^  static PGStat Load(TSIn& SIn) { return new TGStat(SIn); }$/;"	f	class:TGStat
Load	snap-core/gstat.h	/^  static PGStatVec Load(TSIn& SIn) { return new TGStatVec(SIn); }$/;"	f	class:TGStatVec
Load	snap-core/mmnet.h	/^  static PMMNet Load(TSIn& SIn) { return PMMNet(new TMMNet(SIn)); }$/;"	f	class:TMMNet
Load	snap-core/network.h	/^  static PDirNet Load(TSIn& SIn) { return PDirNet(new TDirNet(SIn)); }$/;"	f	class:TDirNet
Load	snap-core/network.h	/^  static PNEANet Load(TSIn& SIn) { return PNEANet(new TNEANet(SIn)); }$/;"	f	class:TNEANet
Load	snap-core/network.h	/^  static PNet Load(TSIn& SIn) { return PNet(new TNet(SIn)); }$/;"	f	class:TNodeEDatNet
Load	snap-core/network.h	/^  static PNet Load(TSIn& SIn) { return PNet(new TNet(SIn)); }$/;"	f	class:TNodeEdgeNet
Load	snap-core/network.h	/^  static PNet Load(TSIn& SIn) { return PNet(new TNodeNet(SIn)); }$/;"	f	class:TNodeNet
Load	snap-core/network.h	/^  static PUndirNet Load(TSIn& SIn) { return PUndirNet(new TUndirNet(SIn)); }$/;"	f	class:TUndirNet
Load	snap-core/networkmp.h	/^  static PNEANetMP Load(TSIn& SIn) { return PNEANetMP(new TNEANetMP(SIn)); }$/;"	f	class:TNEANetMP
Load	snap-core/table.h	/^  static PTable Load(TSIn& SIn, TTableContext* Context){ return new TTable(SIn, Context);}$/;"	f	class:TTable
Load	snap-core/table.h	/^  void Load(TSIn& SIn) { StringVals.Load(SIn); }$/;"	f	class:TTableContext
Load	snap-core/timenet.h	/^  static PTimeNENet Load(TSIn& SIn) { return new TTimeNENet(SIn); }$/;"	f	class:TTimeNENet
Load	snap-core/timenet.h	/^  static PTimeNet Load(TSIn& SIn) { return new TTimeNet(SIn); }$/;"	f	class:TTimeNet
Load	snap-exp/graphmp-exp.h	/^  static PUNGraphMP Load(TSIn& SIn) { return PUNGraphMP(new TUNGraphMP(SIn)); }$/;"	f	class:TUNGraphMP
Load	snap-exp/imdbnet.h	/^  static PImdbNet Load(TSIn& SIn, const bool& LoadStrH=true) {$/;"	f	class:TImdbNet
Load	snap-exp/memenet.h	/^  static PBlogPostNet Load(TSIn& SIn) { return new TBlogPostNet(SIn); }$/;"	f	class:TBlogPostNet
Load	snap-exp/memenet.h	/^  static PMemeNet Load(TSIn& SIn) { return new TMemeNet(SIn); }$/;"	f	class:TMemeNet
Load	snap-exp/memenet.h	/^  static PMemeNetBs Load(TSIn& SIn) { return new TMemeNetBs(SIn); }$/;"	f	class:TMemeNetBs
Load	snap-exp/memes.cpp	/^PQuoteBs TQuoteBs::Load(TSIn& SIn) {$/;"	f	class:TQuoteBs
Load	snap-exp/memes.cpp	/^void TQuoteLoader::Load(TSIn& SIn) {$/;"	f	class:TQuoteLoader
Load	snap-exp/memes.h	/^    void Load(TSIn& SIn) { SIn.LoadBf(this, sizeof(TQtIdTy)); }$/;"	f	class:TQuote::TQtIdTy
Load	snap-exp/memes.h	/^    void Load(TSIn& SIn) { SIn.LoadBf(this, sizeof(TTmUrlCnt)); }$/;"	f	class:TQuote::TTmUrlCnt
Load	snap-exp/memes.h	/^  static PClustNet Load(TSIn& SIn) { return new TClustNet(SIn); }$/;"	f	class:TClustNet
Load	snap-exp/memes.h	/^  void Load(TSIn& SIn) { QtCIdTy.Load(SIn); QtStr.Load(SIn); TmUrlCntV.Load(SIn); }$/;"	f	class:TQuote
Load	snap-exp/multimodal-dev/benchmark-util.cpp	/^PTable Load(const Schema& TblSchema, const int nCols, const TStr& TsvFileName, TTableContext& TableContext, const TFlt DefaultWeight = 0.0) {$/;"	f
Load	snap-exp/signnet.h	/^  static PSignNet Load(TSIn& SIn) { return new TSignNet(SIn); }$/;"	f	class:TSignNet
Load	snap-exp/spinn3r.cpp	/^void TSpinn3rFullItem::Load(TSIn& SIn) {$/;"	f	class:TSpinn3rFullItem
Load	snap-exp/wgtnet.h	/^  static PWgtNet Load(TSIn& SIn) { return new TWgtNet(SIn); }$/;"	f	class:TWgtNet
Load	snap-exp/wikinet.h	/^  static PWikiTalkNet Load(TSIn& SIn) { return new TWikiTalkNet(SIn); }$/;"	f	class:TWikiTalkNet
Load	snap-exp/wikinet.h	/^  static PWikiTimeTalkNet Load(TSIn& SIn) { return new TWikiTimeTalkNet(SIn); }$/;"	f	class:TWikiTimeTalkNet
LoadAddr	glib-core/blobbs.h	/^  static TBlobPt LoadAddr(const PFRnd& FRnd, const uchar& Seg=0){$/;"	f
LoadAmazon	snap-core/timenet.cpp	/^PTimeNet TTimeNet::LoadAmazon(const TStr& StlFNm) {$/;"	f	class:TTimeNet
LoadArxiv	snap-core/timenet.cpp	/^PTimeNet TTimeNet::LoadArxiv(const TStr& PaperFNm, const TStr& CiteFNm) {$/;"	f	class:TTimeNet
LoadArxivCoAuth	snap-exp/wgtnet.cpp	/^PWgtNet TWgtNet::LoadArxivCoAuth(const TStr& FNm) {$/;"	f	class:TWgtNet
LoadBf	glib-core/fl.h	/^  void LoadBf(const void* Bf, const TSize& BfL){Cs+=GetBf(Bf, BfL);}$/;"	f	class:TSIn
LoadBin	glib-core/unicode.h	/^	void LoadBin(const TStr& fnBin) {$/;"	f	class:TUniChDb
LoadBipartite	snap-core/timenet.cpp	/^PTimeNet TTimeNet::LoadBipartite(const TStr& InFNm) {$/;"	f	class:TTimeNet
LoadCascadesTxt	snap-adv/cascdynetinf.cpp	/^void TNIBs::LoadCascadesTxt(TSIn& SIn) {$/;"	f	class:TNIBs
LoadCascadesTxt	snap-adv/cascnetinf.cpp	/^void TNetInfBs::LoadCascadesTxt(TSIn& SIn, const int& Model, const double& alpha) {$/;"	f	class:TNetInfBs
LoadCiteSeerCoAuth	snap-exp/wgtnet.cpp	/^PWgtNet TWgtNet::LoadCiteSeerCoAuth(const TStr& FNm) {$/;"	f	class:TWgtNet
LoadCmtyVV	snap-adv/agm.cpp	/^void TAGMUtil::LoadCmtyVV(const TStr& InFNm, TVec<TIntV>& CmtyVV) {$/;"	f	class:TAGMUtil
LoadCmtyVV	snap-adv/agm.cpp	/^void TAGMUtil::LoadCmtyVV(const TStr& InFNm, TVec<TIntV>& CmtyVV, TStrHash<TInt>& StrToNIdH, const int BeginCol, const int MinSz, const TSsFmt Sep) {$/;"	f	class:TAGMUtil
LoadConnList	snap-core/gio.h	/^PGraph LoadConnList(const TStr& InFNm) {$/;"	f	namespace:TSnap
LoadConnListStr	snap-core/gio.h	/^PGraph LoadConnListStr(const TStr& InFNm, TStrHash<TInt>& StrToNIdH) {$/;"	f	namespace:TSnap
LoadCrossNet	snap-core/conv.cpp	/^int LoadCrossNet(TCrossNet& Graph, PTable Table, const TStr& SrcCol, const TStr& DstCol,$/;"	f	namespace:TSnap
LoadCrossNetToNet	snap-core/conv.cpp	/^int LoadCrossNetToNet(PMMNet Graph, const TStr& Mode1, const TStr& Mode2, const TStr& CrossName,$/;"	f	namespace:TSnap
LoadCs	glib-core/fl.cpp	/^void TSIn::LoadCs(){$/;"	f	class:TSIn
LoadDatV	glib-core/shash.h	/^  static void LoadDatV(TSIn& SIn, TVec<TDat>& DatV, int LoadN=-1) {$/;"	f	class:TKeyDatFl
LoadDblpCoAuth	snap-exp/wgtnet.cpp	/^PWgtNet TWgtNet::LoadDblpCoAuth(const TStr& FNm) {$/;"	f	class:TWgtNet
LoadDyNet	snap-core/gio.cpp	/^PNGraph LoadDyNet(const TStr& FNm) {$/;"	f	namespace:TSnap
LoadDyNetGraphV	snap-core/gio.cpp	/^TVec<PNGraph> LoadDyNetGraphV(const TStr& FNm) {$/;"	f	namespace:TSnap
LoadEdgeList	snap-core/gio.h	/^PGraph LoadEdgeList(const TStr& InFNm, const int& SrcColId, const int& DstColId) {$/;"	f	namespace:TSnap
LoadEdgeList	snap-core/gio.h	/^PGraph LoadEdgeList(const TStr& InFNm, const int& SrcColId, const int& DstColId, const char& Separator) {$/;"	f	namespace:TSnap
LoadEdgeListNet	snap-core/gio.cpp	/^PNEANet LoadEdgeListNet(const TStr& InFNm, const char& Separator) {$/;"	f	namespace:TSnap
LoadEdgeListStr	snap-adv/agm.h	/^  static PGraph LoadEdgeListStr(const TStr& InFNm, TIntStrH& NIDNameH, const int& SrcColId = 0, const int& DstColId = 1, const TSsFmt SsFmt = ssfTabSep) {$/;"	f	class:TAGMUtil
LoadEdgeListStr	snap-adv/agm.h	/^  static PGraph LoadEdgeListStr(const TStr& InFNm, TStrHash<TInt>& NodeNameH, const int& SrcColId = 0, const int& DstColId = 1, const TSsFmt SsFmt = ssfTabSep) {$/;"	f	class:TAGMUtil
LoadEdgeListStr	snap-core/gio.h	/^PGraph LoadEdgeListStr(const TStr& InFNm, const int& SrcColId, const int& DstColId) {$/;"	f	namespace:TSnap
LoadEdgeListStr	snap-core/gio.h	/^PGraph LoadEdgeListStr(const TStr& InFNm, const int& SrcColId, const int& DstColId, TStrHash<TInt>& StrToNIdH) {$/;"	f	namespace:TSnap
LoadEdgeTm	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::LoadEdgeTm(const TStr& EdgeFNm, const int& SrcFld, const int& DstFld, const int& TimeFld, const TSsFmt& Separator) {$/;"	f	class:TTimeNENet
LoadElecSumTxt	snap-exp/wikinet.cpp	/^void TWikiElecBs::LoadElecSumTxt(const TStr& FNm, THash<TStr, TWikiElecBs::TElecSum>& ElecSumH) {$/;"	f	class:TWikiElecBs
LoadEpinions	snap-exp/signnet.cpp	/^PSignNet TSignNet::LoadEpinions(const TStr& FNm) {$/;"	f	class:TSignNet
LoadEveCommNet	snap-exp/wgtnet.cpp	/^PWgtNet TWgtNet::LoadEveCommNet(const TStr& FNm) {$/;"	f	class:TWgtNet
LoadFlickr	snap-core/timenet.cpp	/^PTimeNENet TTimeNENet::LoadFlickr(const TStr& NodeFNm, const TStr& EdgeFNm) {$/;"	f	class:TTimeNENet
LoadFlickrTables	snap-exp/multimodal-dev/benchmark-util.cpp	/^void LoadFlickrTables(const TStr& PrefixPath, TTableContext& Context,$/;"	f
LoadFromImdb	snap-exp/imdbnet.cpp	/^PImdbNet TImdbNet::LoadFromImdb(const TStr& DataDir) {$/;"	f	class:TImdbNet
LoadFrugalInt	glib-core/dt.cpp	/^char* TInt::LoadFrugalInt(char *pSrc, int& i){$/;"	f	class:TInt
LoadFrugalIntV	glib-core/dt.cpp	/^void TInt::LoadFrugalIntV(TSIn& SIn, TIntV& v, bool clearVec){$/;"	f	class:TInt
LoadGraph	snap-exp/multimodal-dev/benchmark-util.cpp	/^PGraph LoadGraph(const TVec<PTable>& NodeTblV, const TVec<TQuad<PTable,TStr,TStr,TBool> >& EdgeTblV, TStrIntH& NStrH, TIntStrH& NIdH) {$/;"	f
LoadGraphMNet	snap-exp/multimodal-dev/benchmark-util.cpp	/^PGraph LoadGraphMNet(const TVec<TPair<PTable,TStr> >& NodeTblV, const TVec<TQuad<PTable,TStr,TStr,TBool> >& EdgeTblV, THash<TStr,TStrH>& NStrH, TIntStrH& NIdH) {$/;"	f
LoadGraphMNetRandom	snap-exp/multimodal-dev/benchmark-util.cpp	/^PGraph LoadGraphMNetRandom(const TVec<TPair<PTable,TStr> >& NodeTblV, const TVec<TQuad<PTable,TStr,TStr,TBool> >& EdgeTblV,$/;"	f
LoadGroundTruthNodesTxt	snap-adv/cascdynetinf.cpp	/^void TNIBs::LoadGroundTruthNodesTxt(TSIn& SIn) {$/;"	f	class:TNIBs
LoadGroundTruthTxt	snap-adv/cascdynetinf.cpp	/^void TNIBs::LoadGroundTruthTxt(TSIn& SIn) {$/;"	f	class:TNIBs
LoadGroundTruthTxt	snap-adv/cascnetinf.cpp	/^void TNetInfBs::LoadGroundTruthTxt(TSIn& SIn) {$/;"	f	class:TNetInfBs
LoadHash	glib-core/shash.h	/^  static void LoadHash(TSIn& SIn, THash<TKey, TDat, THashFunc>& Hash, int LoadN=-1) {$/;"	f	class:TKeyDatFl
LoadHash	glib-core/shash.h	/^  static void LoadHash(const TStr& InFNm, THash<TKey, TDat, THashFunc>& Hash, const int& LoadN=-1) {$/;"	f	class:TKeyDatFl
LoadInferredNodesTxt	snap-adv/cascdynetinf.cpp	/^void TNIBs::LoadInferredNodesTxt(TSIn& SIn) {$/;"	f	class:TNIBs
LoadInferredTxt	snap-adv/cascdynetinf.cpp	/^void TNIBs::LoadInferredTxt(TSIn& SIn) {$/;"	f	class:TNIBs
LoadItem	snap-exp/memes.cpp	/^bool TQuoteLoader::LoadItem(TXmlLx& XmlLx) {$/;"	f	class:TQuoteLoader
LoadItem	snap-exp/spinn3r.cpp	/^bool TSpinn3rFeedItem::LoadItem(TXmlLx& XmlLx) {$/;"	f	class:TSpinn3rFeedItem
LoadItem	snap-exp/spinn3r.cpp	/^bool TSpinn3rFullItem::LoadItem(TXmlLx& XmlLx) {$/;"	f	class:TSpinn3rFullItem
LoadKeyV	glib-core/shash.h	/^  static void LoadKeyV(TSIn& SIn, TVec<TKey>& KeyV, int LoadN=-1) {$/;"	f	class:TKeyDatFl
LoadMain	glib-core/blobbs.cpp	/^void TMBlobBs::LoadMain(int& Segs){$/;"	f	class:TMBlobBs
LoadMatlabTFltVV	glib-core/linalg.cpp	/^void TLAMisc::LoadMatlabTFltVV(const TStr& FNm, TFltVV& MatrixVV) {$/;"	f	class:TLAMisc
LoadMatlabTFltVV	glib-core/linalg.cpp	/^void TLAMisc::LoadMatlabTFltVV(const TStr& FNm, TVec<TFltV>& ColV) {$/;"	f	class:TLAMisc
LoadMem	glib-core/dt.h	/^  static void LoadMem(const PSIn& SIn, TMem& Mem){$/;"	f
LoadMem	glib-core/dt.h	/^  static void LoadMem(const PSIn& SIn, const PMem& Mem){$/;"	f
LoadMixedTypeNodeList	snap-exp/multimodal-dev/benchmark-util.cpp	/^void LoadMixedTypeNodeList(const TStr& PrefixPath, const TStr& RandNodeFileName, THash<TStr,TStrV>& NodeH) {$/;"	f
LoadMode	snap-core/conv.cpp	/^int LoadMode(TModeNet& Graph, PTable Table, const TStr& NCol,$/;"	f	namespace:TSnap
LoadModeNetToNet	snap-core/conv.cpp	/^int LoadModeNetToNet(PMMNet Graph, const TStr& Name, PTable Table, const TStr& NCol,$/;"	f	namespace:TSnap
LoadNIDAttrHFromNIDKH	snap-adv/agmattr.h	/^  static void LoadNIDAttrHFromNIDKH(const TIntV& NIDV, const TStr& InFNm, THash<TInt, TIntV>& NIDAttrH) {$/;"	f	class:TCesnaUtil
LoadNIDAttrHFromNIDKH	snap-adv/agmattr.h	/^  static void LoadNIDAttrHFromNIDKH(const TIntV& NIDV, const TStr& InFNm, THash<TInt, TIntV>& NIDAttrH, const TStrHash<TInt>& NodeNameH, const TSsFmt Sep = ssfTabSep) {$/;"	f	class:TCesnaUtil
LoadNewBf	glib-core/fl.h	/^  void* LoadNewBf(const int& BfL){$/;"	f	class:TSIn
LoadNext	snap-exp/memes.cpp	/^bool TMemesDataLoader::LoadNext() {$/;"	f	class:TMemesDataLoader
LoadNextBin	snap-exp/wikinet.cpp	/^bool TWikiMetaHist::LoadNextBin() {$/;"	f	class:TWikiMetaHist
LoadNextTxt	snap-exp/wikinet.cpp	/^bool TWikiMetaHist::LoadNextTxt() {$/;"	f	class:TWikiMetaHist
LoadNodeDatH	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::LoadNodeDatH(const TStr& InFNm, TNodeH& NodeH) {$/;"	f	class:TBigNet
LoadNodeList	snap-core/centr.cpp	/^TIntH LoadNodeList(TStr InFNmNodes){$/;"	f	namespace:TSnap
LoadNodeList	snap-exp/multimodal-dev/benchmark-util.cpp	/^void LoadNodeList(const TStr& PrefixPath, const TStr& NodeFileName, TVec<TPair<TStr,TStr> >& RandNV) {$/;"	f
LoadOldNet	snap-exp/wikinet.cpp	/^PWikiTalkNet TWikiTalkNet::LoadOldNet(const TStr& InFNm) {$/;"	f	class:TWikiTalkNet
LoadPajek	snap-core/gio.h	/^PGraph LoadPajek(const TStr& InFNm) {$/;"	f	namespace:TSnap
LoadPatents	snap-core/timenet.cpp	/^PTimeNet TTimeNet::LoadPatents(const TStr& PatentFNm, const TStr& CiteFNm) {$/;"	f	class:TTimeNet
LoadQtV	snap-exp/memes.cpp	/^void TQuote::LoadQtV(const TStr& InFNm, TVec<TQuote>& QtV) {$/;"	f	class:TQuote
LoadSChar	glib-core/unicode.h	/^	static inline void LoadSChar(TSIn& SIn, signed char& u) { SIn.LoadBf(&u, sizeof(u)); }$/;"	f	class:TUniChInfo
LoadSS	snap-core/table.cpp	/^PTable TTable::LoadSS(const Schema& S, const TStr& InFNm, TTableContext* Context,$/;"	f	class:TTable
LoadSS	snap-exp/alternativetable.cpp	/^PExplicitStringTable ExplicitStringTable::LoadSS(const Schema& S, const TStr& InFNm, const char& Separator, TBool HasTitleLine) {$/;"	f	class:ExplicitStringTable
LoadSS	snap-exp/alternativetable.cpp	/^PPhysicalOrderTable PhysicalOrderTable::LoadSS(const Schema& S, const TStr& InFNm, PhysicalOrderTableContext& Context, $/;"	f	class:PhysicalOrderTable
LoadSS	snap-exp/alternativetable.cpp	/^PRowBasedTable RowBasedTable::LoadSS(const Schema& S, const TStr& InFNm, const char& Separator, TBool HasTitleLine) {$/;"	f	class:RowBasedTable
LoadSSPar	snap-core/table.cpp	/^void TTable::LoadSSPar(PTable& T, const Schema& S, const TStr& InFNm, const TIntV& RelevantCols, $/;"	f	class:TTable
LoadSSSeq	snap-core/table.cpp	/^void TTable::LoadSSSeq($/;"	f	class:TTable
LoadSlashdot	snap-exp/signnet.cpp	/^PSignNet TSignNet::LoadSlashdot(const TStr& InFNm) {$/;"	f	class:TSignNet
LoadSlashdot	snap-exp/wikinet.cpp	/^PWikiTalkNet TWikiTalkNet::LoadSlashdot(const TStr& InFNm) {$/;"	f	class:TWikiTalkNet
LoadStr	glib-core/xml.cpp	/^PXmlDoc TXmlDoc::LoadStr(const TStr& Str){$/;"	f	class:TXmlDoc
LoadTables	snap-core/util.h	/^  typedef enum {LoadTables, Preprocess, ConstructGraph, Compute, Postprocess, StoreOutputs,$/;"	e	enum:TStopwatch::__anon80
LoadTalkNet	snap-exp/wikinet.cpp	/^PWikiTalkNet TWikiTalkNet::LoadTalkNet(const TStr& ParsedWikiDir, const TWikiElecBs& ElecBs) {$/;"	f	class:TWikiTalkNet
LoadTs	glib-core/gnuplot.cpp	/^void TGnuPlot::LoadTs(const TStr& FNm, TStrV& ColNmV, TVec<TFltKdV>& ColV) {$/;"	f	class:TGnuPlot
LoadTxt	glib-core/dt.cpp	/^TRnd TRnd::LoadTxt(TILx& Lx){$/;"	f	class:TRnd
LoadTxt	glib-core/dt.cpp	/^void TChA::LoadTxt(const PSIn& SIn, TChA& ChA){$/;"	f	class:TChA
LoadTxt	glib-core/ss.cpp	/^PSs TSs::LoadTxt($/;"	f	class:TSs
LoadTxt	glib-core/tm.cpp	/^TSecTm TSecTm::LoadTxt(TILx& Lx){$/;"	f	class:TSecTm
LoadTxt	glib-core/unicode.cpp	/^void TUniCaseFolding::LoadTxt(const TStr& fileName)$/;"	f	class:TUniCaseFolding
LoadTxt	glib-core/unicode.cpp	/^void TUniChDb::LoadTxt(const TStr& basePath)$/;"	f	class:TUniChDb
LoadTxt	glib-core/wch.cpp	/^void TWChA::LoadTxt(const PSIn& SIn, TWChA& WChA){$/;"	f	class:TWChA
LoadTxt	glib-core/wch.h	/^  static TWCh LoadTxt(const PSIn& SIn){$/;"	f	class:TWCh
LoadTxt	glib-core/xml.cpp	/^PXmlDoc TXmlDoc::LoadTxt(TXmlLx& Lx){$/;"	f	class:TXmlDoc
LoadTxt	glib-core/xml.cpp	/^PXmlDoc TXmlDoc::LoadTxt(const PSIn& SIn, const TXmlSpacing& Spacing){$/;"	f	class:TXmlDoc
LoadTxt	glib-core/xml.cpp	/^PXmlDoc TXmlDoc::LoadTxt(const TStr& FNm, const TXmlSpacing& Spacing){$/;"	f	class:TXmlDoc
LoadTxt	glib-core/xml.cpp	/^void TXmlDoc::LoadTxt($/;"	f	class:TXmlDoc
LoadTxt	snap-adv/kronecker.cpp	/^TKronMtx TKronMtx::LoadTxt(const TStr& MtxFNm) {$/;"	f	class:TKronMtx
LoadTxt	snap-adv/mag.cpp	/^void TMAGNodeBern::LoadTxt(const TStr& InFNm) {$/;"	f	class:TMAGNodeBern
LoadTxt	snap-adv/mag.cpp	/^void TMAGNodeBeta::LoadTxt(const TStr& InFNm) {$/;"	f	class:TMAGNodeBeta
LoadTxt	snap-adv/mag.cpp	/^void TMAGNodeSimple::LoadTxt(const TStr& InFNm) {$/;"	f	class:TMAGNodeSimple
LoadTxt	snap-adv/mag.h	/^void TMAGParam<TNodeAttr>::LoadTxt(const TStr& InFNm) {$/;"	f	class:TMAGParam
LoadTxt	snap-exp/imdbnet.cpp	/^PImdbNet TImdbNet::LoadTxt(const TStr& ActorFNm) {$/;"	f	class:TImdbNet
LoadTxt	snap-exp/linkpred.cpp	/^void TLpExample::LoadTxt(const TStr& FNm, TVec<TLpExample>& ExV) {$/;"	f	class:TLpExample
LoadTxt	snap-exp/sir.cpp	/^void TEpidemModel::LoadTxt(const TStr& InFNm, const int& ColId, TFltV& ValV) {$/;"	f	class:TEpidemModel
LoadTxtAll	snap-exp/wikinet.cpp	/^void TWikiEditCnt::LoadTxtAll(const TWikiElecBs& ElecBs) {$/;"	f	class:TWikiEditCnt
LoadTxtBeforeElec	snap-exp/wikinet.cpp	/^void TWikiEditCnt::LoadTxtBeforeElec(const TWikiElecBs& ElecBs) {$/;"	f	class:TWikiEditCnt
LoadTxtElement	glib-core/xml.cpp	/^PXmlTok TXmlDoc::LoadTxtElement(TXmlLx& Lx){$/;"	f	class:TXmlDoc
LoadTxtFldV	glib-core/ss.cpp	/^void TSs::LoadTxtFldV($/;"	f	class:TSs
LoadTxtMiscStar	glib-core/xml.cpp	/^void TXmlDoc::LoadTxtMiscStar(TXmlLx& Lx){$/;"	f	class:TXmlDoc
LoadTxt_ProcessDecomposition	glib-core/unicode.cpp	/^void TUniChDb::LoadTxt_ProcessDecomposition(TUniChInfo& ci, TStr s)$/;"	f	class:TUniChDb
LoadUShort	glib-core/unicode.h	/^	static inline void LoadUShort(TSIn& SIn, ushort& u) { SIn.LoadBf(&u, sizeof(u)); }$/;"	f	class:TUniChInfo
LoadWikiTimeTalkNet	snap-exp/wikinet.cpp	/^PWikiTimeTalkNet TWikiTimeTalkNet::LoadWikiTimeTalkNet() {$/;"	f	class:TWikiTimeTalkNet
LoadXml	glib-core/dt.cpp	/^void TBool::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TBool
LoadXml	glib-core/dt.cpp	/^void TCh::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TCh
LoadXml	glib-core/dt.cpp	/^void TFlt::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TFlt
LoadXml	glib-core/dt.cpp	/^void TFltRect::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TFltRect
LoadXml	glib-core/dt.cpp	/^void TInt::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TInt
LoadXml	glib-core/dt.cpp	/^void TLFlt::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TLFlt
LoadXml	glib-core/dt.cpp	/^void TRnd::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TRnd
LoadXml	glib-core/dt.cpp	/^void TSFlt::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TSFlt
LoadXml	glib-core/dt.cpp	/^void TStr::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TStr
LoadXml	glib-core/dt.cpp	/^void TUCh::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TUCh
LoadXml	glib-core/dt.cpp	/^void TUInt64::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TUInt64
LoadXml	glib-core/dt.cpp	/^void TUInt::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TUInt
LoadXml	glib-core/dt.cpp	/^void TVoid::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TVoid
LoadXml	glib-core/shash.h	/^  void LoadXml(const PXmlTok& XmlTok, const TStr& Nm="") {$/;"	f	class:THashSet
LoadXml	glib-core/shash.h	/^  void LoadXml(const PXmlTok& XmlTok, const TStr& Nm="") {$/;"	f	class:THashSetKey
LoadXml	glib-core/xmlser.h	/^void THash< TKey, TDat, THashFunc>::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:THash
LoadXml	glib-core/xmlser.h	/^void THashKeyDat< TKey, TDat>::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:THashKeyDat
LoadXml	glib-core/xmlser.h	/^void TKeyDat< TKey, TDat>::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TKeyDat
LoadXml	glib-core/xmlser.h	/^void TPair<TVal1, TVal2>::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TPair
LoadXml	glib-core/xmlser.h	/^void TPt<TRec>::LoadXml(const TPt<TXmlTok>& XmlTok, const TStr& Nm){$/;"	f	class:TPt
LoadXml	glib-core/xmlser.h	/^void TQuad< TVal1, TVal2, TVal3, TVal4>::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TQuad
LoadXml	glib-core/xmlser.h	/^void TTriple<TVal1, TVal2, TVal3>::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TTriple
LoadXml	glib-core/xmlser.h	/^void TVec<TVal, TSizeTy>::LoadXml(const PXmlTok& XmlTok, const TStr& Nm){$/;"	f	class:TVec
Load_V1	snap-core/network.h	/^  static PDirNet Load_V1(TSIn& SIn) { PDirNet Graph = PDirNet(new TDirNet());$/;"	f	class:TDirNet
Load_V1	snap-core/network.h	/^  static PNEANet Load_V1(TSIn& SIn) {$/;"	f	class:TNEANet
Load_V1	snap-core/network.h	/^  static PUndirNet Load_V1(TSIn& SIn) { PUndirNet Graph = PUndirNet(new TUndirNet());$/;"	f	class:TUndirNet
LocFldNm	glib-core/http.cpp	/^const TStr THttp::LocFldNm="Location";$/;"	m	class:THttp	file:
LocFldNm	glib-core/http.h	/^  static const TStr LocFldNm;$/;"	m	class:THttp
Log	glib-core/xmath.h	/^  static double Log(const double& Val){return log(Val);}$/;"	f	class:TMath
Log2	glib-core/xmath.h	/^  static double Log2(const double& Val){return log(Val)\/LogOf2;}$/;"	f	class:TMath
LogFit	glib-core/xmath.cpp	/^void TSpecFunc::LogFit(const TVec<TFltPr>& XY, double& A, double& B,$/;"	f	class:TSpecFunc
LogLike	snap-adv/kronecker.h	/^    TFlt LogLike;$/;"	m	class:TKronMaxLL::TFEval
LogLike	snap-adv/kronecker.h	/^  TFlt LogLike; \/\/ LL at ProbMtx$/;"	m	class:TKroneckerLL
LogLikelihood	snap-adv/circles.h	/^TFlt TCluster::LogLikelihood(void) {$/;"	f	class:TCluster
LogOf2	glib-core/xmath.cpp	/^double TMath::LogOf2=log(double(2));$/;"	m	class:TMath	file:
LogOf2	glib-core/xmath.h	/^  static double LogOf2;$/;"	m	class:TMath
LogSumExp	snap-adv/mag.cpp	/^const double LogSumExp(const TFltV& LogValV) {$/;"	f
LogSumExp	snap-adv/mag.cpp	/^const double LogSumExp(const double *LogValArray, const int Len) {$/;"	f
LogSumExp	snap-adv/mag.cpp	/^const double LogSumExp(const double LogVal1, const double LogVal2) {$/;"	f
LongestCmnSubSq	snap-exp/memes.cpp	/^int TQuoteBs::LongestCmnSubSq(const TIntV& WIdV1, const TIntV& WIdV2, int& WIdV1Start, int& WIdV2Start, int& SkipId) {$/;"	f	class:TQuoteBs
Loss	snap-adv/circles.h	/^TFlt Loss(TIntSet& l, TIntSet lHat, int N, int Which)$/;"	f
LpData	snap-exp/linkpred.h	/^  TLpExample LpData;$/;"	m	class:__OLD__::TLpBase
LpPred	snap-exp/linkpred.h	/^  TLpPredictor LpPred;$/;"	m	class:__OLD__::TLpBase
Ls	glib-core/bd.h	/^    struct {uint Ls; uint Ms;} UInt32;$/;"	m	struct:TConv_Pt64Ints32::__anon41::__anon42
LsVal	glib-core/wch.h	/^  uchar LsVal;$/;"	m	class:TWCh
LssStr	glib-core/lx.cpp	/^const TStr TLxSymStr::LssStr="<";$/;"	m	class:TLxSymStr	file:
Lvar	snap-core/table.h	/^    TStr Lvar; \/\/\/< Left variable of the comparison op$/;"	m	class:TAtomicPredicate
M	snap-adv/agm.h	/^  int M; \/\/ number of features$/;"	m	class:TLogRegFit
M1	snap-adv/motifcluster.h	/^  M1,         \/\/ u  --> v, v  --> w, w  --> u$/;"	e	enum:MotifType
M10	snap-adv/motifcluster.h	/^  M10,        \/\/ v  --> u, w  --> u$/;"	e	enum:MotifType
M11	snap-adv/motifcluster.h	/^  M11,        \/\/ u <--> v, u  --> w$/;"	e	enum:MotifType
M12	snap-adv/motifcluster.h	/^  M12,        \/\/ u <--> v, w  --> u$/;"	e	enum:MotifType
M13	snap-adv/motifcluster.h	/^  M13,        \/\/ u <--> v, u <--> w$/;"	e	enum:MotifType
M2	snap-adv/motifcluster.h	/^  M2,         \/\/ u <--> v, v  --> w, w  --> u$/;"	e	enum:MotifType
M3	snap-adv/motifcluster.h	/^  M3,         \/\/ u <--> v, v <--> w, w  --> u$/;"	e	enum:MotifType
M4	snap-adv/motifcluster.h	/^  M4,         \/\/ u <--> v, v <--> w, w <--> u$/;"	e	enum:MotifType
M5	snap-adv/motifcluster.h	/^  M5,         \/\/ u  --> v, v  --> w, u  --> w$/;"	e	enum:MotifType
M6	snap-adv/motifcluster.h	/^  M6,         \/\/ u <--> v, w  --> u, w  --> v$/;"	e	enum:MotifType
M7	snap-adv/motifcluster.h	/^  M7,         \/\/ u <--> v, u  --> w, v  --> w$/;"	e	enum:MotifType
M8	snap-adv/motifcluster.h	/^  M8,         \/\/ u  --> v, u  --> w$/;"	e	enum:MotifType
M9	snap-adv/motifcluster.h	/^  M9,         \/\/ u  --> v, w  --> u$/;"	e	enum:MotifType
MAE	snap-adv/cascdynetinf.h	/^  TFltPrV Accuracy, MAE, MSE;$/;"	m	class:TNIBs
MAIN	test/Makefile	/^MAIN = run-all-tests$/;"	m
MAX	glib-core/bd.h	350;"	d
MCMC	snap-adv/circles.h	/^TIntSet TCluster::MCMC(TInt k, TInt MCMCReps) {$/;"	f	class:TCluster
MGRAPH_H	snap-exp/mmgraph-exp.h	2;"	d
MIN	glib-core/bd.h	346;"	d
MLEGradAscent	snap-adv/agmattr.cpp	/^int TCesna::MLEGradAscent(const double& Thres, const int& MaxIter, const TStr PlotNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCesna
MLEGradAscent	snap-adv/agmdirected.cpp	/^int TCoda::MLEGradAscent(const double& Thres, const int& MaxIter, const TStr PlotNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCoda
MLEGradAscent	snap-adv/agmfast.cpp	/^int TAGMFast::MLEGradAscent(const double& Thres, const int& MaxIter, const TStr& PlotNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TAGMFast
MLEGradAscentGivenCAG	snap-adv/agmfit.cpp	/^int TAGMFit::MLEGradAscentGivenCAG(const double& Thres, const int& MaxIter, const TStr PlotNm) {$/;"	f	class:TAGMFit
MLEGradAscentParallel	snap-adv/agmattr.cpp	/^int TCesna::MLEGradAscentParallel(const double& Thres, const int& MaxIter, const int ChunkNum, const int ChunkSize, const TStr PlotNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCesna
MLEGradAscentParallel	snap-adv/agmattr.h	/^  int MLEGradAscentParallel(const double& Thres, const int& MaxIter, const int ChunkNum, const TStr PlotNm = TStr(), const double StepAlpha = 0.3, const double StepBeta = 0.1) {$/;"	f	class:TCesna
MLEGradAscentParallel	snap-adv/agmdirected.cpp	/^int TCoda::MLEGradAscentParallel(const double& Thres, const int& MaxIter, const int ChunkNum, const int ChunkSize, const TStr PlotNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TCoda
MLEGradAscentParallel	snap-adv/agmdirected.h	/^  int MLEGradAscentParallel(const double& Thres, const int& MaxIter, const int ChunkNum, const TStr PlotNm = TStr(), const double StepAlpha = 0.3, const double StepBeta = 0.1) {$/;"	f	class:TCoda
MLEGradAscentParallel	snap-adv/agmfast.cpp	/^int TAGMFast::MLEGradAscentParallel(const double& Thres, const int& MaxIter, const int ChunkNum, const int ChunkSize, const TStr& PlotNm, const double StepAlpha, const double StepBeta) {$/;"	f	class:TAGMFast
MLEGradAscentParallel	snap-adv/agmfast.h	/^  int MLEGradAscentParallel(const double& Thres, const int& MaxIter, const int ChunkNum, const TStr& PlotNm = TStr(), const double StepAlpha = 0.3, const double StepBeta = 0.1) {$/;"	f	class:TAGMFast
MLEGradient	snap-adv/agm.cpp	/^int TLogRegFit::MLEGradient(const double& ChangeEps, const int& MaxStep, const TStr PlotNm) {$/;"	f	class:TLogRegFit
MLENewton	snap-adv/agm.cpp	/^int TLogRegFit::MLENewton(const double& ChangeEps, const int& MaxStep, const TStr PlotNm) {$/;"	f	class:TLogRegFit
MLENewton	snap-adv/agmfast.cpp	/^int TAGMFast::MLENewton(const double& Thres, const int& MaxIter, const TStr& PlotNm) {$/;"	f	class:TAGMFast
MMNET_H	snap-core/mmnet.h	2;"	d
MMNet	snap-core/mmnet.h	/^  TMMNet *MMNet; \/\/ A pointer to the parent MMNet$/;"	m	class:TModeNet
MSE	snap-adv/cascdynetinf.h	/^  TFltPrV Accuracy, MAE, MSE;$/;"	m	class:TNIBs
MSec	glib-core/tm.h	/^  TInt Hour, Min, Sec, MSec;$/;"	m	class:TTm
MSpeedUp	snap-adv/mag.h	/^	bool ESpeedUp, MSpeedUp, Debug;$/;"	m	class:TMAGFitBern
MaMa	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMatchingMachine<TNodeData, TEdgeData> &MaMa;$/;"	m	class:TSolver
MaMa	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMatchingMachine<TNodeData, TEdgeData> &MaMa;$/;"	m	class:TSolver
MainE	snap-exp/wikinet.h	/^    TInt MainE, MainW, MainTE, MainTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
MainLStr	snap-exp/wikinet.h	/^  TChA MainLStr, TalkLStr, UserLStr, UserTalkLStr, OtherLStr, ExternalLStr; \/\/ links to other namespaces and external links$/;"	m	class:TWikiMetaLoader
MainTE	snap-exp/wikinet.h	/^    TInt MainE, MainW, MainTE, MainTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
MainTW	snap-exp/wikinet.h	/^    TInt MainE, MainW, MainTE, MainTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
MainW	snap-exp/wikinet.h	/^    TInt MainE, MainW, MainTE, MainTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
MajorVerN	glib-core/http.h	/^  int MajorVerN, MinorVerN;$/;"	v
MakeASCaidaNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeASCaidaNets() {$/;"	f
MakeASNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeASNets() {$/;"	f
MakeASOregonNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeASOregonNets() {$/;"	f
MakeASSkitterNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeASSkitterNets() {$/;"	f
MakeAmazonCoPurchNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeAmazonCoPurchNets() {$/;"	f
MakeArxivCitationNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeArxivCitationNets() {$/;"	f
MakeCCDF	snap-adv/mag.cpp	/^void TMAGFitBern::MakeCCDF(const TFltPrV& RawV, TFltPrV& CcdfV) {$/;"	f	class:TMAGFitBern
MakeClusters	snap-exp/memes.cpp	/^void TClustNet::MakeClusters(const TIntPrV& KeepEdgeV) {$/;"	f	class:TClustNet
MakeCoAuthNet	snap-exp/arxiv.cpp	/^void TArxivPaperList::MakeCoAuthNet(const TStr& FNm, const TStr& OutFNm) {$/;"	f	class:TArxivPaperList
MakeCollaborationNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeCollaborationNets() {$/;"	f
MakeEmailNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeEmailNets() {$/;"	f
MakeEpinions	examples/mkdatasets/mkdatasets.cpp	/^void MakeEpinions() {$/;"	f
MakeExpBins	glib-core/gnuplot.cpp	/^void TGnuPlot::MakeExpBins(const TFltKdV& XYValV, TFltKdV& ExpXYValV, const double& BinFactor, const double& MinYVal) {$/;"	f	class:TGnuPlot
MakeExpBins	glib-core/gnuplot.cpp	/^void TGnuPlot::MakeExpBins(const TFltPrV& XYValV, TFltPrV& ExpXYValV, const double& BinFactor, const double& MinYVal) {$/;"	f	class:TGnuPlot
MakeExpBins	snap-adv/ncp.cpp	/^void TLocClustStat::MakeExpBins(const TFltPrV& ValV, TFltPrV& NewV) {$/;"	f	class:TLocClustStat
MakeExpBins	snap-adv/ncp.cpp	/^void TLocClustStat::MakeExpBins(const TFltV& ValV, TFltV& NewV) {$/;"	f	class:TLocClustStat
MakeExpBins	snap-core/util.cpp	/^void TGUtil::MakeExpBins(const TFltKdV& XYValV, TFltKdV& ExpXYValV, const double& BinFactor, const double& MinYVal) {$/;"	f	class:TGUtil
MakeExpBins	snap-core/util.cpp	/^void TGUtil::MakeExpBins(const TFltPrV& XYValV, TFltPrV& ExpXYValV, const double& BinFactor, const double& MinYVal) {$/;"	f	class:TGUtil
MakeExpBins	snap-core/util.cpp	/^void TGUtil::MakeExpBins(const TFltV& YValV, TFltV& ExpYValV, const double& BinFactor) {$/;"	f	class:TGUtil
MakeExpBins	snap-core/util.cpp	/^void TGUtil::MakeExpBins(const TIntV& YValV, TIntV& ExpYValV, const double& BinFactor) {$/;"	f	class:TGUtil
MakeFromBipart	snap-exp/wgtnet.h	/^PWgtNet TWgtNet::MakeFromBipart(const PGraph& Graph, const bool& TakeLeft) {$/;"	f	class:TWgtNet
MakeGnutella	examples/mkdatasets/mkdatasets.cpp	/^void MakeGnutella() {$/;"	f
MakeGraph	snap-exp/linkpred.cpp	/^void TQGraph::MakeGraph(const TLpExample& Example) {$/;"	f	class:__OLD__::TQGraph
MakeHeap	snap-core/gbase.h	/^  void MakeHeap() { MakeHeap(0, Len()); }$/;"	f	class:THeap
MakeHeap	snap-core/gbase.h	/^void THeap<TVal, TCmp>::MakeHeap(const int& First, const int& Len) {$/;"	f	class:THeap
MakeLJGroupsNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeLJGroupsNets(const TStr InFNm, TStr OutFNm, TStr Desc){$/;"	f
MakeLJNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeLJNets(TStr InFNm, TStr OutFNm, TStr Desc){$/;"	f
MakeLiveJournal1	examples/mkdatasets/mkdatasets.cpp	/^void MakeLiveJournal1() {$/;"	f
MakePatentsCitationNet	examples/mkdatasets/mkdatasets.cpp	/^void MakePatentsCitationNet() {$/;"	f
MakeRoadNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeRoadNets() {$/;"	f
MakeSignEpinions	examples/mkdatasets/mkdatasets.cpp	/^void MakeSignEpinions() {$/;"	f
MakeSlasdotSignNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeSlasdotSignNets(){$/;"	f
MakeSlashdotNet	examples/mkdatasets/mkdatasets.cpp	/^void MakeSlashdotNet(TStr InFNm, TStr OutFNm, TStr Desc) {$/;"	f
MakeSlashdotSignNet	examples/mkdatasets/mkdatasets.cpp	/^void MakeSlashdotSignNet(const TStr InFNm, TStr OutFNm, TStr Desc, THashSet<TChA> NIdSet) {$/;"	f
MakeStatusConsistent	snap-exp/signnet.cpp	/^void TSignNet::MakeStatusConsistent() {$/;"	f	class:TSignNet
MakeUnDir	snap-core/alg.h	/^void MakeUnDir(const PGraph& Graph) {$/;"	f	namespace:TSnap
MakeWebGraphs	examples/mkdatasets/mkdatasets.cpp	/^void MakeWebGraphs() {$/;"	f
MakeWikipediaNets	examples/mkdatasets/mkdatasets.cpp	/^void MakeWikipediaNets() {$/;"	f
ManipulateEdgeSparseAttributes	tutorials/demo-TDirNet.cpp	/^void ManipulateEdgeSparseAttributes() {$/;"	f
ManipulateEdgeSparseAttributes	tutorials/demo-TNEANet.cpp	/^void ManipulateEdgeSparseAttributes() {$/;"	f
ManipulateEdgeSparseAttributes	tutorials/demo-TUndirNet.cpp	/^void ManipulateEdgeSparseAttributes() {$/;"	f
ManipulateMMNet	tutorials/demo-multimodal.cpp	/^void ManipulateMMNet() {$/;"	f
ManipulateNodeEdgeAttributes	tutorials/demo-TNEANet.cpp	/^void ManipulateNodeEdgeAttributes() {$/;"	f
ManipulateNodeSparseAttributes	tutorials/demo-TDirNet.cpp	/^void ManipulateNodeSparseAttributes() {$/;"	f
ManipulateNodeSparseAttributes	tutorials/demo-TNEANet.cpp	/^void ManipulateNodeSparseAttributes() {$/;"	f
ManipulateNodeSparseAttributes	tutorials/demo-TUndirNet.cpp	/^void ManipulateNodeSparseAttributes() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TDirNet.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TNEANet.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TNEGraph.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TNGraph.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TNodeEDatNet.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TNodeEdgeNet.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TNodeNet.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TUNGraph.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateNodesEdges	tutorials/demo-TUndirNet.cpp	/^void ManipulateNodesEdges() {$/;"	f
ManipulateSparseAttributes	tutorials/demo-TAttr.cpp	/^void ManipulateSparseAttributes() {$/;"	f
ManipulateSparseAttributesPair	tutorials/demo-TAttr.cpp	/^void ManipulateSparseAttributesPair() {$/;"	f
ManipulateTableInt	tutorials/demo-THash.cpp	/^void ManipulateTableInt(TIntIntH& TableInt) {$/;"	f
ManipulateTableStr	tutorials/demo-THash.cpp	/^void ManipulateTableStr(TStrIntH& TableStr) {$/;"	f
MapEquationNew2Modules	snap-core/cmty.cpp	/^void MapEquationNew2Modules(PUNGraph& Graph, TIntH& Module, TIntFltH& Qi, int a, int b) {$/;"	f	namespace:TSnap::TSnapDetail
MapHepPhRandDocIds	snap-exp/arxiv.cpp	/^void TArxivPaperList::MapHepPhRandDocIds() {$/;"	f	class:TArxivPaperList
MapHits	snap-core/table.h	/^  void MapHits(const TVec<PGraph>& GraphSeq, TVec<PTable>& TableSeq,$/;"	f	namespace:TSnap
MapIdsToFirstN	snap-adv/motifcluster.cpp	/^static void MapIdsToFirstN(const TIntV& ids, THash<TInt, TInt>& id_map,$/;"	f	file:
MapNodeToState	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* MapNodeToState;$/;"	m	class:TMatchingMachine
MapNodeToState	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* MapNodeToState;$/;"	m	class:TMatchingMachine
MapPageRank	snap-core/table.h	/^  void MapPageRank(const TVec<PGraph>& GraphSeq, TVec<PTable>& TableSeq,$/;"	f	namespace:TSnap
MapStateToNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* MapStateToNode;$/;"	m	class:TMatchingMachine
MapStateToNode	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* MapStateToNode;$/;"	m	class:TMatchingMachine
MarN	glib-core/tm.cpp	/^const int TTmInfo::MarN=3; const int TTmInfo::AprN=4;$/;"	m	class:TTmInfo	file:
MarN	glib-core/tm.h	/^  static const int MarN; static const int AprN;$/;"	m	class:TTmInfo
MarginalBound	snap-adv/cascnetinf.h	/^  TFlt MarginalGain, MarginalBound, MedianTimeDiff, AverageTimeDiff; \/\/ we can skip MarginalBound for efficiency if not explicitly required$/;"	m	class:TEdgeInfo
MarginalGain	snap-adv/cascnetinf.h	/^  TFlt MarginalGain, MarginalBound, MedianTimeDiff, AverageTimeDiff; \/\/ we can skip MarginalBound for efficiency if not explicitly required$/;"	m	class:TEdgeInfo
MarkDelKey	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::MarkDelKey(const TKey& Key){$/;"	f	class:THash
MarkDelKey	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::MarkDelKey(const TKey& Key) {$/;"	f	class:THashSet
MarkDelKeyId	glib-core/hash.h	/^  void MarkDelKeyId(const int& KeyId){MarkDelKey(GetKey(KeyId));}$/;"	f	class:THash
MarkDelKeyId	glib-core/shash.h	/^  void MarkDelKeyId(const int& KeyId) {MarkDelKey(GetKey(KeyId)); }$/;"	f	class:THashSet
Match	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual void Match(int n, int* QIds, int* RIds) {$/;"	f	class:TConsoleMatchListener
Match	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual void Match(int n, int* QIds, int* RIds) {$/;"	f	class:TEmptyMatchListener
Match	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^int Match(TMatch MatchType,$/;"	f
Match	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^void Match(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Reference,$/;"	f
Match	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  virtual void Match(int n, int* QIds, int* RIds) {$/;"	f	class:TConsoleMatchListener
Match	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  virtual void Match(int n, int* QIds, int* RIds) {$/;"	f	class:TEmptyMatchListener
Match	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^int Match(TMatch Matchtype, $/;"	f
Match	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^void Match(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Reference,$/;"	f
MatchCount	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  long MatchCount;$/;"	m	class:TMatchListener
MatchCount	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  long MatchCount;$/;"	m	class:TMatchListener
MatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMatchListener &MatchListener;$/;"	m	class:TSolver
MatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMatchListener &MatchListener;$/;"	m	class:TSolver
Max	snap-core/util.cpp	/^double TStopwatch::Max(const TExperiment Exp) const {$/;"	f	class:TStopwatch
MaxAlpha	snap-adv/cascdynetinf.h	/^  TFlt Tol, MaxAlpha, MinAlpha, InitAlpha;$/;"	m	class:TNIBs
MaxCPGreedyBetter	snap-core/centr.cpp	/^TIntH MaxCPGreedyBetter(const PUNGraph& Graph, const int k) {$/;"	f	namespace:TSnap
MaxCPGreedyBetter1	snap-core/centr.cpp	/^TIntH MaxCPGreedyBetter1(const PUNGraph& Graph, const int k) {$/;"	f	namespace:TSnap
MaxCPGreedyBetter2	snap-core/centr.cpp	/^TIntH MaxCPGreedyBetter2(const PUNGraph& Graph, const int k) {$/;"	f	namespace:TSnap
MaxCPGreedyBetter3	snap-core/centr.cpp	/^TIntH MaxCPGreedyBetter3(const PUNGraph& Graph, const int k) {$/;"	f	namespace:TSnap
MaxHeapify	glib-core/priorityqueue.h	/^  void MaxHeapify(int i) {$/;"	f	class:TMaxPriorityQueue
MaxLabel	snap-core/flow.cpp	/^  int MaxLabel;$/;"	m	class:TSnap::TPRManager	file:
MaxLambda	snap-adv/agmfit.h	/^  TFlt MaxLambda; \/\/\/< Maximum value of regularization parameter lambda (default = 10).$/;"	m	class:TAGMFit
MaxNbrsInCANDNodeId	snap-adv/cliques.cpp	/^int TCliqueOverlap::MaxNbrsInCANDNodeId(const THashSet<TInt>& SUBG, const THashSet<TInt>& CAND) const{$/;"	f	class:TCliqueOverlap
MaxVal	snap-adv/agmattr.h	/^  TFlt MaxVal; \/\/ maximum value of F (for numerical reason)$/;"	m	class:TCesna
MaxVal	snap-adv/agmdirected.h	/^  TFlt MaxVal; \/\/ maximum value of F (for numerical reason)$/;"	m	class:TCoda
MaxVal	snap-adv/agmfast.h	/^  TFlt MaxVal; \/\/ maximum value of F (for numerical reason)$/;"	m	class:TAGMFast
MaxValW	snap-adv/agmattr.h	/^  TFlt MaxValW; \/\/ maximum value of W (for numerical reason)$/;"	m	class:TCesna
Maxs	snap-core/util.h	/^  double Maxs[NEXPS];$/;"	m	class:TStopwatch
MayN	glib-core/tm.cpp	/^const int TTmInfo::MayN=5; const int TTmInfo::JunN=6;$/;"	m	class:TTmInfo	file:
MayN	glib-core/tm.h	/^  static const int MayN; static const int JunN;$/;"	m	class:TTmInfo
McMcGetAvgAvg	snap-adv/kronecker.cpp	/^void McMcGetAvgAvg(const TFltV& AvgJV, double& AvgAvg) {$/;"	f
McMcGetAvgJ	snap-adv/kronecker.cpp	/^void McMcGetAvgJ(const TVec<TFltV>& ChainLLV, TFltV& AvgJV) {$/;"	f
Mean	glib-core/xmath.h	/^  TFlt Mean, Vari, SDev, SErr;$/;"	v
MediaV	snap-exp/sir.h	/^  TFltV MediaV, BlogV;$/;"	m	class:TSir2Model
MediaV	snap-exp/sir.h	/^  TFltV MediaV, BlogV;$/;"	m	class:TSirSR2Model
Median	glib-core/xmath.h	/^  TFlt Median, Quart1, Quart3;$/;"	v
Median	glib-core/xmath.h	/^  static const T& Median(const T& Val1, const T& Val2, const T& Val3) {$/;"	f	class:TMath
MedianTimeDiff	snap-adv/cascnetinf.h	/^  TFlt MarginalGain, MarginalBound, MedianTimeDiff, AverageTimeDiff; \/\/ we can skip MarginalBound for efficiency if not explicitly required$/;"	m	class:TEdgeInfo
Mega	glib-core/dt.cpp	/^const int TInt::Mega=1024*1024;$/;"	m	class:TInt	file:
Mega	snap-core/gbase.h	4;"	d
MemCpy	glib-core/md5.h	/^  static void MemCpy(uint1* Dst, uint1* Src, uint4 Len){$/;"	f
MemSet	glib-core/md5.h	/^  static void MemSet(uint1* Start, uint1 Val, uint4 Len){$/;"	f
MemStat	glib-core/os.h	/^  MEMORYSTATUSEX MemStat;$/;"	v
MemePosV	snap-exp/memes.h	/^  TVec<TIntPr> MemePosV;  \/\/ (index, length), quote begins at ContentStr[MemePos[i]]$/;"	m	class:TMemesDataLoader
MemeV	snap-exp/memes.h	/^  TVec<TChA> MemeV;       \/\/ quote$/;"	m	class:TMemesDataLoader
Merge	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Merge(){$/;"	f	class:TVec
Merge	snap-core/table.cpp	/^void TTable::Merge(TIntV& V, TInt Idx1, TInt Idx2, TInt Idx3, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:TTable
Merge	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::Merge(TIntV& V, TInt Idx1, TInt Idx2, TInt Idx3, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:PhysicalOrderTable
MergeBestQ	snap-core/cmty.cpp	/^  bool MergeBestQ() {$/;"	f	class:TSnap::TSnapDetail::TCNMQMatrix
MergeEdgeTables	snap-exp/multimodal-dev/multimodal.cpp	/^PTable MergeEdgeTables(const TVec<TPair<PTable,int> >& EdgeTables, const Schema& EdgeSchema,$/;"	f
MergeFlags	glib-core/blobbs.h	/^  void MergeFlags(const TBlobPt& Pt){$/;"	f
MergeNbrs	snap-core/triad.h	/^void MergeNbrs(TIntV& NeighbourV, const typename PGraph::TObj::TNodeI& NI) {$/;"	f	namespace:TSnap
MergeNeighborhoods	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
MergeNodeTables	snap-exp/multimodal-dev/multimodal.cpp	/^void MergeNodeTables(const TVec<PTable>& NodeTables, const Schema& NodeSchema, THash<TStr,TInt>& Hash, TStrV& OriNIdV) {$/;"	f
Mergec2Clusters	snap-exp/memes.cpp	/^void TQuoteBs::Mergec2Clusters(const int& ParentCId, const int& ChildCId) {$/;"	f	class:TQuoteBs
Message	glib-core/linalg.h	/^    TStr Message;$/;"	m	class:TNSException
MetaTagNm	glib-core/html.cpp	/^const TStr THtmlTok::MetaTagNm="<META>";$/;"	m	class:THtmlTok	file:
Method	glib-core/http.h	/^  THttpRqMethod Method;$/;"	v
MetroGibbsSampleNext	snap-adv/kronecker.cpp	/^void TKroneckerLL::MetroGibbsSampleNext(const int& WarmUp, const bool DLLUpdate) {$/;"	f	class:TKroneckerLL
MetroGibbsSampleSetup	snap-adv/kronecker.cpp	/^void TKroneckerLL::MetroGibbsSampleSetup(const int& WarmUp) {$/;"	f	class:TKroneckerLL
Min	glib-core/tm.h	/^  TInt Hour, Min, Sec, MSec;$/;"	m	class:TTm
Min	snap-core/util.cpp	/^double TStopwatch::Min(const TExperiment Exp) const {$/;"	f	class:TStopwatch
MinAlpha	snap-adv/cascdynetinf.h	/^  TFlt Tol, MaxAlpha, MinAlpha, InitAlpha;$/;"	m	class:TNIBs
MinBuckets	glib-core/shash.h	/^  static const int MinBuckets;    \/\/ = 32 (must be power of 2)$/;"	m	class:TSparseHash
MinBuckets	glib-core/shash.h	/^  static const int MinBuckets;    \/\/ = 32 (must be power of 2)$/;"	m	class:TSparseSet
MinBuckets	glib-core/shash.h	/^const int TSparseHash<TKey, TDat, GroupSize>::MinBuckets = 32;$/;"	m	class:TSparseHash
MinBuckets	glib-core/shash.h	/^const int TSparseSet<TKey, GroupSize>::MinBuckets = 32;$/;"	m	class:TSparseSet
MinCmnNbrs	snap-exp/signnet.h	/^  int MinCmnNbrs;$/;"	m	class:TEdgeSignPred
MinEnergy	snap-exp/signnet.cpp	/^int THopfield::MinEnergy(const int& NPart) {$/;"	f	class:THopfield
MinLambda	snap-adv/agmfit.h	/^  TFlt MinLambda; \/\/\/< Minimum value of regularization parameter lambda (default = 1e-5).$/;"	m	class:TAGMFit
MinNodesEdges	snap-core/gstat.cpp	/^uint TGStatVec::MinNodesEdges = 10;$/;"	m	class:TGStatVec	file:
MinNodesEdges	snap-core/gstat.h	/^  static uint MinNodesEdges;$/;"	m	class:TGStatVec
MinSup	snap-exp/trawling.h	/^  int MinSup;$/;"	m	class:TTrawling
MinVal	snap-adv/agmattr.h	/^  TFlt MinVal; \/\/ minimum value of F (0)$/;"	m	class:TCesna
MinVal	snap-adv/agmdirected.h	/^  TFlt MinVal; \/\/ minimum value of F (0)$/;"	m	class:TCoda
MinVal	snap-adv/agmfast.h	/^  TFlt MinVal; \/\/ minimum value of F (0)$/;"	m	class:TAGMFast
MinValW	snap-adv/agmattr.h	/^  TFlt MinValW; \/\/ minimum value of W (for numerical reason)$/;"	m	class:TCesna
MinorVerN	glib-core/http.h	/^  int MajorVerN, MinorVerN;$/;"	v
Mins	snap-core/util.h	/^  double Mins[NEXPS];$/;"	m	class:TStopwatch
Minus	snap-core/table.cpp	/^PTable TTable::Minus(TTable& Table) {$/;"	f	class:TTable
Minus	snap-core/table.h	/^  PTable Minus(const PTable& Table) { return Minus(*Table); };$/;"	f	class:TTable
MinusStr	glib-core/lx.cpp	/^const TStr TLxSymStr::MinusStr="-";$/;"	m	class:TLxSymStr	file:
MissEdges	snap-adv/kronecker.h	/^  TInt MissEdges;		\/\/ # of missing edges (if unknown, -1)$/;"	m	class:TKroneckerLL
MkClone	glib-core/url.cpp	/^PUrlEnv TUrlEnv::MkClone(const PUrlEnv& UrlEnv){$/;"	f	class:TUrlEnv
MkEolnLn	glib-core/fl.cpp	/^void TMOut::MkEolnLn(){$/;"	f	class:TMOut
MkGmTime	glib-core/tm.cpp	/^time_t TSecTm::MkGmTime(struct tm *t) {$/;"	f	class:TSecTm
MkRef	glib-core/bd.h	/^  void MkRef() const {$/;"	f	class:TPt
MkRef	glib-core/bd.h	/^  void MkRef(){Refs++;}$/;"	f	class:TCRef
Mn	glib-core/dt.cpp	/^const bool TBool::Mn=0;$/;"	m	class:TBool	file:
Mn	glib-core/dt.cpp	/^const char TCh::Mn=CHAR_MIN;$/;"	m	class:TCh	file:
Mn	glib-core/dt.cpp	/^const double TFlt::Mn=-DBL_MAX;$/;"	m	class:TFlt	file:
Mn	glib-core/dt.cpp	/^const int TInt::Mn=INT_MIN;$/;"	m	class:TInt	file:
Mn	glib-core/dt.cpp	/^const ldouble TLFlt::Mn=-LDBL_MAX;$/;"	m	class:TLFlt	file:
Mn	glib-core/dt.cpp	/^const sdouble TSFlt::Mn=-FLT_MIN;$/;"	m	class:TSFlt	file:
Mn	glib-core/dt.cpp	/^const uchar TUCh::Mn=0;$/;"	m	class:TUCh	file:
Mn	glib-core/dt.cpp	/^const uint TUInt::Mn=0;$/;"	m	class:TUInt	file:
Mn	glib-core/wch.h	/^  static const TWCh Mn;$/;"	m	class:TWCh
Mn	glib-core/xmath.h	/^  TFlt Mn, Mx;$/;"	v
Mn	glib-core/xmath.h	/^  static const T& Mn(const T& LVal, const T& RVal){$/;"	f	class:TMath
Mn	glib-core/xmath.h	/^  static const T& Mn(const T& Val1, const T& Val2, const T& Val3) {$/;"	f	class:TMath
MnArgs	glib-core/env.h	/^  int MnArgs;$/;"	m	class:TEnv
MnBlobBfL	glib-core/blobbs.cpp	/^const int TBlobBs::MnBlobBfL=16;$/;"	m	class:TBlobBs	file:
MnBlobBfL	glib-core/blobbs.h	/^  static const int MnBlobBfL;$/;"	v
MnEdCnt	snap-exp/wikinet.h	/^  TInt MnEdCnt, MnEdWrds;      \/\/ number of edits, changed words (in main namespace)$/;"	m	class:TWikiUsr
MnEdWrds	snap-exp/wikinet.h	/^  TInt MnEdCnt, MnEdWrds;      \/\/ number of edits, changed words (in main namespace)$/;"	m	class:TWikiUsr
MnOccupancy	glib-core/shash.h	/^  static const float MnOccupancy; \/\/ = 0.4 * MxOccupancy;$/;"	m	class:TSparseHash
MnOccupancy	glib-core/shash.h	/^  static const float MnOccupancy; \/\/ = 0.4 * MxOccupancy;$/;"	m	class:TSparseSet
MnOccupancy	glib-core/shash.h	/^const float TSparseHash<TKey, TDat, GroupSize>::MnOccupancy = 0.4f * 0.8f; \/\/0.8f$/;"	m	class:TSparseHash
MnOccupancy	glib-core/shash.h	/^const float TSparseSet<TKey, GroupSize>::MnOccupancy = 0.4f * 0.8f;$/;"	m	class:TSparseSet
MnRevCnt	snap-exp/wikinet.h	/^  TInt MnRevCnt, MnRevWrds;    \/\/ number of times a user verted a page (in main wikipedia space)$/;"	m	class:TWikiUsr
MnRevWrds	snap-exp/wikinet.h	/^  TInt MnRevCnt, MnRevWrds;    \/\/ number of times a user verted a page (in main wikipedia space)$/;"	m	class:TWikiUsr
MnTkEdCnt	snap-exp/wikinet.h	/^  TInt MnTkEdCnt, MnTkEdWrds;  \/\/ number of edits, changed words (in talk pages of main namespace)$/;"	m	class:TWikiUsr
MnTkEdWrds	snap-exp/wikinet.h	/^  TInt MnTkEdCnt, MnTkEdWrds;  \/\/ number of edits, changed words (in talk pages of main namespace)$/;"	m	class:TWikiUsr
MnsCnt	snap-exp/signnet.h	/^    TInt PlsCnt, MnsCnt;        \/\/ number of + edges$/;"	m	struct:TSignMicroEvol::TCloseStat
ModBit	glib-core/shash.h	/^  static int ModBit(const int&  ValN) { return 1 << (ValN&7); }$/;"	f	class:TSparseGroup
Mode	glib-core/xmath.h	/^  TFlt Mode;$/;"	v
Mode1	snap-core/mmnet.h	/^  TInt Mode1; \/\/\/The first mode. In the case of directed crossnets, this is implicitly understood to be the source mode.$/;"	m	class:TCrossNet
Mode2	snap-core/mmnet.h	/^  TInt Mode2; \/\/\/The second mode. In the case of directed crossnets, this is implicitly understood to be the destination mode.$/;"	m	class:TCrossNet
ModeId	snap-core/mmnet.h	/^  TInt ModeId;$/;"	m	class:TModeNet
ModeIdToNameH	snap-core/mmnet.h	/^  THash<TInt,TStr> ModeIdToNameH;$/;"	m	class:TMMNet
ModeNameToIdH	snap-core/mmnet.h	/^  THash<TStr,TInt> ModeNameToIdH;$/;"	m	class:TMMNet
ModeNetHI	snap-core/mmnet.h	/^    THashIter ModeNetHI;$/;"	m	class:TMMNet::TModeNetI
Model	snap-adv/cascdynetinf.h	/^  TInt Model; \/\/ pairwise transmission model$/;"	m	class:TCascade
Model	snap-adv/cascdynetinf.h	/^  TModel Model;$/;"	m	class:TNIBs
Model	snap-adv/cascnetinf.h	/^  TInt Model;$/;"	m	class:TCascade
Model	snap-exp/sir.h	/^  TEpiModel Model;$/;"	m	class:TEstEpidemParams
MonN	glib-core/tm.cpp	/^const int TTmInfo::SunN=1; const int TTmInfo::MonN=2;$/;"	m	class:TTmInfo	file:
MonN	glib-core/tm.h	/^  static const int SunN; static const int MonN;$/;"	m	class:TTmInfo
MonorEdit	snap-exp/wikinet.h	/^  TBool MonorEdit;$/;"	m	class:TWikiMetaLoader
Month	glib-core/tm.h	/^  TInt Year, Month, Day, DayOfWeek;$/;"	m	class:TTm
MoreBits	snap-core/anf.h	/^  TInt NBits, MoreBits, ApproxBytes; \/\/ NBits=logNodes+MoreBits;  MoreBits: additional R bits;  ApproxBytes: Approx\/8;$/;"	m	class:TGraphAnf
MoreCmds	glib-core/gnuplot.h	/^  TStrV MoreCmds;$/;"	m	class:TGnuPlot
MotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::MotifAdjacency(PNGraph graph, MotifType motif,$/;"	f	class:MotifCluster
MotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::MotifAdjacency(PUNGraph graph, MotifType motif,$/;"	f	class:MotifCluster
MotifCluster	snap-adv/motifcluster.h	/^class MotifCluster {$/;"	c
MotifType	snap-adv/motifcluster.h	/^enum MotifType {$/;"	g
Move	glib-core/dt.cpp	/^void TRnd::Move(const int& Steps){$/;"	f	class:TRnd
MoveFPos	glib-core/fl.cpp	/^void TFRnd::MoveFPos(const int& DFPos){$/;"	f	class:TFRnd
MoveFrom	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::MoveFrom(TVec<TVal, TSizeTy>& Vec){$/;"	f	class:TVec
MoveFrom	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::MoveFrom(TSparseHash& HT, const int& MnWanted) {$/;"	f	class:TSparseHash
MoveFrom	glib-core/shash.h	/^void TSparseSet<TKey, GroupSize>::MoveFrom(TSparseSet& SSet, const int& MnWanted) {$/;"	f	class:TSparseSet
MoveLastMP	glib-core/ds.h	/^  TSizeTy MoveLastMP(const TVal& Val, int Inc){ const int Idx = __sync_fetch_and_add(&Vals, Inc);$/;"	f	class:TVec
MovePos	glib-core/fl.h	/^  void MovePos(const int& DPos) { IAssert(fseek(FileId, DPos, SEEK_CUR)==0); }$/;"	f	class:TFInOut
MoveToBTag2OrEof	glib-core/html.cpp	/^void THtmlLx::MoveToBTag2OrEof(const TStr& TagNm1, const TStr& TagNm2){$/;"	f	class:THtmlLx
MoveToBTag3OrEof	glib-core/html.cpp	/^void THtmlLx::MoveToBTag3OrEof(const TStr& TagNm1, const TStr& TagNm2, const TStr& TagNm3){$/;"	f	class:THtmlLx
MoveToBTagArg2OrEof	glib-core/html.cpp	/^void THtmlLx::MoveToBTagArg2OrEof(const TStr& TagNm,$/;"	f	class:THtmlLx
MoveToBTagArgOrEof	glib-core/html.cpp	/^void THtmlLx::MoveToBTagArgOrEof($/;"	f	class:THtmlLx
MoveToBTagOrETagOrEof	glib-core/html.cpp	/^void THtmlLx::MoveToBTagOrETagOrEof(const TStr& BTagNm, const TStr& ETagNm){$/;"	f	class:THtmlLx
MoveToBTagOrEof	glib-core/html.cpp	/^void THtmlLx::MoveToBTagOrEof($/;"	f	class:THtmlLx
MoveToBTagOrEof	glib-core/html.cpp	/^void THtmlLx::MoveToBTagOrEof(const TStr& TagNm){$/;"	f	class:THtmlLx
MoveToETagOrEof	glib-core/html.cpp	/^void THtmlLx::MoveToETagOrEof(const TStr& TagNm){$/;"	f	class:THtmlLx
MoveToStrOrEof	glib-core/html.cpp	/^void THtmlLx::MoveToStrOrEof(const TStr& Str){$/;"	f	class:THtmlLx
Ms	glib-core/bd.h	/^    struct {uint Ls; uint Ms;} UInt32;$/;"	m	struct:TConv_Pt64Ints32::__anon41::__anon42
MsVal	glib-core/wch.h	/^  uchar MsVal;$/;"	m	class:TWCh
MtxDim	snap-adv/kronecker.h	/^  TInt MtxDim;$/;"	m	class:TKronMtx
MtxDim	snap-adv/mag.h	/^  TInt MtxDim;$/;"	m	class:TMAGAffMtx
MtxHisV	snap-adv/mag.h	/^	TVec<TMAGAffMtxV> MtxHisV;$/;"	m	class:TMAGFitBern
MtxV	snap-adv/kronecker.h	/^  TVec<TKronMtx> MtxV;	\/\/ Kronecker initiator matrix (per EM iteration)$/;"	m	class:TKroneckerLL
Mu	snap-adv/cascdynetinf.h	/^  TFlt Gamma, Mu, Aging;$/;"	m	class:TNIBs
Mu	snap-adv/mag.h	/^	TFlt Mu;$/;"	m	class:TMAGNodeSimple
MuHisV	snap-adv/mag.h	/^	TVec<TFltV> MuHisV;$/;"	m	class:TMAGFitBern
MuV	snap-adv/mag.h	/^	TFltV MuV;$/;"	m	class:TMAGNodeBern
MuV	snap-adv/mag.h	/^	TFltV MuV;$/;"	m	class:TMAGNodeBeta
MulEdgeWgt	snap-exp/wgtnet.cpp	/^void TWgtNet::MulEdgeWgt(const double& MulBy) {$/;"	f	class:TWgtNet
Multiply	glib-core/linalg.cpp	/^void TLinAlg::Multiply(const TFltVV& A, const TFltV& x, TFltV& y) {$/;"	f	class:TLinAlg
Multiply	glib-core/linalg.cpp	/^void TLinAlg::Multiply(const TFltVV& A, const TFltV& x, TFltVV& C, int ColId) {$/;"	f	class:TLinAlg
Multiply	glib-core/linalg.cpp	/^void TLinAlg::Multiply(const TFltVV& A, const TFltVV& B, TFltVV& C) {$/;"	f	class:TLinAlg
Multiply	glib-core/linalg.cpp	/^void TLinAlg::Multiply(const TFltVV& A, const TFltVV& B, int ColId, TFltV& y) {$/;"	f	class:TLinAlg
Multiply	glib-core/linalg.cpp	/^void TLinAlg::Multiply(const TFltVV& A, const TFltVV& B, int ColIdB, TFltVV& C, int ColIdC){$/;"	f	class:TLinAlg
Multiply	glib-core/linalg.h	/^    void Multiply(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TMatrix
Multiply	glib-core/linalg.h	/^    void Multiply(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TMatrix
MultiplyATA	glib-core/linalg.cpp	/^void TSparseSVD::MultiplyATA(const TMatrix& Matrix,$/;"	f	class:TSparseSVD
MultiplyScalar	glib-core/linalg.cpp	/^void TLinAlg::MultiplyScalar(const double& k, const TFltV& x, TFltV& y) {$/;"	f	class:TLinAlg
MultiplyScalar	glib-core/linalg.cpp	/^void TLinAlg::MultiplyScalar(const double& k, const TIntFltKdV& x, TIntFltKdV& y) {$/;"	f	class:TLinAlg
MultiplyT	glib-core/linalg.cpp	/^void TLinAlg::MultiplyT(const TFltVV& A, const TFltV& x, TFltV& y) {$/;"	f	class:TLinAlg
MultiplyT	glib-core/linalg.h	/^    void MultiplyT(const TFltV& Vec, TFltV& Result) const{$/;"	f	class:TMatrix
MultiplyT	glib-core/linalg.h	/^    void MultiplyT(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TMatrix
Mx	glib-core/dt.cpp	/^const bool TBool::Mx=1;$/;"	m	class:TBool	file:
Mx	glib-core/dt.cpp	/^const char TCh::Mx=CHAR_MAX;$/;"	m	class:TCh	file:
Mx	glib-core/dt.cpp	/^const double TFlt::Mx=+DBL_MAX;$/;"	m	class:TFlt	file:
Mx	glib-core/dt.cpp	/^const int TInt::Mx=INT_MAX;$/;"	m	class:TInt	file:
Mx	glib-core/dt.cpp	/^const ldouble TLFlt::Mx=+LDBL_MAX;$/;"	m	class:TLFlt	file:
Mx	glib-core/dt.cpp	/^const sdouble TSFlt::Mx=+FLT_MAX;$/;"	m	class:TSFlt	file:
Mx	glib-core/dt.cpp	/^const uchar TUCh::Mx=UCHAR_MAX;$/;"	m	class:TUCh	file:
Mx	glib-core/dt.cpp	/^const uint TUInt::Mx=UINT_MAX;$/;"	m	class:TUInt	file:
Mx	glib-core/wch.h	/^  static const TWCh Mx;$/;"	m	class:TWCh
Mx	glib-core/xmath.h	/^  TFlt Mn, Mx;$/;"	v
Mx	glib-core/xmath.h	/^  static const T& Mx(const T& LVal, const T& RVal) {$/;"	f	class:TMath
Mx	glib-core/xmath.h	/^  static const T& Mx(const T& Val1, const T& Val2, const T& Val3) {$/;"	f	class:TMath
MxB1	glib-core/bits.cpp	/^const TB1Def::TB1 TB1Def::MxB1=0xFF;$/;"	m	class:TB1Def	file:
MxB1	glib-core/bits.h	/^  static const TB1 MxB1;$/;"	m	class:TB1Def
MxB2	glib-core/bits.cpp	/^const TB2Def::TB2 TB2Def::MxB2=0xFFFF;$/;"	m	class:TB2Def	file:
MxB2	glib-core/bits.h	/^  static const TB2 MxB2;$/;"	m	class:TB2Def
MxB4	glib-core/bits.cpp	/^const TB4Def::TB4 TB4Def::MxB4=0xFFFFFFFF;$/;"	m	class:TB4Def	file:
MxB4	glib-core/bits.h	/^  static const TB4 MxB4;$/;"	m	class:TB4Def
MxBfL	glib-core/dt.h	/^  int MxBfL, BfL;$/;"	v
MxBfL	glib-core/fl.cpp	/^const TSize TFOut::MxBfL=16*1024;;$/;"	m	class:TFOut	file:
MxBfL	glib-core/fl.cpp	/^const int TFIn::MxBfL=16*1024;$/;"	m	class:TFIn	file:
MxBfL	glib-core/fl.h	/^  int BfL, MxBfL;$/;"	m	class:TMOut
MxBfL	glib-core/fl.h	/^  static const TSize MxBfL;$/;"	m	class:TFOut
MxBfL	glib-core/fl.h	/^  static const int MxBfL;$/;"	m	class:TFIn
MxBfL	glib-core/hash.h	/^  TSize MxBfL, BfL;$/;"	v
MxBfL	glib-core/zipfl.cpp	/^const TSize TZipOut::MxBfL=4*1024;$/;"	m	class:TZipOut	file:
MxBfL	glib-core/zipfl.cpp	/^const int TZipIn::MxBfL=32*1024;$/;"	m	class:TZipIn	file:
MxBfL	glib-core/zipfl.h	/^  static const TSize MxBfL;$/;"	m	class:TZipOut
MxBfL	glib-core/zipfl.h	/^  static const int MxBfL;$/;"	m	class:TZipIn
MxBlobFLen	glib-core/blobbs.cpp	/^const int TBlobBs::MxBlobFLen=1000000000;$/;"	m	class:TBlobBs	file:
MxCrossNetId	snap-core/mmnet.h	/^  TInt MxCrossNetId; \/\/\/ Keeps track of the max crossnet id$/;"	m	class:TMMNet
MxEId	snap-core/graph.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNEGraph
MxEId	snap-core/mmnet.h	/^  TInt MxEId;$/;"	m	class:TCrossNet
MxEId	snap-core/network.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNEANet
MxEId	snap-core/network.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNodeEdgeNet
MxEId	snap-core/networkmp.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNEANetMP
MxEId	snap-exp/mmgraph-exp.h	/^  TInt MxEId;$/;"	m	class:TMNet
MxEnergy	snap-exp/signnet.h	/^  TInt MxEnergy;$/;"	m	class:THopfield
MxFirst	snap-core/gbase.h	/^  TInt MxFirst; \/\/ how often we move the queue to the start of the array$/;"	m	class:TSnapQueue
MxFqItemSetV	snap-exp/trawling.h	/^  TVec<TIntV> MxFqItemSetV;$/;"	m	class:TTrawling
MxIsoCheck	snap-core/ghash.h	/^  TInt MxIsoCheck;     \/\/ maximum graph size for which we perform brute force graph isomorphism check$/;"	m	class:TGHash
MxLast	glib-core/ds.h	/^  TInt MxLast, MxLen;$/;"	m	class:TQQueue
MxLen	glib-core/ds.h	/^  TInt MxLast, MxLen;$/;"	m	class:TQQueue
MxLen	glib-core/shash.h	/^  int MxLen() const { return GroupSize; }$/;"	f	class:TSparseGroup
MxLevInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> MxLevInf, MxLevNet;   \/\/ level of max width (depth of max width)$/;"	m	class:TCascadeStat	file:
MxLevNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> MxLevInf, MxLevNet;   \/\/ level of max width (depth of max width)$/;"	m	class:TCascadeStat	file:
MxLnLen	glib-core/fl.h	/^  int MxLnLen, LnLen;$/;"	m	class:TSOut
MxMask	glib-core/fl.cpp	/^const int TCs::MxMask=0x0FFFFFFF;$/;"	m	class:TCs	file:
MxMask	glib-core/fl.h	/^  static const int MxMask;$/;"	m	class:TCs
MxModeId	snap-core/mmnet.h	/^  TInt MxModeId; \/\/\/ Keeps track of the max mode id.$/;"	m	class:TMMNet
MxNId	snap-core/bignet.h	/^  TInt MxNId;$/;"	m	class:TBigNet
MxNId	snap-core/graph.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNEGraph
MxNId	snap-core/graph.h	/^  TInt MxNId, NEdges;$/;"	m	class:TUNGraph
MxNId	snap-core/graph.h	/^  TInt MxNId;                 \/\/ maximum node ID in the graph$/;"	m	class:TBPGraph
MxNId	snap-core/graph.h	/^  TInt MxNId;$/;"	m	class:TNGraph
MxNId	snap-core/graphmp.h	/^  TInt MxNId;$/;"	m	class:TNGraphMP
MxNId	snap-core/network.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNEANet
MxNId	snap-core/network.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNodeEdgeNet
MxNId	snap-core/network.h	/^  TInt MxNId, NEdges;$/;"	m	class:TUndirNet
MxNId	snap-core/network.h	/^  TInt MxNId;$/;"	m	class:TDirNet
MxNId	snap-core/network.h	/^  TInt MxNId;$/;"	m	class:TNodeEDatNet
MxNId	snap-core/network.h	/^  TInt MxNId;$/;"	m	class:TNodeNet
MxNId	snap-core/networkmp.h	/^  TInt MxNId, MxEId;$/;"	m	class:TNEANetMP
MxNId	snap-exp/graphmp-exp.h	/^  TInt MxNId, NEdges;$/;"	m	class:TUNGraphMP
MxNId	snap-exp/mmgraph-exp.h	/^    TInt MxNId;$/;"	m	class:TMNet::TNodeType
MxNId	snap-exp/mmgraph-exp.h	/^  TInt MxNId;$/;"	m	class:TMNet
MxNmLen	glib-core/tm.h	/^	TInt MxNmLen;$/;"	v
MxOccupancy	glib-core/shash.h	/^  static const float MxOccupancy; \/\/ = 0.7; \/\/was 0.8$/;"	m	class:TSparseHash
MxOccupancy	glib-core/shash.h	/^  static const float MxOccupancy; \/\/ = 0.7; \/\/was 0.8$/;"	m	class:TSparseSet
MxOccupancy	glib-core/shash.h	/^const float TSparseHash<TKey, TDat, GroupSize>::MxOccupancy = 0.8f; \/\/0.8f;$/;"	m	class:TSparseHash
MxOccupancy	glib-core/shash.h	/^const float TSparseSet<TKey, GroupSize>::MxOccupancy = 0.8f;$/;"	m	class:TSparseSet
MxP2Exp	glib-core/bits.cpp	/^const int TB1Def::MxP2Exp=TB1Def::B1Bits-1;$/;"	m	class:TB1Def	file:
MxP2Exp	glib-core/bits.cpp	/^const int TB2Def::MxP2Exp=TB2Def::B2Bits-1;$/;"	m	class:TB2Def	file:
MxP2Exp	glib-core/bits.cpp	/^const int TB4Def::MxP2Exp=TB4Def::B4Bits-1;$/;"	m	class:TB4Def	file:
MxP2Exp	glib-core/bits.h	/^  static const int MxP2Exp;$/;"	m	class:TB1Def
MxP2Exp	glib-core/bits.h	/^  static const int MxP2Exp;$/;"	m	class:TB2Def
MxP2Exp	glib-core/bits.h	/^  static const int MxP2Exp;$/;"	m	class:TB4Def
MxQHeap	snap-core/cmty.cpp	/^  THeap<TFltIntIntTr> MxQHeap;$/;"	m	class:TSnap::TSnapDetail::TCNMQMatrix	file:
MxQId	snap-core/cmty.cpp	/^    int MxQId;$/;"	m	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat	file:
MxSegLenVNm	glib-core/blobbs.cpp	/^const TStr TBlobBs::MxSegLenVNm="MxSegLen";$/;"	m	class:TBlobBs	file:
MxSvdGraph	snap-core/ghash.h	/^  TInt MxSvdGraph;     \/\/ maximum graph size for which we perform SVD-based approximate isomorphism check$/;"	m	class:TGHash
MxSzInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> MxSzInf, MxSzNet;     \/\/ size of the largest cascade$/;"	m	class:TCascadeStat	file:
MxSzNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> MxSzInf, MxSzNet;     \/\/ size of the largest cascade$/;"	m	class:TCascadeStat	file:
MxVals	glib-core/ds.h	/^  ::TSize GrowBy, MxVals, Vals;$/;"	m	class:TGLib_OLD::TVecPool
MxVals	glib-core/ds.h	/^  TSize GrowBy, MxVals, Vals;$/;"	m	class:TVecPool
MxVals	glib-core/ds.h	/^  TSizeTy MxVals; \/\/!< Vector capacity. Capacity is the size of allocated storage. If <tt>MxVals==-1<\/tt>, then \\c ValT is not owned by the vector, and it won't free it at destruction.$/;"	m	class:TVec
MxVals	glib-core/shash.h	/^  TInt MxVals, Vals;$/;"	m	class:TSparseTable
MxWidInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> MxWidInf, MxWidNet;   \/\/ cascade width (max number of nodes at any depth d)$/;"	m	class:TCascadeStat	file:
MxWidNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> MxWidInf, MxWidNet;   \/\/ cascade width (max number of nodes at any depth d)$/;"	m	class:TCascadeStat	file:
N	snap-exp/test-dev/Benchmark.cpp	5;"	d	file:
N	snap-exp/test-dev/BenchmarkAshton.cpp	6;"	d	file:
N0	snap-exp/sir.h	/^  double N0, I0;$/;"	m	class:TSirModel
N0B	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSir2Model
N0B	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSirSR2Model
N0M	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSir2Model
N0M	snap-exp/sir.h	/^  double N0M, I0M, N0B, I0B;$/;"	m	class:TSirSR2Model
NApprox	snap-core/anf.h	/^  TInt NApprox;                      \/\/ maintain N parallel approximations (multiple of 8)$/;"	m	class:TGraphAnf
NAttrs	snap-adv/mag.h	/^	TInt NAttrs;$/;"	m	class:TMAGParam
NBits	snap-core/anf.h	/^  TInt NBits, MoreBits, ApproxBytes; \/\/ NBits=logNodes+MoreBits;  MoreBits: additional R bits;  ApproxBytes: Approx\/8;$/;"	m	class:TGraphAnf
NBlocks	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	size_t NBlocks;$/;"	m	class:TSBitSet
NBurnedTmV	snap-core/ff.h	/^  TIntV NBurnedTmV, NBurningTmV, NewBurnedTmV; \/\/ total burned, currently burning, newly burned in current time step$/;"	m	class:TForestFire
NBurningTmV	snap-core/ff.h	/^  TIntV NBurnedTmV, NBurningTmV, NewBurnedTmV; \/\/ total burned, currently burning, newly burned in current time step$/;"	m	class:TForestFire
NCascInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NCascInf, NCascNet;   \/\/ number of cascades$/;"	m	class:TCascadeStat	file:
NCascNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NCascInf, NCascNet;   \/\/ number of cascades$/;"	m	class:TCascadeStat	file:
NDEBUG	glib-core/base.h	175;"	d
NDiamRuns	snap-core/gstat.cpp	/^int TGStat::NDiamRuns = 10;$/;"	m	class:TGStat	file:
NDiamRuns	snap-core/gstat.h	/^  static int NDiamRuns;$/;"	m	class:TGStat
NEQ	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
NETWORKMP_H	snap-core/networkmp.h	2;"	d
NETWORK_H	snap-core/network.h	2;"	d
NEXPS	snap-core/util.h	/^  static const int NEXPS = 25;$/;"	m	class:TStopwatch
NEdges	snap-core/graph.h	/^  TInt MxNId, NEdges;$/;"	m	class:TUNGraph
NEdges	snap-core/network.h	/^  TInt MxNId, NEdges;$/;"	m	class:TUndirNet
NEdges	snap-exp/graphmp-exp.h	/^  TInt MxNId, NEdges;$/;"	m	class:TUNGraphMP
NEqStr	glib-core/lx.cpp	/^const TStr TLxSymStr::NEqStr="<>";$/;"	m	class:TLxSymStr	file:
NFC_	glib-core/unicode.cpp	766;"	d	file:
NFC_	glib-core/unicode.cpp	814;"	d	file:
NFD_	glib-core/unicode.cpp	767;"	d	file:
NFD_	glib-core/unicode.cpp	815;"	d	file:
NFKC_	glib-core/unicode.cpp	768;"	d	file:
NFKC_	glib-core/unicode.cpp	816;"	d	file:
NFKD_	glib-core/unicode.cpp	769;"	d	file:
NFKD_	glib-core/unicode.cpp	817;"	d	file:
NFeatures	snap-adv/circles.h	/^  TInt NFeatures;$/;"	m	class:TGraphAttributes
NFiedlerVector	snap-adv/motifcluster.cpp	/^double MotifCluster::NFiedlerVector(const TSparseColMatrix& W, TFltV& fvec,$/;"	f	class:MotifCluster
NGraph	snap-core/ghash.h	/^  PNGraph NGraph;$/;"	m	class:TSubGraphsEnum
NIDCIDPrH	snap-adv/agmfit.h	/^  THash<TIntPr,TFlt> NIDCIDPrH; \/\/\/< <Node ID, Community ID> pairs (for sampling MCMC moves).$/;"	m	class:TAGMFit
NIDCIDPrS	snap-adv/agmfit.h	/^  THash<TIntPr,TInt> NIDCIDPrS; \/\/\/< <Node ID, Community ID> pairs (for sampling MCMC moves).$/;"	m	class:TAGMFit
NIDComVH	snap-adv/agmfit.h	/^  THash<TInt, TIntSet> NIDComVH; \/\/\/< Node ID -> Communitie IDs the node belongs to.$/;"	m	class:TAGMFit
NIDToIdx	snap-adv/agmattr.h	/^  TIntSet NIDToIdx; \/\/ original node ID vector NIDToIdx[i] = Node ID for index i, NIDToIdx.GetKey(NID) = index for NID$/;"	m	class:TCesna
NIDV	snap-adv/agmdirected.h	/^  TIntV NIDV; \/\/ original node ID vector$/;"	m	class:TCoda
NIDV	snap-adv/agmfast.h	/^  TIntV NIDV; \/\/ original node ID vector$/;"	m	class:TAGMFast
NID_NAME	snap-core/gio.h	/^const TStr NID_NAME = ("NId");$/;"	m	namespace:TSnap
NId	snap-adv/cascdynetinf.h	/^  TInt NId;$/;"	m	class:THitInfo
NId	snap-adv/cascnetinf.h	/^  TInt NId, Parent;$/;"	m	class:THitInfo
NId	snap-adv/ncp.h	/^    int NId(const int i) const { return SweepV[i]; }$/;"	f	class:TLocClustStat::TNodeSweep
NIdDistH	snap-core/bfsdfs.h	/^  TIntH NIdDistH;$/;"	m	class:TBreathFS
NIdDistH	snap-exp/bfs-dev/bfs-dev.h	/^  TIntH NIdDistH;$/;"	m	class:TBreathFS_Test
NIdDistH	snap-exp/bfs-dev/bfs-hybrid.h	/^  TIntH NIdDistH;$/;"	m	class:TBreathFS_Hybrid
NIdDistH	snap-exp/bfs-dev/bfs-parallel.h	/^  TIntH NIdDistH;$/;"	m	class:TBreathFS_Parallel
NIdDistV	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  TIntV NIdDistV;$/;"	m	class:TBreathFS_Hybrid_Test
NIdDistV	snap-exp/bfs-dev/bfs-vector.h	/^  TIntV NIdDistV;$/;"	m	class:TBreathFS_Test
NIdHitH	snap-adv/cascdynetinf.h	/^  THash<TInt, THitInfo> NIdHitH; \/\/ infected nodes$/;"	m	class:TCascade
NIdHitH	snap-adv/cascnetinf.h	/^  THash<TInt, THitInfo> NIdHitH;$/;"	m	class:TCascade
NIdPartCnt	snap-exp/signnet.h	/^  THash<TInt, TTuple<TInt, 5> > NIdPartCnt;$/;"	m	class:THopfield
NIdPartH	snap-exp/signnet.h	/^  TIntH NIdPartH;$/;"	m	class:THopfield
NIdQH	snap-core/cmty.cpp	/^    TIntFltH NIdQH;$/;"	m	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat	file:
NIdSetH	snap-exp/trawling.h	/^  THash<TInt, TIntV> NIdSetH; \/\/ node on the left and the neighbors on the right (contains only nodes with in-deg > MinSup)$/;"	m	class:TTrawling
NIdToBitPosH	snap-core/anf.h	/^  THash<TInt, uint64> NIdToBitPosH;  \/\/ NId to byte(!) offset in BitV$/;"	m	class:TGraphAnf
NIdV	snap-adv/ncp.h	/^  TIntV NIdV, VolV, CutV;  \/\/ Vol=2*edges_inside+cut (vol = sum of the degrees)$/;"	m	class:TLocClust
NIdV	snap-core/cncom.h	/^  TIntV NIdV;$/;"	m	class:TCnCom
NIdV	snap-core/graph.h	/^    TIntV NIdV;$/;"	m	class:TBPGraph::TNode
NIdV	snap-core/graph.h	/^    TIntV NIdV;$/;"	m	class:TUNGraph::TNode
NIdV	snap-core/kcore.h	/^  TIntV NIdV;$/;"	m	class:TKCore
NIdV	snap-core/network.h	/^    TIntV NIdV;$/;"	m	class:TUndirNet::TNode
NIdV	snap-core/timenet.h	/^    TIntV NIdV;$/;"	m	class:TTimeNet::TTmBucket
NIdV	snap-exp/graphmp-exp.h	/^    TIntV NIdV;$/;"	m	class:TUNGraphMP::TNode
NInf	glib-core/dt.cpp	/^const double TFlt::NInf=-DBL_MAX;$/;"	m	class:TFlt	file:
NInf	snap-adv/kronecker.cpp	/^const double TKronMtx::NInf = -DBL_MAX;$/;"	m	class:TKronMtx	file:
NInf	snap-adv/kronecker.h	/^  static const double NInf;$/;"	m	class:TKronMtx
NInf	snap-adv/mag.cpp	/^const double TMAGAffMtx::NInf = -DBL_MAX;$/;"	m	class:TMAGAffMtx	file:
NInf	snap-adv/mag.h	/^  static const double NInf;$/;"	m	class:TMAGAffMtx
NIsoInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NIsoInf, NIsoNet;     \/\/ number of isolated nodes in the cascade$/;"	m	class:TCascadeStat	file:
NIsoNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NIsoInf, NIsoNet;     \/\/ number of isolated nodes in the cascade$/;"	m	class:TCascadeStat	file:
NLfInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NLfInf, NLfNet;       \/\/ number of leaves in a cascade$/;"	m	class:TCascadeStat	file:
NLfNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NLfInf, NLfNet;       \/\/ number of leaves in a cascade$/;"	m	class:TCascadeStat	file:
NNodes	snap-adv/mag.h	/^	TInt NNodes;$/;"	m	class:TMAGParam
NODES_START	snap-core/gio.h	/^const TStr NODES_START = ("#NODES");$/;"	m	namespace:TSnap
NONE	snap-adv/cascdynetinf.h	/^  NONE, \/\/ no regularizer$/;"	e	enum:__anon62
NOP	snap-core/table.h	/^typedef enum {NOT, AND, OR, NOP} TPredOp; $/;"	e	enum:__anon81
NOT	snap-core/table.h	/^typedef enum {NOT, AND, OR, NOP} TPredOp; $/;"	e	enum:__anon81
NR_covsrt	glib-core/xmath.cpp	/^void TLinReg::NR_covsrt($/;"	f	class:TLinReg
NR_gaussj	glib-core/xmath.cpp	/^void TLinReg::NR_gaussj(TFltVV& a, const int& n, TFltVV& b, const int& m){$/;"	f	class:TLinReg
NR_lfit	glib-core/xmath.cpp	/^void TLinReg::NR_lfit(){$/;"	f	class:TLinReg
NR_pythag	glib-core/xmath.cpp	/^double TSvd::NR_pythag(double a, double b){$/;"	f	class:TSvd
NR_svbksb	glib-core/xmath.cpp	/^void TSvd::NR_svbksb($/;"	f	class:TSvd
NR_svdcmp	glib-core/xmath.cpp	/^void TSvd::NR_svdcmp(TFltVV& a, int m, int n, TFltV& w, TFltVV& v){$/;"	f	class:TSvd
NR_svdfit	glib-core/xmath.cpp	/^void TSvd::NR_svdfit(){$/;"	f	class:TSvd
NR_svdvar	glib-core/xmath.cpp	/^void TSvd::NR_svdvar(TFltVV& v, int ma, TFltV& w, TFltVV& cvm){$/;"	f	class:TSvd
NRtInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NRtInf, NRtNet;       \/\/ number of roots in a cascade$/;"	m	class:TCascadeStat	file:
NRtNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> NRtInf, NRtNet;       \/\/ number of roots in a cascade$/;"	m	class:TCascadeStat	file:
NSet	snap-core/cncom.h	/^  TIntSet NSet;$/;"	m	class:TBiConVisitor
NStr	glib-core/dt.cpp	/^const TStr TBool::NStr="N";$/;"	m	class:TBool	file:
NTYPEID_FLAG	snap-exp/mmgraph-exp.h	/^  static const int NTYPEID_FLAG = (1 << NTYPEID_NBITS) - 1;$/;"	m	class:TMNet
NTYPEID_NBITS	snap-exp/mmgraph-exp.h	/^  static const int NTYPEID_NBITS = 3; \/\/ The number of types must be at most 2^NTYPEID_NBITS$/;"	m	class:TMNet
NTypeH	snap-exp/mmgraph-exp.h	/^  THash<TStr, int> NTypeH;$/;"	m	class:TMNet
NULL_VAL	snap-core/gio.h	/^const TStr NULL_VAL = ("__null__");$/;"	m	namespace:TSnap
NUMPY_H	snap-core/numpy.h	2;"	d
Name	snap-adv/cascdynetinf.h	/^  TStr Name;$/;"	m	class:TNodeInfo
Name	snap-adv/cascnetinf.h	/^  TStr Name;$/;"	m	class:TNodeInfo
Name	snap-exp/imdbnet.h	/^  TInt Name, Year, Position; \/\/ movie title or actor name$/;"	m	class:TImdbNode
Name	snap-exp/mmgraph-exp.h	/^    TStr Name;$/;"	m	class:TMNet::TNodeType
NameChSet	glib-core/xml.h	/^  TBSet LetterChSet, DigitChSet, NameChSet, PubidChSet;$/;"	v
NcpV	snap-adv/ncp.h	/^  TVec<TFltPrV> NcpV;$/;"	m	class:TNcpGraphsBase
Nds	glib-core/ds.h	/^  int Nds;$/;"	m	class:TLst
NearDist	snap-exp/lsh.h	/^  int NearDist;$/;"	m	class:TLSHash
NegWgt	snap-adv/agmattr.h	/^  TFlt NegWgt; \/\/ weight of negative example (a pair of nodes without an edge)$/;"	m	class:TCesna
NegWgt	snap-adv/agmdirected.h	/^  TFlt NegWgt; \/\/ weight of negative example (a pair of nodes without an edge)$/;"	m	class:TCoda
NegWgt	snap-adv/agmfast.h	/^  TFlt NegWgt; \/\/ weight of negative example (a pair of nodes without an edge)$/;"	m	class:TAGMFast
NeighborComInit	snap-adv/agmattr.cpp	/^void TCesna::NeighborComInit(TFltIntPrV& NIdPhiV, const int InitComs) {$/;"	f	class:TCesna
NeighborComInit	snap-adv/agmattr.cpp	/^void TCesna::NeighborComInit(const int InitComs) {$/;"	f	class:TCesna
NeighborComInit	snap-adv/agmdirected.cpp	/^void TCoda::NeighborComInit(TFltIntPrV& NIdPhiV, const int InitComs) {$/;"	f	class:TCoda
NeighborComInit	snap-adv/agmdirected.cpp	/^void TCoda::NeighborComInit(const int InitComs) {$/;"	f	class:TCoda
NeighborComInit	snap-adv/agmfast.cpp	/^void TAGMFast::NeighborComInit(const int InitComs) {$/;"	f	class:TAGMFast
NeighborComInit	snap-adv/agmfit.cpp	/^void TAGMFit::NeighborComInit(const int InitComs) {$/;"	f	class:TAGMFit
NeighborTypes	snap-core/mmnet.h	/^  THash<TStr, TBool> NeighborTypes; \/\/ Mapping of the Neighbor\/CrossNets for this mode to whether it requires a one (or two) vectors to store neighbors$/;"	m	class:TModeNet
Net	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Net;$/;"	m	class:TAllNodesList
Net	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Net;$/;"	m	class:TCandidatesList
Net	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Net;$/;"	m	class:TInAdjList
Net	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Net;$/;"	m	class:TOutAdjList
Net	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Net;$/;"	m	class:TAllNodesList
Net	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Net;$/;"	m	class:TInAdjList
Net	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Net;$/;"	m	class:TOutAdjList
Net	snap-core/flow.cpp	/^  PNEANet &Net;$/;"	m	class:TSnap::TPRManager	file:
Net	snap-core/mmnet.h	/^  TMMNet* Net;$/;"	m	class:TCrossNet
Net	snap-core/network.h	/^    TNodeEDatNet *Net;$/;"	m	class:TNodeEDatNet::TNodeI
Net	snap-core/network.h	/^    TNodeEdgeNet *Net;$/;"	m	class:TNodeEdgeNet::TEdgeI
Net	snap-core/network.h	/^    TNodeEdgeNet *Net;$/;"	m	class:TNodeEdgeNet::TNodeI
Net	snap-core/network.h	/^    TNodeNet *Net;$/;"	m	class:TNodeNet::TNodeI
Net	snap-exp/signnet.h	/^  PSignNet Net;$/;"	m	class:THopfield
Net	snap-exp/wgtnet.h	/^  PWgtNet Net;$/;"	m	class:TTop2FriendNet
Net2ModeCommunities	snap-adv/agmdirected.h	/^  PNGraph Net2ModeCommunities(const double MaxJac, const double JacEdge, const bool GetWcc = true) {$/;"	f	class:TCodaAnalyzer
Network	snap-adv/cascdynetinf.h	/^  TStrFltFltHNEDNet Network;$/;"	m	class:TNIBs
Network	snap-exp/signnet.h	/^  PSignNet Network;$/;"	m	class:TEdgeSignPred
Network	snap-exp/signnet.h	/^  PSignNet Network;$/;"	m	class:TSignMicroEvol
Neu	snap-exp/wikinet.h	/^    TInt Sup, Opp, Neu;$/;"	m	struct:TWikiElecBs::TElecSum
New	glib-core/bd.h	/^  static TPt New(){return TObj::New();}$/;"	f	class:TPt
New	glib-core/bits.h	/^  static PBSet New(const int& Bits){return PBSet(new TBSet(Bits));}$/;"	f
New	glib-core/ds.h	/^  static PVecPool New(const ::TSize& ExpectVals=0, const ::TSize& GrowBy=1000000, const bool& FastCopy=false) {$/;"	f	class:TGLib_OLD::TVecPool
New	glib-core/ds.h	/^  static PVecPool New(const TSize& ExpectVals=0, const TSize& GrowBy=1000000, const bool& FastCopy=false) {$/;"	f	class:TVecPool
New	glib-core/ds.h	/^  static TPt<PVec<TVal> > New(){$/;"	f	class:PVec
New	glib-core/ds.h	/^  static TPt<PVec<TVal> > New(const TVec<TVal>& V){$/;"	f	class:PVec
New	glib-core/ds.h	/^  static TPt<PVec<TVal> > New(const int& MxVals, const int& Vals){$/;"	f	class:PVec
New	glib-core/dt.h	/^  static PMem New(const PMem& Mem){return new TMem(*Mem);}$/;"	f
New	glib-core/dt.h	/^  static PMem New(const TMem& Mem){return new TMem(Mem);}$/;"	f
New	glib-core/dt.h	/^  static PMem New(const TStr& Str){return new TMem(Str);}$/;"	f
New	glib-core/dt.h	/^  static PMem New(const int& MxBfL=0){return new TMem(MxBfL);}$/;"	f
New	glib-core/dt.h	/^  static PMem New(const void* Bf, const int& BfL){return new TMem(Bf, BfL);}$/;"	f
New	glib-core/fl.cpp	/^PMIn TMIn::New(const TStr& Str, bool FromFile){$/;"	f	class:TMIn
New	glib-core/fl.cpp	/^PSIn TFIn::New(const TStr& FNm){$/;"	f	class:TFIn
New	glib-core/fl.cpp	/^PSIn TFIn::New(const TStr& FNm, bool& OpenedP){$/;"	f	class:TFIn
New	glib-core/fl.cpp	/^PSIn TMIn::New(const TChA& ChA){$/;"	f	class:TMIn
New	glib-core/fl.cpp	/^PSIn TMIn::New(const TStr& Str){$/;"	f	class:TMIn
New	glib-core/fl.cpp	/^PSIn TMIn::New(const char* CStr){$/;"	f	class:TMIn
New	glib-core/fl.cpp	/^PSIn TMIn::New(const void* _Bf, const uint64& _BfL, const bool& TakeBf){$/;"	f	class:TMIn
New	glib-core/fl.cpp	/^PSInOut TFInOut::New(const TStr& FNm, const TFAccess& FAccess, const bool& CreateIfNo) {$/;"	f	class:TFInOut
New	glib-core/fl.cpp	/^PSOut TFOut::New(const TStr& FNm, const bool& Append){$/;"	f	class:TFOut
New	glib-core/fl.cpp	/^PSOut TFOut::New(const TStr& FNm, const bool& Append, bool& OpenedP){$/;"	f	class:TFOut
New	glib-core/fl.h	/^  static PFRnd New(const TStr& FNm,$/;"	f
New	glib-core/fl.h	/^  static PSOut New(const int& MxBfL=1024){$/;"	f	class:TMOut
New	glib-core/fl.h	/^  static TPt<TSIn> New(){return new TStdIn();}$/;"	f	class:TStdIn
New	glib-core/fl.h	/^  static TPt<TSOut> New(){return new TStdOut();}$/;"	f	class:TStdOut
New	glib-core/hash.h	/^  static PBigStrPool New(TSIn& SIn) { return new TBigStrPool(SIn); }$/;"	f
New	glib-core/hash.h	/^  static PBigStrPool New(TSize _MxBfLen = 0, uint _GrowBy = 16*1024*1024) { return PBigStrPool(new TBigStrPool(_MxBfLen, _GrowBy)); }$/;"	f
New	glib-core/hash.h	/^  static PBigStrPool New(const TStr& fileName) { PSIn SIn = TFIn::New(fileName); return new TBigStrPool(*SIn); }$/;"	f
New	glib-core/hash.h	/^  static TPt<PHash<TKey, TDat> > New(){$/;"	f	class:PHash
New	glib-core/hash.h	/^  static TPt<PHash<TKey, TDat> > New(const THash<TKey, TDat>& H){$/;"	f	class:PHash
New	glib-core/hash.h	/^  static TPt<PHash<TKey, TDat> > New(const int& MxVals, const int& Vals){$/;"	f	class:PHash
New	glib-core/http.h	/^  static PHttpRq New($/;"	f
New	glib-core/http.h	/^  static PHttpRq New(const PSIn& SIn){$/;"	f
New	glib-core/http.h	/^  static PHttpRq New(const PUrl& Url, const int& FetchId=-1){$/;"	f
New	glib-core/json.h	/^  static PJsonVal New(){$/;"	f
New	glib-core/lx.h	/^  static PLxChDef New(const TLxChDefTy& ChDefTy=lcdtUsAscii){$/;"	f
New	glib-core/md5.h	/^  static PMd5 New(){return PMd5(new TMd5());}$/;"	f
New	glib-core/md5.h	/^  static PMd5 New(const PSIn& SIn){return PMd5(new TMd5(SIn));}$/;"	f
New	glib-core/ss.h	/^  static PSs New(){return PSs(new TSs());}$/;"	f
New	glib-core/ssmp.h	/^  static PSsParserMP New(const TStr& FNm, const TSsFmt SsFmt) { return new TSsParserMP(FNm, SsFmt); }$/;"	f
New	glib-core/tm.h	/^	static PTmProfiler New() { return new TTmProfiler; }$/;"	f
New	glib-core/unicode.h	/^PCodecBase TCodecBase::New() {$/;"	f	class:TCodecBase
New	glib-core/url.h	/^  static PUrl New(const TStr& RelUrlStr, const TStr& BaseUrlStr=TStr()){$/;"	f
New	glib-core/xfl.h	/^  static PFFileDesc New(){return PFFileDesc(new TFFileDesc());}$/;"	f
New	glib-core/xmath.cpp	/^PLinReg TLinReg::New(const TFltVV& _XVV, const TFltV& _YV, const TFltV& _SigV){$/;"	f	class:TLinReg
New	glib-core/xmath.cpp	/^PSvd TSvd::New(const TFltVV& _XVV, const TFltV& _YV, const TFltV& _SigV){$/;"	f	class:TSvd
New	glib-core/xmath.h	/^  static PMom New(){return PMom(new TMom());}$/;"	f
New	glib-core/xmath.h	/^  static PMom New(const TFltV& ValV){$/;"	f
New	glib-core/zipfl.cpp	/^PSIn TZipIn::New(const TStr& FNm) {$/;"	f	class:TZipIn
New	glib-core/zipfl.cpp	/^PSIn TZipIn::New(const TStr& FNm, bool& OpenedP){$/;"	f	class:TZipIn
New	glib-core/zipfl.cpp	/^PSOut TZipOut::New(const TStr& FNm){$/;"	f	class:TZipOut
New	snap-adv/kronecker.cpp	/^PKroneckerLL TKroneckerLL::New(const PNGraph& GraphPt, const TKronMtx& ParamMtx, const TIntV& NodeIdPermV, const double& PermPSwapNd) {$/;"	f	class:TKroneckerLL
New	snap-adv/kronecker.cpp	/^PKroneckerLL TKroneckerLL::New(const PNGraph& GraphPt, const TKronMtx& ParamMtx, const double& PermPSwapNd) {$/;"	f	class:TKroneckerLL
New	snap-adv/kronecker.h	/^  static PKroneckerLL New() { return new TKroneckerLL(); }$/;"	f	class:TKroneckerLL
New	snap-core/bignet.h	/^  static PBigNet New(const int& Nodes, const TSize& Edges, const bool& Sources=false) {$/;"	f	class:TBigNet
New	snap-core/graph.h	/^  static PBPGraph New() { return new TBPGraph(); }$/;"	f	class:TBPGraph
New	snap-core/graph.h	/^  static PBPGraph New(const int& Nodes, const int& Edges) { return new TBPGraph(Nodes, Edges); }$/;"	f	class:TBPGraph
New	snap-core/graph.h	/^  static PNEGraph New() { return PNEGraph(new TNEGraph()); }$/;"	f	class:TNEGraph
New	snap-core/graph.h	/^  static PNEGraph New(const int& Nodes, const int& Edges) { return PNEGraph(new TNEGraph(Nodes, Edges)); }$/;"	f	class:TNEGraph
New	snap-core/graph.h	/^  static PNGraph New() { return new TNGraph(); }$/;"	f	class:TNGraph
New	snap-core/graph.h	/^  static PNGraph New(const int& Nodes, const int& Edges) { return new TNGraph(Nodes, Edges); }$/;"	f	class:TNGraph
New	snap-core/graph.h	/^  static PUNGraph New() { return new TUNGraph(); }$/;"	f	class:TUNGraph
New	snap-core/graph.h	/^  static PUNGraph New(const int& Nodes, const int& Edges) { return new TUNGraph(Nodes, Edges); }$/;"	f	class:TUNGraph
New	snap-core/graphmp.h	/^  static PNGraphMP New() { return new TNGraphMP(); }$/;"	f	class:TNGraphMP
New	snap-core/graphmp.h	/^  static PNGraphMP New(const int& Nodes, const int& Edges) { return new TNGraphMP(Nodes, Edges); }$/;"	f	class:TNGraphMP
New	snap-core/gstat.cpp	/^PGStatVec TGStatVec::New(const TTmUnit& _TmUnit) {$/;"	f	class:TGStatVec
New	snap-core/gstat.cpp	/^PGStatVec TGStatVec::New(const TTmUnit& _TmUnit, const TFSet& TakeGrowthStat) {$/;"	f	class:TGStatVec
New	snap-core/gstat.h	/^  static PGStat New(const PNEGraph& Graph, const TSecTm& Time, TFSet StatFSet=TFSet(),$/;"	f	class:TGStat
New	snap-core/gstat.h	/^  static PGStat New(const PNGraph& Graph, const TSecTm& Time, TFSet StatFSet=TFSet(),$/;"	f	class:TGStat
New	snap-core/gstat.h	/^  static PGStat New(const PUNGraph& Graph, const TSecTm& Time, TFSet StatFSet=TFSet(),$/;"	f	class:TGStat
New	snap-core/gstat.h	/^  static PGStat New(const TSecTm& Time=TSecTm(), const TStr& GraphName=TStr()) {$/;"	f	class:TGStat
New	snap-core/gstat.h	/^  template <class PGraph> PGStat New(const PGraph& Graph, const TSecTm& Time, TFSet StatFSet=TFSet(),$/;"	f	class:TGStat
New	snap-core/mmnet.h	/^  static PMMNet New() { return PMMNet(new TMMNet()); }$/;"	f	class:TMMNet
New	snap-core/network.h	/^  static PDirNet New() { return new TDirNet(); }$/;"	f	class:TDirNet
New	snap-core/network.h	/^  static PDirNet New(const int& Nodes, const int& Edges) { return new TDirNet(Nodes, Edges); }$/;"	f	class:TDirNet
New	snap-core/network.h	/^  static PNEANet New() { return PNEANet(new TNEANet()); }$/;"	f	class:TNEANet
New	snap-core/network.h	/^  static PNEANet New(const int& Nodes, const int& Edges) { return PNEANet(new TNEANet(Nodes, Edges)); }$/;"	f	class:TNEANet
New	snap-core/network.h	/^  static PNet New() { return PNet(new TNet()); }$/;"	f	class:TNodeEDatNet
New	snap-core/network.h	/^  static PNet New() { return PNet(new TNet()); }$/;"	f	class:TNodeEdgeNet
New	snap-core/network.h	/^  static PNet New() { return PNet(new TNodeNet()); }$/;"	f	class:TNodeNet
New	snap-core/network.h	/^  static PUndirNet New() { return new TUndirNet(); }$/;"	f	class:TUndirNet
New	snap-core/network.h	/^  static PUndirNet New(const int& Nodes, const int& Edges) { return new TUndirNet(Nodes, Edges); }$/;"	f	class:TUndirNet
New	snap-core/networkmp.h	/^  static PNEANetMP New() { return PNEANetMP(new TNEANetMP()); }$/;"	f	class:TNEANetMP
New	snap-core/networkmp.h	/^  static PNEANetMP New(const int& Nodes, const int& Edges) { return PNEANetMP(new TNEANetMP(Nodes, Edges)); }$/;"	f	class:TNEANetMP
New	snap-core/table.h	/^  static PTable New() { return new TTable(); }$/;"	f	class:TTable
New	snap-core/table.h	/^  static PTable New(TTableContext* Context) { return new TTable(Context); }$/;"	f	class:TTable
New	snap-core/table.h	/^  static PTable New(const PTable Table) { return new TTable(*Table); }$/;"	f	class:TTable
New	snap-core/table.h	/^  static PTable New(const Schema& S, TTableContext* Context) {$/;"	f	class:TTable
New	snap-core/table.h	/^  static PTable New(const THash<TInt,TFlt>& H, const TStr& Col1,$/;"	f	class:TTable
New	snap-core/table.h	/^  static PTable New(const THash<TInt,TInt>& H, const TStr& Col1,$/;"	f	class:TTable
New	snap-core/timenet.h	/^  static PTimeNENet New() { return new TTimeNENet(); }$/;"	f	class:TTimeNENet
New	snap-core/timenet.h	/^  static PTimeNENet New(const int& Nodes, const int& Edges) { return new TTimeNENet(Nodes, Edges); }$/;"	f	class:TTimeNENet
New	snap-core/timenet.h	/^  static PTimeNet New() { return new TTimeNet(); }$/;"	f	class:TTimeNet
New	snap-core/timenet.h	/^  static PTimeNet New(const int& Nodes, const int& Edges) { return new TTimeNet(Nodes, Edges); }$/;"	f	class:TTimeNet
New	snap-exp/alternativetable.h	/^	static PRowBasedTable New(const Schema& S) { return new RowBasedTable(S);}$/;"	f	class:RowBasedTable
New	snap-exp/alternativetable.h	/^  static PExplicitStringTable New() { return new ExplicitStringTable();}$/;"	f	class:ExplicitStringTable
New	snap-exp/alternativetable.h	/^  static PExplicitStringTable New(const Schema& S) { return new ExplicitStringTable(S);}$/;"	f	class:ExplicitStringTable
New	snap-exp/alternativetable.h	/^  static PPhysicalOrderTable New() { return new PhysicalOrderTable(); }$/;"	f	class:PhysicalOrderTable
New	snap-exp/alternativetable.h	/^  static PPhysicalOrderTable New(const Schema& S, PhysicalOrderTableContext& Context) { $/;"	f	class:PhysicalOrderTable
New	snap-exp/graphmp-exp.h	/^  static PUNGraphMP New() { return new TUNGraphMP(); }$/;"	f	class:TUNGraphMP
New	snap-exp/graphmp-exp.h	/^  static PUNGraphMP New(const int& Nodes, const int& Edges) { return new TUNGraphMP(Nodes, Edges); }$/;"	f	class:TUNGraphMP
New	snap-exp/imdbnet.h	/^  static PImdbNet New() { return new TImdbNet(); }$/;"	f	class:TImdbNet
New	snap-exp/memenet.h	/^  static PBlogPostNet New() { return new TBlogPostNet(); }$/;"	f	class:TBlogPostNet
New	snap-exp/memenet.h	/^  static PMemeNet New(const TStr& QtStr=TStr()) { return new TMemeNet(QtStr); }$/;"	f	class:TMemeNet
New	snap-exp/memenet.h	/^  static PMemeNetBs New() { return new TMemeNetBs(); }$/;"	f	class:TMemeNetBs
New	snap-exp/memes.cpp	/^PQuoteBs TQuoteBs::New() {$/;"	f	class:TQuoteBs
New	snap-exp/memes.h	/^  static PClustNet New() { return new TClustNet(); }$/;"	f	class:TClustNet
New	snap-exp/mmgraph-exp.h	/^  static TPt<TMNet<TNode> > New() {$/;"	f	class:TMNet
New	snap-exp/signnet.h	/^  static PSignNet New() { return new TSignNet; }$/;"	f	class:TSignNet
New	snap-exp/wgtnet.h	/^  static PWgtNet New() { return new TWgtNet(); }$/;"	f	class:TWgtNet
New	snap-exp/wikinet.h	/^  static PWikiTalkNet New() { return new TWikiTalkNet; }$/;"	f	class:TWikiTalkNet
New	snap-exp/wikinet.h	/^  static PWikiTimeTalkNet New() { return new TWikiTimeTalkNet; }$/;"	f	class:TWikiTimeTalkNet
NewArr	glib-core/json.cpp	/^PJsonVal TJsonVal::NewArr(const TFltPr& FltPr) {$/;"	f	class:TJsonVal
NewArr	glib-core/json.cpp	/^PJsonVal TJsonVal::NewArr(const TFltV& FltV) {$/;"	f	class:TJsonVal
NewArr	glib-core/json.cpp	/^PJsonVal TJsonVal::NewArr(const TIntV& IntV) {$/;"	f	class:TJsonVal
NewArr	glib-core/json.cpp	/^PJsonVal TJsonVal::NewArr(const TJsonValV& ValV) {$/;"	f	class:TJsonVal
NewArr	glib-core/json.cpp	/^PJsonVal TJsonVal::NewArr(const TStrV& StrV) {$/;"	f	class:TJsonVal
NewArr	glib-core/json.h	/^  static PJsonVal NewArr() { PJsonVal Val = TJsonVal::New(); Val->PutArr(); return Val; }$/;"	f
NewBool	glib-core/json.h	/^  static PJsonVal NewBool(const bool& Bool) { PJsonVal Val = TJsonVal::New(); Val->PutBool(Bool); return Val; }$/;"	f
NewBurnedNIdV	snap-core/ff.h	/^  TIntV BurningNIdV, NewBurnedNIdV, AliveNIdV; \/\/ temporary$/;"	m	class:TUndirFFire
NewBurnedTmV	snap-core/ff.h	/^  TIntV NBurnedTmV, NBurningTmV, NewBurnedTmV; \/\/ total burned, currently burning, newly burned in current time step$/;"	m	class:TForestFire
NewIfZip	glib-core/zipfl.h	/^  static PSIn NewIfZip(const TStr& FNm) { return IsZipFNm(FNm) ? New(FNm) : TFIn::New(FNm); }$/;"	f	class:TZipIn
NewIfZip	glib-core/zipfl.h	/^  static PSOut NewIfZip(const TStr& FNm) { return IsZipFNm(FNm) ? New(FNm) : TFOut::New(FNm); }$/;"	f	class:TZipOut
NewNull	glib-core/json.h	/^  static PJsonVal NewNull() { PJsonVal Val = TJsonVal::New(); Val->PutNull(); return Val; }$/;"	f
NewNum	glib-core/json.h	/^  static PJsonVal NewNum(const double& Num) { PJsonVal Val = TJsonVal::New(); Val->PutNum(Num); return Val; }$/;"	f
NewObj	glib-core/json.h	/^  static PJsonVal NewObj() { PJsonVal Val = TJsonVal::New(); Val->PutObj(); return Val; }$/;"	f
NewObj	glib-core/json.h	/^  static PJsonVal NewObj(const TStr& KeyNm, const PJsonVal& ObjVal) {$/;"	f
NewObj	glib-core/json.h	/^  static PJsonVal NewObj(const TStr& KeyNm, const TStr& ObjVal) {$/;"	f
NewObj	glib-core/json.h	/^  static PJsonVal NewObj(const TStr& KeyNm, const bool& ObjVal) {$/;"	f
NewObj	glib-core/json.h	/^  static PJsonVal NewObj(const TStr& KeyNm, const double& ObjVal) {$/;"	f
NewObj	glib-core/json.h	/^  static PJsonVal NewObj(const TStr& KeyNm, const int& ObjVal) {$/;"	f
NewParamV	snap-exp/sir.h	/^  TFltV ParamV, NewParamV, BestParamV;$/;"	m	class:TEstEpidemParams
NewStr	glib-core/json.h	/^  static PJsonVal NewStr(const TStr& Str) { PJsonVal Val = TJsonVal::New(); Val->PutStr(Str); return Val; }$/;"	f
NewV	glib-core/xmath.h	/^  static void NewV(TMomV& MomV, const int& Moms){$/;"	f
NewVV	glib-core/xmath.h	/^  static void NewVV(TVVec<PMom>& MomVV, const int& XMoms, const int& YMoms){$/;"	f
Next	glib-core/ds.h	/^  TLstNd* Next() const {Assert(this!=NULL); return NextNd;}$/;"	f	class:TLstNd
Next	glib-core/hash.h	/^  THashKeyDatI& Next(){ operator++(1); return *this; }$/;"	f	class:THashKeyDatI
Next	glib-core/hash.h	/^  TInt Next;$/;"	m	class:THashKeyDat
Next	glib-core/hashmp.h	/^  THashMPKeyDatI& Next(){ operator++(1); return *this; }$/;"	f	class:THashMPKeyDatI
Next	glib-core/shash.h	/^  THashSetKeyI& Next() { operator++(1); return *this; }$/;"	f	class:THashSetKeyI
Next	glib-core/shash.h	/^  TInt Next;$/;"	m	class:THashSetKey
Next	glib-core/shash.h	/^  bool Next() { if (FIn.Eof()) { return false; }$/;"	f	class:TKeyDatFl
Next	glib-core/ss.cpp	/^bool TSsParser::Next() { \/\/ split on SplitCh$/;"	f	class:TSsParser
Next	glib-core/ssmp.cpp	/^bool TSsParserMP::Next() { \/\/ split on SplitCh$/;"	f	class:TSsParserMP
Next	glib-core/xfl.cpp	/^bool TFFile::Next(TStr& FNm){$/;"	f	class:TFFile
Next	snap-core/table.cpp	/^TRowIterator& TRowIterator::Next() {$/;"	f	class:TRowIterator
Next	snap-core/table.cpp	/^TRowIteratorWithRemove& TRowIteratorWithRemove::Next() {$/;"	f	class:TRowIteratorWithRemove
Next	snap-core/table.h	/^  PTable Next() { return PTableV[CurrTableIdx++]; }$/;"	f	class:TTableIterator
Next	snap-core/table.h	/^  TIntV Next; \/\/\/< A vector describing the logical order of the rows. ##TTable::Next$/;"	m	class:TTable
Next	snap-exp/alternativetable.cpp	/^ExplicitStringRowIterator& ExplicitStringRowIterator::Next() {$/;"	f	class:ExplicitStringRowIterator
Next	snap-exp/alternativetable.cpp	/^ExplicitStringRowIteratorWithRemove& ExplicitStringRowIteratorWithRemove::Next() {$/;"	f	class:ExplicitStringRowIteratorWithRemove
Next	snap-exp/alternativetable.cpp	/^RowBasedRowIterator& RowBasedRowIterator::Next() {$/;"	f	class:RowBasedRowIterator
Next	snap-exp/alternativetable.h	/^    TIntV Next;$/;"	m	class:RowBasedTable
Next	snap-exp/alternativetable.h	/^  TIntV Next; \/\/\/< A vector describing the logical order of the rows. $/;"	m	class:ExplicitStringTable
Next	snap-exp/arxiv.cpp	/^bool TArxivPaperList::Next() {$/;"	f	class:TArxivPaperList
Next	snap-exp/dblp.cpp	/^bool TDblpLoader::Next() {$/;"	f	class:TDblpLoader
Next	snap-exp/memes.cpp	/^bool TQuoteLoader::Next() {$/;"	f	class:TQuoteLoader
Next	snap-exp/spinn3r.cpp	/^bool TQuoteExtractor::Next() {$/;"	f	class:TQuoteExtractor
Next	snap-exp/spinn3r.cpp	/^bool TSpinn3rFeedItem::Next() {$/;"	f	class:TSpinn3rFeedItem
Next	snap-exp/spinn3r.cpp	/^bool TSpinn3rFullItem::Next() {$/;"	f	class:TSpinn3rFullItem
Next	snap-exp/wikinet.cpp	/^bool TWikiMetaLoader::Next() {$/;"	f	class:TWikiMetaLoader
NextFromIndex	glib-core/ssmp.cpp	/^void TSsParserMP::NextFromIndex(uint64 Index, TVec<char*>& FieldsV) $/;"	f	class:TSsParserMP
NextGraphIterator	snap-core/table.cpp	/^PNEANet TTable::NextGraphIterator() {$/;"	f	class:TTable
NextLn	glib-core/fl.cpp	/^bool TLnRet::NextLn(TStr& LnStr) {$/;"	f	class:TLnRet
NextNd	glib-core/ds.h	/^  TLstNd* NextNd;$/;"	m	class:TLstNd
NextPerm	glib-core/ds.h	/^bool TVec<TVal, TSizeTy>::NextPerm() {$/;"	f	class:TVec
NextPermutation	snap-adv/mag.cpp	/^const bool TMAGFitBern::NextPermutation(TIntV& IndexV) const {$/;"	f	class:TMAGFitBern
NextSgV	snap-core/ghash.h	/^  TSimpleGraphV SgV, NextSgV;$/;"	m	class:TSubGraphsEnum
NextSlow	glib-core/ss.cpp	/^bool TSsParser::NextSlow() { \/\/ split on SplitCh$/;"	f	class:TSsParser
NoContentCnt	snap-exp/spinn3r.h	/^  TInt BadPostCnt, NoContentCnt, NoLatinCnt, GoodLatinCnt, QuotePostCnt, QuotesCnt;$/;"	m	class:TQuoteExtractor
NoDiamStat	snap-core/gstat.cpp	/^TFSet TGStat::NoDiamStat() {$/;"	f	class:TGStat
NoDistrStat	snap-core/gstat.cpp	/^TFSet TGStat::NoDistrStat() {$/;"	f	class:TGStat
NoLatinCnt	snap-exp/spinn3r.h	/^  TInt BadPostCnt, NoContentCnt, NoLatinCnt, GoodLatinCnt, QuotePostCnt, QuotesCnt;$/;"	m	class:TQuoteExtractor
NoRef	glib-core/bd.h	/^  bool NoRef() const {return Refs==0;}$/;"	f	class:TCRef
NoStat	snap-core/gstat.cpp	/^TFSet TGStat::NoStat() {$/;"	f	class:TGStat
NoStr	glib-core/dt.cpp	/^const TStr TBool::NoStr="No";$/;"	m	class:TBool	file:
NoSvdStat	snap-core/gstat.cpp	/^TFSet TGStat::NoSvdStat() {$/;"	f	class:TGStat
NodeAttr	snap-adv/mag.h	/^	TNodeAttr NodeAttr;$/;"	m	class:TMAGParam
NodeAttrIsDeleted	snap-core/network.cpp	/^bool TNEANet::NodeAttrIsDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANet
NodeAttrIsDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::NodeAttrIsDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANetMP
NodeAttrIsFltDeleted	snap-core/network.cpp	/^bool TNEANet::NodeAttrIsFltDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANet
NodeAttrIsFltDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::NodeAttrIsFltDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANetMP
NodeAttrIsIntDeleted	snap-core/network.cpp	/^bool TNEANet::NodeAttrIsIntDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANet
NodeAttrIsIntDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::NodeAttrIsIntDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANetMP
NodeAttrIsIntVDeleted	snap-core/network.cpp	/^bool TNEANet::NodeAttrIsIntVDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANet
NodeAttrIsStrDeleted	snap-core/network.cpp	/^bool TNEANet::NodeAttrIsStrDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANet
NodeAttrIsStrDeleted	snap-core/networkmp.cpp	/^bool TNEANetMP::NodeAttrIsStrDeleted(const int& NId, const TStrIntPrH::TIter& NodeHI) const {$/;"	f	class:TNEANetMP
NodeCheck	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  bool NodeCheck(int SId, int CId, int* MapStateToNode) {$/;"	f	class:TInducedSubGISolver
NodeCheck	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  bool NodeCheck(int SId, int CId, int* MapStateToNode) {$/;"	f	class:TIsoGISolver
NodeCheck	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  bool NodeCheck(int SId, int CId, int* MapStateToNode) {$/;"	f	class:TSubGISolver
NodeDLLDelta	snap-adv/kronecker.cpp	/^double TKroneckerLL::NodeDLLDelta(const int ParamId, const int& NId) const {$/;"	f	class:TKroneckerLL
NodeDat	snap-core/network.h	/^    TNodeData NodeDat;$/;"	m	class:TNodeEDatNet::TNode
NodeDat	snap-core/network.h	/^    TNodeData NodeDat;$/;"	m	class:TNodeEdgeNet::TNode
NodeDat	snap-core/network.h	/^    TNodeData NodeDat;$/;"	m	class:TNodeNet::TNode
NodeFeatures	snap-adv/circles.h	/^  THash<TInt, TIntIntH> NodeFeatures;$/;"	m	class:TGraphAttributes
NodeH	snap-core/bignet.h	/^  TNodeH NodeH;$/;"	m	class:TBigNet
NodeH	snap-core/graph.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TNEGraph
NodeH	snap-core/graph.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TNGraph
NodeH	snap-core/graph.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TUNGraph
NodeH	snap-core/graphmp.h	/^  THashMP<TInt, TNode> NodeH;$/;"	m	class:TNGraphMP
NodeH	snap-core/network.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TDirNet
NodeH	snap-core/network.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TNEANet
NodeH	snap-core/network.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TNodeEDatNet
NodeH	snap-core/network.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TNodeEdgeNet
NodeH	snap-core/network.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TNodeNet
NodeH	snap-core/network.h	/^  THash<TInt, TNode> NodeH;$/;"	m	class:TUndirNet
NodeH	snap-core/networkmp.h	/^  THashMP<TInt, TNode> NodeH;$/;"	m	class:TNEANetMP
NodeH	snap-exp/graphmp-exp.h	/^  THashMP<TInt, TNode> NodeH;$/;"	m	class:TUNGraphMP
NodeH	snap-exp/mmgraph-exp.h	/^    THash<TInt, TNode> NodeH;$/;"	m	class:TMNet::TNodeType
NodeHI	snap-core/bignet.h	/^    THashIter NodeHI;$/;"	m	class:TBigNet::TNodeI
NodeHI	snap-core/graph.h	/^    THashIter NodeHI;$/;"	m	class:TNEGraph::TNodeI
NodeHI	snap-core/graph.h	/^    THashIter NodeHI;$/;"	m	class:TNGraph::TNodeI
NodeHI	snap-core/graph.h	/^    THashIter NodeHI;$/;"	m	class:TUNGraph::TNodeI
NodeHI	snap-core/graphmp.h	/^    THashIter NodeHI;$/;"	m	class:TNGraphMP::TNodeI
NodeHI	snap-core/network.h	/^    THashIter NodeHI;$/;"	m	class:TDirNet::TNodeI
NodeHI	snap-core/network.h	/^    THashIter NodeHI;$/;"	m	class:TNEANet::TNodeI
NodeHI	snap-core/network.h	/^    THashIter NodeHI;$/;"	m	class:TNodeEDatNet::TNodeI
NodeHI	snap-core/network.h	/^    THashIter NodeHI;$/;"	m	class:TNodeEdgeNet::TNodeI
NodeHI	snap-core/network.h	/^    THashIter NodeHI;$/;"	m	class:TNodeNet::TNodeI
NodeHI	snap-core/network.h	/^    THashIter NodeHI;$/;"	m	class:TUndirNet::TNodeI
NodeHI	snap-core/networkmp.h	/^    THashIter NodeHI;$/;"	m	class:TNEANetMP::TNodeI
NodeHI	snap-exp/graphmp-exp.h	/^    THashIter NodeHI;$/;"	m	class:TUNGraphMP::TNodeI
NodeIDs	snap-adv/circles.h	/^  TVec<TInt> NodeIDs;$/;"	m	class:TGraphAttributes
NodeId	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int NodeId;$/;"	m	class:TAllNodesList
NodeId	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int NodeId;$/;"	m	class:TCandidatesList
NodeId	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int NodeId;$/;"	m	class:TInAdjList
NodeId	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int NodeId;$/;"	m	class:TOutAdjList
NodeId	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int NodeId;$/;"	m	class:TAllNodesList
NodeId	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int NodeId;$/;"	m	class:TInAdjList
NodeId	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int NodeId;$/;"	m	class:TOutAdjList
NodeLLDelta	snap-adv/kronecker.cpp	/^double TKroneckerLL::NodeLLDelta(const int& NId) const {$/;"	f	class:TKroneckerLL
NodeNmH	snap-adv/cascdynetinf.h	/^  THash<TInt, TNodeInfo> NodeNmH; \/\/ node info (name, volume), indexed by node id$/;"	m	class:TNIBs
NodeNmH	snap-adv/cascnetinf.h	/^  THash<TInt, TNodeInfo> NodeNmH;$/;"	m	class:TNetInfBs
NodePerm	snap-adv/kronecker.h	/^  TIntV NodePerm;        \/\/ current permutation$/;"	m	class:TKroneckerLL
NodePrCH	snap-core/triad.h	/^  THash<TIntPr, TFlt> NodePrCH; \/\/ pairs of nodes that have non-zero network constraint$/;"	m	class:TNetConstraint
NodeQ	snap-adv/ncp.h	/^  TIntQ NodeQ;$/;"	m	class:TLocClust
NodeTy	snap-core/graph.h	/^    TNodeTy NodeTy; \/\/ remove$/;"	m	class:TBPGraph::TNode
NodeV	glib-core/ds.h	/^  TVec<TTriple<TInt, TIntV, TVal> > NodeV; \/\/ (ParentNodeId, ChildNodeIdV, NodeVal)$/;"	m	class:TTree
Nodes	snap-adv/kronecker.h	/^  TInt Nodes, KronIters;$/;"	m	class:TKroneckerLL
Nodes	snap-adv/ncp.h	/^    TInt Nodes, Edges, CutSz; \/\/ nodes inside, edges inside, edges cut$/;"	m	class:TLocClustStat::TCutInfo
Nodes	snap-adv/ncp.h	/^  int Nodes, Edges2;       \/\/ Nodes, 2*edges in Graph$/;"	m	class:TLocClust
Nodes	snap-core/ghash.h	/^  TInt Nodes;$/;"	m	class:TGraphKey
NodesAttrs	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TNodeData** NodesAttrs;$/;"	m	class:TMatchingMachine
NodesAttrs	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TNodeData** NodesAttrs;$/;"	m	class:TMatchingMachine
NodesList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* NodesList;$/;"	m	class:TCandidatesList
NodesOk	snap-adv/agmdirected.h	/^  TBool NodesOk; \/\/ Node ID is from 0 ~ N-1$/;"	m	class:TCoda
NodesOk	snap-adv/agmfast.h	/^  TBool NodesOk; \/\/ Node ID is from 0 ~ N-1$/;"	m	class:TAGMFast
NofSn	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int NofSn;$/;"	m	class:TMatchingMachine
NofSn	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int NofSn;$/;"	m	class:TMatchingMachine
NolNIdV	snap-exp/linkpred.h	/^  TIntV DstNIdV, NolNIdV;              \/\/ destination and no-link nodes$/;"	m	class:TLpExample
NolNIdV	snap-exp/linkpred.h	/^  TIntV DstNIdV, NolNIdV;$/;"	m	class:__OLD__::TLpExample
NomUId	snap-exp/wikinet.h	/^  TInt UsrId, NomUId, BurUId; \/\/ user, nominator, bureaucrat user-id$/;"	m	class:TWikiElec
NominatedBy	snap-exp/wikinet.h	/^    TStr Usr, RfA, NominatedBy, Bureaucrat;$/;"	m	struct:TWikiElecBs::TElecSum
NonZ	examples/cascades/cascades.cpp	/^  static double NonZ(double C) { return C==0?1.0:C; }$/;"	f	class:TCascadeStat
Norm	glib-core/linalg.cpp	/^double TLinAlg::Norm(const TFltV& x) {$/;"	f	class:TLinAlg
Norm	glib-core/linalg.cpp	/^double TLinAlg::Norm(const TFltVV& X, int ColId) {$/;"	f	class:TLinAlg
Norm	glib-core/linalg.cpp	/^double TLinAlg::Norm(const TIntFltKdV& x) {$/;"	f	class:TLinAlg
Norm2	glib-core/linalg.cpp	/^double TLinAlg::Norm2(const TFltV& x) {$/;"	f	class:TLinAlg
Norm2	glib-core/linalg.cpp	/^double TLinAlg::Norm2(const TFltVV& X, int ColId) {$/;"	f	class:TLinAlg
Norm2	glib-core/linalg.cpp	/^double TLinAlg::Norm2(const TIntFltKdV& x) {$/;"	f	class:TLinAlg
Norm2	snap-adv/agmattr.h	/^  double inline Norm2(const TIntFltH& UV) {$/;"	f	class:TCesna
Norm2	snap-adv/agmdirected.h	/^  double inline Norm2(const TIntFltH& UV) {$/;"	f	class:TCoda
Norm2	snap-adv/agmfast.h	/^  double inline Norm2(const TIntFltH& UV) {$/;"	f	class:TAGMFast
NormConst	snap-adv/mag.h	/^	TFlt NormConst;$/;"	m	class:TMAGFitBern
NormConstH	snap-exp/linkpred.h	/^  THash<TInt, TEdgeGrad> NormConstH;   \/\/ sum f and sum f' for each node$/;"	m	class:__OLD__::TQGraph
NormL1	glib-core/linalg.cpp	/^double TLinAlg::NormL1(const TFltV& x) {$/;"	f	class:TLinAlg
NormL1	glib-core/linalg.cpp	/^double TLinAlg::NormL1(const TIntFltKdV& x) {$/;"	f	class:TLinAlg
NormL1	glib-core/linalg.cpp	/^double TLinAlg::NormL1(double k, const TFltV& x, const TFltV& y) {$/;"	f	class:TLinAlg
NormLinf	glib-core/linalg.cpp	/^double TLinAlg::NormLinf(const TFltV& x) {$/;"	f	class:TLinAlg
NormLinf	glib-core/linalg.cpp	/^double TLinAlg::NormLinf(const TIntFltKdV& x) {$/;"	f	class:TLinAlg
NormMaxTo1	snap-exp/memes.cpp	/^int NormMaxTo1(const TQuote::TTmFltPrV& TmFqV, TFltPrV& OutV, const TSecTm& BegTm) {$/;"	f
NormPeakAt1	snap-exp/memes.cpp	/^void NormPeakAt1(THash<TInt, TFlt>& H) {$/;"	f
Normalize	glib-core/linalg.cpp	/^void TLinAlg::Normalize(TFltV& x) {$/;"	f	class:TLinAlg
Normalize	glib-core/linalg.cpp	/^void TLinAlg::Normalize(TIntFltKdV& x) {$/;"	f	class:TLinAlg
Normalize	snap-adv/mag.cpp	/^double TMAGAffMtx::Normalize() {$/;"	f	class:TMAGAffMtx
Normalize	snap-core/util.cpp	/^void TGUtil::Normalize(TFltPrV& PdfV) {$/;"	f	class:TGUtil
Normalize	snap-core/util.cpp	/^void TGUtil::Normalize(TIntFltKdV& PdfV) {$/;"	f	class:TGUtil
NormalizeAffMtxV	snap-adv/mag.cpp	/^void TMAGFitBern::NormalizeAffMtxV(TMAGAffMtxV& MtxV, const bool UseMu) {$/;"	f	class:TMAGFitBern
NormalizeCodecName	glib-core/unicode.h	/^	static inline TStr NormalizeCodecName(const TStr& name) {$/;"	f	class:TUnicode
NormalizeColName	snap-core/table.h	/^  static TStr NormalizeColName(const TStr& ColName) {$/;"	f	class:TTable
NormalizeColNameV	snap-core/table.h	/^  static TStrV NormalizeColNameV(const TStrV& Cols) {$/;"	f	class:TTable
NormalizeL1	glib-core/linalg.cpp	/^void TLinAlg::NormalizeL1(TFltV& x) {$/;"	f	class:TLinAlg
NormalizeL1	glib-core/linalg.cpp	/^void TLinAlg::NormalizeL1(TIntFltKdV& x) {$/;"	f	class:TLinAlg
NormalizeLinf	glib-core/linalg.cpp	/^void TLinAlg::NormalizeLinf(TFltV& x) {$/;"	f	class:TLinAlg
NormalizeLinf	glib-core/linalg.cpp	/^void TLinAlg::NormalizeLinf(TIntFltKdV& x) {$/;"	f	class:TLinAlg
Notify	glib-core/env.h	/^  PNotify Notify;$/;"	m	class:TEnv
NovN	glib-core/tm.cpp	/^const int TTmInfo::NovN=11; const int TTmInfo::DecN=12;$/;"	m	class:TTmInfo	file:
NovN	glib-core/tm.h	/^  static const int NovN; static const int DecN;$/;"	m	class:TTmInfo
NullCh	glib-core/dt.cpp	/^const char TCh::NullCh=char(0);$/;"	m	class:TCh	file:
NullNotify	glib-core/ut.cpp	/^const PNotify TNotify::NullNotify=TNullNotify::New();$/;"	m	class:TNotify	file:
NullNotify	glib-core/ut.h	/^  static const PNotify NullNotify;$/;"	v
Num	glib-core/json.h	/^  TFlt Num; $/;"	v
NumComs	snap-adv/agmattr.h	/^  TInt NumComs; \/\/ number of communities$/;"	m	class:TCesna
NumComs	snap-adv/agmdirected.h	/^  TInt NumComs; \/\/ number of communities$/;"	m	class:TCoda
NumComs	snap-adv/agmfast.h	/^  TInt NumComs; \/\/ number of communities$/;"	m	class:TAGMFast
NumRows	snap-core/table.h	/^  TInt NumRows; \/\/\/< Number of rows in the table (valid and invalid).$/;"	m	class:TTable
NumRows	snap-exp/alternativetable.h	/^    TInt NumRows; $/;"	m	class:RowBasedTable
NumRows	snap-exp/alternativetable.h	/^  TInt NumRows; \/\/\/< Number of rows in the table (valid and invalid).$/;"	m	class:ExplicitStringTable
NumRows	snap-exp/alternativetable.h	/^  TInt NumRows; \/\/\/< Number of rows in the table (valid and invalid).$/;"	m	class:PhysicalOrderTable
NumValidRows	snap-core/table.h	/^  TInt NumValidRows; \/\/\/< Number of valid rows in the table (i.e. rows that were not logically removed).$/;"	m	class:TTable
NumValidRows	snap-exp/alternativetable.h	/^    TInt NumValidRows; $/;"	m	class:RowBasedTable
NumValidRows	snap-exp/alternativetable.h	/^  TInt NumValidRows; \/\/\/< Number of valid rows in the table (i.e. rows that were not logically removed).$/;"	m	class:ExplicitStringTable
NumVals	glib-core/hashmp.h	/^  TInt NumVals;$/;"	m	class:THashMP
NumpyToTFltV	snap-core/numpy.cpp	/^void NumpyToTFltV(TFltV& FltV, float* FltNumpyVecIn, int n) {$/;"	f	namespace:TSnap
NumpyToTIntV	snap-core/numpy.cpp	/^void NumpyToTIntV(TIntV& IntV, int* IntNumpyVecIn, int n) {$/;"	f	namespace:TSnap
OBJECTS	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^OBJECTS=$(SOURCES:.cpp=.o)$/;"	m
OBJECTS	contrib/unict_univr-risnap/RiToSnap/Makefile	/^OBJECTS=$(SOURCES:.cpp=.o)$/;"	m
OBSG	snap-adv/cascdynetinf.h	/^  OBSG,   \/\/ no decay batch stochastic gradient$/;"	e	enum:__anon60
OEBSG	snap-adv/cascdynetinf.h	/^  OEBSG,  \/\/ exponential decay batch stochastic gradient$/;"	e	enum:__anon60
OESG	snap-adv/cascdynetinf.h	/^  OESG,   \/\/ exponential decay stochastic gradient$/;"	e	enum:__anon60
OFG	snap-adv/cascdynetinf.h	/^  OFG$/;"	e	enum:__anon60
OPS1	snap-exp/test-dev/BenchmarkAshton.cpp	7;"	d	file:
OR	snap-core/table.h	/^typedef enum {NOT, AND, OR, NOP} TPredOp; $/;"	e	enum:__anon81
ORBSG	snap-adv/cascdynetinf.h	/^  ORBSG,  \/\/ rayleigh decay batch stochastic gradient$/;"	e	enum:__anon60
ORSG	snap-adv/cascdynetinf.h	/^  ORSG,  \/\/ rayleigh decay stochastic gradient$/;"	e	enum:__anon60
OSG	snap-adv/cascdynetinf.h	/^  OSG,    \/\/ stochastic gradient$/;"	e	enum:__anon60
OWBSG	snap-adv/cascdynetinf.h	/^  OWBSG,   \/\/ windowed batch stochastic gradient$/;"	e	enum:__anon60
OWESG	snap-adv/cascdynetinf.h	/^  OWESG,  \/\/ windowed exponential decay stochastic gradient$/;"	e	enum:__anon60
OWSG	snap-adv/cascdynetinf.h	/^  OWSG,    \/\/ windowed stochastic gradient$/;"	e	enum:__anon60
ObjPhiMI	snap-adv/mag.cpp	/^const double TMAGFitBern::ObjPhiMI(const double& x, const int& NId, const int& AId, const double& Lambda, const double& Q0, const double& Q1, const TFltVV& CntVV) {$/;"	f	class:TMAGFitBern
OctN	glib-core/tm.cpp	/^const int TTmInfo::SepN=9; const int TTmInfo::OctN=10;$/;"	m	class:TTmInfo	file:
OctN	glib-core/tm.h	/^  static const int SepN; static const int OctN;$/;"	m	class:TTmInfo
Offset	glib-core/shash.h	/^  TVal& Offset(const int& Pos) { return Group[Pos]; }$/;"	f	class:TSparseGroup
Offset	glib-core/shash.h	/^  const TVal& Offset(const int& Pos) const { return Group[Pos]; }$/;"	f	class:TSparseGroup
OffsetToPos	glib-core/shash.h	/^int TSparseGroup<TVal, GroupSize>::OffsetToPos(int Offset) const {$/;"	f	class:TSparseGroup
Ok	glib-core/http.h	/^  bool Ok;$/;"	v
OkStatusCd	glib-core/http.cpp	/^const int THttp::OkStatusCd=200;$/;"	m	class:THttp	file:
OkStatusCd	glib-core/http.h	/^  static const int OkStatusCd;$/;"	m	class:THttp
OnExceptF	glib-core/ut.cpp	/^TExcept::TOnExceptF TExcept::OnExceptF=NULL;$/;"	m	class:TExcept	file:
OnExeStopF	glib-core/bd.cpp	/^TOnExeStop::TOnExeStopF TOnExeStop::OnExeStopF=NULL;$/;"	m	class:TOnExeStop	file:
OnExeStopF	glib-core/bd.h	/^  static TOnExeStopF OnExeStopF;$/;"	m	class:TOnExeStop
OnLn	glib-core/ut.h	/^  static void OnLn(const PNotify& Notify, const TStr& MsgStr){$/;"	f
OnLn	glib-core/ut.h	/^  virtual void OnLn(const TStr& \/*MsgStr*\/){}$/;"	f
OnLnFmt	glib-core/ut.cpp	/^void TNotify::OnLnFmt(const char *FmtStr, ...) {$/;"	f	class:TNotify
OnNotify	glib-core/os.cpp	/^void TSysConsoleNotify::OnNotify(const TNotifyType& Type, const TStr& MsgStr){$/;"	f	class:TSysConsoleNotify
OnNotify	glib-core/ut.cpp	/^void TStdErrNotify::OnNotify(const TNotifyType& Type, const TStr& MsgStr){$/;"	f	class:TStdErrNotify
OnNotify	glib-core/ut.cpp	/^void TStdNotify::OnNotify(const TNotifyType& Type, const TStr& MsgStr){$/;"	f	class:TStdNotify
OnNotify	glib-core/ut.h	/^  static void OnNotify(const PNotify& Notify,$/;"	f
OnNotify	glib-core/ut.h	/^  virtual void OnNotify(const TNotifyType& \/*Type*\/, const TStr& \/*MsgStr*\/){}$/;"	f
OnNotifyFmt	glib-core/ut.cpp	/^void TNotify::OnNotifyFmt(const TNotifyType& Type, const char *FmtStr, ...) {$/;"	f	class:TNotify
OnQuotesExtracted	snap-exp/spinn3r.h	/^  virtual void OnQuotesExtracted(const TQuoteExtractor& QuoteExtractor) { }$/;"	f	class:TQuoteExtractor
OnStatus	glib-core/os.cpp	/^void TSysConsoleNotify::OnStatus(const TStr& MsgStr){$/;"	f	class:TSysConsoleNotify
OnStatus	glib-core/ut.cpp	/^void TLogNotify::OnStatus(const TStr& MsgStr) {$/;"	f	class:TLogNotify
OnStatus	glib-core/ut.cpp	/^void TStdErrNotify::OnStatus(const TStr& MsgStr){$/;"	f	class:TStdErrNotify
OnStatus	glib-core/ut.cpp	/^void TStdNotify::OnStatus(const TStr& MsgStr){$/;"	f	class:TStdNotify
OnStatus	glib-core/ut.h	/^  static void OnStatus(const PNotify& Notify, const TStr& MsgStr){$/;"	f
OnStatus	glib-core/ut.h	/^  virtual void OnStatus(const TStr& \/*MsgStr*\/){}$/;"	f
OnStatus	glib-core/xfl.cpp	/^void TFPathNotify::OnStatus(const TStr& MsgStr) {$/;"	f	class:TFPathNotify
OnStatusFmt	glib-core/ut.cpp	/^void TNotify::OnStatusFmt(const char *FmtStr, ...) {$/;"	f	class:TNotify
OnTxt	glib-core/ut.h	/^  static void OnTxt(const PNotify& Notify, const TStr& MsgStr){$/;"	f
OnTxt	glib-core/ut.h	/^  virtual void OnTxt(const TStr& \/*MsgStr*\/){}$/;"	f
OnTxtFmt	glib-core/ut.cpp	/^void TNotify::OnTxtFmt(const char *FmtStr, ...) {$/;"	f	class:TNotify
OnlySources	snap-core/bignet.h	/^  bool OnlySources() const { return Flags.In(gfSources); }$/;"	f	class:TBigNet
Op	snap-core/table.h	/^		TPredOp Op; \/\/\/< Logical op represented by this node$/;"	m	class:TPredicateNode
Open	glib-core/unicode.h	/^		void Open(const TStr& fileName) { Close(); f = fopen(fileName.CStr(), "rt"); IAssertR(f, fileName); putBackCh = EOF; }$/;"	f	class:TUniChDb::TUcdFileReader
OpnTriadV	snap-exp/signnet.h	/^  TVec<PSignNet> OpnTriadV; \/\/ open triads (also includes isomorphic ones). (0,1) is the closing edge$/;"	m	class:TSignMicroEvol
Opp	snap-exp/wikinet.h	/^    TInt Sup, Opp, Neu;$/;"	m	struct:TWikiElecBs::TElecSum
Optimize	glib-core/dt.cpp	/^void TStr::Optimize(){$/;"	f	class:TStr
Order	snap-core/table.cpp	/^void TTable::Order(const TStrV& OrderBy, TStr OrderColName, TBool ResetRankByMSC, TBool Asc) {$/;"	f	class:TTable
Order	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::Order(const TStrV& OrderBy, TStr OrderColName, TBool Asc) {$/;"	f	class:PhysicalOrderTable
OrderEdgeNodes	snap-core/network.cpp	/^TIntPr TUndirNet::OrderEdgeNodes(const int& SrcNId, const int& DstNId) const{$/;"	f	class:TUndirNet
Ordered	snap-core/table.h	/^	TBool Ordered;$/;"	m	class:GroupStmt
OrphanProb	snap-core/ff.h	/^  TFlt Take2AmbProb, OrphanProb;$/;"	m	class:TFfGGen
OrtoIterSVD	glib-core/linalg.cpp	/^void TSparseSVD::OrtoIterSVD(const TMatrix& Matrix,$/;"	f	class:TSparseSVD
OtherLStr	snap-exp/wikinet.h	/^  TChA MainLStr, TalkLStr, UserLStr, UserTalkLStr, OtherLStr, ExternalLStr; \/\/ links to other namespaces and external links$/;"	m	class:TWikiMetaLoader
OutCmtyValHV	snap-adv/agmdirected.h	/^  TVec<TIntFltH> OutCmtyValHV;$/;"	m	class:TCodaAnalyzer
OutDeg	snap-core/bignet.h	/^    int InDeg, OutDeg, *InNIdV, *OutNIdV; \/\/ if undirected, InNIdV==OutNIdV$/;"	m	class:TBigNet::TNodeI
OutDeg	snap-exp/mmgraph-exp.h	/^  TInt InDeg, OutDeg;$/;"	m	class:TCVNode
OutDeg	snap-exp/mmgraph-exp.h	/^  TInt InDeg, OutDeg;$/;"	m	class:TSVNode
OutDegInf	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> OutDegInf, OutDegNet; \/\/ average out-degree of a cascade$/;"	m	class:TCascadeStat	file:
OutDegNet	examples/cascades/cascades.cpp	/^  THash<TFlt, TMom> OutDegInf, OutDegNet; \/\/ average out-degree of a cascade$/;"	m	class:TCascadeStat	file:
OutEIdV	snap-core/graph.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNEGraph::TNode
OutEIdV	snap-core/network.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNEANet::TNode
OutEIdV	snap-core/network.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNodeEdgeNet::TNode
OutEIdV	snap-core/networkmp.h	/^    TIntV InEIdV, OutEIdV;$/;"	m	class:TNEANetMP::TNode
OutEIdV	snap-exp/mmgraph-exp.h	/^  TIntV InEIdV, OutEIdV; \/\/ Vectors of EIds$/;"	m	class:TMVNode
OutEIdV	snap-exp/mmgraph-exp.h	/^  TIntV InEIdV, OutEIdV;$/;"	m	class:TCVNode
OutEIdVV	snap-exp/mmgraph-exp.h	/^  TVec<TIntV > InEIdVV, OutEIdVV;$/;"	m	class:TSVNode
OutETypeIdV	snap-exp/mmgraph-exp.h	/^  TIntV InETypeIdV, OutETypeIdV; \/\/ Vectors of ETypeIds$/;"	m	class:TMVNode
OutETypes	snap-exp/mmgraph-exp.h	/^  TVec<TIntV> OutETypes;$/;"	m	class:TMNet
OutEdgesSizes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* OutEdgesSizes;$/;"	m	class:TMatchingMachine
OutEdgesSizes	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* OutEdgesSizes;				\/\/indexed by state_id$/;"	m	class:TMatchingMachine
OutFNmPref	snap-exp/spinn3r.h	/^  TStr OutFNmPref;$/;"	m	class:TQuoteExtractor
OutNIdV	snap-core/bignet.h	/^    int InDeg, OutDeg, *InNIdV, *OutNIdV; \/\/ if undirected, InNIdV==OutNIdV$/;"	m	class:TBigNet::TNodeI
OutNIdV	snap-core/graph.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TNGraph::TNode
OutNIdV	snap-core/graphmp.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TNGraphMP::TNode
OutNIdV	snap-core/network.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TDirNet::TNode
OutNIdV	snap-core/network.h	/^    TIntV InNIdV, OutNIdV;$/;"	m	class:TNodeNet::TNode
OutNIdV	snap-core/network.h	/^    TNIdDatPrV OutNIdV;$/;"	m	class:TNodeEDatNet::TNode
OutPlusPH	snap-exp/signnet.h	/^    TIntH OutPlusPH, InPlusPH;  \/\/ histogram of out-\/in- plus probability$/;"	m	struct:TSignMicroEvol::TCloseStat
OutSumWgt	snap-exp/signnet.h	/^    TFlt OutSumWgt, OutVarSq;   \/\/ sum p+, sum p*(1-p) (out plus prob)$/;"	m	struct:TSignMicroEvol::TCloseStat
OutTypeDegV	snap-exp/mmgraph-exp.h	/^  TIntV InTypeDegV, OutTypeDegV;$/;"	m	class:TCVNode
OutTypeIndexV	snap-exp/mmgraph-exp.h	/^  TIntV InTypeIndexV, OutTypeIndexV;$/;"	m	class:TCVNode
OutVId	snap-core/bignet.h	/^    TInt OutVId; $/;"	m	class:TBigNet::TNode
OutValV	snap-exp/sir.h	/^  TVec<TFltV> OutValV; \/\/ S, I$/;"	m	class:TSirModel
OutValV	snap-exp/sir.h	/^  TVec<TFltV> OutValV;$/;"	m	class:TSir2Model
OutValV	snap-exp/sir.h	/^  TVec<TFltV> OutValV;$/;"	m	class:TSirSR2Model
OutVarSq	snap-exp/signnet.h	/^    TFlt OutSumWgt, OutVarSq;   \/\/ sum p+, sum p*(1-p) (out plus prob)$/;"	m	struct:TSignMicroEvol::TCloseStat
OwnBf	glib-core/fl.h	/^  bool OwnBf;$/;"	m	class:TMOut
PARALLEL	snap-exp/test-dev/Makefile	/^PARALLEL = ParJoinTest ParSelectTest ParSelect2Test ParGroupAggrTest ParToGraphTest$/;"	m
PAscFltIntKdLN	glib-core/ds.h	/^typedef TLstNd<TAscFltIntKd>* PAscFltIntKdLN;$/;"	t
PAscFltV	glib-core/ds.h	/^typedef TPt<TAscFltVP> PAscFltV;$/;"	t
PBPGraph	snap-core/graph.h	/^typedef TPt<TBPGraph> PBPGraph;$/;"	t
PBigNet	snap-core/bignet.h	/^  typedef TPt<TBigNet<TNodeData, IsDir> > PBigNet;$/;"	t	class:TBigNet
PBlogPostNet	snap-exp/memenet.h	/^typedef TPt<TBlogPostNet> PBlogPostNet;$/;"	t
PCVNet	snap-exp/mmgraph-exp.h	/^typedef TPt<TCVNet> PCVNet;$/;"	t
PClustNet	snap-exp/memes.h	/^typedef TPt<TClustNet>  PClustNet;$/;"	t
PCluster	snap-adv/circles.h	/^typedef TPt<TCluster> PCluster;$/;"	t
PCluster	snap-exp/circles/circles.h	/^typedef TPt<TCluster> PCluster;$/;"	t
PCodecBase	glib-core/unicode.h	/^typedef TPt<TCodecBase> PCodecBase;$/;"	t
PDirNet	snap-core/network.h	/^typedef TPt<TDirNet> PDirNet;$/;"	t
PExplicitStringTable	snap-exp/alternativetable.h	/^typedef TPt<ExplicitStringTable> PExplicitStringTable;$/;"	t
PFltIntKdLN	glib-core/ds.h	/^typedef TLstNd<TFltIntKd>* PFltIntKdLN;$/;"	t
PFltLN	glib-core/ds.h	/^typedef TLstNd<TFlt>* PFltLN;$/;"	t
PFltNENet	snap-core/network.h	/^typedef TPt<TFltNENet> PFltNENet;$/;"	t
PFltNNet	snap-core/network.h	/^typedef TPt<TFltNNet> PFltNNet;$/;"	t
PFltV	glib-core/ds.h	/^typedef TPt<TFltVP> PFltV;$/;"	t
PGStat	snap-core/gstat.h	/^typedef TPt<TGStat> PGStat;$/;"	t
PGStatVec	snap-core/gstat.h	/^typedef TPt<TGStatVec> PGStatVec;$/;"	t
PGStatVec	snap-core/timenet.h	/^typedef TPt<TGStatVec> PGStatVec;$/;"	t
PGetCols	glib-core/linalg.h	/^    int PGetCols() const { return ColN; }$/;"	f	class:TFullColMatrix
PGetCols	glib-core/linalg.h	/^    int PGetCols() const { return ColN; }$/;"	f	class:TSparseColMatrix
PGetCols	glib-core/linalg.h	/^    int PGetCols() const { return ColN; }$/;"	f	class:TSparseRowMatrix
PGetCols	snap-core/gsvd.h	/^  int PGetCols() const { return Graph->GetNodes(); }$/;"	f	class:TNGraphMtx
PGetCols	snap-core/gsvd.h	/^  int PGetCols() const { return Graph->GetNodes(); }$/;"	f	class:TUNGraphMtx
PGetRows	glib-core/linalg.h	/^    int PGetRows() const { return RowN; }$/;"	f	class:TFullColMatrix
PGetRows	glib-core/linalg.h	/^    int PGetRows() const { return RowN; }$/;"	f	class:TSparseColMatrix
PGetRows	glib-core/linalg.h	/^    int PGetRows() const { return RowN; }$/;"	f	class:TSparseRowMatrix
PGetRows	snap-core/gsvd.h	/^  int PGetRows() const { return Graph->GetNodes(); }$/;"	f	class:TNGraphMtx
PGetRows	snap-core/gsvd.h	/^  int PGetRows() const { return Graph->GetNodes(); }$/;"	f	class:TUNGraphMtx
PGraphAttributes	snap-adv/circles.h	/^typedef TPt<TGraphAttributes> PGraphAttributes;$/;"	t
PGraphAttributes	snap-exp/circles/circles.h	/^typedef TPt<TGraphAttributes> PGraphAttributes;$/;"	t
PGrowthStat	snap-core/timenet.h	/^typedef TPt<TGrowthStat> PGrowthStat;$/;"	t
PHash	glib-core/hash.h	/^  PHash<TKey, TDat>(): H(){}$/;"	f	class:PHash
PHash	glib-core/hash.h	/^  PHash<TKey, TDat>(const THash<TKey, TDat>& _V): H(_V){}$/;"	f	class:PHash
PHash	glib-core/hash.h	/^  PHash<TKey, TDat>(const int& MxVals, const int& Vals): H(MxVals, Vals){}$/;"	f	class:PHash
PHash	glib-core/hash.h	/^  explicit PHash<TKey, TDat>(TSIn& SIn): H(SIn){}$/;"	f	class:PHash
PHash	glib-core/hash.h	/^class PHash{$/;"	c
PImdbNet	snap-exp/imdbnet.h	/^typedef TPt<TImdbNet> PImdbNet;$/;"	t
PInf	glib-core/dt.cpp	/^const double TFlt::PInf=+DBL_MAX;$/;"	m	class:TFlt	file:
PIntFltNEDNet	snap-core/network.h	/^typedef TPt<TIntFltNEDNet> PIntFltNEDNet;$/;"	t
PIntKdLN	glib-core/ds.h	/^typedef TLstNd<TIntKd>* PIntKdLN;$/;"	t
PIntLN	glib-core/ds.h	/^typedef TLstNd<TInt>* PIntLN;$/;"	t
PIntNEDNet	snap-core/network.h	/^typedef TPt<TIntNEDNet> PIntNEDNet;$/;"	t
PIntNENet	snap-core/network.h	/^typedef TPt<TIntNENet> PIntNENet;$/;"	t
PIntNNet	snap-core/network.h	/^typedef TPt<TIntNNet> PIntNNet;$/;"	t
PIntVecPool	glib-core/ds.h	/^typedef TPt<TIntVecPool> PIntVecPool;$/;"	t
PKroneckerLL	snap-adv/kronecker.h	/^typedef TPt<TKroneckerLL> PKroneckerLL;$/;"	t
PLogRegPredict	snap-adv/agm.h	/^typedef TPt<TLogRegPredict> PLogRegPredict;$/;"	t
PLstNd	glib-core/ds.h	/^  typedef TLstNd<TVal>* PLstNd;$/;"	t	class:TLst
PMIn	glib-core/fl.h	/^typedef TPt<TMIn> PMIn;$/;"	t
PMMNet	snap-core/mmnet.h	/^typedef TPt<TMMNet> PMMNet;$/;"	t
PMVNet	snap-exp/mmgraph-exp.h	/^typedef TPt<TMVNet> PMVNet;$/;"	t
PMemeNet	snap-exp/memenet.h	/^typedef TPt<TMemeNet> PMemeNet;$/;"	t
PMemeNetBs	snap-exp/memenet.h	/^typedef TPt<TMemeNetBs> PMemeNetBs;$/;"	t
PMultiply	glib-core/linalg.cpp	/^void TFullColMatrix::PMultiply(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TFullColMatrix
PMultiply	glib-core/linalg.cpp	/^void TFullColMatrix::PMultiply(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TFullColMatrix
PMultiply	glib-core/linalg.cpp	/^void TSparseColMatrix::PMultiply(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TSparseColMatrix
PMultiply	glib-core/linalg.cpp	/^void TSparseColMatrix::PMultiply(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TSparseColMatrix
PMultiply	glib-core/linalg.cpp	/^void TSparseRowMatrix::PMultiply(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TSparseRowMatrix
PMultiply	glib-core/linalg.cpp	/^void TSparseRowMatrix::PMultiply(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TSparseRowMatrix
PMultiply	snap-core/gsvd.cpp	/^void TNGraphMtx::PMultiply(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TNGraphMtx
PMultiply	snap-core/gsvd.cpp	/^void TNGraphMtx::PMultiply(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TNGraphMtx
PMultiply	snap-core/gsvd.cpp	/^void TUNGraphMtx::PMultiply(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TUNGraphMtx
PMultiply	snap-core/gsvd.cpp	/^void TUNGraphMtx::PMultiply(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TUNGraphMtx
PMultiplyT	glib-core/linalg.cpp	/^void TFullColMatrix::PMultiplyT(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TFullColMatrix
PMultiplyT	glib-core/linalg.cpp	/^void TFullColMatrix::PMultiplyT(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TFullColMatrix
PMultiplyT	glib-core/linalg.cpp	/^void TSparseColMatrix::PMultiplyT(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TSparseColMatrix
PMultiplyT	glib-core/linalg.cpp	/^void TSparseColMatrix::PMultiplyT(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TSparseColMatrix
PMultiplyT	glib-core/linalg.cpp	/^void TSparseRowMatrix::PMultiplyT(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TSparseRowMatrix
PMultiplyT	glib-core/linalg.cpp	/^void TSparseRowMatrix::PMultiplyT(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TSparseRowMatrix
PMultiplyT	snap-core/gsvd.cpp	/^void TNGraphMtx::PMultiplyT(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TNGraphMtx
PMultiplyT	snap-core/gsvd.cpp	/^void TNGraphMtx::PMultiplyT(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TNGraphMtx
PMultiplyT	snap-core/gsvd.cpp	/^void TUNGraphMtx::PMultiplyT(const TFltV& Vec, TFltV& Result) const {$/;"	f	class:TUNGraphMtx
PMultiplyT	snap-core/gsvd.cpp	/^void TUNGraphMtx::PMultiplyT(const TFltVV& B, int ColId, TFltV& Result) const {$/;"	f	class:TUNGraphMtx
PNEANet	snap-core/network.h	/^typedef TPt<TNEANet> PNEANet;$/;"	t
PNEANetMP	snap-core/networkmp.h	/^typedef TPt<TNEANetMP> PNEANetMP;$/;"	t
PNEGraph	snap-core/graph.h	/^typedef TPt<TNEGraph> PNEGraph;$/;"	t
PNGraph	snap-core/graph.h	/^typedef TPt<TNGraph> PNGraph;$/;"	t
PNGraphMP	snap-core/graphmp.h	/^typedef TPt<TNGraphMP> PNGraphMP;$/;"	t
PNet	snap-core/bignet.h	/^  typedef TPt<TNet> PNet;$/;"	t	class:TBigNet
PNet	snap-core/graph.h	/^  typedef TPt<TBPGraph> PNet;$/;"	t	class:TBPGraph
PNet	snap-core/graph.h	/^  typedef TPt<TNEGraph> PNet;$/;"	t	class:TNEGraph
PNet	snap-core/graph.h	/^  typedef TPt<TNGraph> PNet;$/;"	t	class:TNGraph
PNet	snap-core/graph.h	/^  typedef TPt<TUNGraph> PNet;$/;"	t	class:TUNGraph
PNet	snap-core/graphmp.h	/^  typedef TPt<TNGraphMP> PNet;$/;"	t	class:TNGraphMP
PNet	snap-core/network.h	/^  typedef TPt<TDirNet> PNet;$/;"	t	class:TDirNet
PNet	snap-core/network.h	/^  typedef TPt<TNEANet> PNet;$/;"	t	class:TNEANet
PNet	snap-core/network.h	/^  typedef TPt<TNet> PNet;$/;"	t	class:TNodeEDatNet
PNet	snap-core/network.h	/^  typedef TPt<TNet> PNet;$/;"	t	class:TNodeEdgeNet
PNet	snap-core/network.h	/^  typedef TPt<TNet> PNet;$/;"	t	class:TNodeNet
PNet	snap-core/network.h	/^  typedef TPt<TUndirNet> PNet;$/;"	t	class:TUndirNet
PNet	snap-core/networkmp.h	/^  typedef TPt<TNEANetMP> PNet;$/;"	t	class:TNEANetMP
PNet	snap-core/timenet.h	/^  typedef TPt<TNodeEdgeNet<TSecTm, TSecTm> > PNet;$/;"	t	class:TTimeNENet
PNet	snap-core/timenet.h	/^  typedef TPt<TNodeNet<TSecTm> > PNet;$/;"	t	class:TTimeNet
PNet	snap-exp/imdbnet.h	/^  typedef TPt<TNodeNet<TImdbNode> > PNet;$/;"	t	class:TImdbNet
PNet	snap-exp/linkpred.h	/^  typedef TPt<TNodeEDatNet<TInt, TEdgeGrad> > PNet;$/;"	t	class:TLpExample
PNet	snap-exp/mmgraph-exp.h	/^  typedef TPt<TMNet> PNet;$/;"	t	class:TMNet
PNoCom	snap-adv/agmattr.h	/^  TFlt PNoCom; \/\/ base probability \\varepsilon (edge probability between a pair of nodes sharing no community$/;"	m	class:TCesna
PNoCom	snap-adv/agmdirected.h	/^  TFlt PNoCom; \/\/ base probability \\varepsilon (edge probability between a pair of nodes sharing no community$/;"	m	class:TCoda
PNoCom	snap-adv/agmfast.h	/^  TFlt PNoCom; \/\/ base probability \\varepsilon (edge probability between a pair of nodes sharing no community$/;"	m	class:TAGMFast
PNoCom	snap-adv/agmfit.h	/^  TFlt PNoCom; \/\/\/< Probability of edge when two nodes share no community (epsilon in the paper).$/;"	m	class:TAGMFit
POW	snap-adv/cascdynetinf.h	/^  POW, \/\/ powerlaw$/;"	e	enum:__anon58
PPhysicalOrderTable	snap-exp/alternativetable.h	/^typedef TPt<PhysicalOrderTable> PPhysicalOrderTable;$/;"	t
PQtDomNet	snap-exp/memes.h	/^typedef TPt<TQtDomNet> PQtDomNet;$/;"	t
PQuoteBs	snap-exp/memes.h	/^typedef TPt<TQuoteBs> PQuoteBs;$/;"	t
PRankH	snap-exp/linkpred.h	/^  THash<TInt, TFlt> PRankH;$/;"	m	class:TLpExample
PRankH	snap-exp/linkpred.h	/^  THash<TInt, TFlt> PRankH;$/;"	m	class:__OLD__::TQGraph
PRowBasedTable	snap-exp/alternativetable.h	/^typedef TPt<RowBasedTable> PRowBasedTable;$/;"	t
PSIn	glib-core/fl.h	/^typedef TPt<TSIn> PSIn;$/;"	t
PSInOut	glib-core/fl.h	/^typedef TPt<TSInOut> PSInOut;$/;"	t
PSOut	glib-core/fl.h	/^typedef TPt<TSOut> PSOut;$/;"	t
PSVNet	snap-exp/mmgraph-exp.h	/^typedef TPt<TSVNet> PSVNet;$/;"	t
PSignNet	snap-exp/signnet.h	/^typedef TPt<TSignNet> PSignNet;$/;"	t
PStrFltFltHNEDNet	snap-adv/cascdynetinf.h	/^typedef TPt<TStrFltFltHNEDNet> PStrFltFltHNEDNet;$/;"	t
PStrFltNEDNet	snap-adv/cascdynetinf.h	/^typedef TPt<TStrFltNEDNet> PStrFltNEDNet;$/;"	t
PStrIntNEDNet	snap-core/network.h	/^typedef TPt<TStrIntNEDNet> PStrIntNEDNet;$/;"	t
PStrLN	glib-core/ds.h	/^typedef TLstNd<TStr>* PStrLN;$/;"	t
PStrNNet	snap-core/network.h	/^typedef TPt<TStrNNet> PStrNNet;$/;"	t
PStrV	glib-core/ds.h	/^typedef TPt<TStrVP> PStrV;$/;"	t
PTable	snap-core/table.h	/^typedef TPt<TTable> PTable;$/;"	t
PTableV	snap-core/table.h	/^  TVec<PTable> PTableV; \/\/\/< Vector of TTables which are to be iterated over.$/;"	m	class:TTableIterator
PTagNm	glib-core/html.cpp	/^const TStr THtmlTok::PTagNm="<P>";$/;"	m	class:THtmlTok	file:
PTimeNENet	snap-core/timenet.h	/^typedef TPt<TTimeNENet> PTimeNENet;$/;"	t
PTimeNet	snap-core/timenet.h	/^typedef TPt<TTimeNet> PTimeNet;$/;"	t
PTransitionNet	snap-exp/signnet.h	/^  typedef TPt<TTransitionNet> PTransitionNet;$/;"	t	class:TSignMicroEvol
PUNGraph	snap-core/graph.h	/^typedef TPt<TUNGraph> PUNGraph;$/;"	t
PUNGraphMP	snap-exp/graphmp-exp.h	/^typedef TPt<TUNGraphMP> PUNGraphMP;$/;"	t
PUndirNet	snap-core/network.h	/^typedef TPt<TUndirNet> PUndirNet;$/;"	t
PVPool	snap-core/bignet.h	/^  typedef TPt<TVPool> PVPool;$/;"	t	class:TBigNet
PVec	glib-core/ds.h	/^  PVec<TVal>(): V(){}$/;"	f	class:PVec
PVec	glib-core/ds.h	/^  PVec<TVal>(const PVec<TVal>& Vec): V(Vec.V){}$/;"	f	class:PVec
PVec	glib-core/ds.h	/^  PVec<TVal>(const TVec<TVal>& _V): V(_V){}$/;"	f	class:PVec
PVec	glib-core/ds.h	/^  PVec<TVal>(const int& MxVals, const int& Vals): V(MxVals, Vals){}$/;"	f	class:PVec
PVec	glib-core/ds.h	/^  explicit PVec<TVal>(TSIn& SIn): V(SIn){}$/;"	f	class:PVec
PVec	glib-core/ds.h	/^class PVec{$/;"	c
PVecPool	glib-core/ds.h	/^  typedef TPt<TVecPool<TVal, TSizeTy> > PVecPool;$/;"	t	class:TVecPool
PVecPool	glib-core/ds.h	/^  typedef TPt<TVecPool<TVal> > PVecPool;$/;"	t	class:TGLib_OLD::TVecPool
PWgtNet	snap-exp/wgtnet.h	/^typedef TPt<TWgtNet> PWgtNet;$/;"	t
PWikiTalkNet	snap-exp/wikinet.h	/^typedef TPt<TWikiTalkNet> PWikiTalkNet;$/;"	t
PWikiTimeTalkNet	snap-exp/wikinet.h	/^typedef TPt<TWikiTimeTalkNet> PWikiTimeTalkNet;$/;"	t
Pack	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Pack(){$/;"	f	class:TVec
Pack	glib-core/hash.h	/^  void Pack(){KeyDatV.Pack();}$/;"	f	class:THash
Pack	glib-core/hashmp.h	/^  void Pack(){Table.Pack();}$/;"	f	class:THashMP
Pack	glib-core/shash.h	/^  void Pack() {KeyV.Pack(); }$/;"	f	class:THashSet
Pack	snap-core/ghash.h	/^  void Pack() { GraphH.Pack(); }$/;"	f	class:TGHash
PackNIdV	snap-core/graph.h	/^    void PackNIdV() { InNIdV.Pack(); }$/;"	f	class:TNGraph::TNode
PackNIdV	snap-core/graph.h	/^    void PackNIdV() { NIdV.Pack(); }$/;"	f	class:TBPGraph::TNode
PackNIdV	snap-core/graph.h	/^    void PackNIdV() { NIdV.Pack(); }$/;"	f	class:TUNGraph::TNode
PackNIdV	snap-core/graphmp.h	/^    void PackNIdV() { InNIdV.Pack(); }$/;"	f	class:TNGraphMP::TNode
PackNIdV	snap-core/network.h	/^    void PackNIdV() { InNIdV.Pack(); }$/;"	f	class:TDirNet::TNode
PackNIdV	snap-core/network.h	/^    void PackNIdV() { NIdV.Pack(); }$/;"	f	class:TUndirNet::TNode
PackNIdV	snap-exp/graphmp-exp.h	/^    void PackNIdV() { NIdV.Pack(); }$/;"	f	class:TUNGraphMP::TNode
PackOutNIdV	snap-core/graph.h	/^    void PackOutNIdV() { NIdV.Pack(); }$/;"	f	class:TBPGraph::TNode
PackOutNIdV	snap-core/graph.h	/^    void PackOutNIdV() { NIdV.Pack(); }$/;"	f	class:TUNGraph::TNode
PackOutNIdV	snap-core/graph.h	/^    void PackOutNIdV() { OutNIdV.Pack(); }$/;"	f	class:TNGraph::TNode
PackOutNIdV	snap-core/graphmp.h	/^    void PackOutNIdV() { OutNIdV.Pack(); }$/;"	f	class:TNGraphMP::TNode
PackOutNIdV	snap-core/network.h	/^    void PackOutNIdV() { NIdV.Pack(); }$/;"	f	class:TUndirNet::TNode
PackOutNIdV	snap-core/network.h	/^    void PackOutNIdV() { OutNIdV.Pack(); }$/;"	f	class:TDirNet::TNode
PackOutNIdV	snap-exp/graphmp-exp.h	/^    void PackOutNIdV() { NIdV.Pack(); }$/;"	f	class:TUNGraphMP::TNode
PageCnt	snap-exp/wikinet.h	/^  int PageCnt;  TExeTm ExeTm;$/;"	m	class:TWikiMetaHist
PageHtmlStr	snap-exp/spinn3r.h	/^  TChA PageHtmlStr;$/;"	m	class:TSpinn3rFullItem
PageId	snap-exp/wikinet.h	/^  int PageId, RevId, UsrId;$/;"	m	class:TWikiMetaHist
PageRankExp	snap-exp/multimodal-dev/benchmark-util.cpp	/^void PageRankExp(const PGraph& Graph, const int nExps, TIntFltH& PageRankResults) {$/;"	f
Param	snap-adv/mag.h	/^	TMAGParam<TMAGNodeBern> Param;$/;"	m	class:TMAGFitBern
ParamH	snap-exp/sir.h	/^  TVec<THash<TFlt,TInt> > ParamH; \/\/ posterior distribution histograms$/;"	m	class:TEstEpidemParams
ParamMnMnRngV	snap-exp/sir.h	/^  TFltTrV ParamMnMnRngV;$/;"	m	class:TSir2Model
ParamMnMnRngV	snap-exp/sir.h	/^  TFltTrV ParamMnMnRngV;$/;"	m	class:TSirModel
ParamMnMnRngV	snap-exp/sir.h	/^  TFltTrV ParamMnMnRngV;$/;"	m	class:TSirSR2Model
ParamMnMxStepV	snap-exp/sir.h	/^  TFltTrV ParamMnMxStepV;$/;"	m	class:TEstEpidemParams
ParamStr	snap-adv/ncp.cpp	/^TStr TLocClustStat::ParamStr() const {$/;"	f	class:TLocClustStat
ParamV	snap-exp/sir.h	/^  TFltV ParamV, NewParamV, BestParamV;$/;"	m	class:TEstEpidemParams
ParamValV	snap-adv/ncp.h	/^  TFltV ParamValV ;$/;"	m	class:TNcpGraphsBase
Parent	glib-core/priorityqueue.h	/^  int Parent(int i) { return (i + 1) \/ 2 - 1; }$/;"	f	class:TMaxPriorityQueue
Parent	snap-adv/cascnetinf.h	/^  TInt NId, Parent;$/;"	m	class:THitInfo
Parent	snap-core/gbase.h	/^  TInt& Parent(const int& Key) { return KIdSetH.GetDat(Key).Val1; }$/;"	f	class:TUnionFind
Parent	snap-core/table.h	/^		TPredicateNode* Parent; \/\/\/< Parent node of this node$/;"	m	class:TPredicateNode
ParentH	snap-core/cncom.h	/^  THash<TInt, TInt> ParentH;$/;"	m	class:TArtPointVisitor
ParentH	snap-core/cncom.h	/^  THash<TInt, TInt> ParentH;$/;"	m	class:TBiConVisitor
ParentState	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int* ParentState;$/;"	m	class:TMatchingMachine
ParentState	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int* ParentState;$/;"	m	class:TMatchingMachine
ParentType	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMamaParent* ParentType;$/;"	m	class:TMatchingMachine
ParentType	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMamaParent* ParentType;$/;"	m	class:TMatchingMachine
ParseCodePoint	glib-core/unicode.h	/^		static int ParseCodePoint(const TStr& s) {$/;"	f	class:TUniChDb::TUcdFileReader
ParseCodePointList	glib-core/unicode.h	/^		static void ParseCodePointList(const TStr& s, TIntV& dest, bool ClrDestP = true) { \/\/ space-separated list$/;"	f	class:TUniChDb::TUcdFileReader
ParseCodePointRange	glib-core/unicode.h	/^		static void ParseCodePointRange(const TStr& s, int& from, int &to) { \/\/ xxxx or xxxx..yyyy$/;"	f	class:TUniChDb::TUcdFileReader
ParseFiles	snap-exp/arxiv.cpp	/^void TArxivPaperList::ParseFiles() {$/;"	f	class:TArxivPaperList
ParseHttpResp	glib-core/http.cpp	/^void THttpResp::ParseHttpResp(const PSIn& SIn){$/;"	f	class:THttpResp
ParseHttpRq	glib-core/http.cpp	/^void THttpRq::ParseHttpRq(const PSIn& SIn){$/;"	f	class:THttpRq
ParseMotifType	snap-adv/motifcluster.cpp	/^MotifType MotifCluster::ParseMotifType(const TStr& motif) {$/;"	f	class:MotifCluster
ParseSearch	glib-core/http.cpp	/^void THttpRq::ParseSearch(const TStr& SearchStr){$/;"	f	class:THttpRq
ParseVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::ParseVotes(const TWikiMetaHist& WMH, const THash<TStr, TStr>& UsrMapH, TWikiElec& WikiElec) {$/;"	f	class:TWikiElecBs
Partition	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::Partition(const TSizeTy& MnLValN, const TSizeTy& MxRValN, const bool& Asc){$/;"	f	class:TVec
Partition	snap-core/table.cpp	/^TInt TTable::Partition(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:TTable
Partition	snap-exp/alternativetable.cpp	/^TInt PhysicalOrderTable::Partition(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:PhysicalOrderTable
PartitionCmp	glib-core/ds.h	/^  static TIter PartitionCmp(TIter BI, TIter EI, const TVal Pivot, const TCmp& Cmp) {$/;"	f	class:TVec
PartitionKeyVal	snap-core/table.cpp	/^TInt TTable::PartitionKeyVal(TIntV& Key, TIntV& Val, TInt Start, TInt End) {$/;"	f	class:TTable
PathSegV	glib-core/url.h	/^  TStrV PathSegV;$/;"	v
PathStr	glib-core/url.h	/^  TStr PortStr, PathStr, SearchStr, FragIdStr;$/;"	v
Pause	glib-core/gnuplot.h	/^  void Pause(const bool& DoPause) { SetPause = DoPause; }$/;"	f	class:TGnuPlot
PearsonCorrelation	snap-core/coreper.cpp	/^  double PearsonCorrelation(PUNGraph& Graph, TIntIntH& out, int coresize){$/;"	f	namespace:TSnap
PeekCh	glib-core/fl.cpp	/^char TMIn::PeekCh(){$/;"	f	class:TMIn
PeekCh	glib-core/fl.h	/^  char PeekCh() { const char Ch = GetCh();  MovePos(-1);  return Ch; }$/;"	f	class:TFInOut
PeekCh	glib-core/fl.h	/^  char PeekCh(){$/;"	f	class:TFIn
PeekCh	glib-core/fl.h	/^  char PeekCh(){$/;"	f	class:TStdIn
PeekCh	glib-core/url.cpp	/^  char PeekCh() const {if (Eof()){return EofCh;} else {return Bf[BfC];}}$/;"	f	class:TUrlLx
PeekCh	glib-core/zipfl.h	/^  char PeekCh() { if (BfC==BfL){FillBf();} return Bf[BfC]; }$/;"	f	class:TZipIn
PeekSym	glib-core/lx.cpp	/^TLxSym TILx::PeekSym(const int& Syms){$/;"	f	class:TILx
PeekSym	glib-core/xml.cpp	/^TXmlLxSym TXmlParser::PeekSym() {$/;"	f	class:TXmlParser
PeekSym	glib-core/xml.cpp	/^TXmlLxSym TXmlParser::PeekSym(TChA& _SymStr) {$/;"	f	class:TXmlParser
PercentStr	glib-core/lx.cpp	/^const TStr TLxSymStr::PercentStr="%";$/;"	m	class:TLxSymStr	file:
PercentileV	glib-core/xmath.h	/^  TFltV PercentileV; \/\/ 0=min 1=1.percentile, ..., 9=9.percentile, 10=max$/;"	v
PeriodStr	glib-core/lx.cpp	/^const TStr TLxSymStr::PeriodStr=".";$/;"	m	class:TLxSymStr	file:
Perm	snap-exp/lsh.h	/^    TIntV Perm;$/;"	m	class:TLSHash::JaccardHash
PermEdgeWgt	snap-exp/wgtnet.cpp	/^void TWgtNet::PermEdgeWgt() {$/;"	f	class:TWgtNet
PermH	snap-exp/signnet.h	/^  THash<TInt, TVec<TIntV> > PermH;$/;"	m	class:TSignMicroEvol
PermOutEdgeWgt	snap-exp/wgtnet.cpp	/^void TWgtNet::PermOutEdgeWgt() {$/;"	f	class:TWgtNet
PermSwapNodeProb	snap-adv/kronecker.h	/^  TFlt PermSwapNodeProb; \/\/ permutation proposal distribution (swap edge endpoins vs. swap random nodes)$/;"	m	class:TKroneckerLL
PermuteAllVoteSigns	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PermuteAllVoteSigns(const bool& OnlyVotes) {$/;"	f	class:TWikiTalkNet
PermuteEdgeSigns	snap-exp/signnet.cpp	/^void TSignNet::PermuteEdgeSigns() {$/;"	f	class:TSignNet
PermuteOutVoteSigns	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PermuteOutVoteSigns(const bool& OnlyVotes) {$/;"	f	class:TWikiTalkNet
PermuteVotes	snap-exp/wikinet.cpp	/^void TWikiElec::PermuteVotes() {$/;"	f	class:TWikiElec
PermuteVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::PermuteVotes() {$/;"	f	class:TWikiElecBs
Phi	snap-adv/ncp.h	/^    double Phi(const int i) const { return PhiV[i]; }$/;"	f	class:TLocClustStat::TNodeSweep
PhiV	snap-adv/ncp.h	/^    TFltV PhiV;    \/\/ conductance at the cut$/;"	m	class:TLocClustStat::TNodeSweep
PhiV	snap-adv/ncp.h	/^  TFltV PhiV;              \/\/ Conductance$/;"	m	class:TLocClust
PhiVV	snap-adv/mag.h	/^	TFltVV PhiVV;$/;"	m	class:TMAGFitBern
PhysicalOrderTable	snap-exp/alternativetable.cpp	/^PhysicalOrderTable::PhysicalOrderTable(): Context(*(new PhysicalOrderTableContext)), NumRows(0){}$/;"	f	class:PhysicalOrderTable
PhysicalOrderTable	snap-exp/alternativetable.cpp	/^PhysicalOrderTable::PhysicalOrderTable(const Schema& TableSchema, PhysicalOrderTableContext& Context): Context(Context), NumRows(0) {$/;"	f	class:PhysicalOrderTable
PhysicalOrderTable	snap-exp/alternativetable.h	/^class PhysicalOrderTable {$/;"	c
PhysicalOrderTableContext	snap-exp/alternativetable.h	/^  PhysicalOrderTableContext() {}$/;"	f	class:PhysicalOrderTableContext
PhysicalOrderTableContext	snap-exp/alternativetable.h	/^  PhysicalOrderTableContext(TSIn& SIn): StringVals(SIn) {}$/;"	f	class:PhysicalOrderTableContext
PhysicalOrderTableContext	snap-exp/alternativetable.h	/^class PhysicalOrderTableContext {$/;"	c
Pi	glib-core/xmath.cpp	/^double TMath::Pi=3.14159265358979323846;$/;"	m	class:TMath	file:
Pi	glib-core/xmath.h	/^  static double Pi;$/;"	m	class:TMath
Plot	glib-core/gnuplot.h	/^  void Plot(const TStr& Comment=TStr()) { CreatePlotFile(Comment);  RunGnuPlot(); }$/;"	f	class:TGnuPlot
Plot	snap-core/gstat.cpp	/^void TGStat::Plot(const TFSet& FSet, const TStr& FNmPref, const TStr& Desc, bool PowerFit) const {$/;"	f	class:TGStat
Plot	snap-core/gstat.cpp	/^void TGStat::Plot(const TGStatDistr& Distr, const TStr& FNmPref, TStr Desc, bool PowerFit) const {$/;"	f	class:TGStat
Plot	snap-core/gstat.cpp	/^void TGStatVec::Plot(const TGStatVal& XVal, const TGStatVal& YVal, const TStr& OutFNm, TStr& Desc, const TGpScaleTy& Scale,const bool& PowerFit) const {$/;"	f	class:TGStatVec
Plot	snap-exp/sir.cpp	/^void TEpidemModel::Plot(const TFltV& TrueV, const TStr& Label1, const TFltV& SimV, const TStr& Label2, const TStr& OutFNm, const TStr& Desc, const TStr& XLabel, const TStr& YLabel) {$/;"	f	class:TEpidemModel
Plot	snap-exp/sir.cpp	/^void TSir2Model::Plot(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TSir2Model
Plot	snap-exp/sir.cpp	/^void TSirModel::Plot(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TSirModel
Plot	snap-exp/sir.cpp	/^void TSirSR2Model::Plot(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TSirSR2Model
PlotAdminVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotAdminVotes(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotAll	examples/cascades/cascades.cpp	/^void TCascadeStat::PlotAll(const TStr& OutFNm, const TStr& Desc, const bool& DivByM) {$/;"	f	class:TCascadeStat
PlotAll	snap-core/gstat.cpp	/^void TGStat::PlotAll(const TStr& FNmPref, TStr Desc, bool PowerFit) const {$/;"	f	class:TGStat
PlotAllVsX	snap-core/gstat.cpp	/^void TGStatVec::PlotAllVsX(const TGStatVal& XVal, const TStr& OutFNm, TStr Desc, const TGpScaleTy& Scale, const bool& PowerFit) const {$/;"	f	class:TGStatVec
PlotAutoCorrelation	snap-adv/kronecker.cpp	/^void PlotAutoCorrelation(const TFltV& ValV, const int& MaxK, const TStr& OutFNm, const TStr& Desc) {$/;"	f
PlotAvgNcp	snap-adv/ncp.cpp	/^void TNcpGraphsBase::PlotAvgNcp(const TStr& OutFNm, const TVec<TFltPrV>& NcpVec, const int& MinSz, const double& MaxMinY) {$/;"	f	class:TNcpGraphsBase
PlotAvgSupFrac	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotAvgSupFrac(const TIntV& ElecIdV, const TStr& OutFNm, const TStr& Desc) const {$/;"	f	class:TWikiElecBs
PlotAvgVote	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotAvgVote(const TIntV& ElecIdV, const TStr& OutFNm, const TStr& Desc) const {$/;"	f	class:TWikiElecBs
PlotAvgVote	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotAvgVote(const TStr& OutFNm, const int& MinVotes, const int& MaxVotes) const {$/;"	f	class:TWikiElecBs
PlotAvgVoteDev	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotAvgVoteDev(const TIntV& ElecIdV, const TStr& OutFNm, const TStr& Desc) const {$/;"	f	class:TWikiElecBs
PlotBarnStarDelta	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PlotBarnStarDelta(const TStr& OutFNm) const {$/;"	f	class:TWikiTalkNet
PlotBarnStarsDelta	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotBarnStarsDelta(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotBest	snap-exp/sir.h	/^double TEstEpidemParams<TEpiModel>::PlotBest(const TStr& OutFNm, TStr Desc) {$/;"	f	class:TEstEpidemParams
PlotBestClustDens	snap-adv/ncp.cpp	/^void TLocClustStat::PlotBestClustDens(TStr OutFNm, TStr Desc) const {$/;"	f	class:TLocClustStat
PlotBestWhisker	snap-adv/ncp.cpp	/^void TNcpGraphsBase::PlotBestWhisker(const TStr& OutFNm, const bool& VsGraphN) {$/;"	f	class:TNcpGraphsBase
PlotBlogFracOt	snap-exp/memes.cpp	/^void TQuoteBs::PlotBlogFracOt(const TTmUnit& TmUnit, const bool& TakeClusters, const int& PlotN, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotBlogVsMediaFqOt	snap-exp/memes.cpp	/^void TQuoteBs::PlotBlogVsMediaFqOt(const TTmUnit& TmUnit, const bool& TakeClusters, int PlotN, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotBoltzmanCurve	snap-adv/ncp.cpp	/^void TLocClustStat::PlotBoltzmanCurve(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClustStat
PlotCCfOverTm	snap-core/timenet.cpp	/^void TTimeNet::PlotCCfOverTm(const TStr& FNmPref, TStr Desc, const TTmUnit& TmUnit, const int& NodesBucket) const {$/;"	f	class:TTimeNet
PlotClustCf	snap-core/statplot.h	/^void PlotClustCf(const PGraph& Graph, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotClustMediaVsBlogFq	snap-exp/memes.cpp	/^void TQuoteBs::PlotClustMediaVsBlogFq(const int& CId, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotCmpGraphs	snap-adv/kronecker.cpp	/^void TKronMtx::PlotCmpGraphs(const TKronMtx& SeedMtx, const PNGraph& Graph, const TStr& FNmPref, const TStr& Desc) {$/;"	f	class:TKronMtx
PlotCmpGraphs	snap-adv/kronecker.cpp	/^void TKronMtx::PlotCmpGraphs(const TKronMtx& SeedMtx1, const TKronMtx& SeedMtx2, const PNGraph& Graph, const TStr& FNmPref, const TStr& Desc) {$/;"	f	class:TKronMtx
PlotCmpGraphs	snap-adv/kronecker.cpp	/^void TKronMtx::PlotCmpGraphs(const TVec<TKronMtx>& SeedMtxV, const PNGraph& Graph, const TStr& FNmPref, const TStr& Desc) {$/;"	f	class:TKronMtx
PlotCntOverTm	glib-core/gnuplot.h	/^void TGnuPlot::PlotCntOverTm(const THash<TSecTm, TVal2>& CntH, const TStr& OutFNmPref, const TStr& Desc,$/;"	f	class:TGnuPlot
PlotConfusionMatrix	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotConfusionMatrix(const TStr& OutFNm, const int& MinUsrVotes) const {$/;"	f	class:TWikiElecBs
PlotCovotingUsers	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotCovotingUsers(const TStr& OutFNm, const TStr& MinSupStr, const int& TakeOnlyVotes) const {$/;"	f	class:TWikiElecBs
PlotCutDistr	snap-adv/ncp.cpp	/^void TLocClust::PlotCutDistr(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClust
PlotDataset	snap-adv/ncp.cpp	/^void TNcpGraphsBase::PlotDataset(const TStr& InFNmWc, const TStr& OutFNm, const bool& ImposeNcp, const bool& VsGraphN) {$/;"	f	class:TNcpGraphsBase
PlotDeltaFracSupOt	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotDeltaFracSupOt(const TStr& OutFNm, const int& MinVotes, const int& MaxVotes) const {$/;"	f	class:TWikiElecBs
PlotEffDiam	snap-core/timenet.cpp	/^void TTimeNENet::PlotEffDiam(const TStr& FNmPref, const TStr& Desc, const TTmUnit& TmUnit,$/;"	f	class:TTimeNENet
PlotEffDiam	snap-core/timenet.cpp	/^void TTimeNet::PlotEffDiam(const TStr& FNmPref, const TStr& Desc, const TTmUnit& TmUnit,$/;"	f	class:TTimeNet
PlotEigValDistr	snap-core/statplot.cpp	/^void PlotEigValDistr(const PUNGraph& Graph, const int& EigVals, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotEigValRank	snap-core/statplot.cpp	/^void PlotEigValRank(const PUNGraph& Graph, const int& EigVals, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotElecLenDistr	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotElecLenDistr(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotElecSupOppOt	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotElecSupOppOt(const TStr& OutFNm, const int& MinVotes, const int& MaxVotes) const {$/;"	f	class:TWikiElecBs
PlotEmptyY	snap-exp/memes.cpp	/^void TQuoteBs::PlotEmptyY(const TTmUnit& TmUnit, const bool& TakeClusters, const int& PlotN, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotFNm	glib-core/gnuplot.h	/^  TStr DataFNm, PlotFNm;$/;"	m	class:TGnuPlot
PlotFinalFracVoteCnt	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotFinalFracVoteCnt(const TStr& OutFNm, const int& MinUsrVotes, const TIntSet& UsrSplitSet) const {$/;"	f	class:TWikiElecBs
PlotFire	snap-core/ff.cpp	/^void TForestFire::PlotFire(const TStr& FNmPref, const TStr& Desc, const bool& PlotAllBurned) {$/;"	f	class:TForestFire
PlotFireSize	snap-core/ff.cpp	/^void TFfGGen::PlotFireSize(const TStr& FNmPref, const TStr& DescStr) {$/;"	f	class:TFfGGen
PlotFirstOppOutcome	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotFirstOppOutcome(const TStr& OutFNm, const int& NVotes) const {$/;"	f	class:TWikiElecBs
PlotFqDecay	snap-exp/memes.cpp	/^void TQuoteBs::PlotFqDecay(const TTmUnit& TmUnit, const bool& TakeClusters, const TUrlTy& CntUrlTy, const int& PlotN, const int& MinValsPerTm, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotFracBeforeAfterVote	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotFracBeforeAfterVote(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotFracPosVsEdgeAttr	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PlotFracPosVsEdgeAttr(const TStr& OutFNm) const {$/;"	f	class:TWikiTalkNet
PlotFracPosVsWords	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PlotFracPosVsWords(const TStr& OutFNm) const {$/;"	f	class:TWikiTalkNet
PlotFracPosVsWords2	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PlotFracPosVsWords2(const TStr& OutFNm) const {$/;"	f	class:TWikiTalkNet
PlotGrad	snap-adv/kronecker.cpp	/^void PlotGrad(const TFltPrV& EstLLV, const TFltPrV& TrueLLV, const TVec<TFltPrV>& GradVV, const TFltPrV& AcceptV, const TStr& OutFNm, const TStr& Desc) {$/;"	f
PlotGraphProp	snap-exp/signnet.cpp	/^void TSignNet::PlotGraphProp(const TStr& OutFNm) const {$/;"	f	class:TSignNet
PlotHops	snap-core/statplot.h	/^void PlotHops(const PGraph& Graph, const TStr& FNmPref, TStr DescStr, const bool& IsDir, const int& NApprox) {$/;"	f	namespace:TSnap
PlotInDegDistr	snap-core/statplot.h	/^void PlotInDegDistr(const PGraph& Graph, const TStr& FNmPref, TStr DescStr, const bool& PlotCCdf, const bool& PowerFit) {$/;"	f	namespace:TSnap
PlotInOutPlusFrac	snap-exp/signnet.cpp	/^void TSignNet::PlotInOutPlusFrac(const TStr& OutFNm) const {$/;"	f	class:TSignNet
PlotInvParticipRat	snap-core/statplot.cpp	/^void PlotInvParticipRat(const PUNGraph& Graph, const int& MaxEigVecs, const int& TimeLimit, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotKCoreEdges	snap-core/statplot.h	/^void PlotKCoreEdges(const PGraph& Graph, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotKCoreNodes	snap-core/statplot.h	/^void PlotKCoreNodes(const PGraph& Graph, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotMediaVsBlogLag	snap-exp/memes.cpp	/^void TQuoteBs::PlotMediaVsBlogLag(const TTmUnit& TmUnit, const bool& TakeClusters, const int& TakeN, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotMedianDegOverTm	snap-core/timenet.cpp	/^void TTimeNet::PlotMedianDegOverTm(const TStr& FNmPref, const TTmUnit& TmUnit, const int& NodesPerBucket) const {$/;"	f	class:TTimeNet
PlotMinFqVsMaxSet	snap-exp/trawling.cpp	/^TIntPrV TTrawling::PlotMinFqVsMaxSet(const TStr& OutFNm) {$/;"	f	class:TTrawling
PlotMissingPast	snap-core/timenet.cpp	/^void TTimeNENet::PlotMissingPast(const TStr& FNmPref, const TStr& Desc, const TTmUnit& TmUnit,$/;"	f	class:TTimeNENet
PlotMissingPast	snap-core/timenet.cpp	/^void TTimeNet::PlotMissingPast(const TStr& FNmPref, const TStr& Desc, const TTmUnit& TmUnit,$/;"	f	class:TTimeNet
PlotNCP	snap-adv/ncp.cpp	/^void TLocClust::PlotNCP(const PUNGraph& Graph, const TStr& FNm, const TStr Desc, const bool& BagOfWhiskers, const bool& RewireNet, const int& KMin, const int& KMax, const int& Coverage, const bool& SaveTxtStat, const bool& PlotBoltzman) {$/;"	f	class:TLocClust
PlotNCP	snap-adv/ncp.cpp	/^void TLocClustStat::PlotNCP(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClustStat
PlotNCPModul	snap-adv/ncp.cpp	/^void TLocClustStat::PlotNCPModul(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClustStat
PlotNCPScatter	snap-adv/ncp.cpp	/^void TLocClustStat::PlotNCPScatter(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClustStat
PlotNcpMin	snap-adv/ncp.cpp	/^void TNcpGraphsBase::PlotNcpMin(const TStr& OutFNm, const bool& VsGraphN) {$/;"	f	class:TNcpGraphsBase
PlotNcpTop10	snap-adv/ncp.cpp	/^void TLocClustStat::PlotNcpTop10(const TStr& OutFNm, TStr Desc, const int& TakeMinN) const {$/;"	f	class:TLocClustStat
PlotNodeAttrDistr	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PlotNodeAttrDistr(const TStr& OutFNm) const {$/;"	f	class:TWikiTalkNet
PlotOutDegDistr	snap-core/statplot.h	/^void PlotOutDegDistr(const PGraph& Graph, const TStr& FNmPref, TStr DescStr, const bool& PlotCCdf, const bool& PowerFit) {$/;"	f	namespace:TSnap
PlotOutcomes	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotOutcomes(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotOverTm	snap-exp/memes.cpp	/^void TQuote::PlotOverTm(const TStr& OutFNm) {$/;"	f	class:TQuote
PlotParamHist	snap-exp/sir.h	/^void TEstEpidemParams<TEpiModel>::PlotParamHist(const TStr& OutFNm, TStr Desc) {$/;"	f	class:TEstEpidemParams
PlotPartStab	snap-exp/signnet.cpp	/^void THopfield::PlotPartStab(const TStr& FNm, TStr Desc) const {$/;"	f	class:THopfield
PlotPhiDistr	snap-adv/ncp.cpp	/^void TLocClust::PlotPhiDistr(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClust
PlotPhiDistr	snap-adv/ncp.cpp	/^void TLocClustStat::PlotPhiDistr(const int& CmtySz, const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClustStat
PlotPhiInOut	snap-adv/ncp.cpp	/^void TLocClustStat::PlotPhiInOut(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClustStat
PlotPick2VsProb2nd	snap-exp/wgtnet.cpp	/^void TTop2FriendNet::PlotPick2VsProb2nd(const PWgtNet& Net, const int& NRuns, const double& StepP, const TStr& OutFNm, $/;"	f	class:TTop2FriendNet
PlotPopularityCnt	snap-exp/memes.cpp	/^void TQuoteBs::PlotPopularityCnt(const bool& TakeClusters, const TUrlTy& UrlTy, const int& PlotN, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotProperties	snap-adv/mag.cpp	/^void TMAGFitBern::PlotProperties(const TStr& FNm) {$/;"	f	class:TMAGFitBern
PlotQtCumFqOverTm	snap-exp/memes.cpp	/^void TQuoteBs::PlotQtCumFqOverTm(const TIntV& QtIdV, const TStr& OutFNm, int PlotN) const {$/;"	f	class:TQuoteBs
PlotQtCumFqOverTm1	snap-exp/memes.cpp	/^void TQuoteBs::PlotQtCumFqOverTm1(const TIntV& QtIdV, const TStr& OutFNm, int PlotN) const {$/;"	f	class:TQuoteBs
PlotQtFqCnt	snap-exp/memes.cpp	/^void TQuoteBs::PlotQtFqCnt(const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotQtFqOverTm	snap-exp/memes.cpp	/^void TQuoteBs::PlotQtFqOverTm(const TIntV& QtIdV, const TStr& OutFNm, int PlotN) const {$/;"	f	class:TQuoteBs
PlotQtMediaVsBlogFq	snap-exp/memes.cpp	/^void TQuoteBs::PlotQtMediaVsBlogFq(const int& QtId, const TStr& OutFNmPref) const {$/;"	f	class:TQuoteBs
PlotRewBestWhisker	snap-adv/ncp.cpp	/^void TNcpGraphsBase::PlotRewBestWhisker(const TStr& OutFNm, const bool& VsGraphN) {$/;"	f	class:TNcpGraphsBase
PlotRewNcpMin	snap-adv/ncp.cpp	/^void TNcpGraphsBase::PlotRewNcpMin(const TStr& OutFNm, const bool& VsGraphN) {$/;"	f	class:TNcpGraphsBase
PlotRoles	snap-adv/rolx.cpp	/^void PlotRoles(const PUNGraph Graph, const TIntIntH& Roles) {$/;"	f
PlotRunLenStat	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotRunLenStat(const TStr& OutFNm, const int& MinVotes, const int& MaxVotes) const {$/;"	f	class:TWikiElecBs
PlotSccDistr	snap-core/statplot.h	/^void PlotSccDistr(const PGraph& Graph, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotShortPathDistr	snap-core/statplot.h	/^void PlotShortPathDistr(const PGraph& Graph, const TStr& FNmPref, TStr DescStr, int TestNodes) {$/;"	f	namespace:TSnap
PlotSignCmnNbrs	snap-exp/signnet.cpp	/^void TSignNet::PlotSignCmnNbrs(const TStr& OutFNm) const {$/;"	f	class:TSignNet
PlotSlopeHist	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotSlopeHist(const TStr& OutFNm, const int& MinElecLen) const {$/;"	f	class:TWikiElecBs
PlotSngValDistr	snap-core/statplot.cpp	/^void PlotSngValDistr(const PNGraph& Graph, const int& SngVals, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotSngValRank	snap-core/statplot.cpp	/^void PlotSngValRank(const PNGraph& Graph, const int& SngVals, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotSngVec	snap-core/statplot.cpp	/^void PlotSngVec(const PNGraph& Graph, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlotSubQtOverTm	snap-exp/memes.cpp	/^void TQuoteBs::PlotSubQtOverTm(const int& QtId, const TStr& OutFNm) const {$/;"	f	class:TQuoteBs
PlotSupFracVsElecLen	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotSupFracVsElecLen(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotSupOpp	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotSupOpp(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotTopQuotesOverTm	snap-exp/memes.cpp	/^void TQuoteBs::PlotTopQuotesOverTm(const int& StepSecs, const int& IntervalSecs, const int& TakeNPerStep, const TStr& OutFNm) const {$/;"	f	class:TQuoteBs
PlotTrueAndEst	snap-adv/kronecker.cpp	/^void PlotTrueAndEst(const TStr& OutFNm, const TStr& Desc, const TStr& YLabel, const TFltPrV& EstV, const TFltPrV& TrueV) {$/;"	f
PlotUsrVoteVsTime	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotUsrVoteVsTime(const TStr& OutFNm, const int& MinUsrVotes, const TIntSet& UsrSplitSet) const {$/;"	f	class:TWikiElecBs
PlotValCntH	glib-core/gnuplot.h	/^void TGnuPlot::PlotValCntH(const THash<TKey, TVal, THashFunc>& ValCntH, const TStr& OutFNmPref, const TStr& Desc,$/;"	f	class:TGnuPlot
PlotValCntH	glib-core/gnuplot.h	/^void TGnuPlot::PlotValCntH(const THash<TKey, TVal, THashFunc>& ValCntH1, const TStr& Label1,$/;"	f	class:TGnuPlot
PlotValMomH	glib-core/gnuplot.h	/^void TGnuPlot::PlotValMomH(const THash<TVal1, TMom>& ValMomH, const TStr& OutFNmPref, const TStr& Desc,$/;"	f	class:TGnuPlot
PlotValMomH	glib-core/gnuplot.h	/^void TGnuPlot::PlotValMomH(const THash<TVal1, TMom>& ValMomH1, const TStr& Label1,$/;"	f	class:TGnuPlot
PlotValOverTm	glib-core/gnuplot.h	/^void TGnuPlot::PlotValOverTm(const TVec<TPair<TSecTm, TVal2> >& ValV, const TStr& OutFNmPref, const TStr& Desc,$/;"	f	class:TGnuPlot
PlotValRank	glib-core/gnuplot.h	/^void TGnuPlot::PlotValRank(const THash<TKey, TVal, THashFunc>& ValCntH, const TStr& OutFNmPref, const TStr& Desc,$/;"	f	class:TGnuPlot
PlotValV	glib-core/gnuplot.h	/^void TGnuPlot::PlotValV(const TVec<TPair<TVal1, TVal2> >& ValV, const TStr& OutFNmPref, const TStr& Desc,$/;"	f	class:TGnuPlot
PlotValV	glib-core/gnuplot.h	/^void TGnuPlot::PlotValV(const TVec<TPair<TVal1, TVal2> >& ValV1, const TStr& Name1,$/;"	f	class:TGnuPlot
PlotValV	glib-core/gnuplot.h	/^void TGnuPlot::PlotValV(const TVec<TTriple<TVal1, TVal2, TVal3> >& ValV, const TStr& OutFNmPref, const TStr& Desc,$/;"	f	class:TGnuPlot
PlotValV	glib-core/gnuplot.h	/^void TGnuPlot::PlotValV(const TVec<TVal1>& ValV, const TStr& OutFNmPref, const TStr& Desc, const TStr& XLabel,$/;"	f	class:TGnuPlot
PlotVolDistr	snap-adv/ncp.cpp	/^void TLocClust::PlotVolDistr(const TStr& OutFNm, TStr Desc) const {$/;"	f	class:TLocClust
PlotVoteDistr	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotVoteDistr(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotVoteSignCmnFriends	snap-exp/wikinet.cpp	/^void TWikiTalkNet::PlotVoteSignCmnFriends(const TStr& OutFNm) const {$/;"	f	class:TWikiTalkNet
PlotVoteTrailGlobal	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotVoteTrailGlobal(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
PlotVoteTrails	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotVoteTrails(const TStr& OutFNm, const int& MinUsrVotes, const bool& No01Prob) const {$/;"	f	class:TWikiElecBs
PlotVotesOt	snap-exp/wikinet.cpp	/^void TWikiElecBs::PlotVotesOt(const TStr& OutFNm, const int& MinVotes, const int& MaxVotes) const {$/;"	f	class:TWikiElecBs
PlotWccDistr	snap-core/statplot.h	/^void PlotWccDistr(const PGraph& Graph, const TStr& FNmPref, TStr DescStr) {$/;"	f	namespace:TSnap
PlsCnt	snap-exp/signnet.h	/^    TInt PlsCnt, MnsCnt;        \/\/ number of + edges$/;"	m	struct:TSignMicroEvol::TCloseStat
PlusStr	glib-core/lx.cpp	/^const TStr TLxSymStr::PlusStr="+";$/;"	m	class:TLxSymStr	file:
Pool	snap-core/bignet.h	/^    TVPool *Pool;$/;"	m	class:TBigNet::TNodeI
Pool	snap-core/bignet.h	/^  TVPool Pool;$/;"	m	class:TBigNet
Pop	glib-core/ds.h	/^  void Pop(){$/;"	f	class:TQQueue
Pop	glib-core/ds.h	/^  void Pop(){Assert(0<ValV.Len()); ValV.DelLast();}$/;"	f	class:TSStack
Pop	glib-core/dt.h	/^  char Pop(){IAssert(BfL>0); BfL--; return Bf[BfL];}$/;"	f
Pop	snap-adv/subgraphenum.h	/^		inline void Pop() { m_size--; m_arr[m_size]=-1; }$/;"	f	class:TSubGraphEnum::TSVec
Pop	snap-core/gbase.h	/^  void Pop() { First++;$/;"	f	class:TSnapQueue
PopActive	snap-core/flow.cpp	/^  int PopActive() {$/;"	f	class:TSnap::TPRManager
PopHeap	snap-core/gbase.h	/^TVal THeap<TVal, TCmp>::PopHeap() {$/;"	f	class:THeap
PopMax	glib-core/priorityqueue.h	/^  TVal PopMax() {$/;"	f	class:TMaxPriorityQueue
PopulateGraph	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	e	enum:TStopwatch::__anon80
PortN	glib-core/url.h	/^  int PortN;$/;"	v
PortStr	glib-core/url.h	/^  TStr PortStr, PathStr, SearchStr, FragIdStr;$/;"	v
PortV	glib-core/hash.h	/^  TIntV PortV;$/;"	m	class:THash
PortV	glib-core/shash.h	/^  TIntV PortV;$/;"	m	class:THashSet
PosInGroup	glib-core/shash.h	/^  int PosInGroup(const int& ValN) const { return ValN % GroupSize; }$/;"	f	class:TSparseTable
PosToOffset	glib-core/shash.h	/^  int PosToOffset(int Pos) const { return PosToOffset(BitSet, Pos); }$/;"	f	class:TSparseGroup
PosToOffset	glib-core/shash.h	/^int TSparseGroup<TVal, GroupSize>::PosToOffset(const unsigned char *BitSet, int Pos) {$/;"	f	class:TSparseGroup
Position	snap-exp/imdbnet.h	/^  TInt Name, Year, Position; \/\/ movie title or actor name$/;"	m	class:TImdbNode
PostCnt	snap-exp/memes.h	/^  int PostCnt;$/;"	m	class:TQuoteLoader
PostCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFeedItem
PostCnt	snap-exp/spinn3r.h	/^  TInt PostCnt, GoodPostCnt, LinkPostCnt, LinksCnt;$/;"	m	class:TSpinn3rFullItem
PostMethodNm	glib-core/http.cpp	/^const TStr THttp::PostMethodNm="POST";$/;"	m	class:THttp	file:
PostMethodNm	glib-core/http.h	/^  static const TStr PostMethodNm;$/;"	m	class:THttp
PostText	snap-exp/spinn3r.h	/^  TChA PostText;$/;"	m	class:TQuoteExtractor
PostTitleStr	snap-exp/memes.h	/^  TChA PostTitleStr;$/;"	m	class:TQuoteLoader
PostTitleStr	snap-exp/spinn3r.h	/^  TChA PostTitleStr;$/;"	m	class:TSpinn3rFeedItem
PostTitleStr	snap-exp/spinn3r.h	/^  TChA PostTitleStr;$/;"	m	class:TSpinn3rFullItem
PostUrlStr	snap-exp/memes.h	/^  TChA PostUrlStr;$/;"	m	class:TMemesDataLoader
PostUrlStr	snap-exp/memes.h	/^  TChA PostUrlStr;$/;"	m	class:TQuoteLoader
PostUrlStr	snap-exp/spinn3r.h	/^  TChA PostUrlStr;$/;"	m	class:TSpinn3rFeedItem
PostUrlStr	snap-exp/spinn3r.h	/^  TChA PostUrlStr;$/;"	m	class:TSpinn3rFullItem
Postprocess	snap-core/util.h	/^  typedef enum {LoadTables, Preprocess, ConstructGraph, Compute, Postprocess, StoreOutputs,$/;"	e	enum:TStopwatch::__anon80
Pow2	glib-core/xmath.h	/^  static uint Pow2(const int& pow){return uint(1u<<pow);}$/;"	f	class:TMath
Power	glib-core/xmath.h	/^  static double Power(const double& Base, const double& Exponent){$/;"	f	class:TMath
PowerFit	glib-core/xmath.cpp	/^void TSpecFunc::PowerFit(const TVec<TFltPr>& XY, double& A, double& B,$/;"	f	class:TSpecFunc
PrGradH	snap-exp/linkpred.h	/^  THash<TInt, TFltV> PrGradH;$/;"	m	class:TLpExample
PrGradH	snap-exp/linkpred.h	/^  THash<TInt, TFltV> PrGradH;$/;"	m	class:__OLD__::TQGraph
PrecisionRecall	snap-adv/cascdynetinf.h	/^  TFltPrV PrecisionRecall;$/;"	m	class:TNIBs
PrecisionRecall	snap-adv/cascnetinf.h	/^  TFltPrV PrecisionRecall;$/;"	m	class:TNetInfBs
PredictAttrK	snap-adv/agmattr.h	/^  double inline PredictAttrK(const TIntFltH& FU, const TFltV& WK) {$/;"	f	class:TCesna
PredictAttrK	snap-adv/agmattr.h	/^  double inline PredictAttrK(const TIntFltH& FU, const int K) {$/;"	f	class:TCesna
PredictAttrK	snap-adv/agmattr.h	/^  double inline PredictAttrK(const int UID, const int K) {$/;"	f	class:TCesna
PredictBalance	snap-exp/signnet.h	/^  void PredictBalance(const int& SrcNId, const int& DstNId, const int& TrueSign) {$/;"	f	class:TEdgeSignPred
PredictInSign	snap-exp/signnet.h	/^  void PredictInSign(const int& SrcNId, const int& DstNId, const int& TrueSign) {$/;"	f	class:TEdgeSignPred
PredictOnStaticNet	snap-exp/signnet.h	/^  void PredictOnStaticNet(const bool& SameNPlusNMinus) {$/;"	f	class:TEdgeSignPred
PredictOutSign	snap-exp/signnet.h	/^  void PredictOutSign(const int& SrcNId, const int& DstNId, const int& TrueSign) {$/;"	f	class:TEdgeSignPred
PredictRandom	snap-exp/signnet.h	/^  void PredictRandom(const int& SrcNId, const int& DstNId, const int& TrueSign) {$/;"	f	class:TEdgeSignPred
PredictStatus	snap-exp/signnet.h	/^  void PredictStatus(const int& SrcNId, const int& DstNId, const int& TrueSign) {$/;"	f	class:TEdgeSignPred
Prediction	snap-adv/agmattr.h	/^  double inline Prediction(const TIntFltH& FU, const TIntFltH& FV) {$/;"	f	class:TCesna
Prediction	snap-adv/agmattr.h	/^  double inline Prediction(const int& UID, const int& VID) {$/;"	f	class:TCesna
Prediction	snap-adv/agmdirected.h	/^  double inline Prediction(const TIntFltH& FU, const TIntFltH& HV) {$/;"	f	class:TCoda
Prediction	snap-adv/agmdirected.h	/^  double inline Prediction(const int& UID, const int& VID) {$/;"	f	class:TCoda
Prediction	snap-adv/agmfast.h	/^  double inline Prediction(const TIntFltH& FU, const TIntFltH& FV) {$/;"	f	class:TAGMFast
Prediction	snap-adv/agmfast.h	/^  double inline Prediction(const int& UID, const int& VID) {$/;"	f	class:TAGMFast
PrepArgs	glib-core/env.cpp	/^void TEnv::PrepArgs(const TStr& _HdStr, const int& _MnArgs, const bool& _SilentP){$/;"	f	class:TEnv
PrepareUpdateAffMtx	snap-adv/mag.cpp	/^const void TMAGFitBern::PrepareUpdateAffMtx(TFltVV& ProdVV, TFltVV& SqVV) {$/;"	f	class:TMAGFitBern
PrepareUpdateApxAffMtx	snap-adv/mag.cpp	/^const void TMAGFitBern::PrepareUpdateApxAffMtx(TFltVV& ProdVV, TFltVV& SqVV) {$/;"	f	class:TMAGFitBern
Preprocess	snap-core/util.h	/^  typedef enum {LoadTables, Preprocess, ConstructGraph, Compute, Postprocess, StoreOutputs,$/;"	e	enum:TStopwatch::__anon80
Prev	glib-core/ds.h	/^  TLstNd* Prev() const {Assert(this!=NULL); return PrevNd;}$/;"	f	class:TLstNd
PrevNd	glib-core/ds.h	/^  TLstNd* PrevNd;$/;"	m	class:TLstNd
PrevPerm	glib-core/ds.h	/^bool TVec<TVal, TSizeTy>::PrevPerm() {$/;"	f	class:TVec
Prime	test/test-THash.cpp	/^int Prime(const int& n) {$/;"	f
Print	snap-core/table.h	/^	void Print(){$/;"	f	class:GroupStmt
PrintAddSelfEdges	tutorials/demo-alg.cpp	/^void PrintAddSelfEdges() {$/;"	f
PrintBacktrace	glib-core/bd.cpp	/^void PrintBacktrace() {$/;"	f
PrintCharNames	glib-core/unicode.h	/^	template<class TSrcVec> void PrintCharNames(FILE *f, const TSrcVec& src, const TStr& prefix) const { PrintCharNames(f, src, 0, src.Len(), prefix); }$/;"	f	class:TUniChDb
PrintCharNames	glib-core/unicode.h	/^	template<class TSrcVec> void PrintCharNames(FILE *f, const TSrcVec& src, size_t srcIdx, const size_t srcCount, const TStr& prefix) const {$/;"	f	class:TUniChDb
PrintCntDegNodes	tutorials/demo-alg.cpp	/^void PrintCntDegNodes() {$/;"	f
PrintCntEdgesToSet	tutorials/demo-alg.cpp	/^void PrintCntEdgesToSet() {$/;"	f
PrintCntInDegNodes	tutorials/demo-alg.cpp	/^void PrintCntInDegNodes() {$/;"	f
PrintCntNonZNodes	tutorials/demo-alg.cpp	/^void PrintCntNonZNodes() {$/;"	f
PrintCntOutDegNodes	tutorials/demo-alg.cpp	/^void PrintCntOutDegNodes() {$/;"	f
PrintCntSelfEdges	tutorials/demo-alg.cpp	/^void PrintCntSelfEdges() {$/;"	f
PrintCntUniqBiDirEdges	tutorials/demo-alg.cpp	/^void PrintCntUniqBiDirEdges() {$/;"	f
PrintCntUniqDirEdges	tutorials/demo-alg.cpp	/^void PrintCntUniqDirEdges() {$/;"	f
PrintCntUniqUndirEdges	tutorials/demo-alg.cpp	/^void PrintCntUniqUndirEdges() {$/;"	f
PrintContextSize	snap-core/table.cpp	/^void TTable::PrintContextSize(){$/;"	f	class:TTable
PrintDelDegKNodes	tutorials/demo-alg.cpp	/^void PrintDelDegKNodes() {$/;"	f
PrintDelNodes	tutorials/demo-alg.cpp	/^void PrintDelNodes() {$/;"	f
PrintDelSelfEdges	tutorials/demo-alg.cpp	/^void PrintDelSelfEdges() {$/;"	f
PrintDelZeroDegNodes	tutorials/demo-alg.cpp	/^void PrintDelZeroDegNodes() {$/;"	f
PrintFeatures	snap-adv/rolx.cpp	/^void PrintFeatures(const TIntFtrH& Features) {$/;"	f
PrintGStats	tutorials/demo-TDirNet.cpp	/^void PrintGStats(const char s[], PDirNet Graph) {$/;"	f
PrintGStats	tutorials/demo-TNEANet.cpp	/^void PrintGStats(const char s[], PNEANet Graph) {$/;"	f
PrintGStats	tutorials/demo-TNEGraph.cpp	/^void PrintGStats(const char s[], PNEGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-TNGraph.cpp	/^void PrintGStats(const char s[], PNGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-TUNGraph.cpp	/^void PrintGStats(const char s[], PUNGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-TUndirNet.cpp	/^void PrintGStats(const char s[], PUndirNet Graph) {$/;"	f
PrintGStats	tutorials/demo-ggen.cpp	/^void PrintGStats(const char s[], PBPGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-ggen.cpp	/^void PrintGStats(const char s[], PGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-ggen.cpp	/^void PrintGStats(const char s[], PNGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-ggen.cpp	/^void PrintGStats(const char s[], PUNGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-gio.cpp	/^void PrintGStats(const char s[], PBPGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-gio.cpp	/^void PrintGStats(const char s[], PGraph Graph) {$/;"	f
PrintGStats	tutorials/demo-multimodal.cpp	/^void PrintGStats(const char s[], PNEANet Graph) {$/;"	f
PrintGStats	tutorials/demo-multimodal.cpp	/^void PrintGStats(const char s[], TCrossNet Graph) {$/;"	f
PrintGStats	tutorials/demo-multimodal.cpp	/^void PrintGStats(const char s[], TModeNet Graph) {$/;"	f
PrintGetDegCntFlt	tutorials/demo-alg.cpp	/^void PrintGetDegCntFlt() {$/;"	f
PrintGetDegCntInt	tutorials/demo-alg.cpp	/^void PrintGetDegCntInt() {$/;"	f
PrintGetDegSeqV	tutorials/demo-alg.cpp	/^void PrintGetDegSeqV() {$/;"	f
PrintGetDegSeqVWithInOutDegV	tutorials/demo-alg.cpp	/^void PrintGetDegSeqVWithInOutDegV() {$/;"	f
PrintGetInDegCntFlt	tutorials/demo-alg.cpp	/^void PrintGetInDegCntFlt() {$/;"	f
PrintGetInDegCntInt	tutorials/demo-alg.cpp	/^void PrintGetInDegCntInt() {$/;"	f
PrintGetMxDegNId	tutorials/demo-alg.cpp	/^void PrintGetMxDegNId() {$/;"	f
PrintGetMxInDegNId	tutorials/demo-alg.cpp	/^void PrintGetMxInDegNId() {$/;"	f
PrintGetMxOutDegNId	tutorials/demo-alg.cpp	/^void PrintGetMxOutDegNId() {$/;"	f
PrintGetNodeInDegV	tutorials/demo-alg.cpp	/^void PrintGetNodeInDegV() {$/;"	f
PrintGetNodeOutDegV	tutorials/demo-alg.cpp	/^void PrintGetNodeOutDegV() {$/;"	f
PrintGetOutDegCntFlt	tutorials/demo-alg.cpp	/^void PrintGetOutDegCntFlt() {$/;"	f
PrintGetOutDegCntInt	tutorials/demo-alg.cpp	/^void PrintGetOutDegCntInt() {$/;"	f
PrintGetTreeRootNId	tutorials/demo-alg.cpp	/^void PrintGetTreeRootNId() {$/;"	f
PrintGetTreeSig	tutorials/demo-alg.cpp	/^void PrintGetTreeSig() {$/;"	f
PrintGetTreeSigWithNodeMap	tutorials/demo-alg.cpp	/^void PrintGetTreeSigWithNodeMap() {$/;"	f
PrintGetUnDir	tutorials/demo-alg.cpp	/^void PrintGetUnDir() {$/;"	f
PrintGraph	tutorials/demo-alg.cpp	/^void PrintGraph(const char s[], const PGraph& Graph) {$/;"	f
PrintGraph	tutorials/demo-subgraph.cpp	/^void PrintGraph(const char s[], const PGraph& Graph) {$/;"	f
PrintGraphStat	examples/mkdatasets/mkdatasets.cpp	/^void PrintGraphStat(const PNGraph& G) {$/;"	f
PrintGraphStatTable	examples/mkdatasets/mkdatasets.cpp	/^void PrintGraphStatTable(const PGraph& G, TStr OutFNm, TStr Desc="") {$/;"	f
PrintGrouping	snap-core/table.cpp	/^void TTable::PrintGrouping(const THash<TGroupKey, TIntV>& Mapping) const{$/;"	f	class:TTable
PrintI	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	void PrintI(std::ostream &os) {$/;"	f	class:TSBitSet
PrintInfo	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	void PrintInfo() { }$/;"	f	class:TSBitSet
PrintInfo	snap-core/gbase.h	/^void PrintInfo(const PGraph& Graph, const TStr& Desc, const TStr& OutFNm, const bool& Fast) {$/;"	f	namespace:TSnap
PrintInfo	snap-exp/signnet.cpp	/^void TSignMicroEvol::PrintInfo() const {$/;"	f	class:TSignMicroEvol
PrintInfo	snap-exp/signnet.cpp	/^void TSignNet::PrintInfo(const TStr& Desc) const {$/;"	f	class:TSignNet
PrintIntValue	tutorials/demo-alg.cpp	/^void PrintIntValue(const char Desc[],$/;"	f
PrintIsTree	tutorials/demo-alg.cpp	/^void PrintIsTree() {$/;"	f
PrintMMNetStats	tutorials/demo-multimodal.cpp	/^void PrintMMNetStats(const char s[], PMMNet Graph) {$/;"	f
PrintMakeUnDir	tutorials/demo-alg.cpp	/^void PrintMakeUnDir() {$/;"	f
PrintMatrix	snap-adv/rolx.cpp	/^void PrintMatrix(const TFltVV& Matrix) {$/;"	f
PrintMethodHeader	tutorials/demo-alg.cpp	/^void PrintMethodHeader(const char Desc[]) {$/;"	f
PrintNStats	tutorials/demo-TNodeEDatNet.cpp	/^void PrintNStats(const char s[], TPt <TNodeEDatNet<TInt, TInt> > Net) {$/;"	f
PrintNStats	tutorials/demo-TNodeEdgeNet.cpp	/^void PrintNStats(const char s[], TPt <TNodeEdgeNet<TInt, TInt> > Net) {$/;"	f
PrintNStats	tutorials/demo-TNodeNet.cpp	/^void PrintNStats(const char s[], TPt <TNodeNet<TInt> > Net) {$/;"	f
PrintNet	tutorials/demo-subgraph.cpp	/^void PrintNet(const char s[], const TNet& Net) {$/;"	f
PrintNumbers	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	void PrintNumbers() {$/;"	f	class:TSBitSet
PrintReport	glib-core/tm.cpp	/^void TTmProfiler::PrintReport(const TStr& ProfileNm) const {$/;"	f	class:TTmProfiler
PrintRes	snap-exp/signnet.h	/^  void PrintRes() const {$/;"	f	class:TEdgeSignPred
PrintRoles	snap-adv/rolx.cpp	/^void PrintRoles(const TIntIntH& Roles) {$/;"	f
PrintSize	snap-core/table.cpp	/^void TTable::PrintSize(){$/;"	f	class:TTable
PrintSize	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::PrintSize(){$/;"	f	class:ExplicitStringTable
PrintSummary	snap-adv/agmfit.cpp	/^void TAGMFit::PrintSummary() {$/;"	f	class:TAGMFit
PrintTFltPrVValues	tutorials/demo-alg.cpp	/^void PrintTFltPrVValues(const char Desc[],$/;"	f
PrintTFltV	glib-core/linalg.cpp	/^void TLAMisc::PrintTFltV(const TFltV& Vec, const TStr& VecNm) {$/;"	f	class:TLAMisc
PrintTFltVV	glib-core/linalg.cpp	/^void TLAMisc::PrintTFltVV(const TFltVV& A, const TStr& MatrixNm) {$/;"	f	class:TLAMisc
PrintTIntPrVValues	tutorials/demo-alg.cpp	/^void PrintTIntPrVValues(const char Desc[],$/;"	f
PrintTIntV	glib-core/linalg.cpp	/^void TLAMisc::PrintTIntV(const TIntV& Vec, const TStr& VecNm) {$/;"	f	class:TLAMisc
PrintTIntVValues	tutorials/demo-alg.cpp	/^void PrintTIntVValues(const char Desc[],$/;"	f
PrintTheta	snap-adv/agm.h	/^  void PrintTheta() { for (int t = 0; t < Theta.Len(); t++) { printf("Theta[%d] = %f\\n", t, Theta[t].Val); } }$/;"	f	class:TLogRegPredict
Priorities	glib-core/priorityqueue.h	/^  TFltV Priorities;$/;"	m	class:TMaxPriorityQueue
PriorityQueueTest	test/test-priority-queue.cpp	/^class PriorityQueueTest { };  \/\/ For gtest highlighting$/;"	c	file:
ProbDecay	snap-core/ff.h	/^  TFlt FwdBurnProb, BckBurnProb, ProbDecay; \/\/ Forest Fire parameters$/;"	m	class:TFfGGen
ProbDecay	snap-core/ff.h	/^  TFlt FwdBurnProb, BckBurnProb, ProbDecay;$/;"	m	class:TForestFire
ProbH	snap-adv/ncp.h	/^  TIntFltH ProbH, ResH;$/;"	m	class:TLocClust
ProbMtx	snap-adv/kronecker.h	/^  TKronMtx ProbMtx, LLMtx; \/\/ Prob and LL matrices (parameters)$/;"	m	class:TKroneckerLL
ProcessComment	glib-core/unicode.h	/^		void ProcessComment(TUniChDb::TUcdFileReader &reader)$/;"	f	class:TUniChDb::TSubcatHelper
ProcessPost	snap-exp/memes.h	/^  virtual void ProcessPost(const bool& GoodItem) { }$/;"	f	class:TQuoteLoader
ProcessPost	snap-exp/spinn3r.cpp	/^void TQuoteExtractor::ProcessPost(const bool& GoodItem) {$/;"	f	class:TQuoteExtractor
ProcessPost	snap-exp/spinn3r.h	/^  virtual void ProcessPost(const bool& GoodItem) { }$/;"	f	class:TSpinn3rFeedItem
ProcessPost	snap-exp/spinn3r.h	/^  virtual void ProcessPost(const bool& GoodItem) { }$/;"	f	class:TSpinn3rFullItem
ProcessPosts	snap-exp/memes.cpp	/^void TQuoteLoader::ProcessPosts(const bool& IsXml, int LoadN) {$/;"	f	class:TQuoteLoader
ProcessPosts	snap-exp/spinn3r.cpp	/^void TSpinn3rFullItem::ProcessPosts(const TStr& XmlFNmWc, int LoadN) {$/;"	f	class:TSpinn3rFullItem
Project	glib-core/linalg.cpp	/^void TSparseSVD::Project(const TIntFltKdV& Vec, const TFltVV& U, TFltV& ProjVec) {$/;"	f	class:TSparseSVD
Project	snap-core/table.cpp	/^PTable TTable::Project(const TStrV& ProjectCols) {$/;"	f	class:TTable
ProjectInPlace	snap-core/table.cpp	/^void TTable::ProjectInPlace(const TStrV& ProjectCols) {$/;"	f	class:TTable
PruneRecursiveFeatures	snap-adv/rolx.cpp	/^TIntFtrH PruneRecursiveFeatures(const PUNGraph Graph, const TIntFtrH& Features,$/;"	f
Pt	glib-core/bd.h	/^    void* Pt;$/;"	m	union:TConv_Pt64Ints32::__anon41
PubTm	snap-exp/memes.h	/^  TSecTm PubTm;$/;"	m	class:TMemesDataLoader
PubTm	snap-exp/memes.h	/^  TSecTm PubTm;$/;"	m	class:TQuoteLoader
PubTm	snap-exp/spinn3r.h	/^  TSecTm PubTm;$/;"	m	class:TSpinn3rFeedItem
PubTm	snap-exp/spinn3r.h	/^  TSecTm PubTm;$/;"	m	class:TSpinn3rFullItem
PubidChSet	glib-core/xml.h	/^  TBSet LetterChSet, DigitChSet, NameChSet, PubidChSet;$/;"	v
Push	glib-core/ds.h	/^  void Push(){ValV.Add();}$/;"	f	class:TSStack
Push	glib-core/ds.h	/^  void Push(const TVal& Val){$/;"	f	class:TQQueue
Push	glib-core/ds.h	/^  void Push(const TVal& Val){ValV.Add(Val);}$/;"	f	class:TSStack
Push	glib-core/dt.h	/^  void Push(const char& Ch){operator+=(Ch);}$/;"	f
Push	snap-adv/subgraphenum.h	/^		inline void Push(int nodeId) { m_arr[m_size]=nodeId; m_size++; }$/;"	f	class:TSubGraphEnum::TSVec
Push	snap-core/gbase.h	/^  void Push(const TVal& Val) {$/;"	f	class:TSnapQueue
PushActive	snap-core/flow.cpp	/^  void PushActive(int NId) {$/;"	f	class:TSnap::TPRManager
PushHeap	snap-core/gbase.h	/^void THeap<TVal, TCmp>::PushHeap(const TVal& Val) {$/;"	f	class:THeap
PushHeap	snap-core/gbase.h	/^void THeap<TVal, TCmp>::PushHeap(const int& First, int HoleIdx, const int& Top, TVal Val) {$/;"	f	class:THeap
PushRelabel	snap-core/flow.cpp	/^int PushRelabel (TPRManager &PRM, const int &NId, const TNEANet::TNodeI &NI) {$/;"	f	namespace:TSnap
PushToInNbr	snap-core/flow.cpp	/^void PushToInNbr (TPRManager &PRM, const int &NId, const int &InNId, const int &EId) {$/;"	f	namespace:TSnap
PushToOutNbr	snap-core/flow.cpp	/^void PushToOutNbr (TPRManager &PRM, const int &NId, const int &OutNId, const int &EId) {$/;"	f	namespace:TSnap
Put	glib-core/os.cpp	/^void TSysConsole::Put(const TStr& Str){$/;"	f	class:TSysConsole
PutAddr	glib-core/blobbs.h	/^  void PutAddr(const uint& _Addr){Addr=_Addr;}$/;"	f
PutAll	glib-core/ds.h	/^  void PutAll(const TVal& Val) {$/;"	f	class:TGLib_OLD::TVecPool
PutAll	glib-core/ds.h	/^  void PutAll(const TVal& Val) {$/;"	f	class:TVecPool
PutAll	glib-core/ds.h	/^  void PutAll(const TVal& Val){ValV.PutAll(Val);}$/;"	f	class:TVVec
PutAll	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::PutAll(const TVal& Val){$/;"	f	class:TVec
PutAllMtx	snap-adv/kronecker.h	/^  void PutAllMtx(const double& Val) { SeedMtx.PutAll(Val); }$/;"	f	class:TKronMtx
PutAllMtx	snap-adv/mag.h	/^  void PutAllMtx(const double& Val) { SeedMtx.PutAll(Val); }$/;"	f	class:TMAGAffMtx
PutAllWgts	snap-exp/wgtnet.cpp	/^void TWgtNet::PutAllWgts() {$/;"	f	class:TWgtNet
PutArr	glib-core/json.h	/^  void PutArr(){JsonValType=jvtArr;}$/;"	f
PutBack	glib-core/ds.h	/^void TLst<TVal>::PutBack(const PLstNd& Nd){$/;"	f	class:TLst
PutBack	glib-core/unicode.h	/^		void PutBack(int c) { Assert(putBackCh == EOF); putBackCh = c; }$/;"	f	class:TUniChDb::TUcdFileReader
PutBf	glib-core/dt.cpp	/^int TMemOut::PutBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TMemOut
PutBf	glib-core/fl.cpp	/^int TFInOut::PutBf(const void* LBf, const TSize& LBfL) {$/;"	f	class:TFInOut
PutBf	glib-core/fl.cpp	/^int TFOut::PutBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TFOut
PutBf	glib-core/fl.cpp	/^int TMOut::PutBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TMOut
PutBf	glib-core/fl.cpp	/^int TStdOut::PutBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TStdOut
PutBf	glib-core/fl.cpp	/^void TFRnd::PutBf(const void* Bf, const TSize& BfL){$/;"	f	class:TFRnd
PutBf	glib-core/zipfl.cpp	/^int TZipOut::PutBf(const void* LBf, const TSize& LBfL){$/;"	f	class:TZipOut
PutBlob	glib-core/blobbs.cpp	/^TBlobPt TGBlobBs::PutBlob(const PSIn& SIn){$/;"	f	class:TGBlobBs
PutBlob	glib-core/blobbs.cpp	/^TBlobPt TGBlobBs::PutBlob(const TBlobPt& BlobPt, const PSIn& SIn){$/;"	f	class:TGBlobBs
PutBlob	glib-core/blobbs.cpp	/^TBlobPt TMBlobBs::PutBlob(const PSIn& SIn){$/;"	f	class:TMBlobBs
PutBlob	glib-core/blobbs.cpp	/^TBlobPt TMBlobBs::PutBlob(const TBlobPt& BlobPt, const PSIn& SIn){$/;"	f	class:TMBlobBs
PutBlobBsStateStr	glib-core/blobbs.cpp	/^void TBlobBs::PutBlobBsStateStr(const PFRnd& FBlobBs, const TBlobBsState& State){$/;"	f	class:TBlobBs
PutBlobState	glib-core/blobbs.cpp	/^void TBlobBs::PutBlobState(const PFRnd& FBlobBs, const TBlobState& State){$/;"	f	class:TBlobBs
PutBlobTag	glib-core/blobbs.cpp	/^void TBlobBs::PutBlobTag(const PFRnd& FBlobBs, const TBlobTag& BlobTag){$/;"	f	class:TBlobBs
PutBlockLenV	glib-core/blobbs.cpp	/^void TBlobBs::PutBlockLenV(const PFRnd& FBlobBs, const TIntV& BlockLenV){$/;"	f	class:TBlobBs
PutBool	glib-core/fl.cpp	/^int TSOut::PutBool(const bool& Bool){$/;"	f	class:TSOut
PutBool	glib-core/json.h	/^  void PutBool(const bool& BoolVal){JsonValType=jvtBool; Bool=BoolVal;}$/;"	f
PutCStr	glib-core/wch.cpp	/^void TWChA::PutCStr(const char* CStr){$/;"	f	class:TWChA
PutCh	glib-core/fl.cpp	/^int TFOut::PutCh(const char& Ch){$/;"	f	class:TFOut
PutCh	glib-core/fl.cpp	/^int TSOut::PutCh(const char& Ch, const int& Chs){$/;"	f	class:TSOut
PutCh	glib-core/fl.cpp	/^void TFRnd::PutCh(const char& Ch, const int& Chs){$/;"	f	class:TFRnd
PutCh	glib-core/fl.h	/^  int PutCh(const char& Ch) { return PutBf(&Ch, sizeof(Ch)); }$/;"	f	class:TFInOut
PutCh	glib-core/fl.h	/^  int PutCh(const char& Ch){if (BfL==MxBfL){$/;"	f	class:TMOut
PutCh	glib-core/fl.h	/^  int PutCh(const char& Ch){putchar(Ch); return Ch;}$/;"	f	class:TStdOut
PutCh	glib-core/fl.h	/^  void PutCh(const char& Ch){PutBf(&Ch, sizeof(Ch));}$/;"	f
PutCh	glib-core/http.cpp	/^  void PutCh(const char& _Ch){$/;"	f	class:THttpLx
PutCh	glib-core/zipfl.cpp	/^int TZipOut::PutCh(const char& Ch){$/;"	f	class:TZipOut
PutCs	glib-core/fl.h	/^  void PutCs(const TCs& Cs){PutBf(&Cs, sizeof(Cs));}$/;"	f
PutDosLn	glib-core/fl.cpp	/^int TSOut::PutDosLn(const int& Lns){$/;"	f	class:TSOut
PutFBase	glib-core/dt.cpp	/^TStr TStr::PutFBase(const TStr& FNm, const TStr& FBase){$/;"	f	class:TStr
PutFBaseIfEmpty	glib-core/dt.cpp	/^TStr TStr::PutFBaseIfEmpty(const TStr& FNm, const TStr& FBase){$/;"	f	class:TStr
PutFExt	glib-core/dt.cpp	/^TStr TStr::PutFExt(const TStr& FNm, const TStr& FExt){$/;"	f	class:TStr
PutFExtIfEmpty	glib-core/dt.cpp	/^TStr TStr::PutFExtIfEmpty(const TStr& FNm, const TStr& FExt){$/;"	f	class:TStr
PutFFreeBlobPtV	glib-core/blobbs.cpp	/^void TBlobBs::PutFFreeBlobPtV(const PFRnd& FBlobBs, const TBlobPtV& FFreeBlobPtV){$/;"	f	class:TBlobBs
PutFSet	glib-core/blobbs.cpp	/^void TBlobPt::PutFSet(const int& FSetN, const TB8Set& FSet){$/;"	f	class:TBlobPt
PutFlag	glib-core/blobbs.cpp	/^void TBlobPt::PutFlag(const int& FlagN, const bool& Val){$/;"	f	class:TBlobPt
PutFlt	glib-core/fl.cpp	/^int TSOut::PutFlt(const double& Flt){$/;"	f	class:TSOut
PutFlt	glib-core/fl.cpp	/^int TSOut::PutFlt(const double& Flt, const char* FmtStr){$/;"	f	class:TSOut
PutFront	glib-core/ds.h	/^void TLst<TVal>::PutFront(const PLstNd& Nd){$/;"	f	class:TLst
PutHd	glib-core/ds.h	/^  void PutHd(const THd& Hd){FRnd->PutHd(&Hd);}$/;"	f	class:TFRec
PutHd	glib-core/fl.h	/^  void PutHd(const void* Hd){IAssert(RecAct);$/;"	f
PutHttpRqStr	glib-core/url.h	/^  void PutHttpRqStr(const TStr& _HttpRqStr){HttpRqStr=_HttpRqStr;}$/;"	f
PutIndent	glib-core/fl.cpp	/^int TSOut::PutIndent(const int& IndentLev){$/;"	f	class:TSOut
PutInt	glib-core/bits.h	/^  void PutInt(const int& MnBitN, const int& MxBitN, const int& Val){$/;"	f	class:TB32Set
PutInt	glib-core/bits.h	/^  void PutInt(const int& MnBitN, const int& MxBitN, const int& Val){$/;"	f	class:TB8Set
PutInt	glib-core/fl.cpp	/^int TSOut::PutInt(const int& Int){$/;"	f	class:TSOut
PutInt	glib-core/fl.cpp	/^int TSOut::PutInt(const int& Int, const char* FmtStr){$/;"	f	class:TSOut
PutInt	glib-core/fl.h	/^  void PutInt(const int& Int){PutBf(&Int, sizeof(Int));}$/;"	f
PutIpNum	glib-core/url.h	/^  void PutIpNum(const TStr& _IpNum){IpNum=_IpNum;}$/;"	f
PutLn	glib-core/fl.cpp	/^int TSOut::PutLn(const int& Lns){$/;"	f	class:TSOut
PutLsUInt32	glib-core/bd.h	/^  void PutLsUInt32(const uint& Ls){Val.UInt32.Ls=Ls;}$/;"	f	class:TConv_Pt64Ints32
PutMem	glib-core/fl.cpp	/^int TSOut::PutMem(const TMem& Mem){$/;"	f	class:TSOut
PutMsUInt32	glib-core/bd.h	/^  void PutMsUInt32(const uint& Ms){Val.UInt32.Ms=Ms;}$/;"	f	class:TConv_Pt64Ints32
PutMxSegLen	glib-core/blobbs.cpp	/^void TBlobBs::PutMxSegLen(const PFRnd& FBlobBs, const int& MxSegLen){$/;"	f	class:TBlobBs
PutNull	glib-core/json.h	/^  void PutNull(){JsonValType=jvtNull;}$/;"	f
PutNum	glib-core/json.h	/^  void PutNum(const double& NumVal){JsonValType=jvtNum; Num=NumVal;}$/;"	f
PutObj	glib-core/json.h	/^  void PutObj(){JsonValType=jvtObj;}$/;"	f
PutOnExeStopF	glib-core/bd.h	/^  static void PutOnExeStopF(TOnExeStopF _OnExeStopF){OnExeStopF=_OnExeStopF;}$/;"	f	class:TOnExeStop
PutPt	glib-core/bd.h	/^  void PutPt(void* Pt){Val.Pt=Pt;}$/;"	f	class:TConv_Pt64Ints32
PutRec	glib-core/ds.h	/^  void PutRec(const TRec& Rec, const int& RecN=-1){FRnd->PutRec(&Rec, RecN);}$/;"	f	class:TFRec
PutRec	glib-core/fl.h	/^  void PutRec(const void* Rec, const int& RecN=-1){$/;"	f
PutRnd01Wgts	snap-exp/wgtnet.cpp	/^void TWgtNet::PutRnd01Wgts() {$/;"	f	class:TWgtNet
PutRndSeed	snap-adv/kronecker.h	/^  static void PutRndSeed(const int& Seed) { TKronMtx::Rnd.PutSeed(Seed); }$/;"	f	class:TKronMtx
PutSIn	glib-core/fl.cpp	/^void TFRnd::PutSIn(const PSIn& SIn, TCs& Cs){$/;"	f	class:TFRnd
PutSeed	glib-core/dt.cpp	/^void TRnd::PutSeed(const int& _Seed){$/;"	f	class:TRnd
PutSeg	glib-core/blobbs.h	/^  void PutSeg(const uchar& _Seg){Seg=_Seg;}$/;"	f
PutSep	glib-core/fl.cpp	/^int TSOut::PutSep(const int& NextStrLen){$/;"	f	class:TSOut
PutSep	glib-core/lx.cpp	/^void TOLx::PutSep(const TLxSym& Sym){$/;"	f	class:TOLx
PutSepLn	glib-core/fl.cpp	/^int TSOut::PutSepLn(const int& Lns){$/;"	f	class:TSOut
PutStr	glib-core/fl.cpp	/^int TSOut::PutStr(const TChA& ChA){$/;"	f	class:TSOut
PutStr	glib-core/fl.cpp	/^int TSOut::PutStr(const TStr& Str, const bool& ForceInLn){$/;"	f	class:TSOut
PutStr	glib-core/fl.cpp	/^int TSOut::PutStr(const TStr& Str, const char* FmtStr){$/;"	f	class:TSOut
PutStr	glib-core/fl.cpp	/^int TSOut::PutStr(const char* CStr){$/;"	f	class:TSOut
PutStr	glib-core/fl.cpp	/^void TFRnd::PutStr(const TStr& Str){$/;"	f	class:TFRnd
PutStr	glib-core/json.h	/^  void PutStr(const TStr& StrVal){JsonValType=jvtStr; Str=StrVal;}$/;"	f
PutStrFmt	glib-core/fl.cpp	/^int TSOut::PutStrFmt(const char *FmtStr, ...){$/;"	f	class:TSOut
PutStrFmtLn	glib-core/fl.cpp	/^int TSOut::PutStrFmtLn(const char *FmtStr, ...){$/;"	f	class:TSOut
PutStrLn	glib-core/fl.h	/^  int PutStrLn(const TStr& Str, const bool& ForceInLn=false){$/;"	f	class:TSOut
PutSubTok	glib-core/xml.cpp	/^void TXmlTok::PutSubTok(const PXmlTok& Tok, const int& SubTokN){$/;"	f	class:TXmlTok
PutSym	glib-core/lx.cpp	/^void TOLx::PutSym(const TLxSym& Sym){$/;"	f	class:TOLx
PutTagTokStr	glib-core/xml.cpp	/^void TXmlDoc::PutTagTokStr(const TStr& TagPath, const TStr& TokStr) const {$/;"	f	class:TXmlDoc
PutUCh	glib-core/fl.h	/^  void PutUCh(const uchar& UCh){PutBf(&UCh, sizeof(UCh));}$/;"	f
PutUInt	glib-core/fl.cpp	/^int TSOut::PutUInt(const uint& UInt){$/;"	f	class:TSOut
PutUInt	glib-core/fl.cpp	/^int TSOut::PutUInt(const uint& UInt, const char* FmtStr){$/;"	f	class:TSOut
PutUInt	glib-core/fl.h	/^  void PutUInt(const uint& UInt){PutBf(&UInt, sizeof(UInt));}$/;"	f
PutUInt64	glib-core/bd.h	/^  void PutUInt64(const uint64& _UInt64){Val.UInt64=_UInt64;}$/;"	f	class:TConv_Pt64Ints32
PutV	glib-core/ds.h	/^  void PutV(const int& VId, const TValV& ValV) {$/;"	f	class:TGLib_OLD::TVecPool
PutV	glib-core/ds.h	/^  void PutV(const int& VId, const TValV& ValV) {$/;"	f	class:TVecPool
PutVal	glib-core/ss.cpp	/^void TSs::PutVal(const int& X, const int& Y, const TStr& Str){$/;"	f	class:TSs
PutVarBoolV	glib-core/lx.cpp	/^void TOLx::PutVarBoolV(const TStr& VarNm, const TBoolV& BoolV,$/;"	f	class:TOLx
PutVarFltV	glib-core/lx.cpp	/^void TOLx::PutVarFltV(const TStr& VarNm, const TFltV& FltV,$/;"	f	class:TOLx
PutVarIntV	glib-core/lx.cpp	/^void TOLx::PutVarIntV(const TStr& VarNm, const TIntV& IntV,$/;"	f	class:TOLx
PutVarStrPrV	glib-core/lx.cpp	/^void TOLx::PutVarStrPrV(const TStr& VarNm, const TStrPrV& StrPrV,$/;"	f	class:TOLx
PutVarStrV	glib-core/lx.cpp	/^void TOLx::PutVarStrV(const TStr& VarNm, const TStrV& StrV,$/;"	f	class:TOLx
PutVarStrVV	glib-core/lx.cpp	/^void TOLx::PutVarStrVV(const TStr& VarNm, const TVec<TStrV>& StrVV,$/;"	f	class:TOLx
PutVarVal	glib-core/env.cpp	/^void TEnv::PutVarVal(const TStr& VarNm, const TStr& VarVal) {$/;"	f	class:TEnv
PutVersionStr	glib-core/blobbs.cpp	/^void TBlobBs::PutVersionStr(const PFRnd& FBlobBs){$/;"	f	class:TBlobBs
PutX	glib-core/ds.h	/^  void PutX(const int& X, const TVal& Val){$/;"	f	class:TVVec
PutXY	glib-core/ds.h	/^  void PutXY(const int& X, const int& Y, const TVal& Val){At(X, Y)=Val;}$/;"	f	class:TVVec
PutY	glib-core/ds.h	/^  void PutY(const int& Y, const TVal& Val){$/;"	f	class:TVVec
Q	snap-core/cmty.cpp	/^  double Q;$/;"	m	class:TSnap::TSnapDetail::TCNMQMatrix	file:
QA_FILES	snap-exp/test-dev/Benchmark.cpp	6;"	d	file:
QA_OPS	snap-exp/test-dev/Benchmark.cpp	8;"	d	file:
QGraph	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &QGraph;$/;"	m	class:TSolver
QGraph	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &QGraph;$/;"	m	class:TSolver
QGraph	snap-exp/linkpred.h	/^  TQGraph QGraph;$/;"	m	class:__OLD__::TLpBase
QSort	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::QSort(const TSizeTy& MnLValN, const TSizeTy& MxRValN, const bool& Asc){$/;"	f	class:TVec
QSort	snap-core/table.cpp	/^void TTable::QSort(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:TTable
QSort	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::QSort(TIntV& V, TInt StartIdx, TInt EndIdx, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:PhysicalOrderTable
QSortCmp	glib-core/ds.h	/^  static void QSortCmp(TIter BI, TIter EI, const TCmp& Cmp) {$/;"	f	class:TVec
QSortKeyVal	snap-core/table.cpp	/^void TTable::QSortKeyVal(TIntV& Key, TIntV& Val, TInt Start, TInt End) {$/;"	f	class:TTable
QSortPar	snap-core/table.cpp	/^void TTable::QSortPar(TIntV& V, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:TTable
QSortPar	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::QSortPar(TIntV& V, const TVec<TAttrType>& SortByTypes, const TIntV& SortByIndices, TBool Asc) {$/;"	f	class:PhysicalOrderTable
QStrStr	glib-core/lx.cpp	/^const TStr TLxSymStr::QStrStr="<q-string>";$/;"	m	class:TLxSymStr	file:
QtCIdTy	snap-exp/memes.h	/^  TQtIdTy QtCIdTy; \/\/ if type qtQuote: quote id; if qtInClust: id of the parent; qtRoot, qtCentr$/;"	m	class:TQuote
QtCnt	snap-exp/memes.h	/^    uchar QtCnt;$/;"	m	class:TQuote::TTmUrlCnt
QtIdNetH	snap-exp/memenet.h	/^  THash<TInt, PMemeNet> QtIdNetH;$/;"	m	class:TMemeNetBs
QtIdV	snap-exp/memenet.h	/^  TIntV QtIdV;$/;"	m	class:TMemeNetDat
QtStr	snap-exp/memenet.h	/^  TStr QtStr;$/;"	m	class:TMemeNet
QtStr	snap-exp/memes.h	/^  TStr QtStr;      \/\/ artificial cluster root quote has string QtStr$/;"	m	class:TQuote
QtTm	snap-exp/memes.h	/^    TSecTm QtTm;$/;"	m	class:TQuote::TTmUrlCnt
QtUrlId	snap-exp/memes.h	/^    int QtUrlId;$/;"	m	class:TQuote::TTmUrlCnt
Quart1	glib-core/xmath.h	/^  TFlt Median, Quart1, Quart3;$/;"	v
Quart3	glib-core/xmath.h	/^  TFlt Median, Quart1, Quart3;$/;"	v
QuestionStr	glib-core/lx.cpp	/^const TStr TLxSymStr::QuestionStr="?";$/;"	m	class:TLxSymStr	file:
Queue	snap-core/bfsdfs.h	/^  TSnapQueue<int> Queue;$/;"	m	class:TBreathFS
Queue	snap-exp/bfs-dev/bfs-dev.h	/^  TSnapQueue<int> Queue;$/;"	m	class:TBreathFS_Test
Queue	snap-exp/bfs-dev/bfs-vector.h	/^  TSnapQueue<int> Queue;$/;"	m	class:TBreathFS_Test
QuoteH	snap-exp/memes.h	/^  THash<TInt, TQuote> QuoteH; \/\/ QtIds go from 0...$/;"	m	class:TQuoteBs
QuotePostCnt	snap-exp/spinn3r.h	/^  TInt BadPostCnt, NoContentCnt, NoLatinCnt, GoodLatinCnt, QuotePostCnt, QuotesCnt;$/;"	m	class:TQuoteExtractor
QuoteToDomainSvd	snap-exp/memenet.cpp	/^void TMemeNetBs::QuoteToDomainSvd() const {$/;"	f	class:TMemeNetBs
QuoteV	snap-exp/memes.h	/^  TVec<TChA> QuoteV;$/;"	m	class:TQuoteLoader
QuoteV	snap-exp/spinn3r.h	/^  TVec<TChA> QuoteV;$/;"	m	class:TQuoteExtractor
QuotesCnt	snap-exp/spinn3r.h	/^  TInt BadPostCnt, NoContentCnt, NoLatinCnt, GoodLatinCnt, QuotePostCnt, QuotesCnt;$/;"	m	class:TQuoteExtractor
RANDOM	snap-adv/cascdynetinf.h	/^  RANDOM \/\/ random noise around alpha value$/;"	e	enum:__anon59
RAY	snap-adv/cascdynetinf.h	/^  RAY, \/\/ rayleigh$/;"	e	enum:__anon58
RAYLEIGH	snap-adv/cascdynetinf.h	/^  RAYLEIGH, \/\/ rayleigh trend$/;"	e	enum:__anon59
RAY_SAMPLING	snap-adv/cascdynetinf.h	/^  RAY_SAMPLING$/;"	e	enum:__anon61
RBraceStr	glib-core/lx.cpp	/^const TStr TLxSymStr::RBraceStr="}";$/;"	m	class:TLxSymStr	file:
RBracketStr	glib-core/lx.cpp	/^const TStr TLxSymStr::RBracketStr="]";$/;"	m	class:TLxSymStr	file:
RGraph	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &RGraph;$/;"	m	class:TSolver
RGraph	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TPt<TNodeEDatNet<TNodeData, TEdgeData> > &RGraph;$/;"	m	class:TSolver
RI3_H	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	28;"	d
RIGRAPH_H	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	28;"	d
RISNAP	contrib/unict_univr-risnap/Makefile	/^RISNAP=risnap$/;"	m
RISNAPDS	contrib/unict_univr-risnap/Makefile	/^RISNAPDS=risnapds$/;"	m
RParenStr	glib-core/lx.cpp	/^const TStr TLxSymStr::RParenStr=")";$/;"	m	class:TLxSymStr	file:
RandBench	tutorials/demo-hashvec-benchmark.cpp	/^void RandBench(const int& n) {$/;"	f
RandWalkTest	test/test-randwalk.cpp	/^class RandWalkTest { };  \/\/ For gtest highlighting$/;"	c	file:
RandomInit	snap-adv/agmattr.cpp	/^void TCesna::RandomInit(const int InitComs) {$/;"	f	class:TCesna
RandomInit	snap-adv/agmdirected.cpp	/^void TCoda::RandomInit(const int InitComs) {$/;"	f	class:TCoda
RandomInit	snap-adv/agmfast.cpp	/^void TAGMFast::RandomInit(const int InitComs) {$/;"	f	class:TAGMFast
RandomInit	snap-adv/agmfit.cpp	/^void TAGMFit::RandomInit(const int& MaxK) {$/;"	f	class:TAGMFit
RandomInit	snap-adv/mag.cpp	/^void TMAGFitBern::RandomInit(const TFltV& MuV, const TMAGAffMtxV& AffMtxV, const int& Seed) {$/;"	f	class:TMAGFitBern
RandomInitCmtyVV	snap-adv/agmfit.cpp	/^void TAGMFit::RandomInitCmtyVV(const int InitComs, const double ComSzAlpha, const double MemAlpha, const int MinComSz, const int MaxComSz, const int MinMem, const int MaxMem) {$/;"	f	class:TAGMFit
Randomize	glib-core/dt.h	/^  void Randomize(){PutSeed(RndSeed);}$/;"	f	class:TRnd
Rank	snap-core/gbase.h	/^  TInt& Rank(const int& Key) { return KIdSetH.GetDat(Key).Val2; }$/;"	f	class:TUnionFind
Read	glib-core/os.cpp	/^int TStdIOPipe::Read(char *Bf, const int& BfMxLen) {$/;"	f	class:TStdIOPipe
ReadByField	tutorials/demo-TSsParser.cpp	/^void ReadByField() {$/;"	f
ReadByLine	tutorials/demo-TSsParser.cpp	/^void ReadByLine() {$/;"	f
ReadEdgeSchemaFromFile	snap-core/gio.cpp	/^int ReadEdgeSchemaFromFile(TSsParser& Ss, const char& Separator, int& SrcColId, int& DstColId, TStrIntH& IntAttrEVals, TStrIntH& FltAttrEVals, TStrIntH& StrAttrEVals) {$/;"	f	namespace:TSnap
ReadEdgesFromFile	snap-core/gio.cpp	/^bool ReadEdgesFromFile(TSsParser& Ss, const char& Separator, PNEANet& Graph, int& SrcColId, int& DstColId, TStrIntH& IntAttrEVals, TStrIntH& FltAttrEVals, TStrIntH& StrAttrEVals) {$/;"	f	namespace:TSnap
ReadFltCol	snap-core/table.cpp	/^void TTable::ReadFltCol(const TStr& ColName, TFltV& Result) const{$/;"	f	class:TTable
ReadIntCol	snap-core/table.cpp	/^void TTable::ReadIntCol(const TStr& ColName, TIntV& Result) const{$/;"	f	class:TTable
ReadNextLine	glib-core/unicode.h	/^		bool ReadNextLine() {$/;"	f	class:TUniChDb::TUcdFileReader
ReadNodeSchemaFromFile	snap-core/gio.cpp	/^int ReadNodeSchemaFromFile(TSsParser& Ss, const char& Separator, int& NId, TStrIntH& IntAttrNVals, TStrIntH& FltAttrNVals, TStrIntH& StrAttrNVals) {$/;"	f	namespace:TSnap
ReadNodesFromFile	snap-core/gio.cpp	/^bool ReadNodesFromFile(TSsParser& Ss, const char& Separator, PNEANet& Graph, int& NColId, TStrIntH& IntAttrNVals, TStrIntH& FltAttrNVals, TStrIntH& StrAttrNVals) {$/;"	f	namespace:TSnap
ReadStrCol	snap-core/table.cpp	/^void TTable::ReadStrCol(const TStr& ColName, TStrV& Result) const{$/;"	f	class:TTable
RealEdges	snap-adv/kronecker.h	/^  TInt RealEdges;	\/\/ # of observed edges (for link prediction)$/;"	m	class:TKroneckerLL
RealNodes	snap-adv/kronecker.h	/^  TInt RealNodes;	\/\/ # of observed nodes (for KronEM)$/;"	m	class:TKroneckerLL
ReassignToClust	snap-exp/memes.cpp	/^void TQuoteBs::ReassignToClust(const int& QtId, const int& NewCId) {$/;"	f	class:TQuoteBs
RecAct	glib-core/fl.h	/^  bool RecAct;$/;"	v
RecLen	glib-core/fl.h	/^  int HdLen, RecLen;$/;"	v
RecalcEdges	snap-exp/memes.cpp	/^void TClustNet::RecalcEdges(const double& MinOverlapFrac) {$/;"	f	class:TClustNet
RecurBfs	snap-core/ghash.cpp	/^void TSubGraphsEnum::RecurBfs(const int& MxDepth) {$/;"	f	class:TSubGraphsEnum
RecurBfs	snap-core/ghash.cpp	/^void TSubGraphsEnum::RecurBfs(const int& NId, const int& Depth, TSimpleGraph& PrevG) {$/;"	f	class:TSubGraphsEnum
RecurBfs1	snap-core/ghash.cpp	/^void TSubGraphsEnum::RecurBfs1(const int& MxDepth) {$/;"	f	class:TSubGraphsEnum
RecurBfs1	snap-core/ghash.cpp	/^void TSubGraphsEnum::RecurBfs1(const int& NId, const int& Depth) {$/;"	f	class:TSubGraphsEnum
RedirStatusCd	glib-core/http.cpp	/^const int THttp::RedirStatusCd=300;$/;"	m	class:THttp	file:
RedirStatusCd	glib-core/http.h	/^  static const int RedirStatusCd;$/;"	m	class:THttp
RedistributeEIds	snap-exp/mmgraph-exp.h	/^  static void RedistributeEIds(const TIntV& Weights, TIntV& EIdV, TIntV& TypeIndexV, TIntV& TypeDegV) {$/;"	f	class:TCVNode
Reduce	glib-core/ds.h	/^  void Reduce(const TSizeTy& _Vals=-1) {Vals = _Vals;}$/;"	f	class:TVec
ReebRefine	snap-core/cmty.cpp	/^void ReebRefine(PNGraph& Graph, TIntH& t, int e, PNGraph& gFinal, TIntH& tFinal, bool collapse) {$/;"	f	namespace:TSnap
ReebSimplify	snap-core/cmty.cpp	/^void ReebSimplify(PNGraph& Graph, TIntH& t, int e, PNGraph& gFinal, TIntH& tFinal, bool collapse) {$/;"	f	namespace:TSnap
Refresh	glib-core/os.h	/^  void Refresh(){$/;"	f
RefreshFPos	glib-core/fl.cpp	/^void TFRnd::RefreshFPos(){$/;"	f	class:TFRnd
Refs	glib-core/bd.h	/^  int Refs;$/;"	m	class:TCRef
RegCoef	snap-adv/agmattr.h	/^  TFlt RegCoef; \/\/Regularization coefficient when we fit for P_c +: L1, -: L2$/;"	m	class:TCesna
RegCoef	snap-adv/agmdirected.h	/^  TFlt RegCoef; \/\/Regularization coefficient when we fit for P_c +: L1, -: L2$/;"	m	class:TCoda
RegCoef	snap-adv/agmfast.h	/^  TFlt RegCoef; \/\/Regularization coefficient when we fit for P_c +: L1, -: L2$/;"	m	class:TAGMFast
RegCoef	snap-adv/agmfit.h	/^  TFlt RegCoef; \/\/\/< Regularization parameter when we fit for P_c (for finding # communities).$/;"	m	class:TAGMFit
RegisterCodec	glib-core/unicode.h	/^	void RegisterCodec(const TStr& nameList, const PCodecBase& codec) {$/;"	f	class:TUnicode
Regularizer	snap-adv/cascdynetinf.h	/^  TRegularizer Regularizer;$/;"	m	class:TNIBs
Reindex	snap-core/table.cpp	/^void TTable::Reindex() {$/;"	f	class:TTable
ReinforceEdges	snap-exp/wgtnet.cpp	/^void TWgtNet::ReinforceEdges(const int& NIters) {$/;"	f	class:TWgtNet
RelUrlStr	glib-core/url.h	/^  TStr UrlStr, RelUrlStr, BaseUrlStr;$/;"	v
Relabel	snap-core/flow.cpp	/^void Relabel (TPRManager &PRM, const int &NId, const TNEANet::TNodeI &NI) {$/;"	f	namespace:TSnap
Remove	snap-adv/subgraphenum.h	/^		inline void Remove(int i) { m_nodes[i]=false; m_size--; }$/;"	f	class:TSubGraphEnum::TSSet
Remove	snap-exp/lsh.cpp	/^void TLSHash::Remove(TFltV Datum) {$/;"	f	class:TLSHash
RemoveActive	snap-core/flow.cpp	/^  void RemoveActive(int NId) {$/;"	f	class:TSnap::TPRManager
RemoveCrossNets	snap-core/mmnet.cpp	/^void TModeNet::RemoveCrossNets(TModeNet& Result, TStrV& CrossNets) {$/;"	f	class:TModeNet
RemoveDirectory	glib-core/os.cpp	/^int RemoveDirectory(const char *FNm) {$/;"	f
RemoveEdgeNoise	snap-adv/kronecker.cpp	/^int TKronNoise::RemoveEdgeNoise(PNGraph& Graph, const double& Rate) {$/;"	f	class:TKronNoise
RemoveEdgeNoise	snap-adv/kronecker.cpp	/^int TKronNoise::RemoveEdgeNoise(PNGraph& Graph, const int& NEdges) {$/;"	f	class:TKronNoise
RemoveEmptyCom	snap-adv/agmfit.cpp	/^int TAGMFit::RemoveEmptyCom() {$/;"	f	class:TAGMFit
RemoveFirstRow	snap-core/table.cpp	/^void TTable::RemoveFirstRow() {$/;"	f	class:TTable
RemoveFirstRow	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::RemoveFirstRow() {$/;"	f	class:ExplicitStringTable
RemoveHtmlTags	snap-core/util.cpp	/^void TStrUtil::RemoveHtmlTags(const TChA& HtmlStr, TChA& TextStr) {$/;"	f	class:TStrUtil
RemoveNext	snap-core/table.cpp	/^void TRowIteratorWithRemove::RemoveNext() {$/;"	f	class:TRowIteratorWithRemove
RemoveNext	snap-exp/alternativetable.cpp	/^void ExplicitStringRowIteratorWithRemove::RemoveNext() {$/;"	f	class:ExplicitStringRowIteratorWithRemove
RemoveNodeNoise	snap-adv/kronecker.cpp	/^int TKronNoise::RemoveNodeNoise(PNGraph& Graph, const double& Rate, const bool Random) {$/;"	f	class:TKronNoise
RemoveNodeNoise	snap-adv/kronecker.cpp	/^int TKronNoise::RemoveNodeNoise(PNGraph& Graph, const int& NNodes, const bool Random) {$/;"	f	class:TKronNoise
RemoveRow	snap-core/table.cpp	/^void TTable::RemoveRow(TInt RowIdx, TInt PrevRowIdx) {$/;"	f	class:TTable
RemoveRow	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::RemoveRow(TInt RowIdx, TInt PrevRowIdx) {$/;"	f	class:ExplicitStringTable
RemoveSelfVotes	snap-exp/wikinet.cpp	/^void TWikiElec::RemoveSelfVotes() {$/;"	f	class:TWikiElec
Rename	glib-core/fl.cpp	/^void TFile::Rename(const TStr& SrcFNm, const TStr& DstFNm){$/;"	f	class:TFile
Rename	snap-core/table.cpp	/^void TTable::Rename(const TStr& column, const TStr& NewLabel) {$/;"	f	class:TTable
RenumberColName	snap-core/table.cpp	/^TStr TTable::RenumberColName(const TStr& ColName) const {$/;"	f	class:TTable
RenumberColName	snap-exp/alternativetable.cpp	/^TStr ExplicitStringTable::RenumberColName(const TStr& ColName) const {$/;"	f	class:ExplicitStringTable
RepLinkCntH	snap-exp/signnet.h	/^  THash<TIntPr, TFltPr> RepLinkCntH;    \/\/ reciprocal links$/;"	m	class:TSignMicroEvol
RequestIndexFlt	snap-core/table.cpp	/^TInt TTable::RequestIndexFlt(const TStr& ColName) {$/;"	f	class:TTable
RequestIndexInt	snap-core/table.cpp	/^TInt TTable::RequestIndexInt(const TStr& ColName) {$/;"	f	class:TTable
RequestIndexStrMap	snap-core/table.cpp	/^TInt TTable::RequestIndexStrMap(const TStr& ColName) {$/;"	f	class:TTable
ResH	snap-adv/ncp.h	/^  TIntFltH ProbH, ResH;$/;"	m	class:TLocClust
ResH	snap-exp/signnet.h	/^  THash<TStr, TIntQu> ResH; \/\/ method id --> (+Ok, +Bad, -Ok, -Bad)$/;"	m	class:TEdgeSignPred
Reserve	glib-core/ds.h	/^  void Reserve(const ::TSize& MxVals) { Resize(MxVals); }$/;"	f	class:TGLib_OLD::TVecPool
Reserve	glib-core/ds.h	/^  void Reserve(const TSize& MxVals) { Resize(MxVals); }$/;"	f	class:TVecPool
Reserve	glib-core/ds.h	/^  void Reserve(const TSizeTy& _MxVals){Resize(_MxVals);}$/;"	f	class:TVec
Reserve	glib-core/ds.h	/^  void Reserve(const TSizeTy& _MxVals, const TSizeTy& _Vals){ IAssert((0<=_Vals)&&(_Vals<=_MxVals)); Resize(_MxVals); Vals=_Vals;}$/;"	f	class:TVec
Reserve	glib-core/dt.h	/^  void Reserve(const int& _MxBfL, const bool& DoClr = true){$/;"	f
Reserve	glib-core/shash.h	/^  void Reserve(const int NewVals) { Resize(NewVals); }$/;"	f	class:TSparseTable
Reserve	glib-core/shash.h	/^  void Reserve(const int& MxVals) { if (MxVals > Len()) ResizeDelta(MxVals - Len(), 0); }$/;"	f	class:TSparseHash
Reserve	glib-core/shash.h	/^  void Reserve(const int& MxVals) { if (MxVals > Len()) ResizeDelta(MxVals - Len(), 0); }$/;"	f	class:TSparseSet
Reserve	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::Reserve(const int& Nodes, const TSize& Edges) {$/;"	f	class:TBigNet
Reserve	snap-core/graph.cpp	/^void TBPGraph::Reserve(const int& Nodes, const int& Edges) { $/;"	f	class:TBPGraph
Reserve	snap-core/graph.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) NodeH.Gen(Nodes\/2); }$/;"	f	class:TUNGraph
Reserve	snap-core/graph.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) { NodeH.Gen(Nodes\/2); } }$/;"	f	class:TNGraph
Reserve	snap-core/graph.h	/^  void Reserve(const int& Nodes, const int& Edges) {$/;"	f	class:TNEGraph
Reserve	snap-core/graphmp.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) { NodeH.Gen(Nodes); } }$/;"	f	class:TNGraphMP
Reserve	snap-core/network.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) NodeH.Gen(Nodes\/2); }$/;"	f	class:TUndirNet
Reserve	snap-core/network.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) { NodeH.Gen(Nodes\/2); } }$/;"	f	class:TDirNet
Reserve	snap-core/network.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) { NodeH.Gen(Nodes\/2); } }$/;"	f	class:TNodeEDatNet
Reserve	snap-core/network.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) { NodeH.Gen(Nodes\/2); } }$/;"	f	class:TNodeNet
Reserve	snap-core/network.h	/^  void Reserve(const int& Nodes, const int& Edges) {$/;"	f	class:TNEANet
Reserve	snap-core/network.h	/^  void Reserve(const int& Nodes, const int& Edges) {$/;"	f	class:TNodeEdgeNet
Reserve	snap-core/networkmp.h	/^  void Reserve(const int& Nodes, const int& Edges) {$/;"	f	class:TNEANetMP
Reserve	snap-exp/graphmp-exp.h	/^  void Reserve(const int& Nodes, const int& Edges) { if (Nodes>0) { NodeH.Gen(Nodes); } }$/;"	f	class:TUNGraphMP
ReserveAttr	snap-core/networkmp.h	/^  void ReserveAttr(const int& NIntAttr, const int& NFltAttr, const int& NStrAttr, const int& EIntAttr,$/;"	f	class:TNEANetMP
ReserveNIdDeg	snap-core/graph.h	/^  void ReserveNIdDeg(const int& NId, const int& Deg) { GetNode(NId).NIdV.Reserve(Deg); }$/;"	f	class:TUNGraph
ReserveNIdDeg	snap-core/network.h	/^  void ReserveNIdDeg(const int& NId, const int& Deg) { GetNode(NId).NIdV.Reserve(Deg); }$/;"	f	class:TUndirNet
ReserveNIdDeg	snap-exp/graphmp-exp.h	/^  void ReserveNIdDeg(const int& NId, const int& Deg) { GetNode(NId).NIdV.Reserve(Deg); }$/;"	f	class:TUNGraphMP
ReserveNIdInDeg	snap-core/graph.h	/^  void ReserveNIdInDeg(const int& NId, const int& InDeg) { GetNode(NId).InNIdV.Reserve(InDeg); }$/;"	f	class:TNGraph
ReserveNIdInDeg	snap-core/graphmp.h	/^  void ReserveNIdInDeg(const int& NId, const int& InDeg) { GetNode(NId).InNIdV.Reserve(InDeg); }$/;"	f	class:TNGraphMP
ReserveNIdInDeg	snap-core/network.h	/^  void ReserveNIdInDeg(const int& NId, const int& InDeg) { GetNode(NId).InNIdV.Reserve(InDeg); }$/;"	f	class:TDirNet
ReserveNIdOutDeg	snap-core/graph.h	/^  void ReserveNIdOutDeg(const int& NId, const int& OutDeg) { GetNode(NId).OutNIdV.Reserve(OutDeg); }$/;"	f	class:TNGraph
ReserveNIdOutDeg	snap-core/graphmp.h	/^  void ReserveNIdOutDeg(const int& NId, const int& OutDeg) { GetNode(NId).OutNIdV.Reserve(OutDeg); }$/;"	f	class:TNGraphMP
ReserveNIdOutDeg	snap-core/network.h	/^  void ReserveNIdOutDeg(const int& NId, const int& OutDeg) { GetNode(NId).OutNIdV.Reserve(OutDeg); }$/;"	f	class:TDirNet
ReserveNodeDegs	snap-core/graphmp.h	/^  void ReserveNodeDegs(const int& Idx, const int& InDeg, const int& OutDeg) { if (InDeg > 0) NodeH[Idx].InNIdV.Reserve(InDeg); if (OutDeg > 0) NodeH[Idx].OutNIdV.Reserve(OutDeg); }$/;"	f	class:TNGraphMP
Reserved	glib-core/ds.h	/^  ::TSize Reserved() const { return MxVals; }$/;"	f	class:TGLib_OLD::TVecPool
Reserved	glib-core/ds.h	/^  TSizeTy Reserved() const {return MxVals;}$/;"	f	class:TVec
Reserved	glib-core/ds.h	/^  uint64 Reserved() const { return MxVals; }$/;"	f	class:TVecPool
Reserved	glib-core/shash.h	/^  int Reserved() const  { return Table.Reserved(); }$/;"	f	class:TSparseHash
Reserved	glib-core/shash.h	/^  int Reserved() const  { return Table.Reserved(); }$/;"	f	class:TSparseSet
Reserved	glib-core/shash.h	/^  int Reserved() const { return GroupSize; }$/;"	f	class:TSparseGroup
Reserved	glib-core/shash.h	/^  int Reserved() const { return MxVals; }$/;"	f	class:TSparseTable
Reserved	snap-core/gbase.h	/^  int Reserved() const { return ValV.Reserved(); }$/;"	f	class:TSnapQueue
Reserved	snap-core/graphmp.h	/^  int Reserved() const {return NodeH.GetReservedKeyIds();}$/;"	f	class:TNGraphMP
Reserved	snap-core/networkmp.h	/^  int Reserved() const {return NodeH.GetReservedKeyIds();}$/;"	f	class:TNEANetMP
Reserved	snap-exp/graphmp-exp.h	/^  int Reserved() const {return NodeH.GetReservedKeyIds();}$/;"	f	class:TUNGraphMP
ReservedE	snap-core/networkmp.h	/^  int ReservedE() const {return EdgeH.GetReservedKeyIds();}$/;"	f	class:TNEANetMP
Reset	glib-core/fl.h	/^  virtual void Reset(){Fail;}$/;"	f	class:TSIn
Reset	glib-core/fl.h	/^  void Reset(){Cs=TCs(); BfC=0;}$/;"	f	class:TMIn
Reset	glib-core/fl.h	/^  void Reset(){Cs=TCs();}$/;"	f	class:TStdIn
Reset	glib-core/fl.h	/^  void Reset(){rewind(FileId); Cs=TCs(); BfC=BfL=-1; FillBf();}$/;"	f	class:TFIn
Reset	glib-core/tm.h	/^    void Reset(const bool& Start) { TmSoFar = 0; RunningP = Start; ExeTm.Tick(); }$/;"	f	class:TTmStopWatch
Reset	snap-adv/cascdynetinf.cpp	/^void TNIBs::Reset() {$/;"	f	class:TNIBs
ResetAll	glib-core/tm.cpp	/^void TTmProfiler::ResetAll() {$/;"	f	class:TTmProfiler
ResetClusters	snap-exp/memes.cpp	/^void TQuoteBs::ResetClusters() {$/;"	f	class:TQuoteBs
ResetThresh	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::ResetThresh() {$/;"	f	class:TSparseHash
ResetThresh	glib-core/shash.h	/^void TSparseSet<TKey, GroupSize>::ResetThresh() {$/;"	f	class:TSparseSet
ResetTimer	glib-core/tm.h	/^    void ResetTimer(const TStr& TimerNm) { TimerH.GetDat(TimerNm).Reset(false); }$/;"	f
ResetTimer	glib-core/tm.h	/^    void ResetTimer(const int& TimerId) { TimerH[TimerId].Reset(false); }$/;"	f
Resize	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	void Resize(size_t NSize) {$/;"	f	class:TSBitSet
Resize	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Resize(const TSizeTy& _MxVals){$/;"	f	class:TVec
Resize	glib-core/ds.h	/^void TVecPool<TVal, TSizeTy>::Resize(const TSize& _MxVals){$/;"	f	class:TVecPool
Resize	glib-core/ds.h	/^void TVecPool<TVal>::Resize(const ::TSize& _MxVals){$/;"	f	class:TGLib_OLD::TVecPool
Resize	glib-core/dt.cpp	/^void TChA::Resize(const int& _MxBfL){$/;"	f	class:TChA
Resize	glib-core/dt.cpp	/^void TMem::Resize(const int& _MxBfL){$/;"	f	class:TMem
Resize	glib-core/dt.cpp	/^void TStrPool64::Resize(const ::TSize& _MxBfL) {$/;"	f	class:TStrPool64
Resize	glib-core/dt.cpp	/^void TStrPool::Resize(const uint& _MxBfL) {$/;"	f	class:TStrPool
Resize	glib-core/fl.cpp	/^void TMOut::Resize(const int& ReqLen){$/;"	f	class:TMOut
Resize	glib-core/hash.cpp	/^void TBigStrPool::Resize(TSize _MxBfL) {$/;"	f	class:TBigStrPool
Resize	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::Resize(){$/;"	f	class:THash
Resize	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::Resize() {$/;"	f	class:THashSet
Resize	glib-core/shash.h	/^void TSparseTable<TVal, GroupSize>::Resize(const int& NewVals) {$/;"	f	class:TSparseTable
ResizeAsis	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	void ResizeAsis(size_t NSize) {$/;"	f	class:TSBitSet
ResizeDelta	glib-core/shash.h	/^void TPackVec<TVal>::ResizeDelta(const int& ValsToAdd) {$/;"	f	class:TPackVec
ResizeDelta	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::ResizeDelta(const int& ValsToAdd, const int& MnWanted) {$/;"	f	class:TSparseHash
ResizeDelta	glib-core/shash.h	/^void TSparseSet<TKey, GroupSize>::ResizeDelta(const int& ValsToAdd, const int& MnWanted) {$/;"	f	class:TSparseSet
ResizeTable	snap-core/table.cpp	/^void TTable::ResizeTable(int RowCount) {$/;"	f	class:TTable
Restore	glib-core/lx.cpp	/^void TILxSymSt::Restore(TILx& Lx){$/;"	f	class:TILxSymSt
RestoreGraph	snap-adv/kronecker.cpp	/^void TKroneckerLL::RestoreGraph(const bool RestoreNodes) {$/;"	f	class:TKroneckerLL
Result	snap-core/table.h	/^		TBool Result; \/\/\/< Result of evaulating the predicate rooted at this node$/;"	m	class:TPredicateNode
RevE	snap-exp/wikinet.h	/^    TInt RevE, RevW; \/\/ reverts in the main namespace$/;"	m	struct:TWikiEditCnt::TEditCnt
RevId	snap-exp/wikinet.h	/^  int PageId, RevId, UsrId;$/;"	m	class:TWikiMetaHist
RevTm	snap-exp/wikinet.h	/^  TSecTm RevTm;$/;"	m	class:TWikiMetaHist
RevTm	snap-exp/wikinet.h	/^  TSecTm RevTm;$/;"	m	class:TWikiMetaLoader
RevW	snap-exp/wikinet.h	/^    TInt RevE, RevW; \/\/ reverts in the main namespace$/;"	m	struct:TWikiEditCnt::TEditCnt
RevWrds	snap-exp/wikinet.h	/^  TInt RevWrds, UsrId;$/;"	m	class:TWikiMetaLoader
Reverse	glib-core/ds.h	/^  void Reverse(TSizeTy LValN, TSizeTy RValN){ Assert(LValN>=0 && RValN<Len()); while (LValN < RValN){Swap(LValN++, RValN--);} }$/;"	f	class:TVec
Reverse	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Reverse(){$/;"	f	class:TVec
Reverse	glib-core/dt.cpp	/^void TChA::Reverse(){$/;"	f	class:TChA
RevisionId	snap-exp/wikinet.h	/^  TInt ArticleId, RevisionId;$/;"	m	class:TWikiMetaLoader
RewNcpV	snap-adv/ncp.h	/^  TVec<TFltPrV> RewNcpV;$/;"	m	class:TNcpGraphsBase
RewWhiskerV	snap-adv/ncp.h	/^  TFltPrV WhiskerV, RewWhiskerV; \/\/ (size, conductance)$/;"	m	class:TNcpGraphsBase
Rewire	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::Rewire(TRnd& Rnd) {$/;"	f	class:TBigNet
RewireCmtyNID	snap-adv/agm.cpp	/^void TAGMUtil::RewireCmtyNID(THash<TInt,TIntV >& CmtyVH, TRnd& Rnd) {$/;"	f	class:TAGMUtil
RewireCmtyVV	snap-adv/agm.cpp	/^void TAGMUtil::RewireCmtyVV(const TVec<TIntV>& CmtyVVIn, TVec<TIntV>& CmtyVVOut, TRnd& Rnd){$/;"	f	class:TAGMUtil
RewireNetwork	snap-exp/signnet.cpp	/^void TSignNet::RewireNetwork() {$/;"	f	class:TSignNet
RfA	snap-exp/wikinet.h	/^    TStr Usr, RfA, NominatedBy, Bureaucrat;$/;"	m	struct:TWikiElecBs::TElecSum
RfaEdCntH	snap-exp/wikinet.h	/^  THash<TChA, TEditCnt> RfaEdCntH; \/\/ UId to edit count$/;"	m	class:TWikiEditCnt
RfaTitle	snap-exp/wikinet.h	/^  TStr RfaTitle;$/;"	m	class:TWikiElec
Right	glib-core/priorityqueue.h	/^  int Right(int i) { return i * 2 + 2; }$/;"	f	class:TMaxPriorityQueue
Right	snap-core/table.h	/^		TPredicateNode* Right; \/\/\/< Right child of this node$/;"	m	class:TPredicateNode
RightH	snap-core/graph.h	/^  THash<TInt, TNode> RightH;  \/\/ 'right' nodes$/;"	m	class:TBPGraph
RightHI	snap-core/graph.h	/^    THashIter LeftHI, RightHI; \/\/ iterator over left and right hand-side nodes$/;"	m	class:TBPGraph::TNodeI
RightOf	glib-core/dt.cpp	/^TStr TStr::RightOf(const char& SplitCh) const {$/;"	f	class:TStr
RightOfLast	glib-core/dt.cpp	/^TStr TStr::RightOfLast(const char& SplitCh) const {$/;"	f	class:TStr
Rnd	glib-core/dt.cpp	/^TRnd TBool::Rnd;$/;"	m	class:TBool	file:
Rnd	glib-core/dt.cpp	/^TRnd TFlt::Rnd;$/;"	m	class:TFlt	file:
Rnd	glib-core/dt.cpp	/^TRnd TInt::Rnd;$/;"	m	class:TInt	file:
Rnd	glib-core/dt.cpp	/^TRnd TUInt::Rnd;$/;"	m	class:TUInt	file:
Rnd	snap-adv/agmattr.h	/^  TRnd Rnd; \/\/ random number generator$/;"	m	class:TCesna
Rnd	snap-adv/agmdirected.h	/^  TRnd Rnd; \/\/ random number generator$/;"	m	class:TCoda
Rnd	snap-adv/agmfast.h	/^  TRnd Rnd; \/\/ random number generator$/;"	m	class:TAGMFast
Rnd	snap-adv/agmfit.h	/^  TRnd Rnd;$/;"	m	class:TAGMFit
Rnd	snap-adv/kronecker.cpp	/^TRnd TKronMtx::Rnd = TRnd(0);$/;"	m	class:TKronMtx	file:
Rnd	snap-adv/kronecker.h	/^  static TRnd Rnd;$/;"	m	class:TKronMtx
Rnd	snap-adv/mag.cpp	/^TRnd TMAGNodeBern::Rnd = TRnd(0);$/;"	m	class:TMAGNodeBern	file:
Rnd	snap-adv/mag.cpp	/^TRnd TMAGNodeBeta::Rnd = TRnd(0);$/;"	m	class:TMAGNodeBeta	file:
Rnd	snap-adv/mag.cpp	/^TRnd TMAGNodeSimple::Rnd = TRnd(0);$/;"	m	class:TMAGNodeSimple	file:
Rnd	snap-adv/mag.h	/^	static TRnd Rnd;$/;"	m	class:TMAGNodeBern
Rnd	snap-adv/mag.h	/^	static TRnd Rnd;$/;"	m	class:TMAGNodeBeta
Rnd	snap-adv/mag.h	/^	static TRnd Rnd;$/;"	m	class:TMAGNodeSimple
Rnd	snap-adv/mag.h	/^	static TRnd Rnd;$/;"	m	class:TMAGParam
Rnd	snap-core/anf.h	/^  TRnd Rnd;$/;"	m	class:TGraphAnf
Rnd	snap-core/ff.h	/^  TRnd Rnd;$/;"	m	class:TForestFire
Rnd	snap-core/ff.h	/^  TRnd Rnd;$/;"	m	class:TUndirFFire
Rnd	snap-exp/sir.h	/^  TRnd Rnd;$/;"	m	class:TEstEpidemParams
RndConnectInsideCommunity	snap-adv/agm.cpp	/^void TAGM::RndConnectInsideCommunity(PUNGraph& Graph, const TIntV& CmtyV, const double& Prob, TRnd& Rnd){$/;"	f	class:TAGM
RndSeed	glib-core/dt.cpp	/^const int TRnd::RndSeed=0;$/;"	m	class:TRnd	file:
RndSeed	glib-core/dt.h	/^  static const int RndSeed;$/;"	m	class:TRnd
Root	snap-core/table.h	/^		TPredicateNode* Root; \/\/\/< Rood node of the current predicate tree$/;"	m	class:TPredicate
Rotate	glib-core/linalg.cpp	/^void TLinAlg::Rotate(const double& OldX, const double& OldY, const double& Angle, double& NewX, double& NewY) {$/;"	f	class:TLinAlg
RotateLeft	glib-core/md5.h	/^  static uint4 RotateLeft(uint4 x, uint4 n){return (x<<n)|(x>>(32-n));}$/;"	f
Round	glib-core/tm.cpp	/^TSecTm TSecTm::Round(const TTmUnit& TmUnit) const {$/;"	f	class:TSecTm
Round	glib-core/xmath.h	/^  static double Round(const double & Val, int Decs){$/;"	f	class:TMath
Round	glib-core/xmath.h	/^  static double Round(const double& Val){$/;"	f	class:TMath
RoundTheta	snap-adv/kronecker.cpp	/^void TKronMaxLL::RoundTheta(const TFltV& ThetaV, TFltV& NewThetaV) {$/;"	f	class:TKronMaxLL
RoundTheta	snap-adv/kronecker.cpp	/^void TKronMaxLL::RoundTheta(const TFltV& ThetaV, TKronMtx& Kronecker) {$/;"	f	class:TKronMaxLL
RoundTo	snap-core/ghash.cpp	/^const int TGraphKey::RoundTo = 4; \/\/ round to 4 decimal places$/;"	m	class:TGraphKey	file:
RoundTo	snap-core/ghash.h	/^  static const int RoundTo;$/;"	m	class:TGraphKey
RowBasedRowIterator	snap-exp/alternativetable.h	/^  RowBasedRowIterator(): CurrRowIdx(0), Table(NULL) {}$/;"	f	class:RowBasedRowIterator
RowBasedRowIterator	snap-exp/alternativetable.h	/^  RowBasedRowIterator(TInt RowIdx, const RowBasedTable* TablePtr): CurrRowIdx(RowIdx), Table(TablePtr) {}$/;"	f	class:RowBasedRowIterator
RowBasedRowIterator	snap-exp/alternativetable.h	/^  RowBasedRowIterator(const RowBasedRowIterator& RowI): CurrRowIdx(RowI.CurrRowIdx), Table(RowI.Table) {}$/;"	f	class:RowBasedRowIterator
RowBasedRowIterator	snap-exp/alternativetable.h	/^class RowBasedRowIterator{ $/;"	c
RowBasedTable	snap-exp/alternativetable.cpp	/^RowBasedTable::RowBasedTable(const Schema& TableSchema):$/;"	f	class:RowBasedTable
RowBasedTable	snap-exp/alternativetable.h	/^class RowBasedTable{$/;"	c
RowBasedTableRow	snap-exp/alternativetable.h	/^  RowBasedTableRow() {}$/;"	f	class:RowBasedTableRow
RowBasedTableRow	snap-exp/alternativetable.h	/^class RowBasedTableRow{$/;"	c
RowIdBuckets	snap-core/table.h	/^  TVec<TIntV> RowIdBuckets; \/\/\/< Partitioning of row ids into buckets corresponding to different graph objects when generating a sequence of graphs.$/;"	m	class:TTable
RowIdMap	snap-core/table.h	/^  TIntIntH RowIdMap; \/\/\/< Mapping of permanent row ids to physical id.$/;"	m	class:TTable
RowIdMap	snap-exp/alternativetable.h	/^  TIntIntH RowIdMap; \/\/\/< Mapping of permanent row ids to physical id.$/;"	m	class:ExplicitStringTable
RowIdMap	snap-exp/alternativetable.h	/^  TIntIntH RowIdMap; \/\/\/< Mapping of permanent row ids to physical id.$/;"	m	class:PhysicalOrderTable
RowN	glib-core/linalg.h	/^    int RowN, ColN;$/;"	m	class:TFullColMatrix
RowN	glib-core/linalg.h	/^    int RowN, ColN;$/;"	m	class:TSparseColMatrix
RowN	glib-core/linalg.h	/^    int RowN, ColN;$/;"	m	class:TSparseRowMatrix
RowSpVV	glib-core/linalg.h	/^    TVec<TIntFltKdV> RowSpVV;$/;"	m	class:TSparseRowMatrix
Rows	snap-exp/alternativetable.h	/^  	TVec<RowBasedTableRow> Rows;$/;"	m	class:RowBasedTable
Rows	snap-exp/lsh.h	/^  int Rows;$/;"	m	class:TLSHash
Run	snap-adv/motifcluster.cpp	/^void ChibaNishizekiWeighter::Run(int k) {$/;"	f	class:ChibaNishizekiWeighter
Run	snap-adv/ncp.cpp	/^void TLocClustStat::Run(const PUNGraph& _Graph, const bool& SaveAllSweeps, const bool& SaveAllCond, const bool& SaveBestNodesAtK) {$/;"	f	class:TLocClustStat
RunCalcErr	snap-exp/sir.cpp	/^double TSir2Model::RunCalcErr(const TFltV& ParamV) {$/;"	f	class:TSir2Model
RunCalcErr	snap-exp/sir.cpp	/^double TSirModel::RunCalcErr(const TFltV& ParamV) {$/;"	f	class:TSirModel
RunCalcErr	snap-exp/sir.cpp	/^double TSirSR2Model::RunCalcErr(const TFltV& ParamV) {$/;"	f	class:TSirSR2Model
RunCalcErr	snap-exp/sir.h	/^  virtual double RunCalcErr(const TFltV& ParamV, const int& StepsPerTm) { Fail; return -1; }$/;"	f	class:TEpidemModel
RunEStep	snap-adv/kronecker.cpp	/^void TKroneckerLL::RunEStep(const int& GibbsWarmUp, const int& WarmUp, const int& NSamples, TFltV& LLV, TVec<TFltV>& DLLV) {$/;"	f	class:TKroneckerLL
RunEuler	snap-exp/sir.cpp	/^void TEpidemModel::RunEuler(const TFltV& StartValV, const double& StartT, const double& StopT, const int& NSteps, TVec<TFltV>& OutValV) {$/;"	f	class:TEpidemModel
RunGnuPlot	glib-core/gnuplot.cpp	/^void TGnuPlot::RunGnuPlot() const {$/;"	f	class:TGnuPlot
RunKronEM	snap-adv/kronecker.cpp	/^void TKroneckerLL::RunKronEM(const int& EMIter, const int& GradIter, double LrnRate, double MnStep, double MxStep, const int& GibbsWarmUp, const int& WarmUp, const int& NSamples, const TKronEMType& Type, const int& NMissing) {$/;"	f	class:TKroneckerLL
RunMCMC	snap-adv/agmfit.cpp	/^void TAGMFit::RunMCMC(const int& MaxIter, const int& EvalLambdaIter, const TStr& PlotFPrx) {$/;"	f	class:TAGMFit
RunMStep	snap-adv/kronecker.cpp	/^double TKroneckerLL::RunMStep(const TFltV& LLV, const TVec<TFltV>& DLLV, const int& GradIter, const double& LrnRate, double MnStep, double MxStep) {$/;"	f	class:TKroneckerLL
RunModel	snap-exp/sir.cpp	/^void TEpidemModel::RunModel(const TFltV& StartValV, const double& StartT, const double& StopT, const int& NSteps, TVec<TFltV>& OutValV) {$/;"	f	class:TEpidemModel
RunModel10	snap-exp/sir.cpp	/^void TEpidemModel::RunModel10(const TFltV& StartValV, const double& StartT, const double& StopT, const int& NSteps, TVec<TFltV>& OutValV) {$/;"	f	class:TEpidemModel
RunSICascade	examples/cascades/cascades.cpp	/^PNGraph RunSICascade(PUNGraph G, const double& Beta, const int& CascSz, TIntH& NIdInfTmH) {$/;"	f
RunSICascade2	examples/cascades/cascades.cpp	/^PNGraph RunSICascade2(PUNGraph G, const double& Beta, const int& MxCascSz, TIntH& NIdInfTmH) {$/;"	f
RungeKutta	snap-exp/sir.cpp	/^void TEpidemModel::RungeKutta(const TFltV& y, const TFltV& dydx, double x, double h, TFltV& SirOutV) {$/;"	f	class:TEpidemModel
RunningP	glib-core/tm.h	/^    bool RunningP;$/;"	m	class:TTmStopWatch
Rvar	snap-core/table.h	/^    TStr Rvar; \/\/\/< Right variable of the comparison op$/;"	m	class:TAtomicPredicate
SAssert	glib-core/bd.h	271;"	d
SAttrE	snap-core/network.h	/^  TAttr SAttrE;$/;"	m	class:TNEANet
SAttrE	snap-core/network.h	/^  TAttrPair SAttrE;$/;"	m	class:TDirNet
SAttrE	snap-core/network.h	/^  TAttrPair SAttrE;$/;"	m	class:TUndirNet
SAttrN	snap-core/network.h	/^  TAttr SAttrN;$/;"	m	class:TDirNet
SAttrN	snap-core/network.h	/^  TAttr SAttrN;$/;"	m	class:TNEANet
SAttrN	snap-core/network.h	/^  TAttr SAttrN;$/;"	m	class:TUndirNet
SDev	glib-core/xmath.h	/^  TFlt Mean, Vari, SDev, SErr;$/;"	v
SEEK_CUR	glib-core/fl.cpp	912;"	d	file:
SEEK_END	glib-core/fl.cpp	913;"	d	file:
SEEK_SET	glib-core/fl.cpp	914;"	d	file:
SErr	glib-core/xmath.h	/^  TFlt Mean, Vari, SDev, SErr;$/;"	v
SG	snap-adv/cascdynetinf.cpp	/^void TNIBs::SG(const int& NId, const int& Iters, const TFltV& Steps, const TSampling& Sampling, const TStr& ParamSampling, const bool& PlotPerformance) {$/;"	f	class:TNIBs
SINGLE_STEP	snap-adv/cascdynetinf.h	/^  SINGLE_STEP$/;"	e	enum:__anon63
SIn	glib-core/fl.h	/^  PSIn SIn;$/;"	m	class:TChRet
SIn	glib-core/fl.h	/^  PSIn SIn;$/;"	m	class:TLnRet
SIn	glib-core/http.cpp	/^  PSIn SIn;$/;"	m	class:THttpChRet	file:
SIn	glib-core/http.cpp	/^  PSIn SIn;$/;"	m	class:THttpLx	file:
SIn	glib-core/http.h	/^  THttpRq(const PSIn& SIn);$/;"	v
SIn	glib-core/json.h	/^  TJsonVal(TSIn& SIn);$/;"	v
SIn	snap-exp/arxiv.h	/^  PSIn SIn;$/;"	m	class:TArxivPaperList
SIn	snap-exp/dblp.h	/^  PSIn SIn;$/;"	m	class:TDblpLoader
SIn	snap-exp/memes.h	/^  PSIn SIn;$/;"	m	class:TQuoteLoader
SIn	snap-exp/spinn3r.h	/^  PSIn SIn;$/;"	m	class:TSpinn3rFeedItem
SIn	snap-exp/spinn3r.h	/^  PSIn SIn;$/;"	m	class:TSpinn3rFullItem
SInPt	snap-exp/memes.h	/^  PSIn SInPt;$/;"	m	class:TMemesDataLoader
SInPt	snap-exp/wikinet.h	/^  PSIn SInPt;$/;"	m	class:TWikiMetaHist
SInPt	snap-exp/wikinet.h	/^  PSIn SInPt;$/;"	m	class:TWikiMetaLoader
SLAB	snap-adv/cascdynetinf.h	/^  SLAB, \/\/ slab$/;"	e	enum:__anon59
SLVER	doxygen/Makefile	/^SLVER := $(VERSION)$/;"	m
SNAPDIR	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^SNAPDIR=..\/..\/..\/..\/snap$/;"	m
SNAPDIR	contrib/unict_univr-risnap/RiToSnap/Makefile	/^SNAPDIR=..\/..\/..\/..\/snap$/;"	m
SNAPLIB	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^SNAPLIB=$(SNAPDIR)\/snap-core\/Snap.o$/;"	m
SNAPLIB	contrib/unict_univr-risnap/RiToSnap/Makefile	/^SNAPLIB=$(SNAPDIR)\/snap-core\/Snap.o$/;"	m
SNAP_H	snap-core/Snap.h	2;"	d
SNm	glib-core/fl.h	/^  TSStr SNm;$/;"	m	class:TSBase
SOURCES	contrib/unict_univr-risnap/RI-DSToSnap/Makefile	/^SOURCES= risnapds.cpp$/;"	m
SOURCES	contrib/unict_univr-risnap/RiToSnap/Makefile	/^SOURCES= risnap.cpp$/;"	m
SOut	glib-core/xml.h	/^  TSOut* SOut;$/;"	m	class:TXmlObjSerTagNm
SQUARE	snap-adv/cascdynetinf.h	/^  SQUARE, \/\/ square$/;"	e	enum:__anon59
SRC_ID_NAME	snap-core/gio.h	/^const TStr SRC_ID_NAME = ("SrcNId");$/;"	m	namespace:TSnap
STIME	doxygen/Makefile	/^STIME := $(shell date +"%Y-%m-%d %H:%M:%S")$/;"	m
STR_TYPE_PREFIX	snap-core/gio.h	/^const TStr STR_TYPE_PREFIX = ("Str");$/;"	m	namespace:TSnap
SUBSTR	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
SUPERSTR	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	e	enum:__anon82
SW_NOABORT	glib-core/base.h	174;"	d
SW_TRACE	glib-core/base.h	170;"	d
SW_WRITEN	glib-core/base.h	166;"	d
SampleCascade	examples/cascades/cascades.cpp	/^  void SampleCascade(const PGraph& InfCasc, const PGraph& NetCasc, const TIntH& NIdInfTmH, const double& PStep=0.05, const int& NRuns=1, const bool& DivByM=true) {$/;"	f	class:TCascadeStat
SampleGradient	snap-adv/kronecker.cpp	/^void TKroneckerLL::SampleGradient(const int& WarmUp, const int& NSamples, double& AvgLL, TFltV& AvgGradV) {$/;"	f	class:TKroneckerLL
SampleNextPerm	snap-adv/kronecker.cpp	/^bool TKroneckerLL::SampleNextPerm(int& NId1, int& NId2) {$/;"	f	class:TKroneckerLL
SamplePersonalizedPageRank	snap-core/randwalk.h	/^int SamplePersonalizedPageRank(const PGraph& Graph, double JumpProb, const TIntV& StartNIdV, TRnd& Rnd) {$/;"	f	namespace:TSnap
SampleTransition	snap-adv/agmfit.cpp	/^void TAGMFit::SampleTransition(int& NID, int& JoinCID, int& LeaveCID, double& DeltaL) {$/;"	f	class:TAGMFit
SampledCascadesH	snap-adv/cascdynetinf.h	/^  TIntIntPrH SampledCascadesH;$/;"	m	class:TNIBs
SatN	glib-core/tm.cpp	/^const int TTmInfo::SatN=7;$/;"	m	class:TTmInfo	file:
SatN	glib-core/tm.h	/^  static const int SatN;$/;"	m	class:TTmInfo
Save	glib-core/bits.h	/^  void Save(TSOut& SOut) const {$/;"	f
Save	glib-core/bits.h	/^  void Save(TSOut& SOut) const {B4V.Save(SOut);}$/;"	f	class:TFSet
Save	glib-core/bits.h	/^  void Save(TSOut& SOut) const {SOut.SaveBf(&B1, sizeof(TB1Def::TB1));}$/;"	f	class:TB8Set
Save	glib-core/bits.h	/^  void Save(TSOut& SOut) const {SOut.SaveBf(&B4, sizeof(TB4Def::TB4));}$/;"	f	class:TB32Set
Save	glib-core/blobbs.h	/^  void Save(TSOut& SOut) const {$/;"	f
Save	glib-core/blobbs.h	/^  void Save(const PFRnd& FRnd) const {$/;"	f
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const { for (int i=0; i<Len(); i++) ValV[i].Save(SOut); }$/;"	f	class:TTuple
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TPair
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TQQueue
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TQuad
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TTriple
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TVVVec
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TVVec
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {Key.Save(SOut); Dat.Save(SOut);}$/;"	f	class:TKeyDat
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {NodeV.Save(SOut);}$/;"	f	class:TTree
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {V.Save(SOut);}$/;"	f	class:PVec
Save	glib-core/ds.h	/^  void Save(TSOut& SOut) const {ValV.Save(SOut);}$/;"	f	class:TSStack
Save	glib-core/ds.h	/^  void Save(TSOut&) const {Fail;}$/;"	f	class:TAPt
Save	glib-core/ds.h	/^  void Save(TSOut&) const {Fail;}$/;"	f	class:TFunc
Save	glib-core/ds.h	/^void TLst<TVal>::Save(TSOut& SOut) const {$/;"	f	class:TLst
Save	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Save(TSOut& SOut) const {$/;"	f	class:TVec
Save	glib-core/ds.h	/^void TVecPool<TVal, TSizeTy>::Save(TSOut& SOut) const {$/;"	f	class:TVecPool
Save	glib-core/ds.h	/^void TVecPool<TVal>::Save(TSOut& SOut) const {$/;"	f	class:TGLib_OLD::TVecPool
Save	glib-core/dt.cpp	/^void TStrPool64::Save(TSOut& SOut) const {$/;"	f	class:TStrPool64
Save	glib-core/dt.cpp	/^void TStrPool::Save(TSOut& SOut) const {$/;"	f	class:TStrPool
Save	glib-core/dt.h	/^  void Save(TSOut& SOut) const {$/;"	f
Save	glib-core/dt.h	/^  void Save(TSOut& SOut) const {SOut.Save(Seed);}$/;"	f	class:TRnd
Save	glib-core/fl.cpp	/^void TSOut::Save(TSIn& SIn, const TSize& BfL){$/;"	f	class:TSOut
Save	glib-core/fl.cpp	/^void TSOut::Save(const char* CStr){$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const PSIn& SIn, const TSize& BfL=-1){Save(*SIn, BfL);}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const bool& Bool){Cs+=PutBf(&Bool, sizeof(Bool));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const char& Ch){Cs+=PutBf(&Ch, sizeof(Ch));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const char* CStr, const TSize& CStrLen){Cs+=PutBf(CStr, CStrLen+1);}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const double& Flt){Cs+=PutBf(&Flt, sizeof(Flt));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const int& Int){Cs+=PutBf(&Int, sizeof(Int));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const int64& Int){Cs+=PutBf(&Int, sizeof(Int));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const ldouble& LFlt){Cs+=PutBf(&LFlt, sizeof(LFlt));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const sdouble& SFlt){Cs+=PutBf(&SFlt, sizeof(SFlt));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const short& Short){Cs+=PutBf(&Short, sizeof(Short));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const uchar& UCh){Cs+=PutBf(&UCh, sizeof(UCh));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const uint& UInt){Cs+=PutBf(&UInt, sizeof(UInt));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const uint64& UInt){Cs+=PutBf(&UInt, sizeof(UInt));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const ushort& UShort){Cs+=PutBf(&UShort, sizeof(UShort));}$/;"	f	class:TSOut
Save	glib-core/fl.h	/^  void Save(const void* Bf, const TSize& BfL){Cs+=PutBf(Bf, BfL);}$/;"	f	class:TSOut
Save	glib-core/hash.cpp	/^void TBigStrPool::Save(TSOut& SOut) const {$/;"	f	class:TBigStrPool
Save	glib-core/hash.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:THash
Save	glib-core/hash.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:THashKeyDat
Save	glib-core/hash.h	/^  void Save(TSOut& SOut) const {H.Save(SOut);}$/;"	f	class:PHash
Save	glib-core/hash.h	/^  void Save(const TStr& fileName) { TFOut FOut(fileName); Save(FOut); }$/;"	f
Save	glib-core/hashmp.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:THashMP
Save	glib-core/hashmp.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:THashMPKeyDat
Save	glib-core/html.h	/^  void Save(TSOut& SOut){$/;"	f
Save	glib-core/http.h	/^  void Save(TSOut&){Fail;}$/;"	f
Save	glib-core/json.cpp	/^void TJsonVal::Save(TSOut& SOut) const {$/;"	f	class:TJsonVal
Save	glib-core/linalg.h	/^    void Save(TSOut& SOut) const {A.Save(SOut); B.Save(SOut);}$/;"	f	class:TSigmoid
Save	glib-core/linalg.h	/^    void Save(TSOut& SOut) { ColV.Save(SOut); }$/;"	f	class:TFullColMatrix
Save	glib-core/linalg.h	/^    void Save(TSOut& SOut) {$/;"	f	class:TSparseColMatrix
Save	glib-core/linalg.h	/^    void Save(TSOut& SOut) {$/;"	f	class:TSparseRowMatrix
Save	glib-core/lx.h	/^  void Save(TSOut& SOut){ChTyV.Save(SOut); UcChV.Save(SOut);}$/;"	f
Save	glib-core/md5.h	/^  void Save(TSOut&){Fail;}$/;"	f
Save	glib-core/os.h	/^  void Save(TSOut&){Fail;}$/;"	f
Save	glib-core/shash.h	/^  static void Save(TSOut& SOut, const THash<TKey, TDat, THashFunc>& Hash) {$/;"	f	class:TKeyDatFl
Save	glib-core/shash.h	/^  static void Save(const TStr& OutFNm, const THash<TKey, TDat, THashFunc>& Hash) {$/;"	f	class:TKeyDatFl
Save	glib-core/shash.h	/^  void Save(TSOut& SOut) const { Key.Save(SOut);  Dat.Save(SOut); }$/;"	f	class:TSHashKeyDat
Save	glib-core/shash.h	/^  void Save(TSOut& SOut) const { MxVals.Save(SOut);  Vals.Save(SOut);  GroupV.Save(SOut); }$/;"	f	class:TSparseTable
Save	glib-core/shash.h	/^  void Save(TSOut& SOut) const { ShrinkThresh.Save(SOut); ExpandThresh.Save(SOut); Table.Save(SOut); }$/;"	f	class:TSparseHash
Save	glib-core/shash.h	/^  void Save(TSOut& SOut) const { ShrinkThresh.Save(SOut); ExpandThresh.Save(SOut); Table.Save(SOut); }$/;"	f	class:TSparseSet
Save	glib-core/shash.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:THashSet
Save	glib-core/shash.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:THashSetKey
Save	glib-core/shash.h	/^void TPackVec<TVal>::Save(TSOut& SOut) const {$/;"	f	class:TPackVec
Save	glib-core/shash.h	/^void TSparseGroup<TVal, GroupSize>::Save(TSOut& SOut) const {$/;"	f	class:TSparseGroup
Save	glib-core/ss.h	/^  void Save(TSOut& SOut){CellStrVV.Save(SOut);}$/;"	f
Save	glib-core/tm.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TTm
Save	glib-core/tm.h	/^  void Save(TSOut& SOut) const {AbsSecs.Save(SOut);}$/;"	f	class:TSecTm
Save	glib-core/unicode.h	/^	void Save(TSOut& SOut) const { cfCommon.Save(SOut); cfSimple.Save(SOut); cfFull.Save(SOut); cfTurkic.Save(SOut); SOut.SaveCs(); }$/;"	f	class:TUniCaseFolding
Save	glib-core/unicode.h	/^	void Save(TSOut& SOut) const {$/;"	f	class:TUniChDb
Save	glib-core/unicode.h	/^	void Save(TSOut& SOut) const {$/;"	f	class:TUniChInfo
Save	glib-core/unicodestring.h	/^  void Save(TSOut& SOut) const {UniChV.Save(SOut);}$/;"	f	class:TUStr
Save	glib-core/url.h	/^  void Save(TSOut&){Fail;}$/;"	f
Save	glib-core/wch.h	/^  void Save(TSOut& SOut) const {SOut.Save(MsVal); SOut.Save(MsVal);}$/;"	f	class:TWCh
Save	glib-core/wch.h	/^  void Save(TSOut& SOut){WChV.Save(SOut);}$/;"	f	class:TWChA
Save	glib-core/xfl.h	/^  void Save(TSOut&){Fail;}$/;"	f
Save	glib-core/xmath.h	/^  void Save(TSOut& SOut) const {$/;"	f
Save	glib-core/xml.h	/^  void Save(TSOut& SOut){$/;"	f
Save	glib-core/xmlser.h	/^void TPt<TRec>::Save(TSOut& SOut) const {$/;"	f	class:TPt
Save	snap-adv/agm.h	/^    void Save(TSOut& SOut) const { Theta.Save(SOut); };$/;"	f	class:TLogRegPredict
Save	snap-adv/agmattr.h	/^  void Save(TSOut& SOut) {$/;"	f	class:TCesna
Save	snap-adv/agmdirected.cpp	/^void TCoda::Save(TSOut& SOut) {$/;"	f	class:TCoda
Save	snap-adv/agmfast.cpp	/^void TAGMFast::Save(TSOut& SOut) {$/;"	f	class:TAGMFast
Save	snap-adv/agmfit.cpp	/^void TAGMFit::Save(TSOut& SOut) {$/;"	f	class:TAGMFit
Save	snap-adv/cascdynetinf.h	/^  void Save(TSOut& SOut) const  { CId.Save(SOut); NIdHitH.Save(SOut); Model.Save(SOut); }$/;"	f	class:TCascade
Save	snap-adv/cascdynetinf.h	/^  void Save(TSOut& SOut) const { CascH.Save(SOut); NodeNmH.Save(SOut); CascPerEdge.Save(SOut); InferredNetwork.Save(SOut); }$/;"	f	class:TNIBs
Save	snap-adv/cascdynetinf.h	/^  void Save(TSOut& SOut) const { NId.Save(SOut); Tm.Save(SOut); Keywords.Save(SOut); }$/;"	f	class:THitInfo
Save	snap-adv/cascdynetinf.h	/^  void Save(TSOut& SOut) const { Name.Save(SOut); Vol.Save(SOut); }$/;"	f	class:TNodeInfo
Save	snap-adv/cascnetinf.h	/^  void Save(TSOut& SOut) const  { NIdHitH.Save(SOut); CurProb.Save(SOut); Alpha.Save(SOut); }$/;"	f	class:TCascade
Save	snap-adv/cascnetinf.h	/^  void Save(TSOut& SOut) const { CascV.Save(SOut); NodeNmH.Save(SOut); }$/;"	f	class:TNetInfBs
Save	snap-adv/cascnetinf.h	/^  void Save(TSOut& SOut) const { NId.Save(SOut); Parent.Save(SOut); Tm.Save(SOut); }$/;"	f	class:THitInfo
Save	snap-adv/cascnetinf.h	/^  void Save(TSOut& SOut) const { Name.Save(SOut); Vol.Save(SOut); }$/;"	f	class:TNodeInfo
Save	snap-adv/cascnetinf.h	/^  void Save(TSOut& SOut) const { Vol.Save(SOut); SOut.Save(MarginalGain); SOut.Save(MarginalBound); SOut.Save(MedianTimeDiff); SOut.Save(AverageTimeDiff); } \/\/$/;"	f	class:TEdgeInfo
Save	snap-adv/ncp.cpp	/^void TLocClustStat::Save(TSOut& SOut) const {$/;"	f	class:TLocClustStat
Save	snap-adv/ncp.cpp	/^void TNcpGraphsBase::Save(TSOut& SOut) const { $/;"	f	class:TNcpGraphsBase
Save	snap-core/attr.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TAttr
Save	snap-core/attr.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TAttrPair
Save	snap-core/bignet.h	/^    void Save(TSOut& SOut) const { SOut.Save(InVId); SOut.Save(OutVId); Dat.Save(SOut); }$/;"	f	class:TBigNet::TNode
Save	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::Save(TSOut& SOut) const {$/;"	f	class:TBigNet
Save	snap-core/cncom.h	/^  void Save(TSOut& SOut) const { NIdV.Save(SOut); }$/;"	f	class:TCnCom
Save	snap-core/gbase.h	/^  void Save(TSOut& SOut) const { MxFirst.Save(SOut); First.Save(SOut); Last.Save(SOut); ValV.Save(SOut); }$/;"	f	class:TSnapQueue
Save	snap-core/ghash.cpp	/^void TGraphKey::Save(TSOut& SOut) const {$/;"	f	class:TGraphKey
Save	snap-core/ghash.h	/^void TGHash<TDat>::Save(TSOut& SOut) const {$/;"	f	class:TGHash
Save	snap-core/graph.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); InEIdV.Save(SOut); OutEIdV.Save(SOut); }$/;"	f	class:TNEGraph::TNode
Save	snap-core/graph.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); InNIdV.Save(SOut); OutNIdV.Save(SOut); }$/;"	f	class:TNGraph::TNode
Save	snap-core/graph.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); NIdV.Save(SOut); TInt(NodeTy).Save(SOut); }$/;"	f	class:TBPGraph::TNode
Save	snap-core/graph.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); NIdV.Save(SOut); }$/;"	f	class:TUNGraph::TNode
Save	snap-core/graph.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); SrcNId.Save(SOut); DstNId.Save(SOut); }$/;"	f	class:TNEGraph::TEdge
Save	snap-core/graph.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); LeftH.Save(SOut); RightH.Save(SOut); }$/;"	f	class:TBPGraph
Save	snap-core/graph.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); MxEId.Save(SOut); NodeH.Save(SOut); EdgeH.Save(SOut); }$/;"	f	class:TNEGraph
Save	snap-core/graph.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); NEdges.Save(SOut); NodeH.Save(SOut); }$/;"	f	class:TUNGraph
Save	snap-core/graph.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); NodeH.Save(SOut); }$/;"	f	class:TNGraph
Save	snap-core/graphmp.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); InNIdV.Save(SOut); OutNIdV.Save(SOut); }$/;"	f	class:TNGraphMP::TNode
Save	snap-core/graphmp.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); NodeH.Save(SOut); }$/;"	f	class:TNGraphMP
Save	snap-core/gstat.cpp	/^void TGStat::Save(TSOut& SOut) const {$/;"	f	class:TGStat
Save	snap-core/gstat.cpp	/^void TGStatVec::Save(TSOut& SOut) const {$/;"	f	class:TGStatVec
Save	snap-core/mmnet.h	/^    void Save(TSOut& SOut) const { EId.Save(SOut); SrcNId.Save(SOut); DstNId.Save(SOut); }$/;"	f	class:TCrossNet::TCrossEdge
Save	snap-core/mmnet.h	/^  void Save(TSOut& SOut) const { CrossH.Save(SOut); MxEId.Save(SOut); Mode1.Save(SOut); Mode2.Save(SOut); IsDirect.Save(SOut); CrossNetId.Save(SOut); $/;"	f	class:TCrossNet
Save	snap-core/mmnet.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TModeNet
Save	snap-core/mmnet.h	/^  void Save(TSOut& SOut) const {MxModeId.Save(SOut); MxCrossNetId.Save(SOut); TModeNetH.Save(SOut); $/;"	f	class:TMMNet
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut);  InEIdV.Save(SOut);  OutEIdV.Save(SOut);  NodeDat.Save(SOut); }$/;"	f	class:TNodeEdgeNet::TNode
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut);  NodeDat.Save(SOut);  InNIdV.Save(SOut);  OutNIdV.Save(SOut); }$/;"	f	class:TNodeEDatNet::TNode
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut);  NodeDat.Save(SOut);  InNIdV.Save(SOut);  OutNIdV.Save(SOut); }$/;"	f	class:TNodeNet::TNode
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut);  SrcNId.Save(SOut);  DstNId.Save(SOut);  EdgeDat.Save(SOut); }$/;"	f	class:TNodeEdgeNet::TEdge
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); InEIdV.Save(SOut); OutEIdV.Save(SOut); }$/;"	f	class:TNEANet::TNode
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); InNIdV.Save(SOut); OutNIdV.Save(SOut); }$/;"	f	class:TDirNet::TNode
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); NIdV.Save(SOut); }$/;"	f	class:TUndirNet::TNode
Save	snap-core/network.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); SrcNId.Save(SOut); DstNId.Save(SOut); }$/;"	f	class:TNEANet::TEdge
Save	snap-core/network.h	/^  virtual void Save(TSOut& SOut) const { MxNId.Save(SOut);  MxEId.Save(SOut);  NodeH.Save(SOut);  EdgeH.Save(SOut); }$/;"	f	class:TNodeEdgeNet
Save	snap-core/network.h	/^  virtual void Save(TSOut& SOut) const { MxNId.Save(SOut);  NodeH.Save(SOut); }$/;"	f	class:TNodeEDatNet
Save	snap-core/network.h	/^  virtual void Save(TSOut& SOut) const { MxNId.Save(SOut);  NodeH.Save(SOut); }$/;"	f	class:TNodeNet
Save	snap-core/network.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); NEdges.Save(SOut); NodeH.Save(SOut);$/;"	f	class:TUndirNet
Save	snap-core/network.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); NodeH.Save(SOut); SAttrN.Save(SOut); SAttrE.Save(SOut); }$/;"	f	class:TDirNet
Save	snap-core/network.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TNEANet
Save	snap-core/networkmp.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); InEIdV.Save(SOut); OutEIdV.Save(SOut); }$/;"	f	class:TNEANetMP::TNode
Save	snap-core/networkmp.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); SrcNId.Save(SOut); DstNId.Save(SOut); }$/;"	f	class:TNEANetMP::TEdge
Save	snap-core/networkmp.h	/^  void Save(TSOut& SOut) const {$/;"	f	class:TNEANetMP
Save	snap-core/table.cpp	/^void TTable::Save(TSOut& SOut) {$/;"	f	class:TTable
Save	snap-core/table.h	/^  void Save(TSOut& SOut) { StringVals.Save(SOut); }$/;"	f	class:TTableContext
Save	snap-core/timenet.h	/^  void Save(TSOut& SOut) const { TNet::Save(SOut); }$/;"	f	class:TTimeNENet
Save	snap-core/timenet.h	/^  void Save(TSOut& SOut) const { TNet::Save(SOut); }$/;"	f	class:TTimeNet
Save	snap-exp/alternativetable.h	/^  void Save(TSOut& SOut) { StringVals.Save(SOut); }$/;"	f	class:PhysicalOrderTableContext
Save	snap-exp/graphmp-exp.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); NIdV.Save(SOut); }$/;"	f	class:TUNGraphMP::TNode
Save	snap-exp/graphmp-exp.h	/^  void Save(TSOut& SOut) const { MxNId.Save(SOut); NEdges.Save(SOut); NodeH.Save(SOut); }$/;"	f	class:TUNGraphMP
Save	snap-exp/imdbnet.cpp	/^void TImdbNode::Save(TSOut& SOut) const {$/;"	f	class:TImdbNode
Save	snap-exp/imdbnet.h	/^  void Save(TSOut& SOut) const { TNet::Save(SOut);  StrIdH.Save(SOut); }$/;"	f	class:TImdbNet
Save	snap-exp/linkpred.h	/^  void Save(TSOut& SOut) const { SumVal.Save(SOut); SumGradV.Save(SOut); }$/;"	f	struct:TNodeGrad
Save	snap-exp/linkpred.h	/^  void Save(TSOut& SOut) const { Val.Save(SOut); GradV.Save(SOut); }$/;"	f	class:TEdgeGrad
Save	snap-exp/memenet.h	/^  void Save(TSOut& SOut) const { UrlH.Save(SOut); QtIdNetH.Save(SOut); }$/;"	f	class:TMemeNetBs
Save	snap-exp/memenet.h	/^  void Save(TSOut& SOut) const { UrlH.Save(SOut); }$/;"	f	class:TBlogPostNet
Save	snap-exp/memenet.h	/^  void Save(TSOut& SOut) const { UrlId.Save(SOut); Tm.Save(SOut); QtIdV.Save(SOut); TInt(UrlTy).Save(SOut); }$/;"	f	class:TMemeNetDat
Save	snap-exp/memenet.h	/^  void Save(TSOut& SOut) { TNet::Save(SOut); QtStr.Save(SOut); }$/;"	f	class:TMemeNet
Save	snap-exp/memes.cpp	/^void TQuoteBs::Save(TSOut& SOut) const {$/;"	f	class:TQuoteBs
Save	snap-exp/memes.cpp	/^void TQuoteLoader::Save(TSOut& SOut) const {$/;"	f	class:TQuoteLoader
Save	snap-exp/memes.h	/^    void Save(TSOut& SOut) const { SOut.SaveBf(this, sizeof(TQtIdTy)); }$/;"	f	class:TQuote::TQtIdTy
Save	snap-exp/memes.h	/^    void Save(TSOut& SOut) const { SOut.SaveBf(this, sizeof(TTmUrlCnt)); }$/;"	f	class:TQuote::TTmUrlCnt
Save	snap-exp/memes.h	/^  void Save(TSOut& SOut) const { QtCIdTy.Save(SOut); QtStr.Save(SOut); TmUrlCntV.Save(SOut); }$/;"	f	class:TQuote
Save	snap-exp/memes.h	/^  void Save(TSOut& SOut) const { TNet::Save(SOut); }$/;"	f	class:TClustNet
Save	snap-exp/mmgraph-exp.h	/^    void Save(TSOut& SOut) const { Id.Save(SOut); Name.Save(SOut); MxNId.Save(SOut); NodeH.Save(SOut); }$/;"	f	class:TMNet::TNodeType
Save	snap-exp/mmgraph-exp.h	/^    void Save(TSOut& SOut) const { TypeId.Save(SOut), Id.Save(SOut); SrcNId.Save(SOut); DstNId.Save(SOut); }$/;"	f	class:TMNet::TEdge
Save	snap-exp/mmgraph-exp.h	/^  void Save(TSOut& SOut) const { TypeId.Save(SOut); Id.Save(SOut); InEIdV.Save(SOut); OutEIdV.Save(SOut);$/;"	f	class:TCVNode
Save	snap-exp/mmgraph-exp.h	/^  void Save(TSOut& SOut) const { TypeId.Save(SOut); Id.Save(SOut); InEIdV.Save(SOut); OutEIdV.Save(SOut);$/;"	f	class:TMVNode
Save	snap-exp/mmgraph-exp.h	/^  void Save(TSOut& SOut) const { TypeId.Save(SOut); Id.Save(SOut); InEIdVV.Save(SOut); OutEIdVV.Save(SOut); InDeg.Save(SOut); OutDeg.Save(SOut); }$/;"	f	class:TSVNode
Save	snap-exp/signnet.cpp	/^void TSignMicroEvol::Save(TSOut& SOut) const {$/;"	f	class:TSignMicroEvol
Save	snap-exp/signnet.h	/^    void Save(TSOut& SOut) const { Cnt.Save(SOut); SumWgt.Save(SOut); VarSq.Save(SOut); }$/;"	f	struct:TSignMicroEvol::TTransStat
Save	snap-exp/signnet.h	/^    void Save(TSOut& SOut) const { PlsCnt.Save(SOut); MnsCnt.Save(SOut); OutSumWgt.Save(SOut); OutVarSq.Save(SOut); InSumWgt.Save(SOut); InVarSq.Save(SOut); OutPlusPH.Save(SOut); InPlusPH.Save(SOut); }$/;"	f	struct:TSignMicroEvol::TCloseStat
Save	snap-exp/spinn3r.cpp	/^void TSpinn3rFullItem::Save(TSOut& SOut) const {$/;"	f	class:TSpinn3rFullItem
Save	snap-exp/wgtnet.h	/^  void Save(TSOut& SOut) const { TNet::Save(SOut); }$/;"	f	class:TWgtNet
Save	snap-exp/wikinet.cpp	/^void TWikiElec::Save(TSOut& SOut) const {$/;"	f	class:TWikiElec
Save	snap-exp/wikinet.cpp	/^void TWikiMetaHist::Save(TSOut& SOut) const {$/;"	f	class:TWikiMetaHist
Save	snap-exp/wikinet.cpp	/^void TWikiTalkEdge::Save(TSOut& SOut) const {$/;"	f	class:TWikiTalkEdge
Save	snap-exp/wikinet.cpp	/^void TWikiUsr::Save(TSOut& SOut) const {$/;"	f	class:TWikiUsr
Save	snap-exp/wikinet.h	/^    void Save(TSOut& SOut) const { SOut.SaveBf(this, sizeof(TEditCnt)); }$/;"	f	struct:TWikiEditCnt::TEditCnt
Save	snap-exp/wikinet.h	/^  void Save(TSOut& SOut) const { RfaEdCntH.Save(SOut); }$/;"	f	class:TWikiEditCnt
Save	snap-exp/wikinet.h	/^  void Save(TSOut& SOut) const { SOut.SaveBf(this, sizeof(TWikiVote)); }$/;"	f	class:TWikiVote
Save	snap-exp/wikinet.h	/^  void Save(TSOut& SOut) const { TNet::Save(SOut); UsrNIdH.Save(SOut); }$/;"	f	class:TWikiTalkNet
Save	snap-exp/wikinet.h	/^  void Save(TSOut& SOut) const { TNet::Save(SOut); UsrNIdH.Save(SOut); }$/;"	f	class:TWikiTimeTalkNet
Save	snap-exp/wikinet.h	/^  void Save(TSOut& SOut) const { Tm.Save(SOut); Words.Save(SOut); }$/;"	f	class:TWikiTalkEdge2
Save	snap-exp/wikinet.h	/^  void Save(TSOut& SOut) const { UsrH.Save(SOut); ElecV.Save(SOut); }$/;"	f	class:TWikiElecBs
Save2	snap-exp/wikinet.h	/^  void Save2(TSOut& SOut) const { UsrH.Save(SOut); UsrElecH.Save(SOut); }$/;"	f	class:TWikiElecBsOLD
SaveAddr	glib-core/blobbs.h	/^  void SaveAddr(const PFRnd& FRnd) const {$/;"	f
SaveAreaUTrailAttr	snap-exp/wikinet.cpp	/^void TWikiTalkNet::SaveAreaUTrailAttr(const TStr& OutFNm, const int& MinUsrVotes, const TWikiElecBs& ElecBs) const {$/;"	f	class:TWikiTalkNet
SaveAsHttp	glib-core/html.cpp	/^void TWebPg::SaveAsHttp(const TStr& FNm) const {$/;"	f	class:TWebPg
SaveAsHttpBody	glib-core/html.cpp	/^void TWebPg::SaveAsHttpBody(const TStr& FNm) const {$/;"	f	class:TWebPg
SaveAttrV	snap-exp/linkpred.cpp	/^void TLpExample::SaveAttrV(FILE *F, const bool& NetA, const bool& NodeA, const bool& PathA) const {$/;"	f	class:TLpExample
SaveBf	glib-core/fl.h	/^  void SaveBf(const void* Bf, const TSize& BfL){Cs+=PutBf(Bf, BfL);}$/;"	f	class:TSOut
SaveBigBlogMassQt	snap-exp/memes.cpp	/^void TQuoteBs::SaveBigBlogMassQt(const TStr& OutFNm) const {$/;"	f	class:TQuoteBs
SaveBin	glib-core/unicode.cpp	/^void TUniChDb::SaveBin(const TStr& fnBinUcd)$/;"	f	class:TUniChDb
SaveBin	snap-core/table.cpp	/^void TTable::SaveBin(const TStr& OutFNm) {$/;"	f	class:TTable
SaveBipartiteGephi	snap-adv/agm.cpp	/^void TAGMUtil::SaveBipartiteGephi(const TStr& OutFNm, const TIntV& NIDV, const TVec<TIntV>& CmtyVV, const double MaxSz, const double MinSz, const TIntStrH& NIDNameH, const THash<TInt, TIntTr>& NIDColorH, const THash<TInt, TIntTr>& CIDColorH ) {$/;"	f	class:TAGMUtil
SaveCascades	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveCascades(const TStr& OutFNm) {$/;"	f	class:TNIBs
SaveCascades	snap-adv/cascnetinf.cpp	/^void TNetInfBs::SaveCascades(const TStr& OutFNm) {$/;"	f	class:TNetInfBs
SaveCloseTriadTxt	snap-exp/signnet.cpp	/^void TSignMicroEvol::SaveCloseTriadTxt(const TStr& FNmPref, const bool& DrawNets, const bool& PlotHists) {$/;"	f	class:TSignMicroEvol
SaveClusters	snap-exp/memes.cpp	/^void TQuoteBs::SaveClusters(const TIntV& QtIdV, const TStr& OutFNm, const bool& SkipUrls) const {$/;"	f	class:TQuoteBs
SaveClusters	snap-exp/memes.cpp	/^void TQuoteBs::SaveClusters(const TStr& OutFNm, const bool& SkipUrls) const {$/;"	f	class:TQuoteBs
SaveCs	glib-core/fl.h	/^  void SaveCs(){Cs+=PutBf(&Cs, sizeof(Cs));}$/;"	f	class:TSOut
SaveCsvTFltV	glib-core/linalg.cpp	/^void TLAMisc::SaveCsvTFltV(const TFltV& Vec, TSOut& SOut) {$/;"	f	class:TLAMisc
SaveDataset	snap-exp/wikinet.cpp	/^void TWikiTimeTalkNet::SaveDataset(const TWikiElecBs& ElecBs, const TStr& OutFNm) const {$/;"	f	class:TWikiTimeTalkNet
SaveDetailTxt	snap-core/ghash.h	/^void TGHash<TDat>::SaveDetailTxt(const TStr& OutFNm, const TStr& Desc, const TStr& DatColNm) const {$/;"	f	class:TGHash
SaveDomainStat	snap-exp/memes.cpp	/^void TQuoteBs::SaveDomainStat(const TStr& OutFNm, const int& MinCnt) const {$/;"	f	class:TQuoteBs
SaveEdgeAttrs	snap-exp/signnet.h	/^  bool SaveEdgeAttrs(FILE *F, const int& SrcNId,const int& DstNId, const bool& SaveEol=true) {$/;"	f	class:TEdgeSignPred
SaveEdgeInfo	snap-adv/cascnetinf.cpp	/^void TNetInfBs::SaveEdgeInfo(const TStr& OutFNm) {$/;"	f	class:TNetInfBs
SaveEdgeList	snap-core/gio.h	/^void SaveEdgeList(const PGraph& Graph, const TStr& OutFNm, const TStr& Desc) {$/;"	f	namespace:TSnap
SaveEdgeListNet	snap-core/gio.cpp	/^void SaveEdgeListNet(const PNEANet& Graph, const TStr& OutFNm, const TStr& Desc) {$/;"	f	namespace:TSnap
SaveEdgePredFeatures	snap-exp/signnet.h	/^  void SaveEdgePredFeatures(const TStr& OutFNm, const int& SavePairs) {$/;"	f	class:TEdgeSignPred
SaveEdgePredFeatures2	snap-exp/signnet.h	/^  void SaveEdgePredFeatures2(const TStr& OutFNm, const int& SavePairs) {$/;"	f	class:TEdgeSignPred
SaveEdgeSignPredFeatures	snap-exp/signnet.h	/^  void SaveEdgeSignPredFeatures(const TStr& OutFNm) {$/;"	f	class:TEdgeSignPred
SaveEdgeTm	snap-core/timenet.cpp	/^void TTimeNENet::SaveEdgeTm(const TStr& EdgeFNm, const bool& RenumberNId, const bool& RelativeTm) const {$/;"	f	class:TTimeNENet
SaveElecUserVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::SaveElecUserVotes(const TStr& OutFNm) const {$/;"	f	class:TWikiElecBs
SaveEps	glib-core/gnuplot.cpp	/^void TGnuPlot::SaveEps(const TStr& FNm, const int& FontSz, const TStr& Comment) {$/;"	f	class:TGnuPlot
SaveEps	glib-core/gnuplot.h	/^  void SaveEps(const int& FontSz=30, const TStr& Comment=TStr()) {$/;"	f	class:TGnuPlot
SaveForDisk	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::SaveForDisk(const TStr& OutFNm) const {$/;"	f	class:TBigNet
SaveForFlash	snap-exp/memes.cpp	/^void TQuoteBs::SaveForFlash(const TIntV& QtIdV, const TStr& OutFNm, const TTmUnit& TmUnit, int SaveN, const TSecTm& BegTm, const TSecTm& EndTm, const TUrlTy& OnlyCountTy) const {$/;"	f	class:TQuoteBs
SaveForMatlab	snap-exp/memes.cpp	/^void TQuoteBs::SaveForMatlab(const TIntV& QtIdV, const TStr& OutFNm, int SaveN) const {$/;"	f	class:TQuoteBs
SaveFrugalInt	glib-core/dt.cpp	/^char* TInt::SaveFrugalInt(char *pDest, int i){$/;"	f	class:TInt
SaveFrugalIntV	glib-core/dt.cpp	/^void TInt::SaveFrugalIntV(TSOut& SOut, const TIntV& v){$/;"	f	class:TInt
SaveGViz	snap-core/ghash.cpp	/^void TGraphKey::SaveGViz(const TStr& OutFNm, const TStr& Desc, const TStr& NodeAttrs, const int& Size) const {$/;"	f	class:TGraphKey
SaveGViz	snap-core/gio.h	/^void SaveGViz(const PGraph& Graph, const TStr& OutFNm, const TStr& Desc, const TIntStrH& NIdLabelH) {$/;"	f	namespace:TSnap
SaveGViz	snap-core/gio.h	/^void SaveGViz(const PGraph& Graph, const TStr& OutFNm, const TStr& Desc, const bool& NodeLabels, const TIntStrH& NIdColorH) {$/;"	f	namespace:TSnap
SaveGephi	snap-adv/agm.cpp	/^void TAGMUtil::SaveGephi(const TStr& OutFNm, const PUNGraph& G, const TVec<TIntV>& CmtyVVAtr, const double MaxSz, const double MinSz, const TIntStrH& NIDNameH, const THash<TInt, TIntTr>& NIDColorH ) {$/;"	f	class:TAGMUtil
SaveGephi	snap-adv/agm.h	/^  static void SaveGephi(const TStr& OutFNm, const PUNGraph& G, const TVec<TIntV >& CmtyVVAtr, const double MaxSz, const double MinSz) {$/;"	f	class:TAGMUtil
SaveGephi	snap-adv/agm.h	/^  static void SaveGephi(const TStr& OutFNm, const PUNGraph& G, const TVec<TIntV >& CmtyVVAtr, const double MaxSz, const double MinSz, const THash<TInt, TStr>& NIDNameH) { $/;"	f	class:TAGMUtil
SaveGroundTruth	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveGroundTruth(const TStr& OutFNm) {$/;"	f	class:TNIBs
SaveGroundTruth	snap-adv/cascnetinf.cpp	/^void TNetInfBs::SaveGroundTruth(const TStr& OutFNm) {$/;"	f	class:TNetInfBs
SaveGroundTruthPajek	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveGroundTruthPajek(const TStr& OutFNm, const double& Step) {$/;"	f	class:TNIBs
SaveHist	snap-exp/signnet.h	/^    void SaveHist(const TStr& OutFNm) const {$/;"	f	struct:TSignMicroEvol::TCloseStat
SaveHtmlToTxt	glib-core/html.cpp	/^void THtmlDoc::SaveHtmlToTxt($/;"	f	class:THtmlDoc
SaveHtmlToXml	glib-core/html.cpp	/^void THtmlDoc::SaveHtmlToXml($/;"	f	class:THtmlDoc
SaveInferred	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveInferred(const TStr& OutFNm, const TIntV& NIdV) {$/;"	f	class:TNIBs
SaveInferred	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveInferred(const TStr& OutFNm, const double& Step, const TIntV& NIdV) {$/;"	f	class:TNIBs
SaveInferredEdges	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveInferredEdges(const TStr& OutFNm) {$/;"	f	class:TNIBs
SaveInferredPajek	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveInferredPajek(const TStr& OutFNm, const double& Step, const TIntV& NIdV) {$/;"	f	class:TNIBs
SaveLoadEdgeList	tutorials/demo-gio.cpp	/^void SaveLoadEdgeList() {$/;"	f
SaveMain	glib-core/blobbs.cpp	/^void TMBlobBs::SaveMain() const {$/;"	f	class:TMBlobBs
SaveMatlabSparseMtx	snap-core/gio.h	/^void SaveMatlabSparseMtx(const PGraph& Graph, const TStr& OutFNm) {$/;"	f	namespace:TSnap
SaveMatlabTFltIntKdV	glib-core/linalg.cpp	/^void TLAMisc::SaveMatlabTFltIntKdV(const TIntFltKdV& SpV, const int& ColN, TSOut& SOut) {$/;"	f	class:TLAMisc
SaveMatlabTFltV	glib-core/linalg.cpp	/^void TLAMisc::SaveMatlabTFltV(const TFltV& m, const TStr& FName) {$/;"	f	class:TLAMisc
SaveMatlabTFltVV	glib-core/linalg.cpp	/^void TLAMisc::SaveMatlabTFltVV(const TFltVV& m, const TStr& FName) {$/;"	f	class:TLAMisc
SaveMatlabTFltVVCol	glib-core/linalg.cpp	/^void TLAMisc::SaveMatlabTFltVVCol(const TFltVV& m, int ColId, const TStr& FName) {$/;"	f	class:TLAMisc
SaveMatlabTFltVVMjrSubMtrx	glib-core/linalg.cpp	/^void TLAMisc::SaveMatlabTFltVVMjrSubMtrx(const TFltVV& m,$/;"	f	class:TLAMisc
SaveMatlabTIntV	glib-core/linalg.cpp	/^void TLAMisc::SaveMatlabTIntV(const TIntV& m, const TStr& FName) {$/;"	f	class:TLAMisc
SaveMem	glib-core/dt.h	/^  void SaveMem(const PSOut& SOut) const {SOut->SaveBf(Bf, Len());}$/;"	f
SaveNetStat	snap-exp/memenet.cpp	/^void TMemeNetBs::SaveNetStat(const TStr& OutFNm) const {$/;"	f	class:TMemeNetBs
SaveObjInfo	snap-adv/cascnetinf.cpp	/^void TNetInfBs::SaveObjInfo(const TStr& OutFNm) {$/;"	f	class:TNetInfBs
SaveOnlyVotes	snap-exp/wikinet.cpp	/^void TWikiElecBs::SaveOnlyVotes() {$/;"	f	class:TWikiElecBs
SavePajek	snap-adv/cascnetinf.cpp	/^void TNetInfBs::SavePajek(const TStr& OutFNm) {$/;"	f	class:TNetInfBs
SavePajek	snap-adv/ncp.cpp	/^void TLocClust::SavePajek(const TStr& OutFNm) const {$/;"	f	class:TLocClust
SavePajek	snap-core/gio.h	/^void SavePajek(const PGraph& Graph, const TStr& OutFNm) {$/;"	f	namespace:TSnap
SavePajek	snap-core/gio.h	/^void SavePajek(const PGraph& Graph, const TStr& OutFNm, const TIntStrH& NIdColorH) {$/;"	f	namespace:TSnap
SavePajek	snap-core/gio.h	/^void SavePajek(const PGraph& Graph, const TStr& OutFNm, const TIntStrH& NIdColorH, const TIntStrH& NIdLabelH) {$/;"	f	namespace:TSnap
SavePajek	snap-core/gio.h	/^void SavePajek(const PGraph& Graph, const TStr& OutFNm, const TIntStrH& NIdColorH, const TIntStrH& NIdLabelH, const TIntStrH& EIdColorH) {$/;"	f	namespace:TSnap
SavePajek	snap-exp/signnet.cpp	/^void TSignNet::SavePajek(const TStr& OutFNm) {$/;"	f	class:TSignNet
SavePlaneTextNet	snap-adv/cascnetinf.cpp	/^void TNetInfBs::SavePlaneTextNet(const TStr& OutFNm) {$/;"	f	class:TNetInfBs
SavePng	glib-core/gnuplot.cpp	/^void TGnuPlot::SavePng(const TStr& FNm, const int& SizeX, const int& SizeY, const TStr& Comment, const TStr& Terminal) {$/;"	f	class:TGnuPlot
SavePng	glib-core/gnuplot.h	/^  void SavePng(const int& SizeX=1000, const int& SizeY=800, const TStr& Comment=TStr()) {$/;"	f	class:TGnuPlot
SaveQtTmUrlTxt	snap-exp/memes.cpp	/^void TQuoteBs::SaveQtTmUrlTxt(const TIntV& QtIdV, const TStr& OutFNm, int SaveN) const {$/;"	f	class:TQuoteBs
SaveQuotes	snap-exp/memes.cpp	/^void TQuoteBs::SaveQuotes(const TIntV& QtIdV, const TStr& OutFNm) const {$/;"	f	class:TQuoteBs
SaveQuotes	snap-exp/memes.cpp	/^void TQuoteBs::SaveQuotes(const int& MinQtFq, const TStr& OutFNm) const {$/;"	f	class:TQuoteBs
SaveSChar	glib-core/unicode.h	/^	static inline void SaveSChar(TSOut& SOut, signed char u) { SOut.SaveBf(&u, sizeof(u)); }$/;"	f	class:TUniChInfo
SaveSS	snap-core/table.cpp	/^void TTable::SaveSS(const TStr& OutFNm) {$/;"	f	class:TTable
SaveSS	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::SaveSS(const TStr& OutFNm) {$/;"	f	class:ExplicitStringTable
SaveSS	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::SaveSS(const TStr& OutFNm) {$/;"	f	class:PhysicalOrderTable
SaveSS	snap-exp/alternativetable.cpp	/^void RowBasedTable::SaveSS(const TStr& OutFNm){$/;"	f	class:RowBasedTable
SaveSites	snap-adv/cascdynetinf.cpp	/^void TNIBs::SaveSites(const TStr& OutFNm, const TIntFltVH& CascadesPerNode) {$/;"	f	class:TNIBs
SaveStat	glib-core/xmath.cpp	/^void THist::SaveStat(const TStr& ValNm, TSOut& FOut) const {$/;"	f	class:THist
SaveStr	glib-core/json.cpp	/^TStr TJsonVal::SaveStr() { $/;"	f	class:TJsonVal
SaveStr	glib-core/xml.cpp	/^void TXmlDoc::SaveStr(TStr& Str){$/;"	f	class:TXmlDoc
SaveToBin	snap-exp/spinn3r.cpp	/^void TQuoteExtractor::SaveToBin() {$/;"	f	class:TQuoteExtractor
SaveToDisk	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::SaveToDisk(const TStr& InFNm, const TStr& OutFNm, const bool& SaveSparseHash) {$/;"	f	class:TBigNet
SaveToErrLog	glib-core/bd.cpp	/^void SaveToErrLog(const char* MsgCStr){$/;"	f
SaveToXml	snap-exp/spinn3r.cpp	/^void TQuoteExtractor::SaveToXml() {$/;"	f	class:TQuoteExtractor
SaveTriad3to4Edges	snap-exp/signnet.cpp	/^void TSignMicroEvol::SaveTriad3to4Edges(const TStr& FNmPref) {$/;"	f	class:TSignMicroEvol
SaveTriadCloseVec	snap-exp/signnet.cpp	/^void TSignMicroEvol::SaveTriadCloseVec(const TStr& FNmPref) {$/;"	f	class:TSignMicroEvol
SaveTs	glib-core/gnuplot.cpp	/^void TGnuPlot::SaveTs(const TIntFltKdV& KdV, const TStr& FNm, const TStr& HeadLn) {$/;"	f	class:TGnuPlot
SaveTs	glib-core/gnuplot.cpp	/^void TGnuPlot::SaveTs(const TIntKdV& KdV, const TStr& FNm, const TStr& HeadLn) {$/;"	f	class:TGnuPlot
SaveTs	glib-core/gnuplot.h	/^void TGnuPlot::SaveTs(const TVec<TPair<TVal1, TVal2> >& ValV, const TStr& FNm, const TStr& HeadLn) {$/;"	f	class:TGnuPlot
SaveTs	glib-core/gnuplot.h	/^void TGnuPlot::SaveTs(const TVec<TTriple<TVal1, TVal2, TVal3> >& ValV, const TStr& FNm, const TStr& HeadLn) {$/;"	f	class:TGnuPlot
SaveTs	glib-core/gnuplot.h	/^void TGnuPlot::SaveTs(const TVec<TTuple<TVal, Vals> >& ValV, const TStr& FNm, const TStr& HeadLn) {$/;"	f	class:TGnuPlot
SaveTxt	glib-core/dt.cpp	/^void TChA::SaveTxt(const PSOut& SOut) const {$/;"	f	class:TChA
SaveTxt	glib-core/dt.cpp	/^void TRnd::SaveTxt(TOLx& Lx) const {$/;"	f	class:TRnd
SaveTxt	glib-core/html.cpp	/^void THtmlDoc::SaveTxt(const PSOut& SOut, const bool& TxtMode) const {$/;"	f	class:THtmlDoc
SaveTxt	glib-core/html.cpp	/^void THtmlTok::SaveTxt(const PSOut& SOut, const bool& TxtMode){$/;"	f	class:THtmlTok
SaveTxt	glib-core/ss.cpp	/^void TSs::SaveTxt(const TStr& FNm, const PNotify&) const {$/;"	f	class:TSs
SaveTxt	glib-core/tm.cpp	/^void TSecTm::SaveTxt(TOLx& Lx) const {$/;"	f	class:TSecTm
SaveTxt	glib-core/wch.cpp	/^void TWChA::SaveTxt(const PSOut& SOut) const {$/;"	f	class:TWChA
SaveTxt	glib-core/wch.h	/^  void SaveTxt(const PSOut& SOut) const {$/;"	f	class:TWCh
SaveTxt	snap-adv/kronecker.cpp	/^void TKronMtx::SaveTxt(const TStr& OutFNm) const {$/;"	f	class:TKronMtx
SaveTxt	snap-adv/mag.cpp	/^void TMAGFitBern::SaveTxt(const TStr& FNm) {$/;"	f	class:TMAGFitBern
SaveTxt	snap-adv/mag.cpp	/^void TMAGNodeBern::SaveTxt(TStrV& OutStrV) const {$/;"	f	class:TMAGNodeBern
SaveTxt	snap-adv/mag.cpp	/^void TMAGNodeBeta::SaveTxt(TStrV& OutStrV) const {$/;"	f	class:TMAGNodeBeta
SaveTxt	snap-adv/mag.cpp	/^void TMAGNodeSimple::SaveTxt(TStrV& OutStrV) const {$/;"	f	class:TMAGNodeSimple
SaveTxt	snap-adv/mag.h	/^void TMAGParam<TNodeAttr>::SaveTxt(const TStr& OutFNm) const {$/;"	f	class:TMAGParam
SaveTxt	snap-adv/ncp.cpp	/^void TNcpGraphsBase::SaveTxt(const TStr& OutFNm) {$/;"	f	class:TNcpGraphsBase
SaveTxt	snap-core/cncom.cpp	/^void TCnCom::SaveTxt(const TCnComV& CnComV, const TStr& FNm, const TStr& Desc) {$/;"	f	class:TCnCom
SaveTxt	snap-core/ghash.cpp	/^void TGraphKey::SaveTxt(FILE *F) const {$/;"	f	class:TGraphKey
SaveTxt	snap-core/ghash.h	/^void TGHash<TDat>::SaveTxt(const TStr& OutFNm, const TStr& Desc, const TStr& DatColNm, const bool& SortByKeyVal) const {$/;"	f	class:TGHash
SaveTxt	snap-core/gstat.cpp	/^void TGStatVec::SaveTxt(const TStr& FNmPref, const TStr& Desc) const {$/;"	f	class:TGStatVec
SaveTxt	snap-exp/linkpred.cpp	/^void TLpExample::SaveTxt(FILE *F) const {$/;"	f	class:TLpExample
SaveTxt	snap-exp/memes.cpp	/^void TMemesDataLoader::SaveTxt(TSOut& SOut) const {$/;"	f	class:TMemesDataLoader
SaveTxt	snap-exp/signnet.cpp	/^void TSignNet::SaveTxt(const TStr& OutFNm) const {$/;"	f	class:TSignNet
SaveTxt	snap-exp/wikinet.cpp	/^void TWikiEditCnt::SaveTxt(const TWikiElecBs& ElecBs, const TStr& OutFNm) {$/;"	f	class:TWikiEditCnt
SaveTxt	snap-exp/wikinet.cpp	/^void TWikiElecBs::SaveTxt(const TStr& OutFNm) {$/;"	f	class:TWikiElecBs
SaveTxtInfo	snap-adv/ncp.cpp	/^void TLocClustStat::SaveTxtInfo(const TStr& OutFNmPref, const TStr& Desc, const bool& SetMaxAt1) const {$/;"	f	class:TLocClustStat
SaveTxtNcpMin	snap-adv/ncp.cpp	/^void TNcpGraphsBase::SaveTxtNcpMin(const TStr& OutFNm, const bool& VsGraphN) {$/;"	f	class:TNcpGraphsBase
SaveUShort	glib-core/unicode.h	/^	static inline void SaveUShort(TSOut& SOut, ushort u) { SOut.SaveBf(&u, sizeof(u)); }$/;"	f	class:TUniChInfo
SaveXVals	glib-core/gnuplot.h	/^    bool SaveXVals() const { return (YCol-XCol)==1; }$/;"	f	class:TGnuPlot::TGpSeries
SaveXml	glib-core/dt.cpp	/^void TBool::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TBool
SaveXml	glib-core/dt.cpp	/^void TCh::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TCh
SaveXml	glib-core/dt.cpp	/^void TChA::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TChA
SaveXml	glib-core/dt.cpp	/^void TFlt::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TFlt
SaveXml	glib-core/dt.cpp	/^void TFltRect::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TFltRect
SaveXml	glib-core/dt.cpp	/^void TInt::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TInt
SaveXml	glib-core/dt.cpp	/^void TLFlt::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TLFlt
SaveXml	glib-core/dt.cpp	/^void TMem::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TMem
SaveXml	glib-core/dt.cpp	/^void TRnd::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TRnd
SaveXml	glib-core/dt.cpp	/^void TSFlt::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TSFlt
SaveXml	glib-core/dt.cpp	/^void TStr::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TStr
SaveXml	glib-core/dt.cpp	/^void TUCh::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TUCh
SaveXml	glib-core/dt.cpp	/^void TUInt64::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TUInt64
SaveXml	glib-core/dt.cpp	/^void TUInt::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TUInt
SaveXml	glib-core/dt.cpp	/^void TVoid::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TVoid
SaveXml	glib-core/shash.h	/^  void SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:THashSetKey
SaveXml	glib-core/shash.h	/^  void SaveXml(TSOut& SOut, const TStr& Nm) {$/;"	f	class:THashSet
SaveXml	glib-core/xmlser.h	/^void THash< TKey, TDat, THashFunc>::SaveXml(TSOut& SOut, const TStr& Nm){$/;"	f	class:THash
SaveXml	glib-core/xmlser.h	/^void THashKeyDat< TKey, TDat>::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:THashKeyDat
SaveXml	glib-core/xmlser.h	/^void TKeyDat< TKey, TDat>::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TKeyDat
SaveXml	glib-core/xmlser.h	/^void TPair<TVal1, TVal2>::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TPair
SaveXml	glib-core/xmlser.h	/^void TPt<TRec>::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TPt
SaveXml	glib-core/xmlser.h	/^void TQuad< TVal1, TVal2, TVal3, TVal4>::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TQuad
SaveXml	glib-core/xmlser.h	/^void TTriple<TVal1, TVal2, TVal3>::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TTriple
SaveXml	glib-core/xmlser.h	/^void TVec<TVal, TSizeTy>::SaveXml(TSOut& SOut, const TStr& Nm) const {$/;"	f	class:TVec
Save_V1	snap-core/network.h	/^  void Save_V1(TSOut& SOut) const { MxNId.Save(SOut); NEdges.Save(SOut); NodeH.Save(SOut); }$/;"	f	class:TUndirNet
Save_V1	snap-core/network.h	/^  void Save_V1(TSOut& SOut) const { MxNId.Save(SOut); NodeH.Save(SOut); }$/;"	f	class:TDirNet
Save_V1	snap-core/network.h	/^  void Save_V1(TSOut& SOut) const {$/;"	f	class:TNEANet
Sb	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^		TSBitSet &Sb;$/;"	m	class:TSBitSet::TIterator
SbEx_Add	glib-core/unicode.h	/^	template<class TSrcVec> void SbEx_Add(const TSrcVec& v) { sbExTrie.Add(v); }$/;"	f	class:TUniChDb
SbEx_Add	glib-core/unicode.h	/^	void SbEx_Add(const TStr& s) {$/;"	f	class:TUniChDb
SbEx_AddMulti	glib-core/unicode.h	/^	int SbEx_AddMulti(const TStr& words, const bool wordsAreUtf8 = true) { TStrV vec; words.SplitOnAllCh('|', vec);$/;"	f	class:TUniChDb
SbEx_AddUtf8	glib-core/unicode.h	/^	void SbEx_AddUtf8(const TStr& s) { TUniCodec codec; TIntV v; codec.DecodeUtf8(s, v); SbEx_Add(v); }$/;"	f	class:TUniChDb
SbEx_Clr	glib-core/unicode.h	/^	void SbEx_Clr() { sbExTrie.Clr(); }$/;"	f	class:TUniChDb
SbEx_Set	glib-core/unicode.h	/^	void SbEx_Set(const TUniTrie<TInt>& newTrie) { sbExTrie = newTrie; }$/;"	f	class:TUniChDb
SbEx_SetStdEnglish	glib-core/unicode.h	/^	int SbEx_SetStdEnglish() {$/;"	f	class:TUniChDb
ScaleTy	glib-core/gnuplot.h	/^  TGpScaleTy ScaleTy;$/;"	m	class:TGnuPlot
SccCntH	snap-core/cncom.h	/^  TIntH SccCntH;$/;"	m	class:TSccVisitor
Sch	snap-core/table.h	/^  Schema Sch; \/\/\/< Table Schema.$/;"	m	class:TTable
Sch	snap-exp/alternativetable.h	/^  	Schema Sch; $/;"	m	class:RowBasedTable
Sch	snap-exp/alternativetable.h	/^  Schema Sch; \/\/\/< Table Schema.$/;"	m	class:ExplicitStringTable
Sch	snap-exp/alternativetable.h	/^  Schema Sch; \/\/\/< Table Schema.$/;"	m	class:PhysicalOrderTable
Schema	snap-core/table.h	/^typedef TVec<TPair<TStr, TAttrType> > Schema;$/;"	t
Scheme	glib-core/url.h	/^  TUrlScheme Scheme;$/;"	v
SchemeNm	glib-core/url.h	/^  TStr SchemeNm, HostNm;$/;"	v
SearchBack	glib-core/ds.h	/^TLstNd<TVal>* TLst<TVal>::SearchBack(const TVal& Val){$/;"	f	class:TLst
SearchBack	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::SearchBack(const TVal& Val) const {$/;"	f	class:TVec
SearchBin	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::SearchBin(const TVal& Val) const {$/;"	f	class:TVec
SearchBin	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::SearchBin(const TVal& Val, TSizeTy& InsValN) const {$/;"	f	class:TVec
SearchBinLeft	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::SearchBinLeft(const TVal& Val, TSizeTy& InsValN) const {$/;"	f	class:TVec
SearchCh	glib-core/dt.cpp	/^int TChA::SearchCh(const char& Ch, const int& BChN) const {$/;"	f	class:TChA
SearchCh	glib-core/dt.cpp	/^int TStr::SearchCh(const char& Ch, const int& BChN) const {$/;"	f	class:TStr
SearchCh	glib-core/wch.h	/^  int SearchCh(const TWCh& WCh, const int& BChN=0) const {$/;"	f	class:TWChA
SearchChBack	glib-core/dt.cpp	/^int TChA::SearchChBack(const char& Ch, int BChN) const {$/;"	f	class:TChA
SearchChBack	glib-core/dt.cpp	/^int TStr::SearchChBack(const char& Ch, int BChN) const {$/;"	f	class:TStr
SearchForw	glib-core/ds.h	/^TLstNd<TVal>* TLst<TVal>::SearchForw(const TVal& Val){$/;"	f	class:TLst
SearchForw	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::SearchForw(const TVal& Val, const TSizeTy& BValN) const {$/;"	f	class:TVec
SearchStr	glib-core/dt.cpp	/^int TChA::SearchStr(const TChA& Str, const int& BChN) const {$/;"	f	class:TChA
SearchStr	glib-core/dt.cpp	/^int TChA::SearchStr(const TStr& Str, const int& BChN) const {$/;"	f	class:TChA
SearchStr	glib-core/dt.cpp	/^int TChA::SearchStr(const char* CStr, const int& BChN) const {$/;"	f	class:TChA
SearchStr	glib-core/dt.cpp	/^int TStr::SearchStr(const TStr& Str, const int& BChN) const {$/;"	f	class:TStr
SearchStr	glib-core/url.h	/^  TStr PortStr, PathStr, SearchStr, FragIdStr;$/;"	v
SearchStr	glib-core/wch.h	/^  int SearchStr(const TWChA& WChA, const int& BChN=0) const {$/;"	f	class:TWChA
SearchVForw	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::SearchVForw(const TVec<TVal, TSizeTy>& ValV, const TSizeTy& BValN) const {$/;"	f	class:TVec
SearchX	glib-core/ss.cpp	/^int TSs::SearchX(const int& Y, const TStr& Str) const {$/;"	f	class:TSs
SearchY	glib-core/ss.cpp	/^int TSs::SearchY(const int& X, const TStr& Str) const {$/;"	f	class:TSs
Sec	glib-core/tm.h	/^  TInt Hour, Min, Sec, MSec;$/;"	m	class:TTm
Second	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			bool Second;	\/\/value$/;"	m	class:TSBitSet::TIterator
Seed	glib-core/dt.h	/^  int Seed;$/;"	m	class:TRnd
SeedMtx	snap-adv/kronecker.h	/^  TFltV SeedMtx;$/;"	m	class:TKronMtx
SeedMtx	snap-adv/mag.h	/^  TFltV SeedMtx;$/;"	m	class:TMAGAffMtx
SeedNId	snap-adv/ncp.h	/^    TInt SeedNId;$/;"	m	class:TLocClustStat::TNodeSweep
SeedNId	snap-adv/ncp.h	/^  int SeedNId;             \/\/ Seed node$/;"	m	class:TLocClust
SeekJoin	snap-adv/agmfit.cpp	/^double TAGMFit::SeekJoin(const int& UID, const int& CID) {$/;"	f	class:TAGMFit
SeekLeave	snap-adv/agmfit.cpp	/^double TAGMFit::SeekLeave(const int& UID, const int& CID) {$/;"	f	class:TAGMFit
SeekSwitch	snap-adv/agmfit.cpp	/^double TAGMFit::SeekSwitch(const int& UID, const int& CurCID, const int& NewCID) {$/;"	f	class:TAGMFit
Seg	glib-core/blobbs.h	/^  uchar Seg;$/;"	v
Select	snap-core/table.cpp	/^void TTable::Select(TPredicate& Predicate, TIntV& SelectedRows, TBool Remove) {$/;"	f	class:TTable
Select	snap-core/table.h	/^  void Select(TPredicate& Predicate) {$/;"	f	class:TTable
SelectAtomic	snap-core/table.cpp	/^void TTable::SelectAtomic(const TStr& Col1, const TStr& Col2, TPredComp Cmp, TIntV& SelectedRows, TBool Remove) {$/;"	f	class:TTable
SelectAtomic	snap-core/table.h	/^  void SelectAtomic(const TStr& Col1, const TStr& Col2, TPredComp Cmp) {$/;"	f	class:TTable
SelectAtomicConst	snap-core/table.cpp	/^void TTable::SelectAtomicConst(const TStr& Col, const TPrimitive& Val, TPredComp Cmp, $/;"	f	class:TTable
SelectAtomicConst	snap-core/table.h	/^  void SelectAtomicConst(const TStr& Col, const T& Val, TPredComp Cmp) {$/;"	f	class:TTable
SelectAtomicConst	snap-core/table.h	/^  void SelectAtomicConst(const TStr& Col, const T& Val, TPredComp Cmp, PTable& SelectedTable) {$/;"	f	class:TTable
SelectAtomicConst	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::SelectAtomicConst(const TStr& Col, const TPrimitive& Val, TPredComp Cmp, $/;"	f	class:ExplicitStringTable
SelectAtomicFltConst	snap-core/table.h	/^  void SelectAtomicFltConst(const TStr& Col, const TFlt& Val, TPredComp Cmp) {$/;"	f	class:TTable
SelectAtomicFltConst	snap-core/table.h	/^  void SelectAtomicFltConst(const TStr& Col, const TFlt& Val, TPredComp Cmp, PTable& SelectedTable) {$/;"	f	class:TTable
SelectAtomicIntConst	snap-core/table.h	/^  void SelectAtomicIntConst(const TStr& Col, const TInt& Val, TPredComp Cmp) {$/;"	f	class:TTable
SelectAtomicIntConst	snap-core/table.h	/^  void SelectAtomicIntConst(const TStr& Col, const TInt& Val, TPredComp Cmp, PTable& SelectedTable) {$/;"	f	class:TTable
SelectAtomicStrConst	snap-core/table.h	/^  void SelectAtomicStrConst(const TStr& Col, const TStr& Val, TPredComp Cmp) {$/;"	f	class:TTable
SelectAtomicStrConst	snap-core/table.h	/^  void SelectAtomicStrConst(const TStr& Col, const TStr& Val, TPredComp Cmp, PTable& SelectedTable) {$/;"	f	class:TTable
SelectFirstNRows	snap-core/table.cpp	/^void TTable::SelectFirstNRows(const TInt& N) {$/;"	f	class:TTable
SelectLambdaSum	snap-adv/agmfit.cpp	/^double TAGMFit::SelectLambdaSum(const TFltV& NewLambdaV, const TIntSet& ComK) {$/;"	f	class:TAGMFit
SelectLambdaSum	snap-adv/agmfit.cpp	/^double TAGMFit::SelectLambdaSum(const TIntSet& ComK) { $/;"	f	class:TAGMFit
SelfJoin	snap-core/table.h	/^  PTable SelfJoin(const TStr& Col) { return Join(Col, *this, Col); }$/;"	f	class:TTable
SelfJoin	snap-exp/alternativetable.h	/^  PExplicitStringTable SelfJoin(const TStr& Col) { return Join(Col, *this, Col);}$/;"	f	class:ExplicitStringTable
SelfSimJoin	snap-core/table.h	/^  PTable SelfSimJoin(const TStrV& Cols, const TStr& DistanceColName, const TSimType& SimType, const TFlt& Threshold) { return SimJoin(Cols, *this, Cols, DistanceColName, SimType, Threshold); }$/;"	f	class:TTable
SelfSimJoinPerGroup	snap-core/table.cpp	/^PTable TTable::SelfSimJoinPerGroup(const TStr& GroupAttr, const TStr& SimCol, const TStr& DistanceColName, const TSimType& SimType, const TFlt& Threshold) $/;"	f	class:TTable
SelfSimJoinPerGroup	snap-core/table.cpp	/^PTable TTable::SelfSimJoinPerGroup(const TStrV& GroupBy, const TStr& SimCol, $/;"	f	class:TTable
SemicliqueMotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::SemicliqueMotifAdjacency(PUNGraph graph, WeightVH& weights) {$/;"	f	class:MotifCluster
SemicolonStr	glib-core/lx.cpp	/^const TStr TLxSymStr::SemicolonStr=";";$/;"	m	class:TLxSymStr	file:
SendVec	snap-core/util.h	/^int64 SendVec(const TVec<TVal, TSizeTy>& V, int FileDesc) {$/;"	f
SendVec64	snap-core/util.h	/^int64 SendVec64(const TVec< TVec< TVal, TSizeTy > , TSizeTy >&Vec64, int FileDesc) {$/;"	f
SepN	glib-core/tm.cpp	/^const int TTmInfo::SepN=9; const int TTmInfo::OctN=10;$/;"	m	class:TTmInfo	file:
SepN	glib-core/tm.h	/^  static const int SepN; static const int OctN;$/;"	m	class:TTmInfo
SeriesTy	glib-core/gnuplot.h	/^    TGpSeriesTy SeriesTy;$/;"	m	class:TGnuPlot::TGpSeries
SeriesV	glib-core/gnuplot.h	/^    const TVec<TGpSeries>& SeriesV;$/;"	m	class:TGnuPlot::TGpSeriesCmp
SeriesV	glib-core/gnuplot.h	/^  TVec<TGpSeries> SeriesV;$/;"	m	class:TGnuPlot
Set	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	void Set(size_t Pos, bool Value) {$/;"	f	class:TSBitSet
Set	glib-core/shash.h	/^  TVal& Set(const int& ValN) {$/;"	f	class:TSparseGroup
Set	glib-core/shash.h	/^TVal& TSparseGroup<TVal, GroupSize>::Set(const int& ValN, const TVal& Val) {$/;"	f	class:TSparseGroup
Set	glib-core/shash.h	/^TVal& TSparseTable<TVal, GroupSize>::Set(const int& ValN) {$/;"	f	class:TSparseTable
Set	glib-core/shash.h	/^TVal& TSparseTable<TVal, GroupSize>::Set(const int& ValN, const TVal& Val) {$/;"	f	class:TSparseTable
SetActorCntryLangByMajority	snap-exp/imdbnet.cpp	/^void TImdbNet::SetActorCntryLangByMajority() {$/;"	f	class:TImdbNet
SetAging	snap-adv/cascdynetinf.h	/^  void SetAging(const double& aging) { Aging = aging; }$/;"	f	class:TNIBs
SetAlgConf	snap-adv/mag.h	/^	void SetAlgConf(const bool EStep = true, const bool MStep = true)  {  ESpeedUp = EStep;  MSpeedUp = MStep;  }$/;"	f	class:TMAGFitBern
SetAll	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	void SetAll(size_t Size, bool Value){$/;"	f	class:TSBitSet
SetAllEDat	snap-core/network.h	/^void TNodeEDatNet<TNodeData, TEdgeData>::SetAllEDat(const TEdgeData& EdgeDat) {$/;"	f	class:TNodeEDatNet
SetAllEDat	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::SetAllEDat(const TEdgeData& EdgeDat) {$/;"	f	class:TNodeEdgeNet
SetAllInvertSign	snap-core/gsvd.cpp	/^void SetAllInvertSign(TFltV& ValV, const double& Val) {$/;"	f	namespace:TSnap
SetAttr	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    void SetAttr(TEdgeData* ValAttr) { Attr = ValAttr; }$/;"	f	class:TMatchingMachine::TMaMaEdge
SetAttr	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    void SetAttr(TEdgeData* ValAttr) { Attr = ValAttr; }$/;"	f	class:TMatchingMachine::TMaMaEdge
SetAttrHoldOut	snap-adv/agmattr.h	/^  void SetAttrHoldOut(const int NID, const int KID) {$/;"	f	class:TCesna
SetAttrHoldOutForOneNode	snap-adv/agmattr.h	/^  void SetAttrHoldOutForOneNode(const int NID) {$/;"	f	class:TCesna
SetAttrs	snap-adv/mag.h	/^void TMAGParam<TNodeAttr>::SetAttrs(const int& Attrs) {$/;"	f	class:TMAGParam
SetBestDegPerm	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetBestDegPerm() {$/;"	f	class:TKroneckerLL
SetBeta	snap-adv/mag.cpp	/^void TMAGNodeBeta::SetBeta(const int& Attr, const double& Alpha, const double& Beta) {$/;"	f	class:TMAGNodeBeta
SetBetaV	snap-adv/mag.cpp	/^void TMAGNodeBeta::SetBetaV(const TFltV& _AlphaV, const TFltV& _BetaV) {$/;"	f	class:TMAGNodeBeta
SetBfC	glib-core/fl.cpp	/^void TMIn::SetBfC(uint64 Pos) {$/;"	f	class:TMIn
SetBit	glib-core/bits.h	/^  void SetBit(const int& BitN, const bool& Bool){$/;"	f
SetBit	glib-core/bits.h	/^  void SetBit(const int& BitN, const bool& Bool){$/;"	f	class:TB32Set
SetBit	glib-core/bits.h	/^  void SetBit(const int& BitN, const bool& Bool){$/;"	f	class:TB8Set
SetBurnProb	snap-core/ff.h	/^  void SetBurnProb(const double& ForwBurnProb, const double& BackBurnProb) { FwdBurnProb=ForwBurnProb;  BckBurnProb=BackBurnProb; }$/;"	f	class:TForestFire
SetCat	glib-core/unicode.h	/^		void SetCat(const int cp) {$/;"	f	class:TUniChDb::TSubcatHelper
SetCatAndSubCat	glib-core/unicode.h	/^	void SetCatAndSubCat(const TUniChSubCategory catAndSubCat) {$/;"	f	class:TUniChInfo
SetChTy	glib-core/html.cpp	/^void THtmlLxChDef::SetChTy(const THtmlLxChTy& ChTy, const TStr& Str){$/;"	f	class:THtmlLxChDef
SetChTy	glib-core/http.cpp	/^void THttpChDef::SetChTy(const THttpChTy& ChTy, const TStr& Str){$/;"	f	class:THttpChDef
SetChTy	glib-core/http.cpp	/^void THttpChDef::SetChTy(const THttpChTy& ChTy, const char& Ch){$/;"	f	class:THttpChDef
SetChTy	glib-core/lx.cpp	/^void TLxChDef::SetChTy(const TLxChTy& ChTy, const TStr& Str){$/;"	f	class:TLxChDef
SetChTy	glib-core/xml.cpp	/^void TXmlChDef::SetChTy(TBSet& ChSet, const TStr& Str){$/;"	f	class:TXmlChDef
SetChTy	glib-core/xml.cpp	/^void TXmlChDef::SetChTy(TBSet& ChSet, const int& MnCh, const int& MxCh){$/;"	f	class:TXmlChDef
SetCmtyVV	snap-adv/agmattr.cpp	/^void TCesna::SetCmtyVV(const TVec<TIntV>& CmtyVV) {$/;"	f	class:TCesna
SetCmtyVV	snap-adv/agmdirected.cpp	/^void TCoda::SetCmtyVV(const TVec<TIntV>& CmtyVVOut, const TVec<TIntV>& CmtyVVIn) {$/;"	f	class:TCoda
SetCmtyVV	snap-adv/agmfast.cpp	/^void TAGMFast::SetCmtyVV(const TVec<TIntV>& CmtyVV) {$/;"	f	class:TAGMFast
SetCmtyVV	snap-adv/agmfit.cpp	/^void TAGMFit::SetCmtyVV(const TVec<TIntV>& CmtyVV) {$/;"	f	class:TAGMFit
SetCommonNodeAttrs	snap-core/table.h	/^  void SetCommonNodeAttrs(const TStr& SrcAttr, const TStr& DstAttr, const TStr& CommonAttrName){$/;"	f	class:TTable
SetCookieFldNm	glib-core/http.cpp	/^const TStr THttp::SetCookieFldNm="Set-Cookie";$/;"	m	class:THttp	file:
SetCookieFldNm	glib-core/http.h	/^  static const TStr SetCookieFldNm;$/;"	m	class:THttp
SetData	snap-exp/arxiv.cpp	/^bool TArxivPaperList::TArxivPaper::SetData(const TStrV& LineV) {$/;"	f	class:TArxivPaperList::TArxivPaper
SetDataPlotFNm	glib-core/gnuplot.h	/^  void SetDataPlotFNm(const TStr& DatFNm, const TStr& PltFNm) { DataFNm = DatFNm;  PlotFNm = PltFNm; }$/;"	f	class:TGnuPlot
SetDcpFlag	glib-core/unicode.h	/^	void SetDcpFlag(const TUniChFlags flag) { Assert((flag & ucfDcpMask) == flag); flags |= flag; }$/;"	f	class:TUniChInfo
SetDebug	snap-adv/kronecker.h	/^  void SetDebug(const bool Debug) { DebugMode = Debug; }$/;"	f	class:TKroneckerLL
SetDebug	snap-adv/mag.h	/^	void SetDebug(const bool _Debug) {  Debug = _Debug;  }$/;"	f	class:TMAGFitBern
SetDefaultPNoCom	snap-adv/agmfit.cpp	/^void TAGMFit::SetDefaultPNoCom() {$/;"	f	class:TAGMFit
SetDegPerm	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetDegPerm() {$/;"	f	class:TKroneckerLL
SetDelta	snap-adv/cascdynetinf.h	/^  void SetDelta(const double& delta) { Delta = delta; }$/;"	f	class:TNIBs
SetDistr	snap-core/gstat.cpp	/^void TGStat::SetDistr(const TGStatDistr& Distr, const TFltPrV& FltPrV) {$/;"	f	class:TGStat
SetDstCol	snap-core/table.h	/^  void SetDstCol(const TStr& Dst) {$/;"	f	class:TTable
SetEDat	snap-core/network.h	/^void TNodeEDatNet<TNodeData, TEdgeData>::SetEDat(const int& SrcNId, const int& DstNId, const TEdgeData& EdgeDat) {$/;"	f	class:TNodeEDatNet
SetEDat	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::SetEDat(const int& EId, const TEdgeData& EdgeDat) {$/;"	f	class:TNodeEdgeNet
SetEdgeData	tutorials/demo-TNodeEDatNet.cpp	/^void SetEdgeData() {$/;"	f
SetEdgeData	tutorials/demo-TNodeEdgeNet.cpp	/^void SetEdgeData() {$/;"	f
SetEdgeV	snap-core/ghash.h	/^  void SetEdgeV(const TIntPrV& EdgeIdV) { EdgeV = EdgeIdV; }$/;"	f	class:TGraphKey
SetEdges	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetEdges(TMaMaEdge** edges) { this->Edges = edges; }$/;"	f	class:TMatchingMachine
SetEdges	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetEdges(TMaMaEdge** edges) { this->Edges = edges; }$/;"	f	class:TMatchingMachine
SetEdges	snap-core/networkmp.h	/^  void SetEdges(const int& Length) { EdgeH.SetLen(Length); }$/;"	f	class:TNEANetMP
SetEdgesSizes	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetEdgesSizes(int* edges_sizes) { this->EdgesSizes = edges_sizes; }$/;"	f	class:TMatchingMachine
SetEdgesSizes	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetEdgesSizes(int* edges_sizes) { this->EdgesSizes = edges_sizes; }$/;"	f	class:TMatchingMachine
SetEmptyVal	glib-core/ds.h	/^  void SetEmptyVal(const TVal& _EmptyVal) { EmptyVal = _EmptyVal; }$/;"	f	class:TGLib_OLD::TVecPool
SetEmptyVal	glib-core/ds.h	/^  void SetEmptyVal(const TVal& _EmptyVal) { EmptyVal = _EmptyVal; }$/;"	f	class:TVecPool
SetEntityVal	glib-core/xml.cpp	/^void TXmlChDef::SetEntityVal(const TStr& Nm, const TStr& Val){$/;"	f	class:TXmlChDef
SetEpsMtx	snap-adv/kronecker.cpp	/^void TKronMtx::SetEpsMtx(const double& Eps1, const double& Eps0, const int& Eps1Val, const int& Eps0Val) {$/;"	f	class:TKronMtx
SetEpsMtx	snap-adv/mag.cpp	/^void TMAGAffMtx::SetEpsMtx(const double& Eps1, const double& Eps0, const int& Eps1Val, const int& Eps0Val) {$/;"	f	class:TMAGAffMtx
SetEscStr	glib-core/html.cpp	/^void THtmlLxChDef::SetEscStr(const TStr& SrcStr, const TStr& DstStr){$/;"	f	class:THtmlLxChDef
SetFPos	glib-core/fl.cpp	/^void TFIn::SetFPos(const int& FPos) const {$/;"	f	class:TFIn
SetFPos	glib-core/fl.cpp	/^void TFRnd::SetFPos(const int& FPos){$/;"	f	class:TFRnd
SetFastMode	glib-core/fl.h	/^  void SetFastMode(const bool& _FastMode){FastMode=_FastMode;}$/;"	f	class:TSIn
SetFirstValidRow	snap-core/table.h	/^  void SetFirstValidRow() {$/;"	f	class:TTable
SetFltColToConstMP	snap-core/table.cpp	/^void TTable::SetFltColToConstMP(TInt UpdateColIdx, TFlt DefaultFltVal){$/;"	f	class:TTable
SetFltVal	snap-core/table.h	/^		void SetFltVal(TStr VarName, TFlt VarVal) { FltVars.AddDat(VarName, VarVal); }$/;"	f	class:TPredicate
SetForEdges	snap-adv/kronecker.cpp	/^void TKronMtx::SetForEdges(const int& Nodes, const int& Edges) {$/;"	f	class:TKronMtx
SetGamma	snap-adv/cascdynetinf.h	/^  void SetGamma(const double& gamma) { Gamma = gamma; }$/;"	f	class:TNIBs
SetGraph	snap-adv/agmattr.cpp	/^void TCesna::SetGraph(const PUNGraph& GraphPt, const THash<TInt, TIntV>& NIDAttrH) {$/;"	f	class:TCesna
SetGraph	snap-adv/agmdirected.cpp	/^void TCoda::SetGraph(const PNGraph& GraphPt) {$/;"	f	class:TCoda
SetGraph	snap-adv/agmfast.cpp	/^void TAGMFast::SetGraph(const PUNGraph& GraphPt) {$/;"	f	class:TAGMFast
SetGraph	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetGraph(const PNGraph& GraphPt) {$/;"	f	class:TKroneckerLL
SetGraph	snap-adv/mag.cpp	/^void TMAGFitBern::SetGraph(const PNGraph& GraphPt) {$/;"	f	class:TMAGFitBern
SetGraph	snap-adv/ncp.h	/^  void SetGraph(const PUNGraph& GraphPt) { Graph=GraphPt; }$/;"	f	class:TLocClustStat
SetGraph	snap-core/bfsdfs.h	/^void TBreathFS<PGraph>::SetGraph(const PGraph& GraphPt) {$/;"	f	class:TBreathFS
SetGraph	snap-core/ff.h	/^  void SetGraph(const PNGraph& GraphPt) { Graph = GraphPt; }$/;"	f	class:TForestFire
SetGraph	snap-core/ff.h	/^  void SetGraph(const PNGraph& NGraph) { Graph = NGraph; }$/;"	f	class:TFfGGen
SetGraph	snap-core/ff.h	/^  void SetGraph(const PUNGraph& GraphPt) { Graph = GraphPt; }$/;"	f	class:TUndirFFire
SetGrid	glib-core/gnuplot.h	/^  bool SetGrid, SetPause;$/;"	m	class:TGnuPlot
SetHdRecLen	glib-core/fl.h	/^  void SetHdRecLen(const int& _HdLen, const int& _RecLen){$/;"	f
SetHoldOut	snap-adv/agmattr.h	/^  void SetHoldOut(const double HOFrac) { $/;"	f	class:TCesna
SetHoldOut	snap-adv/agmdirected.h	/^  void SetHoldOut(const double HOFrac) { TVec<TIntSet> HoldOut; TAGMFastUtil::GenHoldOutPairs(G, HoldOut, HOFrac, Rnd); HOVIDSV = HoldOut; }$/;"	f	class:TCoda
SetIPerm	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetIPerm(const TIntV& Perm) {$/;"	f	class:TKroneckerLL
SetId	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    void SetId(int Id) { this->Id = Id; }$/;"	f	class:TMatchingMachine::TMaMaEdge
SetInNIdV	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::SetInNIdV(int NId, const TIntV& InNIdV) {$/;"	f	class:TBigNet
SetInitAlpha	snap-adv/cascdynetinf.h	/^  void SetInitAlpha(const double& ia) { InitAlpha = ia; }$/;"	f	class:TNIBs
SetIntVal	snap-core/table.h	/^		void SetIntVal(TStr VarName, TInt VarVal) { IntVars.AddDat(VarName, VarVal); }$/;"	f	class:TPredicate
SetIsVoteFlag	snap-exp/wikinet.cpp	/^void TWikiElec::SetIsVoteFlag() {$/;"	f	class:TWikiElec
SetK	snap-adv/cascdynetinf.h	/^  void SetK(const double& k) { K = k; }$/;"	f	class:TNIBs
SetLabel	snap-core/flow.cpp	/^  void SetLabel (int NId, int Label) {$/;"	f	class:TSnap::TPRManager
SetLambdaV	snap-adv/agmfit.h	/^  void SetLambdaV(const TFltV& LambdaPt) {LambdaV = LambdaPt;}$/;"	f	class:TAGMFit
SetLangCntryByMajority	snap-exp/imdbnet.cpp	/^void TImdbNet::SetLangCntryByMajority() {$/;"	f	class:TImdbNet
SetLassoCoef	snap-adv/agmattr.h	/^  void SetLassoCoef(const double _LassoCoef) { LassoCoef = _LassoCoef; }$/;"	f	class:TCesna
SetLastB4	glib-core/bits.h	/^  void SetLastB4(){B4T[B4s-1]&=LastB4Mask;}$/;"	f
SetLcCh	glib-core/http.cpp	/^void THttpChDef::SetLcCh(const TStr& Str){$/;"	f	class:THttpChDef
SetLen	glib-core/hashmp.h	/^  void SetLen(const int& Length) {NumVals=Length;}$/;"	f	class:THashMP
SetLineStyle	glib-core/gnuplot.h	/^  void SetLineStyle(const int& PlotId, const TStr& StyleStr) { SeriesV[PlotId].WithStyle = StyleStr; }$/;"	f	class:TGnuPlot
SetLowPriority	glib-core/os.cpp	/^void TSysProc::SetLowPriority() {$/;"	f	class:TSysProc
SetLowPriority	glib-core/os.cpp	/^void TSysProc::SetLowPriority(){$/;"	f	class:TSysProc
SetMP	snap-core/table.h	/^  static void SetMP(TInt Value) { UseMP = Value; }$/;"	f	class:TTable
SetMP	snap-exp/alternativetable.h	/^  static void SetMP(TInt Value) { UseMP = Value; }$/;"	f	class:PhysicalOrderTable
SetMapNodeToState	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetMapNodeToState(int* MapNodeToState) {$/;"	f	class:TMatchingMachine
SetMapNodeToState	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetMapNodeToState(int* map_node_to_state) {$/;"	f	class:TMatchingMachine
SetMapStateToNode	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetMapStateToNode(int* MapStateToNode) {$/;"	f	class:TMatchingMachine
SetMapStateToNode	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetMapStateToNode(int* map_state_to_node) {$/;"	f	class:TMatchingMachine
SetMatchCount	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetMatchCount(long NMatchCount) { MatchCount = NMatchCount; }$/;"	f	class:TMatchListener
SetMatchCount	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetMatchCount(long NMatchCount) { MatchCount = NMatchCount; }$/;"	f	class:TMatchListener
SetMaxAlpha	snap-adv/cascdynetinf.h	/^  void SetMaxAlpha(const double& ma) { MaxAlpha = ma; }$/;"	f	class:TNIBs
SetMediaBlogV	snap-exp/sir.cpp	/^void TSir2Model::SetMediaBlogV(const TFltPrV& _MediaV, const TFltPrV& _BlogV) {$/;"	f	class:TSir2Model
SetMediaBlogV	snap-exp/sir.cpp	/^void TSirSR2Model::SetMediaBlogV(const TFltPrV& _MediaV, const TFltPrV& _BlogV) {$/;"	f	class:TSirSR2Model
SetMinAlpha	snap-adv/cascdynetinf.h	/^  void SetMinAlpha(const double& ma) { MinAlpha = ma; }$/;"	f	class:TNIBs
SetModel	snap-adv/cascdynetinf.h	/^  void SetModel(const TModel& model) { Model = model; }$/;"	f	class:TNIBs
SetMtx	snap-adv/kronecker.h	/^  void SetMtx(const TFltV& ParamV) { SeedMtx = ParamV; }$/;"	f	class:TKronMtx
SetMtx	snap-adv/mag.h	/^	void SetMtx(const int& Attr, const TMAGAffMtx& Mtx) {  AffMtxV[Attr] = Mtx;  }$/;"	f	class:TMAGParam
SetMtx	snap-adv/mag.h	/^  void SetMtx(const TFltV& ParamV) { SeedMtx = ParamV; }$/;"	f	class:TMAGAffMtx
SetMtxAll	snap-adv/mag.h	/^	void SetMtxAll(const TMAGAffMtx& Mtx) {  AffMtxV.PutAll(Mtx);  }$/;"	f	class:TMAGParam
SetMtxV	snap-adv/mag.h	/^	void SetMtxV(const TMAGAffMtxV& MtxV) {  NAttrs = AffMtxV.Len();  AffMtxV = MtxV;  }$/;"	f	class:TMAGParam
SetMtxV	snap-adv/mag.h	/^	void SetMtxV(const TMAGAffMtxV& MtxV) {  Param.SetMtxV(MtxV);  }$/;"	f	class:TMAGFitBern
SetMtxVal	snap-adv/mag.h	/^	void SetMtxVal(const int& Attr, const int& Row, const int& Col, const double& Val) {  AffMtxV[Attr].At(Row, Col) = Val;  }$/;"	f	class:TMAGParam
SetMu	snap-adv/cascdynetinf.h	/^  void SetMu(const double& mu) { Mu = mu; }$/;"	f	class:TNIBs
SetMu	snap-adv/mag.h	/^	void SetMu(const int& Attr, const double& Prob) {  IAssert(Prob >= 0.0 && Prob <= 1.0);  MuV[Attr] = Prob;  }$/;"	f	class:TMAGNodeBern
SetMuV	snap-adv/mag.h	/^	void SetMuV(const TFltV& MuV) {  TMAGNodeBern Dist = Param.GetNodeAttr();  Dist.SetMuV(MuV);  Param.SetNodeAttr(Dist);  }$/;"	f	class:TMAGFitBern
SetMuV	snap-adv/mag.h	/^	void SetMuV(const TFltV& _MuV) {  MuV = _MuV;  }$/;"	f	class:TMAGNodeBern
SetMxEId	snap-core/networkmp.h	/^  void SetMxEId(const TInt& Id) { MxEId = Id; }$/;"	f	class:TNEANetMP
SetNDat	snap-core/network.h	/^void TNodeEDatNet<TNodeData, TEdgeData>::SetNDat(const int& NId, const TNodeData& NodeDat) {$/;"	f	class:TNodeEDatNet
SetNDat	snap-core/network.h	/^void TNodeEdgeNet<TNodeData, TEdgeData>::SetNDat(const int& NId, const TNodeData& NodeDat) {$/;"	f	class:TNodeEdgeNet
SetNDat	snap-core/network.h	/^void TNodeNet<TNodeData>::SetNDat(const int& NId, const TNodeData& NodeDat) {$/;"	f	class:TNodeNet
SetNIdH	snap-exp/trawling.h	/^  THash<TInt, TIntV> SetNIdH; \/\/ set to node ids$/;"	m	class:TTrawling
SetNm	snap-core/gstat.h	/^  void SetNm(const TStr& GraphName) { GraphNm=GraphName; }$/;"	f	class:TGStat
SetNodeAttr	snap-adv/mag.h	/^	void SetNodeAttr(const TNodeAttr& Dist) {  NodeAttr = Dist;  }$/;"	f	class:TMAGParam
SetNodeData	tutorials/demo-TNodeEDatNet.cpp	/^void SetNodeData() {$/;"	f
SetNodeData	tutorials/demo-TNodeEdgeNet.cpp	/^void SetNodeData() {$/;"	f
SetNodeData	tutorials/demo-TNodeNet.cpp	/^void SetNodeData() {$/;"	f
SetNodePart	snap-exp/signnet.cpp	/^void TSignNet::SetNodePart(TVec<TIntV>& PartNIdV) {$/;"	f	class:TSignNet
SetNodePart	snap-exp/signnet.cpp	/^void TSignNet::SetNodePart(const int& PartId) {$/;"	f	class:TSignNet
SetNodeTmToFirstEdgeTm	snap-core/timenet.cpp	/^void TTimeNENet::SetNodeTmToFirstEdgeTm() {$/;"	f	class:TTimeNENet
SetNodes	snap-adv/mag.h	/^	void SetNodes(const int& Nodes) {  NNodes = Nodes;  }$/;"	f	class:TMAGParam
SetNodes	snap-core/graphmp.h	/^  void SetNodes(const int& Length) { NodeH.SetLen(Length); }$/;"	f	class:TNGraphMP
SetNodes	snap-core/networkmp.h	/^  void SetNodes(const int& Length) { NodeH.SetLen(Length); }$/;"	f	class:TNEANetMP
SetNodes	snap-exp/graphmp-exp.h	/^  void SetNodes(const int& Length) { NodeH.SetLen(Length); }$/;"	f	class:TUNGraphMP
SetNodesAttrs	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetNodesAttrs(TNodeData** nodes_attrs) {$/;"	f	class:TMatchingMachine
SetNodesAttrs	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetNodesAttrs(TNodeData** nodes_attrs) {$/;"	f	class:TMatchingMachine
SetNofSn	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetNofSn(int nof_sn) { this->NofSn = nof_sn; }$/;"	f	class:TMatchingMachine
SetNofSn	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetNofSn(int nof_sn) { this->NofSn = nof_sn; }$/;"	f	class:TMatchingMachine
SetOpt	glib-core/lx.cpp	/^void TILx::SetOpt(const int& Opt, const bool& Val){$/;"	f	class:TILx
SetOpt	glib-core/lx.cpp	/^void TOLx::SetOpt(const int& Opt, const bool& Val){$/;"	f	class:TOLx
SetOrderPerm	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetOrderPerm() {$/;"	f	class:TKroneckerLL
SetOutNIdV	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::SetOutNIdV(int NId, const TIntV& OutNIdV) {$/;"	f	class:TBigNet
SetPNoCom	snap-adv/agmfit.h	/^  void SetPNoCom(const double& Epsilon) { if (BaseCID == -1 && Epsilon > 0.0) { PNoCom = Epsilon; } }$/;"	f	class:TAGMFit
SetParam	snap-exp/sir.cpp	/^void TSir2Model::SetParam(const TFltV& ParamV) { $/;"	f	class:TSir2Model
SetParam	snap-exp/sir.cpp	/^void TSirModel::SetParam(const TFltV& ParamV) { $/;"	f	class:TSirModel
SetParam	snap-exp/sir.cpp	/^void TSirSR2Model::SetParam(const TFltV& ParamV) { $/;"	f	class:TSirSR2Model
SetParentPointer	snap-core/mmnet.cpp	/^void TCrossNet::SetParentPointer(TMMNet* parent) {$/;"	f	class:TCrossNet
SetParentPointer	snap-core/mmnet.cpp	/^void TModeNet::SetParentPointer(TMMNet* parent) {$/;"	f	class:TModeNet
SetParentState	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetParentState(int* parent_state) {$/;"	f	class:TMatchingMachine
SetParentState	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetParentState(int* parent_state) {$/;"	f	class:TMatchingMachine
SetParentType	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void SetParentType(TMamaParent* parent_type) {$/;"	f	class:TMatchingMachine
SetParentType	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void SetParentType(TMamaParent* parent_type) {$/;"	f	class:TMatchingMachine
SetPause	glib-core/gnuplot.h	/^  bool SetGrid, SetPause;$/;"	m	class:TGnuPlot
SetPeakT0	snap-exp/sir.cpp	/^void TSir2Model::SetPeakT0() {$/;"	f	class:TSir2Model
SetPeakT0	snap-exp/sir.cpp	/^void TSirModel::SetPeakT0() {$/;"	f	class:TSirModel
SetPeakT0	snap-exp/sir.cpp	/^void TSirSR2Model::SetPeakT0() {$/;"	f	class:TSirSR2Model
SetPerm	snap-adv/kronecker.cpp	/^void TKronMaxLL::SetPerm(const char& PermId) {$/;"	f	class:TKronMaxLL
SetPerm	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetPerm(const char& PermId) {$/;"	f	class:TKroneckerLL
SetPerm	snap-adv/kronecker.h	/^  void SetPerm(const TIntV& NodePermV) { NodePerm = NodePermV; SetIPerm(NodePerm); }$/;"	f	class:TKroneckerLL
SetPhiVV	snap-adv/mag.cpp	/^void TMAGFitBern::SetPhiVV(const TIntVV& AttrVV, const int KnownIds) {$/;"	f	class:TMAGFitBern
SetPhiVV	snap-adv/mag.h	/^	void SetPhiVV(const TFltVV& AttrVV, const int KnownIds = 0) {  PhiVV = AttrVV;  KnownVV.Gen(PhiVV.GetXDim(), PhiVV.GetYDim());  KnownVV.PutAll(false);  for(int i = 0; i < KnownIds; i++) {  KnownVV.PutY(i, true); } }$/;"	f	class:TMAGFitBern
SetPos	glib-core/fl.h	/^  void SetPos(const int& Pos) { IAssert(fseek(FileId, Pos, SEEK_SET)==0); }$/;"	f	class:TFInOut
SetPriority	glib-core/priorityqueue.h	/^  void SetPriority(const TVal& X, float NewPriority) {$/;"	f	class:TMaxPriorityQueue
SetProbDecay	snap-core/ff.h	/^  void SetProbDecay(const double& DecayProb) { ProbDecay = DecayProb; }$/;"	f	class:TForestFire
SetProperty	glib-core/unicode.h	/^	void SetProperty(const TUniChProperties flag) { properties |= flag; }$/;"	f	class:TUniChInfo
SetPropertyX	glib-core/unicode.h	/^	void SetPropertyX(const TUniChPropertiesX flag) { propertiesX |= flag; }$/;"	f	class:TUniChInfo
SetRandomEdges	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetRandomEdges(const int& NEdges, const bool isDir) {$/;"	f	class:TKroneckerLL
SetRecN	glib-core/ds.h	/^  void SetRecN(const int& RecN){FRnd->SetRecN(RecN);}$/;"	f	class:TFRec
SetRecN	glib-core/fl.cpp	/^void TFRnd::SetRecN(const int& RecN){$/;"	f	class:TFRnd
SetRegCoef	snap-adv/agmattr.h	/^  void SetRegCoef(const double _RegCoef) { RegCoef = _RegCoef; }$/;"	f	class:TCesna
SetRegCoef	snap-adv/agmdirected.h	/^  void SetRegCoef(const double _RegCoef) { RegCoef = _RegCoef; }$/;"	f	class:TCoda
SetRegCoef	snap-adv/agmfast.h	/^  void SetRegCoef(const double _RegCoef) { RegCoef = _RegCoef; }$/;"	f	class:TAGMFast
SetRegCoef	snap-adv/agmfit.h	/^  void SetRegCoef(const double Val) { RegCoef = Val; }$/;"	f	class:TAGMFit
SetRegularizer	snap-adv/cascdynetinf.h	/^  void SetRegularizer(const TRegularizer& reg) { Regularizer = reg; }$/;"	f	class:TNIBs
SetRndEdgeTimes	snap-core/timenet.cpp	/^void TTimeNENet::SetRndEdgeTimes(const int& MinTmEdge) {$/;"	f	class:TTimeNENet
SetRndMtx	snap-adv/kronecker.cpp	/^void TKronMtx::SetRndMtx(const int& PrmMtxDim, const double& MinProb) {$/;"	f	class:TKronMtx
SetRndMtx	snap-adv/mag.cpp	/^void TMAGAffMtx::SetRndMtx(TRnd& Rnd, const int& PrmMtxDim, const double& MinProb) {$/;"	f	class:TMAGAffMtx
SetRndPerm	snap-adv/kronecker.cpp	/^void TKroneckerLL::SetRndPerm() {$/;"	f	class:TKroneckerLL
SetSbFlag	glib-core/unicode.h	/^	void SetSbFlag(const TUniChFlags flag) { Assert((flag & ucfSbMask) == flag); flags |= flag; }$/;"	f	class:TUniChInfo
SetScale	glib-core/gnuplot.h	/^  void SetScale(const TGpScaleTy& GpScaleTy) { ScaleTy = GpScaleTy;}$/;"	f	class:TGnuPlot
SetSource	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    void SetSource(const int ValSource){ Source = ValSource; }$/;"	f	class:TMatchingMachine::TMaMaEdge
SetSource	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    void SetSource(const int ValSource){ Source = ValSource; }$/;"	f	class:TMatchingMachine::TMaMaEdge
SetSrcCol	snap-core/table.h	/^  void SetSrcCol(const TStr& Src) {$/;"	f	class:TTable
SetStrVal	snap-core/table.h	/^		void SetStrVal(TStr VarName, TStr VarVal) { StrVars.AddDat(VarName, VarVal); }$/;"	f	class:TPredicate
SetStreamPos	glib-core/ssmp.h	/^  void SetStreamPos(uint64 Pos) {$/;"	f
SetTakeStat	snap-core/gstat.h	/^  void SetTakeStat(const TFSet& TakeStatSet) { StatFSet = TakeStatSet; }$/;"	f	class:TGStatVec
SetTarget	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    void SetTarget(const int ValTarget){ Target = ValTarget; }$/;"	f	class:TMatchingMachine::TMaMaEdge
SetTarget	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    void SetTarget(const int ValTarget){ Target = ValTarget; }$/;"	f	class:TMatchingMachine::TMaMaEdge
SetTitle	glib-core/gnuplot.h	/^  void SetTitle(const TStr& PlotTitle) { Title = PlotTitle; }$/;"	f	class:TGnuPlot
SetTm	snap-core/gstat.h	/^  void SetTm(const TSecTm& GraphTm) { Time = GraphTm; }$/;"	f	class:TGStat
SetTmUnit	snap-core/gstat.h	/^  void SetTmUnit(const TTmUnit& TimeUnit) { TmUnit = TimeUnit; }$/;"	f	class:TGStatVec
SetTolerance	snap-adv/cascdynetinf.h	/^  void SetTolerance(const double& tol) { Tol = tol; }$/;"	f	class:TNIBs
SetTop2	snap-exp/wgtnet.cpp	/^void TTop2FriendNet::SetTop2() {$/;"	f	class:TTop2FriendNet
SetTotalTime	snap-adv/cascdynetinf.h	/^  void SetTotalTime(const float& tt) { TotalTime = tt; }$/;"	f	class:TNIBs
SetUcCh	glib-core/html.cpp	/^void THtmlLxChDef::SetUcCh(const TStr& Str){$/;"	f	class:THtmlLxChDef
SetUcCh	glib-core/html.cpp	/^void THtmlLxChDef::SetUcCh(const char& UcCh, const char& LcCh){$/;"	f	class:THtmlLxChDef
SetUcCh	glib-core/lx.cpp	/^void TLxChDef::SetUcCh(const TStr& Str){$/;"	f	class:TLxChDef
SetUp	test/test-alg.cpp	/^  virtual void SetUp() {$/;"	f	class:GraphTest
SetUp	test/test-alg.cpp	/^  virtual void SetUp() {$/;"	f	class:TreeTest
SetUrlId	snap-exp/memes.h	/^    void SetUrlId(const int& _UrlId) { QtUrlId=_UrlId; }$/;"	f	class:TQuote::TTmUrlCnt
SetUrlTy	snap-exp/memes.cpp	/^void TQuoteBs::SetUrlTy(const TStr& InFNm, const TUrlTy& SetTy) {$/;"	f	class:TQuoteBs
SetUserIdFromRfa	snap-exp/wikinet.cpp	/^void TWikiElecBs::SetUserIdFromRfa() {$/;"	f	class:TWikiElecBs
SetVal	glib-core/ds.h	/^  void SetVal(const TSizeTy& ValN, const TVal& Val){AssertR((0<=ValN)&&(ValN<Vals), GetXOutOfBoundsErrMsg(ValN)); ValT[ValN] = Val;}$/;"	f	class:TVec
SetVal	snap-core/gstat.cpp	/^void TGStat::SetVal(const TGStatVal& StatVal, const double& Val) {$/;"	f	class:TGStat
SetVariant	snap-core/ghash.h	/^  void SetVariant(const int& Variant) { VariantId = Variant; }$/;"	f	class:TGraphKey
SetW	snap-adv/agmattr.h	/^  void SetW(TVec<TFltV>& _W) { W = _W; }$/;"	f	class:TCesna
SetWbFlag	glib-core/unicode.h	/^	void SetWbFlag(const TUniChFlags flag) { Assert((flag & ucfWbMask) == flag); flags |= flag; }$/;"	f	class:TUniChInfo
SetWeightAttr	snap-adv/agmattr.h	/^  void SetWeightAttr(const double _WeightAttr) { IAssert (_WeightAttr <= 1.0 && _WeightAttr >= 0.0); WeightAttr = _WeightAttr; }$/;"	f	class:TCesna
SetWindow	snap-adv/cascdynetinf.h	/^  void SetWindow(const double& window) { Window = window; }$/;"	f	class:TNIBs
SetXLabel	glib-core/gnuplot.h	/^  void SetXLabel(const TStr& XLabel) { LblX = XLabel; }$/;"	f	class:TGnuPlot
SetXRange	glib-core/gnuplot.h	/^  void SetXRange(const double& Min, const double& Max) { XRange = TFltPr(Min, Max); }$/;"	f	class:TGnuPlot
SetXYLabel	glib-core/gnuplot.h	/^  void SetXYLabel(const TStr& XLabel, const TStr& YLabel) { LblX = XLabel;  LblY = YLabel; }$/;"	f	class:TGnuPlot
SetYLabel	glib-core/gnuplot.h	/^  void SetYLabel(const TStr& YLabel) { LblY = YLabel; }$/;"	f	class:TGnuPlot
SetYRange	glib-core/gnuplot.h	/^  void SetYRange(const double& Min, const double& Max) { YRange = TFltPr(Min, Max); }$/;"	f	class:TGnuPlot
SevenZipPath	glib-core/zipfl.cpp	/^  TStr TZipIn::SevenZipPath = "C:\\\\7Zip";$/;"	m	class:TZipIn	file:
SevenZipPath	glib-core/zipfl.cpp	/^  TStr TZipIn::SevenZipPath = "\/usr\/bin";$/;"	m	class:TZipIn	file:
SevenZipPath	glib-core/zipfl.cpp	/^  TStr TZipIn::SevenZipPath = "\/usr\/local\/bin";$/;"	m	class:TZipIn	file:
SevenZipPath	glib-core/zipfl.h	/^  static TStr SevenZipPath;$/;"	m	class:TZipIn
SfMem	glib-core/http.cpp	/^  TMem SfMem;$/;"	m	class:THttpLx	file:
SgV	snap-core/ghash.h	/^  TSimpleGraphV SgV, NextSgV;$/;"	m	class:TSubGraphsEnum
Shift	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^		unsigned short Shift;$/;"	m	class:TSBitSet::TIterator
ShowForwardReverseTimeForTuning	examples/randwalk/randwalk.cpp	/^void ShowForwardReverseTimeForTuning(const PNGraph& Graph) {$/;"	f
ShowGrid	glib-core/gnuplot.h	/^  void ShowGrid(const bool& Show) { SetGrid = Show; }$/;"	f	class:TGnuPlot
ShrinkThresh	glib-core/shash.h	/^  TInt ShrinkThresh, ExpandThresh;$/;"	m	class:TSparseHash
ShrinkThresh	glib-core/shash.h	/^  TInt ShrinkThresh, ExpandThresh;$/;"	m	class:TSparseSet
Shuffle	glib-core/ds.h	/^  void Shuffle(TRnd& Rnd){$/;"	f	class:TQQueue
Shuffle	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Shuffle(TRnd& Rnd){$/;"	f	class:TVec
ShuffleAll	glib-core/ds.h	/^void TVecPool<TVal, TSizeTy>::ShuffleAll(TRnd& Rnd) {$/;"	f	class:TVecPool
ShuffleAll	glib-core/ds.h	/^void TVecPool<TVal>::ShuffleAll(TRnd& Rnd) {$/;"	f	class:TGLib_OLD::TVecPool
ShuffleX	glib-core/ds.h	/^void TVVec<TVal>::ShuffleX(TRnd& Rnd){$/;"	f	class:TVVec
ShuffleY	glib-core/ds.h	/^void TVVec<TVal>::ShuffleY(TRnd& Rnd){$/;"	f	class:TVVec
SiDayOfWeekNmV	glib-core/tm.cpp	/^TStrV TTmInfo::SiDayOfWeekNmV;$/;"	m	class:TTmInfo	file:
SiDayOfWeekNmV	glib-core/tm.h	/^  static TStrV SiDayOfWeekNmV;$/;"	m	class:TTmInfo
SiMonthNmV	glib-core/tm.cpp	/^TStrV TTmInfo::SiMonthNmV;$/;"	m	class:TTmInfo	file:
SiMonthNmV	glib-core/tm.h	/^  static TStrV SiMonthNmV;$/;"	m	class:TTmInfo
Sig	glib-core/md5.h	/^  uint1 Sig[16];$/;"	v
SigBucketVHV	snap-exp/lsh.h	/^  TVec<THash<TInt, TIntV> > SigBucketVHV;$/;"	m	class:TLSHash
SigV	snap-core/ghash.h	/^  TFltV SigV;     \/\/ signature (for hashing)$/;"	m	class:TGraphKey
Sigmoid	snap-adv/agmattr.h	/^  double inline Sigmoid(const double X) {$/;"	f	class:TCesna
Sign	glib-core/xmath.h	/^  static int Sign(const T& Val){return Val<0?-1:(Val>0?1:0);}$/;"	f	class:TMath
SilentP	glib-core/env.h	/^  bool SilentP;$/;"	m	class:TEnv
SimJoin	snap-core/table.cpp	/^PTable TTable::SimJoin(const TStrV& Cols1, const TTable& Table, const TStrV& Cols2, const TStr& DistanceColName, const TSimType& SimType, const TFlt& Threshold)$/;"	f	class:TTable
SimpleLanczos	glib-core/linalg.cpp	/^void TSparseSVD::SimpleLanczos(const TMatrix& Matrix,$/;"	f	class:TSparseSVD
SimpleLanczosSVD	glib-core/linalg.cpp	/^void TSparseSVD::SimpleLanczosSVD(const TMatrix& Matrix,$/;"	f	class:TSparseSVD
SimplifyNet	snap-exp/signnet.cpp	/^void TSignNet::SimplifyNet() {$/;"	f	class:TSignNet
SingleNode	test/test-alg.cpp	/^  PNGraph SingleNode;$/;"	m	class:TreeTest	file:
Size	glib-core/hash.h	/^  TSize Size() const { return MxBfL; }$/;"	f
Size	glib-core/priorityqueue.h	/^  int Size() {$/;"	f	class:TMaxPriorityQueue
Size	snap-adv/subgraphenum.h	/^		inline int Size() const { return m_size; }$/;"	f	class:TSubGraphEnum::TSSet
Size	snap-adv/subgraphenum.h	/^		inline int Size() const { return m_size; }$/;"	f	class:TSubGraphEnum::TSVec
SizeBucketSet	snap-adv/ncp.h	/^  TIntSet SizeBucketSet;          \/\/ for exponential bucketing (only indexes BestCutH at positions in BucketSet have CutNIdV filled)$/;"	m	class:TLocClustStat
SizeFrac	snap-adv/ncp.h	/^  TFlt Alpha, SizeFrac, KFac;$/;"	m	class:TLocClustStat
SizePhiH	snap-adv/ncp.h	/^  THash<TInt, TFltV> SizePhiH;    \/\/ all conductances at cluster size K$/;"	m	class:TLocClustStat
SkipCmt	glib-core/ssmp.h	/^  bool SkipCmt;         \/\/\/< Skip comments (lines starting with #).$/;"	v
SkipCommentLines	glib-core/fl.cpp	/^void TMIn::SkipCommentLines() {$/;"	f	class:TMIn
SkipCommentLines	glib-core/ssmp.cpp	/^void TSsParserMP::SkipCommentLines() {$/;"	f	class:TSsParserMP
SkipEmptyFld	glib-core/ssmp.h	/^  bool SkipEmptyFld;    \/\/\/< Skip empty fields (i.e., multiple consecutive separators are considered as one).$/;"	v
SkipLeadBlanks	glib-core/ssmp.h	/^  bool SkipLeadBlanks;  \/\/\/< Ignore leading whitespace characters in a line.$/;"	v
SkipTillTag	glib-core/xml.cpp	/^void TXmlParser::SkipTillTag(const TChA& _SymStr) {$/;"	f	class:TXmlParser
SkipToEoln	glib-core/lx.cpp	/^void TILx::SkipToEoln(){$/;"	f	class:TILx
SkipTopTag	glib-core/xml.cpp	/^bool TXmlDoc::SkipTopTag(const PSIn& SIn){$/;"	f	class:TXmlDoc
SkipWs	glib-core/xml.cpp	/^void TXmlLx::SkipWs(){$/;"	f	class:TXmlLx
SlashStr	glib-core/http.cpp	/^const TStr THttp::SlashStr="\/";$/;"	m	class:THttp	file:
SlashStr	glib-core/http.h	/^  static const TStr SlashStr;$/;"	m	class:THttp
SlashStr	glib-core/lx.cpp	/^const TStr TLxSymStr::SlashStr="\/";$/;"	m	class:TLxSymStr	file:
Sleep	glib-core/os.cpp	/^int TSysProc::Sleep(const uint& MSecs) {$/;"	f	class:TSysProc
Sleep	glib-core/os.cpp	/^void TSysProc::Sleep(const uint& MSecs){$/;"	f	class:TSysProc
Snap_Cliques	snap-adv/cliques.h	2;"	d
Snap_GraphCounter	snap-adv/graphcounter.h	2;"	d
Snap_SubGraphEnum_h	snap-adv/subgraphenum.h	2;"	d
Solve	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void Solve() {$/;"	f	class:TSolver
Solve	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void Solve() {$/;"	f	class:TSolver
SolveLinearSystem	glib-core/linalg.cpp	/^void TNumericalStuff::SolveLinearSystem(TFltVV& A, const TFltV& b, TFltV& x) {$/;"	f	class:TNumericalStuff
SolveSymetricSystem	glib-core/linalg.cpp	/^void TNumericalStuff::SolveSymetricSystem(TFltVV& A, const TFltV& b, TFltV& x) {$/;"	f	class:TNumericalStuff
Sort	glib-core/ds.h	/^void TTuple<TVal, NVals>::Sort(const bool& Asc) {$/;"	f	class:TTuple
Sort	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Sort(const bool& Asc){$/;"	f	class:TVec
Sort	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::Sort(const bool& CmpKey, const bool& Asc) {$/;"	f	class:THash
Sort	glib-core/shash.h	/^  void Sort(const bool& Asc=true) {$/;"	f	class:TPackVec
Sort	snap-adv/cascdynetinf.h	/^  void Sort() { NIdHitH.SortByDat(true); }$/;"	f	class:TCascade
Sort	snap-adv/cascnetinf.h	/^  void Sort() { NIdHitH.SortByDat(true); }$/;"	f	class:TCascade
Sort	snap-core/cncom.h	/^  void Sort(const bool& Asc = true) { NIdV.Sort(Asc); }$/;"	f	class:TCnCom
Sort	snap-core/gstat.cpp	/^void TGStatVec::Sort(const TGStatVal& SortBy, const bool& Asc) {$/;"	f	class:TGStatVec
Sort	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
Sort2	snap-core/util.h	/^      AllocateColumnCopies, CopyColumns, Sort, Group, MergeNeighborhoods, AddNeighborhoods, AddEdges, Sort2, ComputeOffset,$/;"	e	enum:TStopwatch::__anon80
SortAsc	snap-core/gstat.h	/^    bool SortAsc;$/;"	m	class:TGStat::TCmpByVal
SortAttrOrdering	snap-adv/mag.cpp	/^void TMAGFitBern::SortAttrOrdering(const TFltV& TrueMuV, TIntV& IndexV) const {$/;"	f	class:TMAGFitBern
SortByDat	glib-core/hash.h	/^  void SortByDat(const bool& Asc=true) { Sort(false, Asc); }$/;"	f	class:THash
SortByKey	glib-core/hash.h	/^  void SortByKey(const bool& Asc=true) { Sort(true, Asc); }$/;"	f	class:THash
SortCmp	glib-core/ds.h	/^  void SortCmp(const TCmp& Cmp){ QSortCmp(BegI(), EndI(), Cmp);}$/;"	f	class:TVec
SortEIdByDat	snap-core/network.h	/^  void SortEIdByDat(const bool& Asc=true) { EdgeH.SortByDat(Asc); }$/;"	f	class:TNodeEdgeNet
SortEIdById	snap-core/network.h	/^  void SortEIdById(const bool& Asc=true) { EdgeH.SortByKey(Asc); }$/;"	f	class:TNodeEdgeNet
SortEdgeData	tutorials/demo-TNodeEdgeNet.cpp	/^void SortEdgeData() {$/;"	f
SortEdgeV	snap-core/bignet.h	/^void TBigNet<TNodeData, IsDir>::SortEdgeV() {$/;"	f	class:TBigNet
SortEdges	snap-core/graphmp.h	/^  void SortEdges(const int& Idx, const int& InDeg, const int& OutDeg) { if (InDeg > 0) NodeH[Idx].InNIdV.Sort(); if (OutDeg > 0) NodeH[Idx].OutNIdV.Sort(); }$/;"	f	class:TNGraphMP
SortEdges	snap-exp/graphmp-exp.h	/^  void SortEdges(const int& Idx, const int& Deg) { if (Deg > 0) NodeH[Idx].NIdV.Sort(); }$/;"	f	class:TUNGraphMP
SortNIdByDat	snap-core/network.h	/^  void SortNIdByDat(const bool& Asc=true) { NodeH.SortByDat(Asc); }$/;"	f	class:TNodeEDatNet
SortNIdByDat	snap-core/network.h	/^  void SortNIdByDat(const bool& Asc=true) { NodeH.SortByDat(Asc); }$/;"	f	class:TNodeEdgeNet
SortNIdByDat	snap-core/network.h	/^  void SortNIdByDat(const bool& Asc=true) { NodeH.SortByDat(Asc); }$/;"	f	class:TNodeNet
SortNIdById	snap-core/network.h	/^  void SortNIdById(const bool& Asc=true) { NodeH.SortByKey(Asc); }$/;"	f	class:TNodeEDatNet
SortNIdById	snap-core/network.h	/^  void SortNIdById(const bool& Asc=true) { NodeH.SortByKey(Asc); }$/;"	f	class:TNodeEdgeNet
SortNIdById	snap-core/network.h	/^  void SortNIdById(const bool& Asc=true) { NodeH.SortByKey(Asc); }$/;"	f	class:TNodeNet
SortNIdV	snap-core/graph.h	/^    void SortNIdV() { InNIdV.Sort(); OutNIdV.Sort();}$/;"	f	class:TNGraph::TNode
SortNIdV	snap-core/graph.h	/^    void SortNIdV() { NIdV.Sort();}$/;"	f	class:TUNGraph::TNode
SortNIdV	snap-core/graph.h	/^    void SortNIdV() { NodeHI.GetDat().SortNIdV(); }$/;"	f	class:TNGraph::TNodeI
SortNIdV	snap-core/graph.h	/^    void SortNIdV() { NodeHI.GetDat().SortNIdV(); }$/;"	f	class:TUNGraph::TNodeI
SortNIdV	snap-core/graphmp.h	/^    void SortNIdV() { InNIdV.Sort(); OutNIdV.Sort();}$/;"	f	class:TNGraphMP::TNode
SortNIdV	snap-core/graphmp.h	/^    void SortNIdV() { NodeHI.GetDat().SortNIdV(); }$/;"	f	class:TNGraphMP::TNodeI
SortNIdV	snap-exp/graphmp-exp.h	/^    void SortNIdV() { NIdV.Sort(); }$/;"	f	class:TUNGraphMP::TNode
SortNIdV	snap-exp/graphmp-exp.h	/^    void SortNIdV() { NodeHI.GetDat().SortNIdV(); }$/;"	f	class:TUNGraphMP::TNodeI
SortNodeAdjV	snap-core/graph.h	/^  void SortNodeAdjV() { for (TNodeI NI = BegNI(); NI < EndNI(); NI++) { NI.SortNIdV();} }$/;"	f	class:TNGraph
SortNodeAdjV	snap-core/graph.h	/^  void SortNodeAdjV() { for (TNodeI NI = BegNI(); NI < EndNI(); NI++) { NI.SortNIdV();} }$/;"	f	class:TUNGraph
SortNodeAdjV	snap-core/graphmp.h	/^  void SortNodeAdjV() { for (TNodeI NI = BegNI(); NI < EndNI(); NI++) { NI.SortNIdV();} }$/;"	f	class:TNGraphMP
SortNodeAdjV	snap-exp/graphmp-exp.h	/^  void SortNodeAdjV() { for (TNodeI NI = BegNI(); NI < EndNI(); NI++) { NI.SortNIdV();} }$/;"	f	class:TUNGraphMP
SortNodeData	tutorials/demo-TNodeEDatNet.cpp	/^void SortNodeData() {$/;"	f
SortNodeData	tutorials/demo-TNodeEdgeNet.cpp	/^void SortNodeData() {$/;"	f
SortNodeData	tutorials/demo-TNodeNet.cpp	/^void SortNodeData() {$/;"	f
SortNodeEdgeTimes	snap-core/timenet.cpp	/^void TTimeNENet::SortNodeEdgeTimes() {$/;"	f	class:TTimeNENet
SortNodeNmByVol	snap-adv/cascdynetinf.h	/^  void SortNodeNmByVol(const bool& asc=false) { NodeNmH.SortByDat(asc); }$/;"	f	class:TNIBs
SortVotesByTm	snap-exp/wikinet.cpp	/^void TWikiElecBs::SortVotesByTm() {$/;"	f	class:TWikiElecBs
SortedVecBench	tutorials/demo-hashvec-benchmark.cpp	/^void SortedVecBench(const int& n) {$/;"	f
Source	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    int Source;$/;"	m	class:TMatchingMachine::TMaMaEdge
Source	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    int Source;$/;"	m	class:TMatchingMachine::TMaMaEdge
SpaceWCh	glib-core/wch.h	/^  static const TWCh SpaceWCh;$/;"	m	class:TWCh
SparseMerge	glib-core/linalg.h	/^	static void SparseMerge(const TKeyDatV& SrcV1, const TKeyDatV& SrcV2, TKeyDatV& DstV) {$/;"	f	class:TSparseOps
SpectralCut	snap-adv/motifcluster.cpp	/^void MotifCluster::SpectralCut(const WeightVH& weights, TSweepCut& sweepcut,$/;"	f	class:MotifCluster
SpliceByGroup	snap-core/table.cpp	/^TVec<PTable> TTable::SpliceByGroup(const TStrV& GroupBy, TBool Ordered) {$/;"	f	class:TTable
SplitCh	glib-core/ssmp.h	/^  char SplitCh;         \/\/\/< Separator character (if one of the non-started separators is used)$/;"	v
SplitLines	snap-core/util.cpp	/^int TStrUtil::SplitLines(TChA& ChA, TVec<char *>& LineV, const bool& SkipEmpty) {$/;"	f	class:TStrUtil
SplitOnAllAnyCh	glib-core/dt.cpp	/^void TStr::SplitOnAllAnyCh($/;"	f	class:TStr
SplitOnAllCh	glib-core/dt.cpp	/^void TStr::SplitOnAllCh($/;"	f	class:TStr
SplitOnCh	glib-core/dt.cpp	/^void TStr::SplitOnCh(TStr& LStr, const char& SplitCh, TStr& RStr) const {$/;"	f	class:TStr
SplitOnCh	snap-core/util.cpp	/^int TStrUtil::SplitOnCh(TChA& ChA, TVec<char *>& WrdV, const char& Ch, const bool& SkipEmpty) {$/;"	f	class:TStrUtil
SplitOnLastCh	glib-core/dt.cpp	/^void TStr::SplitOnLastCh(TStr& LStr, const char& SplitCh, TStr& RStr) const {$/;"	f	class:TStr
SplitOnNonAlNum	glib-core/dt.cpp	/^void TStr::SplitOnNonAlNum(TStrV& StrV) const {$/;"	f	class:TStr
SplitOnStr	glib-core/dt.cpp	/^void TStr::SplitOnStr(TStr& LeftStr, const TStr& MidStr, TStr& RightStr) const {$/;"	f	class:TStr
SplitOnStr	glib-core/dt.cpp	/^void TStr::SplitOnStr(const TStr& SplitStr, TStrV& StrV) const {$/;"	f	class:TStr
SplitOnWs	glib-core/dt.cpp	/^void TStr::SplitOnWs(TStrV& StrV) const {$/;"	f	class:TStr
SplitSentences	snap-core/util.cpp	/^int TStrUtil::SplitSentences(TChA& ChA, TVec<char *>& SentenceV) {$/;"	f	class:TStrUtil
SplitWords	snap-core/util.cpp	/^int TStrUtil::SplitWords(TChA& ChA, TVec<char *>& WrdV, const bool& SplitOnWs) {$/;"	f	class:TStrUtil
Sqr	glib-core/xmath.h	/^  static double Sqr(const double& x){return x*x;}$/;"	f	class:TMath
Sqrt	glib-core/xmath.h	/^  static double Sqrt(const double& x){IAssert(!(x<0.0)); return sqrt(x);}$/;"	f	class:TMath
SrcArgNm	glib-core/html.cpp	/^const TStr THtmlTok::SrcArgNm="SRC";$/;"	m	class:THtmlTok	file:
SrcCol	snap-core/table.h	/^  TStr SrcCol; \/\/\/< Column (attribute) to serve as src nodes when constructing the graph.$/;"	m	class:TTable
SrcNId	snap-core/graph.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEGraph::TEdge
SrcNId	snap-core/mmnet.h	/^    TInt SrcNId, DstNId;$/;"	m	class:TCrossNet::TCrossEdge
SrcNId	snap-core/network.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEANet::TEdge
SrcNId	snap-core/network.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNodeEdgeNet::TEdge
SrcNId	snap-core/networkmp.h	/^    TInt Id, SrcNId, DstNId;$/;"	m	class:TNEANetMP::TEdge
SrcNId	snap-exp/linkpred.h	/^  TInt SrcNId;                         \/\/ source node$/;"	m	class:TLpExample
SrcNId	snap-exp/linkpred.h	/^  TInt SrcNId;$/;"	m	class:__OLD__::TLpExample
SrcNId	snap-exp/mmgraph-exp.h	/^    TInt TypeId, Id, SrcNId, DstNId;$/;"	m	class:TMNet::TEdge
SrcNodeAttrV	snap-core/table.h	/^  TStrV SrcNodeAttrV; \/\/\/< List of columns (attributes) to serve as source node attributes.$/;"	m	class:TTable
SrvFldNm	glib-core/http.cpp	/^const TStr THttp::SrvFldNm="Server";$/;"	m	class:THttp	file:
SrvFldNm	glib-core/http.h	/^  static const TStr SrvFldNm;$/;"	m	class:THttp
SsFmt	glib-core/ssmp.h	/^  TSsFmt SsFmt;  \/\/\/< Separator type.$/;"	v
Stack	snap-core/cncom.h	/^  TSStack<TInt> Stack;$/;"	m	class:TSccVisitor
Stack	snap-core/cncom.h	/^  TSStack<TIntPr> Stack;$/;"	m	class:TBiConVisitor
Stage	snap-core/bfsdfs.h	/^  int Stage; \/\/ 0, 2: top down, 1: bottom up$/;"	m	class:TBreathFS
Stage	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  int Stage; \/\/ 0, 2: top down, 1: bottom up$/;"	m	class:TBreathFS_Hybrid_Test
Stage	snap-exp/bfs-dev/bfs-hybrid.h	/^  int Stage; \/\/ 0, 2: top down, 1: bottom up$/;"	m	class:TBreathFS_Hybrid
Stage	snap-exp/bfs-dev/bfs-parallel.h	/^  int Stage; \/\/ 0, 2: top down, 1: bottom up$/;"	m	class:TBreathFS_Parallel
StarsH	snap-exp/wikinet.h	/^  THash<TStr, TSecTmV> StarsH;$/;"	m	class:TBarnStars
Start	glib-core/tm.h	/^    void Start() { if (!RunningP) { RunningP = true; ExeTm.Tick(); } }$/;"	f	class:TTmStopWatch
Start	snap-core/table.h	/^  TBool Start;	\/\/\/< A flag indicating whether the current row in the first valid row of the table.$/;"	m	class:TRowIteratorWithRemove
Start	snap-core/util.cpp	/^void TStopwatch::Start(const TExperiment Exp) {$/;"	f	class:TStopwatch
Start	snap-exp/alternativetable.h	/^  TBool Start;	\/\/\/< A flag indicating whether the current row in the first valid row of the table.$/;"	m	class:ExplicitStringRowIteratorWithRemove
StartNId	snap-core/bfsdfs.h	/^  TInt StartNId;$/;"	m	class:TBreathFS
StartNId	snap-exp/bfs-dev/bfs-dev.h	/^  TInt StartNId;$/;"	m	class:TBreathFS_Test
StartNId	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  TInt StartNId;$/;"	m	class:TBreathFS_Hybrid_Test
StartNId	snap-exp/bfs-dev/bfs-hybrid.h	/^  TInt StartNId;$/;"	m	class:TBreathFS_Hybrid
StartNId	snap-exp/bfs-dev/bfs-parallel.h	/^  TInt StartNId;$/;"	m	class:TBreathFS_Parallel
StartNId	snap-exp/bfs-dev/bfs-vector.h	/^  TInt StartNId;$/;"	m	class:TBreathFS_Test
StartNodes	snap-core/ff.h	/^  TInt StartNodes;     \/\/ start a graph with N isolated nodes$/;"	m	class:TFfGGen
StartProcFile	snap-exp/memes.h	/^  virtual void StartProcFile(const TStr& FNm) { }$/;"	f	class:TQuoteLoader
StartProcFile	snap-exp/spinn3r.cpp	/^void TQuoteExtractor::StartProcFile(const TStr& FNm) {$/;"	f	class:TQuoteExtractor
StartProcFile	snap-exp/spinn3r.h	/^  virtual void StartProcFile(const TStr& FNm) { }$/;"	f	class:TSpinn3rFeedItem
StartProcFile	snap-exp/spinn3r.h	/^  virtual void StartProcFile(const TStr& FNm) { }$/;"	f	class:TSpinn3rFullItem
StartProcess	snap-exp/memes.h	/^  virtual void StartProcess() { }$/;"	f	class:TQuoteLoader
StartProcess	snap-exp/spinn3r.h	/^  virtual void StartProcess() { }$/;"	f	class:TSpinn3rFeedItem
StartProcess	snap-exp/spinn3r.h	/^  virtual void StartProcess() { }$/;"	f	class:TSpinn3rFullItem
StartTag	snap-exp/dblp.h	/^  TStrSet StartTag;$/;"	m	class:TDblpLoader
StartTimer	glib-core/tm.h	/^	void StartTimer(const TStr& TimerNm) { TimerH.GetDat(TimerNm).Start(); }$/;"	f
StartTimer	glib-core/tm.h	/^	void StartTimer(const int& TimerId) { TimerH[TimerId].Start(); }$/;"	f
StartWCh	glib-core/wch.h	/^  static const TWCh StartWCh;$/;"	m	class:TWCh
Starts	snap-core/util.h	/^  double Starts[NEXPS];$/;"	m	class:TStopwatch
StatFSet	snap-core/gstat.h	/^  TFSet StatFSet;$/;"	m	class:TGStatVec
StatNotify	glib-core/bd.h	/^inline void StatNotify(const char* NotifyCStr){$/;"	f
StatNotify	glib-core/ut.h	/^inline void StatNotify(const TStr& MsgStr){StatNotify(MsgStr.CStr());}$/;"	f
StdErrNotify	glib-core/ut.cpp	/^const PNotify TNotify::StdErrNotify=TStdErrNotify::New();$/;"	m	class:TNotify	file:
StdErrNotify	glib-core/ut.h	/^  static const PNotify StdErrNotify;$/;"	v
StdIn	glib-core/fl.cpp	/^const PSIn TSIn::StdIn=PSIn(new TStdIn());$/;"	m	class:TSIn	file:
StdIn	glib-core/fl.h	/^  static const TPt<TSIn> StdIn;$/;"	m	class:TSIn
StdNotify	glib-core/ut.cpp	/^const PNotify TNotify::StdNotify=TStdNotify::New();$/;"	m	class:TNotify	file:
StdNotify	glib-core/ut.h	/^  static const PNotify StdNotify;$/;"	v
StdOut	glib-core/fl.cpp	/^const PSOut TSOut::StdOut=PSOut(new TStdOut());$/;"	m	class:TSOut	file:
StdOut	glib-core/fl.h	/^  static const TPt<TSOut> StdOut;$/;"	m	class:TSOut
StdOut	snap-exp/multimodal-dev/benchmark-TNEANet-unweighted.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/benchmark-TNEANet-weighted.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/benchmark-unweighted.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/benchmark-weighted.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/benchmark.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/delete-exp.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/graph-construct-exp.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/rand-construct-exp.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/subgraph-exp.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/multimodal-dev/triad-exp.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
StdOut	snap-exp/test-dev/TableIndexTest.cpp	/^PSOut StdOut = TStdOut::New();$/;"	v
Stop	glib-core/tm.h	/^    void Stop() { if (RunningP) { RunningP = false; TmSoFar += ExeTm.GetTime(); } }$/;"	f	class:TTmStopWatch
Stop	snap-core/util.cpp	/^void TStopwatch::Stop(const TExperiment Exp) {$/;"	f	class:TStopwatch
StopTimer	glib-core/tm.h	/^	void StopTimer(const TStr& TimerNm) { TimerH.GetDat(TimerNm).Stop(); }$/;"	f
StopTimer	glib-core/tm.h	/^	void StopTimer(const int& TimerId) { TimerH[TimerId].Stop(); }$/;"	f
StoreFltCol	snap-core/table.cpp	/^void TTable::StoreFltCol(const TStr& ColName, const TFltV& ColVals) {$/;"	f	class:TTable
StoreGroupCol	snap-core/table.cpp	/^void TTable::StoreGroupCol(const TStr& GroupColName, const TVec<TPair<TInt, TInt> >& GroupAndRowIds) {$/;"	f	class:TTable
StoreIntCol	snap-core/table.cpp	/^void TTable::StoreIntCol(const TStr& ColName, const TIntV& ColVals) {$/;"	f	class:TTable
StoreOutputs	snap-core/util.h	/^  typedef enum {LoadTables, Preprocess, ConstructGraph, Compute, Postprocess, StoreOutputs,$/;"	e	enum:TStopwatch::__anon80
StoreStrCol	snap-core/table.cpp	/^void TTable::StoreStrCol(const TStr& ColName, const TStrV& ColVals) {$/;"	f	class:TTable
Str	glib-core/dt.h	/^  TMem(const TStr& Str);$/;"	v
Str	glib-core/json.h	/^  TStr Str; $/;"	v
StrAttrNameEI	snap-core/mmnet.cpp	/^void TCrossNet::StrAttrNameEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TStrV& Names) const {$/;"	f	class:TCrossNet
StrAttrNameEI	snap-core/mmnet.h	/^  void StrAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TCrossNet
StrAttrNameEI	snap-core/network.cpp	/^void TNEANet::StrAttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANet
StrAttrNameEI	snap-core/network.h	/^  void StrAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANet
StrAttrNameEI	snap-core/networkmp.cpp	/^void TNEANetMP::StrAttrNameEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
StrAttrNameEI	snap-core/networkmp.h	/^  void StrAttrNameEI(const TInt& EId, TStrV& Names) const {$/;"	f	class:TNEANetMP
StrAttrNameNI	snap-core/network.cpp	/^void TNEANet::StrAttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANet
StrAttrNameNI	snap-core/network.h	/^  void StrAttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANet
StrAttrNameNI	snap-core/networkmp.cpp	/^void TNEANetMP::StrAttrNameNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Names) const {$/;"	f	class:TNEANetMP
StrAttrNameNI	snap-core/networkmp.h	/^  void StrAttrNameNI(const TInt& NId, TStrV& Names) const {$/;"	f	class:TNEANetMP
StrAttrVals	snap-core/attr.h	/^  TIntIntPrPrStrH StrAttrVals;$/;"	m	class:TAttrPair
StrAttrVals	snap-core/attr.h	/^  TIntPrStrH StrAttrVals;$/;"	m	class:TAttr
StrAttrValueEI	snap-core/mmnet.cpp	/^void TCrossNet::StrAttrValueEI(const TInt& EId, TStrIntPrH::TIter CrossHI, TStrV& Values) const {$/;"	f	class:TCrossNet
StrAttrValueEI	snap-core/mmnet.h	/^  void StrAttrValueEI(const TInt& EId, TStrV& Values) const {$/;"	f	class:TCrossNet
StrAttrValueEI	snap-core/network.cpp	/^void TNEANet::StrAttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Values) const {$/;"	f	class:TNEANet
StrAttrValueEI	snap-core/network.h	/^  void StrAttrValueEI(const TInt& EId, TStrV& Values) const {$/;"	f	class:TNEANet
StrAttrValueEI	snap-core/networkmp.cpp	/^void TNEANetMP::StrAttrValueEI(const TInt& EId, TStrIntPrH::TIter EdgeHI, TStrV& Values) const {$/;"	f	class:TNEANetMP
StrAttrValueEI	snap-core/networkmp.h	/^  void StrAttrValueEI(const TInt& EId, TStrV& Values) const {$/;"	f	class:TNEANetMP
StrAttrValueNI	snap-core/network.cpp	/^void TNEANet::StrAttrValueNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Values) const {$/;"	f	class:TNEANet
StrAttrValueNI	snap-core/network.h	/^  void StrAttrValueNI(const TInt& NId, TStrV& Values) const {$/;"	f	class:TNEANet
StrAttrValueNI	snap-core/networkmp.cpp	/^void TNEANetMP::StrAttrValueNI(const TInt& NId, TStrIntPrH::TIter NodeHI, TStrV& Values) const {$/;"	f	class:TNEANetMP
StrAttrValueNI	snap-core/networkmp.h	/^  void StrAttrValueNI(const TInt& NId, TStrV& Values) const {$/;"	f	class:TNEANetMP
StrColMaps	snap-core/table.h	/^  TVec<TIntV> StrColMaps; \/\/\/< Data columns of integer mappings of string attributes. ##TTable::StrColMaps$/;"	m	class:TTable
StrColMaps	snap-exp/alternativetable.h	/^  TVec<TIntV> StrColMaps; \/\/\/< Data columns of integer mappings of string attributes. ##PhysicalOrderTable::StrColMaps$/;"	m	class:PhysicalOrderTable
StrCols	snap-exp/alternativetable.h	/^  TVec<TStrV> StrCols;$/;"	m	class:ExplicitStringTable
StrConst	snap-core/table.h	/^    TStr StrConst; \/\/\/< Str const value if this object is a string constant$/;"	m	class:TAtomicPredicate
StrDefaultsE	snap-core/mmnet.h	/^  THash<TStr, TStr> StrDefaultsE;$/;"	m	class:TCrossNet
StrDefaultsE	snap-core/network.h	/^  THash<TStr, TStr> StrDefaultsN, StrDefaultsE;$/;"	m	class:TNEANet
StrDefaultsE	snap-core/networkmp.h	/^  THashMP<TStr, TStr> StrDefaultsN, StrDefaultsE;$/;"	m	class:TNEANetMP
StrDefaultsN	snap-core/network.h	/^  THash<TStr, TStr> StrDefaultsN, StrDefaultsE;$/;"	m	class:TNEANet
StrDefaultsN	snap-core/networkmp.h	/^  THashMP<TStr, TStr> StrDefaultsN, StrDefaultsE;$/;"	m	class:TNEANetMP
StrIdH	snap-exp/imdbnet.h	/^  TStrHash<TInt> StrIdH;$/;"	m	class:TImdbNet
StrMapColIndexes	snap-core/table.h	/^  THash<TStr, THash<TInt, TIntV> > StrMapColIndexes; \/\/\/< Indexes for String Columns.$/;"	m	class:TTable
StrQtIdH	snap-exp/memes.h	/^  TStrHash<TInt, TBigStrPool> StrQtIdH;    \/\/ new for QtBs from Aug1 to Dec 31 (NEW VERSION, BIG POOL)$/;"	m	class:TQuoteBs
StrStr	glib-core/lx.cpp	/^const TStr TLxSymStr::StrStr="<string>";$/;"	m	class:TLxSymStr	file:
StrType	snap-core/mmnet.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TCrossNet::__anon110
StrType	snap-core/network.h	/^  enum { IntType, StrType, FltType, IntVType };$/;"	e	enum:TNEANet::__anon96
StrType	snap-core/networkmp.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TNEANetMP::__anon77
StrType	snap-exp/mmgraph-exp.h	/^  enum { IntType, StrType, FltType };$/;"	e	enum:TMNet::__anon2
StrVal	snap-core/table.h	/^  TStr StrVal;$/;"	m	class:TPrimitive
StrVals	snap-core/table.h	/^  TStrV StrVals; \/\/\/< Values of the str columns for this row.$/;"	m	class:TTableRow
StrVars	snap-core/table.h	/^		THash<TStr, TStr> StrVars; \/\/\/< String variables in the current predicate tree$/;"	m	class:TPredicate
StringVals	snap-core/table.h	/^  TStrHash<TInt, TBigStrPool> StringVals; \/\/\/< StringPool - stores string data values and maps them to integers.$/;"	m	class:TTableContext
StringVals	snap-exp/alternativetable.h	/^  TStrHash<TInt, TBigStrPool> StringVals; \/\/\/< StringPool - stores string data values and maps them to integers.$/;"	m	class:PhysicalOrderTableContext
StripEnd	snap-core/util.cpp	/^bool TStrUtil::StripEnd(const TChA& Str, const TChA& SearchStr, TChA& NewStr) {$/;"	f	class:TStrUtil
SubDays	glib-core/tm.h	/^  TSecTm& SubDays(const int& Days){$/;"	f	class:TSecTm
SubDays	glib-core/tm.h	/^  void SubDays(const int& Days){SubTime(Days*24);}$/;"	f	class:TTm
SubGISolver	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  SubGISolver(TMatchingMachine<TNodeData, TEdgeData> &NMaMa,$/;"	f	class:SubGISolver
SubGISolver	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class SubGISolver : public TSolver<TNodeData, TEdgeData> {$/;"	c
SubHours	glib-core/tm.h	/^  TSecTm& SubHours(const int& Hours){$/;"	f	class:TSecTm
SubMins	glib-core/tm.h	/^  TSecTm& SubMins(const int& Mins){$/;"	f	class:TSecTm
SubSecs	glib-core/tm.h	/^  TSecTm& SubSecs(const int& Secs){$/;"	f	class:TSecTm
SubTime	glib-core/tm.cpp	/^void TTm::SubTime(const int& Hours,$/;"	f	class:TTm
SubWeeks	glib-core/tm.h	/^  TSecTm& SubWeeks(const int& Weeks){$/;"	f	class:TSecTm
SubgraphDegreeOrder	snap-adv/motifcluster.cpp	/^void ChibaNishizekiWeighter::SubgraphDegreeOrder(int k, const TIntV& U,$/;"	f	class:ChibaNishizekiWeighter
SubgraphExtractExp	snap-exp/multimodal-dev/subgraph-exp.cpp	/^PGraph SubgraphExtractExp(const PGraph& Graph, const TIntV& NTypeIdV) {$/;"	f
SubgraphExtractTNEANetExp	snap-exp/multimodal-dev/subgraph-exp.cpp	/^PNEANet SubgraphExtractTNEANetExp(const PGraph& Graph, const TIntV& NTypeIdV) {$/;"	f
SubgraphExtractTNEANetMPExp	snap-exp/multimodal-dev/subgraph-exp.cpp	/^PNEANetMP SubgraphExtractTNEANetMPExp(const PGraph& Graph, const TIntV& NTypeIdV) {$/;"	f
Sum	snap-adv/agmattr.h	/^  double inline Sum(const TIntFltH& UV) {$/;"	f	class:TCesna
Sum	snap-adv/agmdirected.h	/^  double inline Sum(const TIntFltH& UV) {$/;"	f	class:TCoda
Sum	snap-adv/agmfast.h	/^  double inline Sum(const TIntFltH& UV) {$/;"	f	class:TAGMFast
Sum	snap-core/util.cpp	/^double TStopwatch::Sum(const TExperiment Exp) const {$/;"	f	class:TStopwatch
SumFV	snap-adv/agmattr.h	/^  TFltV SumFV; \/\/ sum_u F_uc for each community c. Needed for efficient calculation$/;"	m	class:TCesna
SumFV	snap-adv/agmdirected.h	/^  TFltV SumFV; \/\/ sum_u F_uc for each community c. Needed for efficient calculation$/;"	m	class:TCoda
SumFV	snap-adv/agmfast.h	/^  TFltV SumFV; \/\/ sum_u F_uc for each community c. Needed for efficient calculation$/;"	m	class:TAGMFast
SumGradV	snap-exp/linkpred.h	/^  TFltV SumGradV;    \/\/ gradient of f_w$/;"	m	struct:TNodeGrad
SumHV	snap-adv/agmdirected.h	/^  TFltV SumHV; \/\/ sum_u H_uc for each community c. Needed for efficient calculation$/;"	m	class:TCoda
SumVal	snap-exp/linkpred.h	/^  TFlt SumVal;       \/\/ value f_w(features)$/;"	m	struct:TNodeGrad
SumVec	glib-core/linalg.cpp	/^double TLAMisc::SumVec(const TFltV& Vec) {$/;"	f	class:TLAMisc
SumVec	glib-core/linalg.cpp	/^double TLinAlg::SumVec(const TFltV& x) {$/;"	f	class:TLinAlg
SumVec	glib-core/linalg.cpp	/^double TLinAlg::SumVec(double k, const TFltV& x, const TFltV& y) {$/;"	f	class:TLinAlg
SumVec	glib-core/linalg.cpp	/^int TLAMisc::SumVec(const TIntV& Vec) {$/;"	f	class:TLAMisc
SumW	glib-core/xmath.h	/^  TFlt SumW, ValSumW;$/;"	v
SumWgt	snap-exp/signnet.h	/^    TFlt SumWgt; \/\/ sum_+ p$/;"	m	struct:TSignMicroEvol::TTransStat
SummarizeConnectedComponents	snap-adv/rolx.cpp	/^TIntFtrH SummarizeConnectedComponents(const PUNGraph FeatureGraph,$/;"	f
Summary	snap-adv/agmdirected.h	/^  void Summary(const int TopK = 10, const double Thres2Mode = 0.2) {$/;"	f	class:TCodaAnalyzer
Sums	snap-core/util.h	/^  double Sums[NEXPS];$/;"	m	class:TStopwatch
SunN	glib-core/tm.cpp	/^const int TTmInfo::SunN=1; const int TTmInfo::MonN=2;$/;"	m	class:TTmInfo	file:
SunN	glib-core/tm.h	/^  static const int SunN; static const int MonN;$/;"	m	class:TTmInfo
Sup	snap-exp/wikinet.h	/^    TInt Sup, Opp, Neu;$/;"	m	struct:TWikiElecBs::TElecSum
SupportSweep	snap-adv/ncp.cpp	/^void TLocClust::SupportSweep() {$/;"	f	class:TLocClust
Svd	glib-core/xmath.cpp	/^void TSvd::Svd(const TFltVV& InMtx, TFltVV& LSingV, TFltV& SingValV, TFltVV& RSingV) {$/;"	f	class:TSvd
Svd1Based	glib-core/xmath.cpp	/^void TSvd::Svd1Based(const TFltVV& InMtx1, TFltVV& LSingV, TFltV& SingValV, TFltVV& RSingV) {$/;"	f	class:TSvd
Sw	snap-exp/multimodal-dev/graph-construct-exp.cpp	/^TStopwatch* Sw = TStopwatch::GetInstance();$/;"	v
Swap	glib-core/bd.h	/^void Swap(TRec& Rec1, TRec& Rec2){$/;"	f
Swap	glib-core/ds.h	/^  void Swap(const TSizeTy& ValN1, const TSizeTy& ValN2){ const TVal Val=ValT[ValN1]; ValT[ValN1]=ValT[ValN2]; ValT[ValN2]=Val;}$/;"	f	class:TVec
Swap	glib-core/ds.h	/^void TVVec<TVal>::Swap(TVVec<TVal>& Vec){  \/\/J:$/;"	f	class:TVVec
Swap	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Swap(TVec<TVal, TSizeTy>& Vec){$/;"	f	class:TVec
Swap	glib-core/dt.cpp	/^void TChA::Swap(TChA& ChA) {$/;"	f	class:TChA
Swap	glib-core/dt.cpp	/^void TChA::Swap(const int& ChN1, const int& ChN2){$/;"	f	class:TChA
Swap	glib-core/hash.h	/^void THash<TKey, TDat, THashFunc>::Swap(THash& Hash) {$/;"	f	class:THash
Swap	glib-core/hashmp.h	/^void THashMP<TKey, TDat, THashFunc>::Swap(THashMP& Hash) {$/;"	f	class:THashMP
Swap	glib-core/priorityqueue.h	/^  void Swap(int i, int j) {$/;"	f	class:TMaxPriorityQueue
Swap	glib-core/shash.h	/^void THashSet<TKey, THashFunc>::Swap(THashSet& Set) {$/;"	f	class:THashSet
Swap	glib-core/shash.h	/^void TSparseHash<TKey, TDat, GroupSize>::Swap(TSparseHash& HT) {$/;"	f	class:TSparseHash
Swap	glib-core/shash.h	/^void TSparseSet<TKey, GroupSize>::Swap(TSparseSet& SSet) {$/;"	f	class:TSparseSet
Swap	glib-core/shash.h	/^void TSparseTable<TVal, GroupSize>::Swap(TSparseTable& ST) {$/;"	f	class:TSparseTable
Swap	snap-adv/kronecker.cpp	/^void TKronMtx::Swap(TKronMtx& KronMtx) {$/;"	f	class:TKronMtx
Swap	snap-adv/mag.cpp	/^void TMAGAffMtx::Swap(TMAGAffMtx& Mtx) {$/;"	f	class:TMAGAffMtx
SwapBytes	glib-core/unicode.h	/^	static inline int SwapBytes(int x) {$/;"	f	class:TUniCodec
SwapI	glib-core/ds.h	/^  static void SwapI(TIter LVal, TIter RVal){ const TVal Val=*LVal; *LVal=*RVal; *RVal=Val;}$/;"	f	class:TVec
SwapNodesLL	snap-adv/kronecker.cpp	/^double TKroneckerLL::SwapNodesLL(const int& NId1, const int& NId2) {$/;"	f	class:TKroneckerLL
SwapRows	snap-exp/alternativetable.cpp	/^void PhysicalOrderTable::SwapRows(TInt Idx1, TInt Idx2){$/;"	f	class:PhysicalOrderTable
SwapX	glib-core/ds.h	/^void TVVec<TVal>::SwapX(const int& X1, const int& X2){$/;"	f	class:TVVec
SwapY	glib-core/ds.h	/^void TVVec<TVal>::SwapY(const int& Y1, const int& Y2){$/;"	f	class:TVVec
Sweep	snap-adv/motifcluster.cpp	/^static void Sweep(const TSparseColMatrix& W, const TFltV& fvec, TFltV& conds,$/;"	f	file:
SweepV	snap-adv/ncp.h	/^    TIntV SweepV;  \/\/ nodes inside the cut: cut of size k has node ids CutV[0...k-1]$/;"	m	class:TLocClustStat::TNodeSweep
SweepsV	snap-adv/ncp.h	/^  TVec<TNodeSweep> SweepsV;       \/\/ node ids and conductances for each run of local clustering$/;"	m	class:TLocClustStat
SwitchBit	glib-core/bits.h	/^  void SwitchBit(const int& BitN){$/;"	f
SwitchBit	glib-core/bits.h	/^  void SwitchBit(const int& BitN){$/;"	f	class:TB32Set
SymeigsSmallest	snap-adv/motifcluster.cpp	/^void SymeigsSmallest(const TSparseColMatrix& A, int nev, TFltV& evals,$/;"	f
SymetricToTridiag	glib-core/linalg.cpp	/^void TNumericalStuff::SymetricToTridiag(TFltVV& a, int n, TFltV& d, TFltV& e) {$/;"	f	class:TNumericalStuff
Sz	snap-exp/mmgraph-exp.h	/^  int Sz;$/;"	m	class:TMNet
T0	snap-exp/sir.h	/^  int T0;$/;"	m	class:TSir2Model
T0	snap-exp/sir.h	/^  int T0;$/;"	m	class:TSirModel
T0	snap-exp/sir.h	/^  int T0;$/;"	m	class:TSirSR2Model
T8BitCodec	glib-core/unicode.h	/^	T8BitCodec() : errorHandling(uehIgnore), replacementChar(TUniCodec::DefaultReplacementChar) { }$/;"	f	class:T8BitCodec
T8BitCodec	glib-core/unicode.h	/^	T8BitCodec(TUnicodeErrorHandling errorHandling_, int replacementChar_ = TUniCodec::DefaultReplacementChar) :$/;"	f	class:T8BitCodec
T8BitCodec	glib-core/unicode.h	/^class T8BitCodec$/;"	c
TABLE_H	snap-core/table.h	2;"	d
TAFltI	snap-core/mmnet.h	/^    TAFltI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TCrossNet::TAFltI
TAFltI	snap-core/mmnet.h	/^    TAFltI(const TAFltI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { }$/;"	f	class:TCrossNet::TAFltI
TAFltI	snap-core/mmnet.h	/^    TAFltI(const TFltVecIter& HIter, TStr attribute, const TCrossNet* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { attr = attribute; }$/;"	f	class:TCrossNet::TAFltI
TAFltI	snap-core/mmnet.h	/^  class TAFltI {$/;"	c	class:TCrossNet
TAFltI	snap-core/network.h	/^    TAFltI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TNEANet::TAFltI
TAFltI	snap-core/network.h	/^    TAFltI(const TAFltI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { isNode = I.isNode; }$/;"	f	class:TNEANet::TAFltI
TAFltI	snap-core/network.h	/^    TAFltI(const TFltVecIter& HIter, TStr attribute, bool isEdgeIter, const TNEANet* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { isNode = !isEdgeIter; attr = attribute; }$/;"	f	class:TNEANet::TAFltI
TAFltI	snap-core/network.h	/^  class TAFltI {$/;"	c	class:TNEANet
TAFltI	snap-core/networkmp.h	/^    TAFltI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TNEANetMP::TAFltI
TAFltI	snap-core/networkmp.h	/^    TAFltI(const TAFltI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { isNode = I.isNode; }$/;"	f	class:TNEANetMP::TAFltI
TAFltI	snap-core/networkmp.h	/^    TAFltI(const TFltVecIter& HIter, TStr attribute, bool isEdgeIter, const TNEANetMP* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { isNode = !isEdgeIter; attr = attribute; }$/;"	f	class:TNEANetMP::TAFltI
TAFltI	snap-core/networkmp.h	/^  class TAFltI {$/;"	c	class:TNEANetMP
TAGM	snap-adv/agm.h	/^class TAGM {$/;"	c
TAGMFast	snap-adv/agmfast.h	/^  TAGMFast(const PUNGraph& GraphPt, const int& InitComs, const int RndSeed = 0): Rnd(RndSeed), RegCoef(0), $/;"	f	class:TAGMFast
TAGMFast	snap-adv/agmfast.h	/^class TAGMFast { $/;"	c
TAGMFastUtil	snap-adv/agmfast.h	/^class TAGMFastUtil {$/;"	c
TAGMFit	snap-adv/agmfit.h	/^  TAGMFit() { }$/;"	f	class:TAGMFit
TAGMFit	snap-adv/agmfit.h	/^  TAGMFit(const PUNGraph& GraphPt, const TVec<TIntV>& CmtyVVPt, const TRnd& RndPt): G(GraphPt), PNoCom(0.0), Rnd(RndPt), MinLambda(0.00001), MaxLambda(10.0), RegCoef(0), BaseCID(-1) { SetCmtyVV(CmtyVVPt); }$/;"	f	class:TAGMFit
TAGMFit	snap-adv/agmfit.h	/^  TAGMFit(const PUNGraph& GraphPt, const TVec<TIntV>& CmtyVVPt, const int RndSeed = 0): G(GraphPt), PNoCom(0.0), Rnd(RndSeed), MinLambda(0.00001), MaxLambda(10.0), RegCoef(0), BaseCID(-1) { SetCmtyVV(CmtyVVPt);  }$/;"	f	class:TAGMFit
TAGMFit	snap-adv/agmfit.h	/^  TAGMFit(const PUNGraph& GraphPt, const int InitComs, const int RndSeed = 0): G(GraphPt), PNoCom(0.0), Rnd(RndSeed), MinLambda(0.00001), MaxLambda(10.0), RegCoef(0), BaseCID(-1) { NeighborComInit(InitComs); }\/\/RandomInitCmtyVV(InitComs);  }$/;"	f	class:TAGMFit
TAGMFit	snap-adv/agmfit.h	/^class TAGMFit {$/;"	c
TAGMUtil	snap-adv/agm.h	/^class TAGMUtil {$/;"	c
TAIntI	snap-core/mmnet.h	/^    TAIntI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TCrossNet::TAIntI
TAIntI	snap-core/mmnet.h	/^    TAIntI(const TAIntI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { }$/;"	f	class:TCrossNet::TAIntI
TAIntI	snap-core/mmnet.h	/^    TAIntI(const TIntVecIter& HIter, TStr attribute, const TCrossNet* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { attr = attribute; }$/;"	f	class:TCrossNet::TAIntI
TAIntI	snap-core/mmnet.h	/^  class TAIntI {$/;"	c	class:TCrossNet
TAIntI	snap-core/network.h	/^    TAIntI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TNEANet::TAIntI
TAIntI	snap-core/network.h	/^    TAIntI(const TAIntI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { isNode = I.isNode; }$/;"	f	class:TNEANet::TAIntI
TAIntI	snap-core/network.h	/^    TAIntI(const TIntVecIter& HIter, TStr attribute, bool isEdgeIter, const TNEANet* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { isNode = !isEdgeIter; attr = attribute; }$/;"	f	class:TNEANet::TAIntI
TAIntI	snap-core/network.h	/^  class TAIntI {$/;"	c	class:TNEANet
TAIntI	snap-core/networkmp.h	/^    TAIntI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TNEANetMP::TAIntI
TAIntI	snap-core/networkmp.h	/^    TAIntI(const TAIntI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { isNode = I.isNode; }$/;"	f	class:TNEANetMP::TAIntI
TAIntI	snap-core/networkmp.h	/^    TAIntI(const TIntVecIter& HIter, TStr attribute, bool isEdgeIter, const TNEANetMP* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { isNode = !isEdgeIter; attr = attribute; }$/;"	f	class:TNEANetMP::TAIntI
TAIntI	snap-core/networkmp.h	/^  class TAIntI {$/;"	c	class:TNEANetMP
TAIntVI	snap-core/network.h	/^    TAIntVI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TNEANet::TAIntVI
TAIntVI	snap-core/network.h	/^    TAIntVI(const TAIntVI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { isNode = I.isNode; }$/;"	f	class:TNEANet::TAIntVI
TAIntVI	snap-core/network.h	/^    TAIntVI(const TIntVVecIter& HIter, TStr attribute, bool isEdgeIter, const TNEANet* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { isNode = !isEdgeIter; attr = attribute; }$/;"	f	class:TNEANet::TAIntVI
TAIntVI	snap-core/network.h	/^  class TAIntVI {$/;"	c	class:TNEANet
TAPt	glib-core/ds.h	/^  TAPt(): Addr(NULL){}$/;"	f	class:TAPt
TAPt	glib-core/ds.h	/^  TAPt(TRec* _Addr): Addr(_Addr){}$/;"	f	class:TAPt
TAPt	glib-core/ds.h	/^  TAPt(TSIn&){Fail;}$/;"	f	class:TAPt
TAPt	glib-core/ds.h	/^  TAPt(const TAPt& Pt): Addr(Pt.Addr){}$/;"	f	class:TAPt
TAPt	glib-core/ds.h	/^class TAPt{$/;"	c
TAStrI	snap-core/mmnet.h	/^    TAStrI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TCrossNet::TAStrI
TAStrI	snap-core/mmnet.h	/^    TAStrI(const TAStrI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { }$/;"	f	class:TCrossNet::TAStrI
TAStrI	snap-core/mmnet.h	/^    TAStrI(const TStrVecIter& HIter, TStr attribute, const TCrossNet* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { attr = attribute; }$/;"	f	class:TCrossNet::TAStrI
TAStrI	snap-core/mmnet.h	/^  class TAStrI {$/;"	c	class:TCrossNet
TAStrI	snap-core/network.h	/^    TAStrI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TNEANet::TAStrI
TAStrI	snap-core/network.h	/^    TAStrI(const TAStrI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { isNode = I.isNode; }$/;"	f	class:TNEANet::TAStrI
TAStrI	snap-core/network.h	/^    TAStrI(const TStrVecIter& HIter, TStr attribute, bool isEdgeIter, const TNEANet* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { isNode = !isEdgeIter; attr = attribute; }$/;"	f	class:TNEANet::TAStrI
TAStrI	snap-core/network.h	/^  class TAStrI {$/;"	c	class:TNEANet
TAStrI	snap-core/networkmp.h	/^    TAStrI() : HI(), attr(), Graph(NULL) { }$/;"	f	class:TNEANetMP::TAStrI
TAStrI	snap-core/networkmp.h	/^    TAStrI(const TAStrI& I) : HI(I.HI), attr(I.attr), Graph(I.Graph) { isNode = I.isNode; }$/;"	f	class:TNEANetMP::TAStrI
TAStrI	snap-core/networkmp.h	/^    TAStrI(const TStrVecIter& HIter, TStr attribute, bool isEdgeIter, const TNEANetMP* GraphPt) : HI(HIter), attr(), Graph(GraphPt) { isNode = !isEdgeIter; attr = attribute; }$/;"	f	class:TNEANetMP::TAStrI
TAStrI	snap-core/networkmp.h	/^  class TAStrI {$/;"	c	class:TNEANetMP
TAllNodesList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TAllNodesList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &NNet):$/;"	f	class:TAllNodesList
TAllNodesList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TAllNodesList : public TNodeList {$/;"	c
TAllNodesList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TAllNodesList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &NNet): Net(NNet) {}$/;"	f	class:TAllNodesList
TAllNodesList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TAllNodesList : public TNodeList {$/;"	c
TAnfBitV	snap-core/anf.h	/^  typedef TVec<uint64> TAnfBitV;$/;"	t	class:TGraphAnf
TArithOp	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	t	typeref:enum:__anon85
TArtPointVisitor	snap-core/cncom.h	/^  TArtPointVisitor() { }$/;"	f	class:TArtPointVisitor
TArtPointVisitor	snap-core/cncom.h	/^  TArtPointVisitor(const int& Nodes) : VnLowH(Nodes), ParentH(Nodes)  { }$/;"	f	class:TArtPointVisitor
TArtPointVisitor	snap-core/cncom.h	/^class TArtPointVisitor {$/;"	c
TArxivPaper	snap-exp/arxiv.h	/^    TArxivPaper() { }$/;"	f	class:TArxivPaperList::TArxivPaper
TArxivPaper	snap-exp/arxiv.h	/^  class TArxivPaper {$/;"	c	class:TArxivPaperList
TArxivPaperList	snap-exp/arxiv.h	/^  TArxivPaperList() { }$/;"	f	class:TArxivPaperList
TArxivPaperList	snap-exp/arxiv.h	/^  TArxivPaperList(const TStr& InFNm) : SIn(TZipIn::IsZipFNm(InFNm)?TZipIn::New(InFNm):TFIn::New(InFNm)) { }$/;"	f	class:TArxivPaperList
TArxivPaperList	snap-exp/arxiv.h	/^class TArxivPaperList {$/;"	c
TAscFltIntKd	glib-core/ds.h	/^typedef TKeyDat<TAscFlt, TInt> TAscFltIntKd;$/;"	t
TAscFltIntKdL	glib-core/ds.h	/^typedef TLst<TAscFltIntKd> TAscFltIntKdL;$/;"	t
TAscFltIntKdV	glib-core/ds.h	/^typedef TVec<TAscFltIntKd> TAscFltIntKdV;$/;"	t
TAscFltIntPr	glib-core/ds.h	/^typedef TPair<TAscFlt, TInt> TAscFltIntPr;$/;"	t
TAscFltIntPrV	glib-core/ds.h	/^typedef TVec<TAscFltIntPr> TAscFltIntPrV;$/;"	t
TAscFltPr	glib-core/ds.h	/^typedef TPair<TAscFlt, TAscFlt> TAscFltPr;$/;"	t
TAscFltStrPr	glib-core/ds.h	/^typedef TPair<TAscFlt, TStr> TAscFltStrPr;$/;"	t
TAscFltStrPrV	glib-core/ds.h	/^typedef TVec<TAscFltStrPr> TAscFltStrPrV;$/;"	t
TAscFltV	glib-core/ds.h	/^typedef TVec<TAscFlt> TAscFltV;$/;"	t
TAscFltVP	glib-core/ds.h	/^typedef PVec<TAscFlt> TAscFltVP;$/;"	t
TAscFltVQ	glib-core/ds.h	/^typedef TQQueue<TAscFltV> TAscFltVQ;$/;"	t
TAtomicPredicate	snap-core/table.h	/^    TAtomicPredicate() : Type(atInt), IsConst(true), $/;"	f	class:TAtomicPredicate
TAtomicPredicate	snap-core/table.h	/^    TAtomicPredicate(TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R) :$/;"	f	class:TAtomicPredicate
TAtomicPredicate	snap-core/table.h	/^    TAtomicPredicate(TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R, $/;"	f	class:TAtomicPredicate
TAtomicPredicate	snap-core/table.h	/^class TAtomicPredicate {$/;"	c
TAttr	snap-core/attr.h	/^  TAttr() : AttrNameToId(), AttrIdToName(), IntAttrVals(),$/;"	f	class:TAttr
TAttr	snap-core/attr.h	/^  TAttr(TSIn& SIn) : AttrNameToId(SIn), AttrIdToName(SIn),$/;"	f	class:TAttr
TAttr	snap-core/attr.h	/^  TAttr(const TAttr& Attrs) : AttrNameToId(Attrs.AttrNameToId),$/;"	f	class:TAttr
TAttr	snap-core/attr.h	/^class TAttr {$/;"	c
TAttrAggr	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	t	typeref:enum:__anon84
TAttrPair	snap-core/attr.h	/^  TAttrPair() : AttrNameToId(), AttrIdToName(), IntAttrVals(),$/;"	f	class:TAttrPair
TAttrPair	snap-core/attr.h	/^  TAttrPair(TSIn& SIn) : AttrNameToId(SIn), AttrIdToName(SIn),$/;"	f	class:TAttrPair
TAttrPair	snap-core/attr.h	/^  TAttrPair(const TAttrPair& Attrs) : AttrNameToId(Attrs.AttrNameToId),$/;"	f	class:TAttrPair
TAttrPair	snap-core/attr.h	/^class TAttrPair {$/;"	c
TAttrPr	snap-core/attr.h	/^typedef TPair<TStr, TAttrType> TAttrPr;$/;"	t
TAttrPrV	snap-core/attr.h	/^typedef TVec<TAttrPr> TAttrPrV;$/;"	t
TAttrType	snap-core/gbase.h	/^typedef enum TAttrType_ {atInt, atFlt, atStr} TAttrType;$/;"	t	typeref:enum:TAttrType_
TAttrType_	snap-core/gbase.h	/^typedef enum TAttrType_ {atInt, atFlt, atStr} TAttrType;$/;"	g
TB1	glib-core/bits.h	/^  typedef uchar TB1;$/;"	t	class:TB1Def
TB1Def	glib-core/bits.cpp	/^TB1Def::TB1Def(){$/;"	f	class:TB1Def
TB1Def	glib-core/bits.h	/^class TB1Def{$/;"	c
TB2	glib-core/bits.h	/^  typedef unsigned short int TB2;$/;"	t	class:TB2Def
TB2Def	glib-core/bits.cpp	/^TB2Def::TB2Def(){$/;"	f	class:TB2Def
TB2Def	glib-core/bits.h	/^class TB2Def{$/;"	c
TB32Set	glib-core/bits.h	/^  TB32Set(): B4(0){}$/;"	f	class:TB32Set
TB32Set	glib-core/bits.h	/^  TB32Set(TSIn& SIn){SIn.LoadBf(&B4, sizeof(TB4Def::TB4));}$/;"	f	class:TB32Set
TB32Set	glib-core/bits.h	/^  TB32Set(const TB32Set& B32Set): B4(B32Set.B4){}$/;"	f	class:TB32Set
TB32Set	glib-core/bits.h	/^  TB32Set(const uint& _B4): B4(_B4){}$/;"	f	class:TB32Set
TB32Set	glib-core/bits.h	/^class TB32Set{$/;"	c
TB32SetV	glib-core/bits.h	/^typedef TVec<TB32Set> TB32SetV;$/;"	t
TB4	glib-core/bits.h	/^  typedef uint TB4;$/;"	t	class:TB4Def
TB4Def	glib-core/bits.cpp	/^TB4Def::TB4Def(){$/;"	f	class:TB4Def
TB4Def	glib-core/bits.h	/^class TB4Def{$/;"	c
TB8Set	glib-core/bits.h	/^  TB8Set(): B1(0){}$/;"	f	class:TB8Set
TB8Set	glib-core/bits.h	/^  TB8Set(TSIn& SIn){SIn.LoadBf(&B1, sizeof(TB1Def::TB1));}$/;"	f	class:TB8Set
TB8Set	glib-core/bits.h	/^  TB8Set(const TB8Set& B8Set): B1(B8Set.B1){}$/;"	f	class:TB8Set
TB8Set	glib-core/bits.h	/^  TB8Set(const uchar& _B1): B1(_B1){}$/;"	f	class:TB8Set
TB8Set	glib-core/bits.h	/^class TB8Set{$/;"	c
TB8SetV	glib-core/bits.h	/^typedef TVec<TB8Set> TB8SetV;$/;"	t
TBPGraph	snap-core/graph.h	/^  TBPGraph() : CRef(), MxNId(0), LeftH(), RightH() { }$/;"	f	class:TBPGraph
TBPGraph	snap-core/graph.h	/^  TBPGraph(TSIn& SIn) : MxNId(SIn), LeftH(SIn), RightH(SIn) { }$/;"	f	class:TBPGraph
TBPGraph	snap-core/graph.h	/^  TBPGraph(const TBPGraph& BPGraph) : MxNId(BPGraph.MxNId), LeftH(BPGraph.LeftH), RightH(BPGraph.RightH) { }$/;"	f	class:TBPGraph
TBPGraph	snap-core/graph.h	/^  explicit TBPGraph(const int& Nodes, const int& Edges) : MxNId(0) { } \/\/!!! Reserve(Nodes, Edges); }$/;"	f	class:TBPGraph
TBPGraph	snap-core/graph.h	/^class TBPGraph {$/;"	c
TBSet	glib-core/bits.cpp	/^TBSet::TBSet(const TBSet& BSet):$/;"	f	class:TBSet
TBSet	glib-core/bits.h	/^  TBSet(): B4s(0), Bits(0), LastB4Mask(0), B4T(NULL){}$/;"	f
TBSet	glib-core/bits.h	/^  TBSet(TSIn& SIn){$/;"	f
TBSet	glib-core/bits.h	/^  TBSet(const int& _Bits):$/;"	f
TBarnStars	snap-exp/wikinet.h	/^  TBarnStars() {$/;"	f	class:TBarnStars
TBarnStars	snap-exp/wikinet.h	/^class TBarnStars {$/;"	c
TBiConVisitor	snap-core/cncom.h	/^  TBiConVisitor() { }$/;"	f	class:TBiConVisitor
TBiConVisitor	snap-core/cncom.h	/^  TBiConVisitor(const int& Nodes) : VnLowH(Nodes), ParentH(Nodes), Stack(Nodes) { }$/;"	f	class:TBiConVisitor
TBiConVisitor	snap-core/cncom.h	/^class TBiConVisitor {$/;"	c
TBigNet	snap-core/bignet.h	/^  TBigNet(TSIn& SIn) : MxNId(SIn), Flags(SIn), Pool(SIn), NodeH(SIn) { TBool Dir(SIn); IAssert(Dir()==IsDir); }$/;"	f	class:TBigNet
TBigNet	snap-core/bignet.h	/^TBigNet<TNodeData, IsDir>::TBigNet(const int& Nodes, const TSize& Edges, const bool& Sources) :$/;"	f	class:TBigNet
TBigNet	snap-core/bignet.h	/^class TBigNet {$/;"	c
TBigStrPool	glib-core/hash.cpp	/^TBigStrPool::TBigStrPool(TSIn& SIn, bool LoadCompact) : MxBfL(0), BfL(0), GrowBy(0), Bf(0) {$/;"	f	class:TBigStrPool
TBigStrPool	glib-core/hash.cpp	/^TBigStrPool::TBigStrPool(TSize MxBfLen, uint _GrowBy) : MxBfL(MxBfLen), BfL(0), GrowBy(_GrowBy), Bf(0) {$/;"	f	class:TBigStrPool
TBigStrPool	glib-core/hash.h	/^  TBigStrPool(const TBigStrPool& Pool) : MxBfL(Pool.MxBfL), BfL(Pool.BfL), GrowBy(Pool.GrowBy) {$/;"	f
TBlobPt	glib-core/blobbs.h	/^  TBlobPt():$/;"	f
TBlobPt	glib-core/blobbs.h	/^  TBlobPt(TSIn& SIn){$/;"	f
TBlobPt	glib-core/blobbs.h	/^  TBlobPt(const TBlobPt& Pt):$/;"	f
TBlobPt	glib-core/blobbs.h	/^  TBlobPt(const int& _Addr):$/;"	f
TBlobPt	glib-core/blobbs.h	/^  TBlobPt(const uchar& _Seg, const uint& _Addr):$/;"	f
TBlobPt	glib-core/blobbs.h	/^  TBlobPt(const uchar& _Seg, const uint& _Addr,$/;"	f
TBlobPt	glib-core/blobbs.h	/^  TBlobPt(const uint& _Addr):$/;"	f
TBlogPostNet	snap-exp/memenet.h	/^  TBlogPostNet() { }$/;"	f	class:TBlogPostNet
TBlogPostNet	snap-exp/memenet.h	/^  TBlogPostNet(TSIn& SIn) : UrlH(SIn) { }$/;"	f	class:TBlogPostNet
TBlogPostNet	snap-exp/memenet.h	/^class TBlogPostNet : public TNGraph {$/;"	c
TBoolChPr	glib-core/ds.h	/^typedef TPair<TBool, TCh> TBoolChPr;$/;"	t
TBoolChS	glib-core/ds.h	/^typedef TSStack<TBoolChPr> TBoolChS;$/;"	t
TBoolFltPr	glib-core/ds.h	/^typedef TPair<TBool, TFlt> TBoolFltPr;$/;"	t
TBoolV	glib-core/ds.h	/^typedef TVec<TBool> TBoolV;$/;"	t
TBoolVV	glib-core/ds.h	/^typedef TVVec<TBool> TBoolVV;$/;"	t
TBreathFS	snap-core/bfsdfs.h	/^  TBreathFS(const PGraph& GraphPt, const bool& InitBigQ=true) :$/;"	f	class:TBreathFS
TBreathFS	snap-core/bfsdfs.h	/^class TBreathFS {$/;"	c
TBreathFS_Hybrid	snap-exp/bfs-dev/bfs-hybrid.h	/^  TBreathFS_Hybrid(const PGraph& GraphPt, const bool& InitBigV=true) :$/;"	f	class:TBreathFS_Hybrid
TBreathFS_Hybrid	snap-exp/bfs-dev/bfs-hybrid.h	/^class TBreathFS_Hybrid {$/;"	c
TBreathFS_Hybrid_Test	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  TBreathFS_Hybrid_Test(const PGraph& GraphPt, const bool& InitBigV=true) :$/;"	f	class:TBreathFS_Hybrid_Test
TBreathFS_Hybrid_Test	snap-exp/bfs-dev/bfs-hybrid-test.h	/^class TBreathFS_Hybrid_Test {$/;"	c
TBreathFS_Parallel	snap-exp/bfs-dev/bfs-parallel.h	/^  TBreathFS_Parallel(const PGraph& GraphPt, const bool& InitBigV=true) :$/;"	f	class:TBreathFS_Parallel
TBreathFS_Parallel	snap-exp/bfs-dev/bfs-parallel.h	/^class TBreathFS_Parallel {$/;"	c
TBreathFS_Test	snap-exp/bfs-dev/bfs-dev.h	/^  TBreathFS_Test(const PGraph& GraphPt, const bool& InitBigQ=true) :$/;"	f	class:TBreathFS_Test
TBreathFS_Test	snap-exp/bfs-dev/bfs-dev.h	/^class TBreathFS_Test {$/;"	c
TBreathFS_Test	snap-exp/bfs-dev/bfs-vector.h	/^  TBreathFS_Test(const PGraph& GraphPt, const bool& InitBigQ=true) :$/;"	f	class:TBreathFS_Test
TBreathFS_Test	snap-exp/bfs-dev/bfs-vector.h	/^class TBreathFS_Test {$/;"	c
TCNMQMatrix	snap-core/cmty.cpp	/^  TCNMQMatrix(const PUNGraph& Graph) : CmtyQH(Graph->GetNodes()), $/;"	f	class:TSnap::TSnapDetail::TCNMQMatrix
TCNMQMatrix	snap-core/cmty.cpp	/^class TCNMQMatrix {$/;"	c	namespace:TSnap::TSnapDetail	file:
TCRef	glib-core/bd.h	/^  TCRef(): Refs(0){}$/;"	f	class:TCRef
TCRef	glib-core/bd.h	/^class TCRef{$/;"	c
TCVNet	snap-exp/mmgraph-exp.h	/^typedef TMNet<TCVNode> TCVNet;$/;"	t
TCVNode	snap-exp/mmgraph-exp.h	/^  TCVNode() : TypeId(-1), Id(-1), InEIdV(), OutEIdV(), InDeg(0), OutDeg(0),$/;"	f	class:TCVNode
TCVNode	snap-exp/mmgraph-exp.h	/^  TCVNode(TSIn& SIn) : TypeId(SIn), Id(SIn), InEIdV(SIn), OutEIdV(SIn), InDeg(SIn), OutDeg(SIn),$/;"	f	class:TCVNode
TCVNode	snap-exp/mmgraph-exp.h	/^  TCVNode(const TCVNode& Node) : TypeId(Node.TypeId), Id(Node.Id), InEIdV(Node.InEIdV), OutEIdV(Node.OutEIdV),$/;"	f	class:TCVNode
TCVNode	snap-exp/mmgraph-exp.h	/^  TCVNode(const TCVNode& Node, const TIntV& InETypeIdV, const TIntV& OutETypeIdV) :$/;"	f	class:TCVNode
TCVNode	snap-exp/mmgraph-exp.h	/^  TCVNode(const int& NTypeId, const int& NId) : TypeId(NTypeId), Id(NId), InEIdV(), OutEIdV(), InDeg(0), OutDeg(0),$/;"	f	class:TCVNode
TCVNode	snap-exp/mmgraph-exp.h	/^class TCVNode {$/;"	c
TCandidatesList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TCandidatesList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &NNet, int Size):$/;"	f	class:TCandidatesList
TCandidatesList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TCandidatesList : public TNodeList {$/;"	c
TCascade	snap-adv/cascdynetinf.h	/^  TCascade() : CId(0), NIdHitH(), Model(0) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascdynetinf.h	/^  TCascade(TSIn& SIn) : CId(SIn), NIdHitH(SIn), Model(SIn) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascdynetinf.h	/^  TCascade(const int &cid, const int& model) : NIdHitH() { CId = cid; Model = model; }$/;"	f	class:TCascade
TCascade	snap-adv/cascdynetinf.h	/^  TCascade(const int &model) : NIdHitH() { Model = model; }$/;"	f	class:TCascade
TCascade	snap-adv/cascdynetinf.h	/^class TCascade {$/;"	c
TCascade	snap-adv/cascnetinf.h	/^  TCascade() : NIdHitH(), CurProb(0), Alpha(1.0), Eps(1e-64), Model(0) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascnetinf.h	/^  TCascade(TSIn& SIn) : NIdHitH(SIn), CurProb(SIn), Alpha(SIn) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascnetinf.h	/^  TCascade(const double &alpha) : NIdHitH(), CurProb(0), Alpha(alpha), Eps(1e-64), Model(0) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascnetinf.h	/^  TCascade(const double &alpha, const double &eps) : NIdHitH(), CurProb(0), Alpha(alpha), Eps(eps), Model(0) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascnetinf.h	/^  TCascade(const double &alpha, const int &model) : NIdHitH(), CurProb(0), Alpha(alpha), Eps(1e-64), Model(model) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascnetinf.h	/^  TCascade(const double &alpha, const int &model, const double &eps) : NIdHitH(), CurProb(0), Alpha(alpha), Eps(eps), Model(model) { }$/;"	f	class:TCascade
TCascade	snap-adv/cascnetinf.h	/^class TCascade {$/;"	c
TCascadeStat	examples/cascades/cascades.cpp	/^  TCascadeStat() { }$/;"	f	class:TCascadeStat
TCascadeStat	examples/cascades/cascades.cpp	/^class TCascadeStat {$/;"	c	file:
TCaseConversion	glib-core/unicode.h	/^	typedef TUniChDb::TCaseConversion TCaseConversion;$/;"	t	class:TUnicode
TCaseConversion	glib-core/unicode.h	/^	typedef enum TCaseConversion_ { ccLower = 0, ccUpper = 1, ccTitle = 2, ccMax = 3 } TCaseConversion;$/;"	t	class:TUniChDb	typeref:enum:TUniChDb::TCaseConversion_
TCaseConversion_	glib-core/unicode.h	/^	typedef enum TCaseConversion_ { ccLower = 0, ccUpper = 1, ccTitle = 2, ccMax = 3 } TCaseConversion;$/;"	g	class:TUniChDb
TCesna	snap-adv/agmattr.h	/^  TCesna() { G = TUNGraph::New(10, -1); }$/;"	f	class:TCesna
TCesna	snap-adv/agmattr.h	/^  TCesna(const PUNGraph& GraphPt, const THash<TInt, TIntV>& NIDAttrH, const int& InitComs, const int RndSeed = 0): Rnd(RndSeed), RegCoef(0), $/;"	f	class:TCesna
TCesna	snap-adv/agmattr.h	/^class TCesna { \/\/CESNA: community detection in networks with node attributes$/;"	c
TCesnaUtil	snap-adv/agmattr.h	/^class TCesnaUtil {$/;"	c
TChA	glib-core/dt.cpp	/^TChA::TChA(const TStr& Str){$/;"	f	class:TChA
TChAIn	glib-core/dt.cpp	/^TChAIn::TChAIn(const TChA& ChA, const int& _BfC):$/;"	f	class:TChAIn
TChATr	glib-core/ds.h	/^typedef TTriple<TChA, TChA, TChA> TChATr;$/;"	t
TChAV	glib-core/ds.h	/^typedef TVec<TChA> TChAV;$/;"	t
TChChH	glib-core/hash.h	/^typedef THash<TCh, TCh> TChChH;$/;"	t
TChIntIntTr	glib-core/ds.h	/^typedef TTriple<TCh, TInt, TInt> TChIntIntTr;$/;"	t
TChRet	glib-core/fl.h	/^  TChRet(const PSIn& _SIn, const char& _EofCh=0):$/;"	f	class:TChRet
TChRet	glib-core/fl.h	/^class TChRet{$/;"	c
TChTr	glib-core/ds.h	/^typedef TTriple<TCh, TCh, TCh> TChTr;$/;"	t
TChTrIntH	glib-core/hash.h	/^typedef THash<TChTr, TInt> TChTrIntH;$/;"	t
TChV	glib-core/ds.h	/^typedef TVec<TCh> TChV;$/;"	t
TChVV	glib-core/ds.h	/^typedef TVVec<TCh> TChVV;$/;"	t
TCliqueOverlap	snap-adv/cliques.h	/^  TCliqueOverlap() : m_G(), m_Q(), m_maxCliques(NULL), m_minMaxCliqueSize(3) { }$/;"	f	class:TCliqueOverlap
TCliqueOverlap	snap-adv/cliques.h	/^class TCliqueOverlap {$/;"	c
TCloseStat	snap-exp/signnet.h	/^    TCloseStat() { }$/;"	f	struct:TSignMicroEvol::TCloseStat
TCloseStat	snap-exp/signnet.h	/^    TCloseStat(TSIn& SIn) : PlsCnt(SIn), MnsCnt(SIn), OutSumWgt(SIn), OutVarSq(SIn), InSumWgt(SIn), InVarSq(SIn), OutPlusPH(SIn), InPlusPH(SIn) { }$/;"	f	struct:TSignMicroEvol::TCloseStat
TCloseStat	snap-exp/signnet.h	/^  struct TCloseStat {$/;"	s	class:TSignMicroEvol
TClustNet	snap-exp/memes.h	/^  TClustNet() { }$/;"	f	class:TClustNet
TClustNet	snap-exp/memes.h	/^  TClustNet(TSIn& SIn) : TNet(SIn) { }$/;"	f	class:TClustNet
TClustNet	snap-exp/memes.h	/^class TClustNet : public TNodeNet<TQuote> {$/;"	c
TCluster	snap-adv/circles.h	/^  TCluster(PGraphAttributes GraphAttributes, TInt K, TFlt Lambda) :$/;"	f	class:TCluster
TCluster	snap-adv/circles.h	/^class TCluster {$/;"	c
TCluster	snap-exp/circles/circles.h	/^  TCluster(PGraphAttributes gd, TInt K, TFlt lambda) :$/;"	f	class:TCluster
TCluster	snap-exp/circles/circles.h	/^class TCluster {$/;"	c
TCmp	glib-core/bd.h	/^class TCmp{$/;"	c
TCmpByVal	snap-core/gstat.h	/^    TCmpByVal(TGStatVal SortBy, bool Asc) : ValCmp(SortBy), SortAsc(Asc) { }$/;"	f	class:TGStat::TCmpByVal
TCmpByVal	snap-core/gstat.h	/^  class TCmpByVal {$/;"	c	class:TGStat
TCmpKeyDatByDat	glib-core/ds.h	/^  TCmpKeyDatByDat(const bool& AscSort=true) : IsAsc(AscSort) { }$/;"	f	class:TCmpKeyDatByDat
TCmpKeyDatByDat	glib-core/ds.h	/^class TCmpKeyDatByDat {$/;"	c
TCmpPairByVal2	glib-core/ds.h	/^  TCmpPairByVal2(const bool& AscSort=true) : IsAsc(AscSort) { }$/;"	f	class:TCmpPairByVal2
TCmpPairByVal2	glib-core/ds.h	/^class TCmpPairByVal2 {$/;"	c
TCmpTripleByVal2	glib-core/ds.h	/^  TCmpTripleByVal2(const bool& AscSort=true) : IsAsc(AscSort) { }$/;"	f	class:TCmpTripleByVal2
TCmpTripleByVal2	glib-core/ds.h	/^class TCmpTripleByVal2 {$/;"	c
TCmpTripleByVal3	glib-core/ds.h	/^  TCmpTripleByVal3(const bool& AscSort=true) : IsAsc(AscSort) { }$/;"	f	class:TCmpTripleByVal3
TCmpTripleByVal3	glib-core/ds.h	/^class TCmpTripleByVal3 {$/;"	c
TCmtyDat	snap-core/cmty.cpp	/^    TCmtyDat() : MxQId(-1) { }$/;"	f	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat
TCmtyDat	snap-core/cmty.cpp	/^    TCmtyDat(const double& NodeDegFrac, const int& OutDeg) : $/;"	f	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat
TCmtyDat	snap-core/cmty.cpp	/^  struct TCmtyDat {$/;"	s	class:TSnap::TSnapDetail::TCNMQMatrix	file:
TCnCom	snap-core/cncom.h	/^  TCnCom() : NIdV() { }$/;"	f	class:TCnCom
TCnCom	snap-core/cncom.h	/^  TCnCom(TSIn& SIn) : NIdV(SIn) { }$/;"	f	class:TCnCom
TCnCom	snap-core/cncom.h	/^  TCnCom(const TCnCom& CC) : NIdV(CC.NIdV) { }$/;"	f	class:TCnCom
TCnCom	snap-core/cncom.h	/^  TCnCom(const TIntV& NodeIdV) : NIdV(NodeIdV) { }$/;"	f	class:TCnCom
TCnCom	snap-core/cncom.h	/^class TCnCom {$/;"	c
TCnComV	snap-core/cncom.h	/^typedef TVec<TCnCom> TCnComV;$/;"	t
TCoda	snap-adv/agmdirected.h	/^  TCoda() { G = TNGraph::New(); }$/;"	f	class:TCoda
TCoda	snap-adv/agmdirected.h	/^  TCoda(const PNGraph& GraphPt, const int& InitComs, const int RndSeed = 0): Rnd(RndSeed), RegCoef(0), $/;"	f	class:TCoda
TCoda	snap-adv/agmdirected.h	/^class TCoda { \/\/sparse AGM-fast with coordinate ascent for directed affiliation$/;"	c
TCodaAnalyzer	snap-adv/agmdirected.h	/^  TCodaAnalyzer() { G = TNGraph::New(); }$/;"	f	class:TCodaAnalyzer
TCodaAnalyzer	snap-adv/agmdirected.h	/^  TCodaAnalyzer(TCoda& Coda, const double MemThres = -1.0) {$/;"	f	class:TCodaAnalyzer
TCodaAnalyzer	snap-adv/agmdirected.h	/^class TCodaAnalyzer {$/;"	c
TCodecBase	glib-core/unicode.h	/^class TCodecBase$/;"	c
TCodecBaseV	glib-core/unicode.h	/^typedef TVec<PCodecBase> TCodecBaseV;$/;"	t
TCodecImpl	glib-core/unicode.h	/^	typedef TCodecImpl_ TCodecImpl;$/;"	t	class:TCodecWrapper
TCodecWrapper	glib-core/unicode.h	/^class TCodecWrapper : public TCodecBase$/;"	c
TCodec_CP1250	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_CP1250> TCodec_CP1250;$/;"	t
TCodec_CP437	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_CP437> TCodec_CP437;$/;"	t
TCodec_CP852	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_CP852> TCodec_CP852;$/;"	t
TCodec_ISO8859_1	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_ISO8859_1> TCodec_ISO8859_1;$/;"	t
TCodec_ISO8859_2	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_ISO8859_2> TCodec_ISO8859_2;$/;"	t
TCodec_ISO8859_3	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_ISO8859_3> TCodec_ISO8859_3;$/;"	t
TCodec_ISO8859_4	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_ISO8859_4> TCodec_ISO8859_4;$/;"	t
TCodec_YuAscii	glib-core/unicode.h	/^typedef T8BitCodec<TEncoding_YuAscii> TCodec_YuAscii;$/;"	t
TCom	glib-core/os.h	/^  TCom(){$/;"	f	class:TCom
TCom	glib-core/os.h	/^class TCom{$/;"	c
TConsoleMatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TConsoleMatchListener() : TMatchListener() { }$/;"	f	class:TConsoleMatchListener
TConsoleMatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TConsoleMatchListener : public TMatchListener {$/;"	c
TConsoleMatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TConsoleMatchListener() : TMatchListener() {}$/;"	f	class:TConsoleMatchListener
TConsoleMatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TConsoleMatchListener : public TMatchListener {$/;"	c
TConv_Pt64Ints32	glib-core/bd.h	/^  TConv_Pt64Ints32(){$/;"	f	class:TConv_Pt64Ints32
TConv_Pt64Ints32	glib-core/bd.h	/^  TConv_Pt64Ints32(const uint& Ms, const uint& Ls){$/;"	f	class:TConv_Pt64Ints32
TConv_Pt64Ints32	glib-core/bd.h	/^  TConv_Pt64Ints32(void* Pt){$/;"	f	class:TConv_Pt64Ints32
TConv_Pt64Ints32	glib-core/bd.h	/^class TConv_Pt64Ints32{$/;"	c
TConvertSubGraph	snap-core/subgraph.h	/^struct TConvertSubGraph {$/;"	s	namespace:TSnap::TSnapDetail
TConvertSubGraph	snap-core/subgraph.h	/^struct TConvertSubGraph<POutGraph, PInGraph, false> { \/\/ InGraph is not multigraph$/;"	s	namespace:TSnap::TSnapDetail
TCorr	glib-core/xmath.cpp	/^TCorr::TCorr(const TFltV& ValV1, const TFltV& ValV2):$/;"	f	class:TCorr
TCrossEdge	snap-core/mmnet.h	/^    TCrossEdge() : EId(-1), SrcNId(-1), DstNId(-1) { }$/;"	f	class:TCrossNet::TCrossEdge
TCrossEdge	snap-core/mmnet.h	/^    TCrossEdge(TSIn& SIn) : EId(SIn), SrcNId(SIn), DstNId(SIn) { }$/;"	f	class:TCrossNet::TCrossEdge
TCrossEdge	snap-core/mmnet.h	/^    TCrossEdge(const TCrossEdge& MultiEdge) : EId(MultiEdge.EId), SrcNId(MultiEdge.SrcNId),$/;"	f	class:TCrossNet::TCrossEdge
TCrossEdge	snap-core/mmnet.h	/^    TCrossEdge(const int& Id, const int& SourceNId, const int& DestNId) :$/;"	f	class:TCrossNet::TCrossEdge
TCrossEdge	snap-core/mmnet.h	/^  class TCrossEdge {$/;"	c	class:TCrossNet
TCrossEdgeI	snap-core/mmnet.h	/^    TCrossEdgeI() : CrossHI(), Graph(NULL) { }$/;"	f	class:TCrossNet::TCrossEdgeI
TCrossEdgeI	snap-core/mmnet.h	/^    TCrossEdgeI(const TCrossEdgeI& EdgeI) : CrossHI(EdgeI.CrossHI), Graph(EdgeI.Graph) { }$/;"	f	class:TCrossNet::TCrossEdgeI
TCrossEdgeI	snap-core/mmnet.h	/^    TCrossEdgeI(const THashIter& CrossHIter, const TCrossNet *GraphPt) : CrossHI(CrossHIter), Graph(GraphPt) { }$/;"	f	class:TCrossNet::TCrossEdgeI
TCrossEdgeI	snap-core/mmnet.h	/^  class TCrossEdgeI {$/;"	c	class:TCrossNet
TCrossNet	snap-core/mmnet.h	/^  TCrossNet() : CrossH(), MxEId(0), Mode1(-1), Mode2(-1), IsDirect(), CrossNetId(), Net(), KeyToIndexTypeE(), IntDefaultsE(), StrDefaultsE(),$/;"	f	class:TCrossNet
TCrossNet	snap-core/mmnet.h	/^  TCrossNet(TInt MId1, TInt MId2, TBool IsDir, TInt LId) : CrossH(), MxEId(0), Mode1(MId1), Mode2(MId2), IsDirect(IsDir),CrossNetId(LId), Net(),$/;"	f	class:TCrossNet
TCrossNet	snap-core/mmnet.h	/^  TCrossNet(TInt MId1, TInt MId2, TInt LId) : CrossH(), MxEId(0), Mode1(MId1), Mode2(MId2), IsDirect(true),CrossNetId(LId), Net(),$/;"	f	class:TCrossNet
TCrossNet	snap-core/mmnet.h	/^  TCrossNet(TSIn& SIn) : CrossH(SIn), MxEId(SIn), Mode1(SIn), Mode2(SIn), IsDirect(SIn), CrossNetId(SIn), Net(),$/;"	f	class:TCrossNet
TCrossNet	snap-core/mmnet.h	/^  TCrossNet(const TCrossNet& OtherTCrossNet) : CrossH(OtherTCrossNet.CrossH), MxEId(OtherTCrossNet.MxEId), Mode1(OtherTCrossNet.Mode1),$/;"	f	class:TCrossNet
TCrossNet	snap-core/mmnet.h	/^class TCrossNet {$/;"	c
TCrossNetH	snap-core/mmnet.h	/^  THash<TInt, TCrossNet> TCrossNetH;$/;"	m	class:TMMNet
TCrossNetI	snap-core/mmnet.h	/^    TCrossNetI() : CrossNetHI(), Graph(NULL) { }$/;"	f	class:TMMNet::TCrossNetI
TCrossNetI	snap-core/mmnet.h	/^    TCrossNetI(const TCrossNetI& CrossNetI) : CrossNetHI(CrossNetI.CrossNetHI), Graph(CrossNetI.Graph) { }$/;"	f	class:TMMNet::TCrossNetI
TCrossNetI	snap-core/mmnet.h	/^    TCrossNetI(const THashIter& CrossNetHIter, const TMMNet* GraphPt) : CrossNetHI(CrossNetHIter), Graph(GraphPt) { }$/;"	f	class:TMMNet::TCrossNetI
TCrossNetI	snap-core/mmnet.h	/^  class TCrossNetI {$/;"	c	class:TMMNet
TCs	glib-core/fl.h	/^  TCs(): Val(0){}$/;"	f	class:TCs
TCs	glib-core/fl.h	/^  TCs(const TCs& Cs): Val(Cs.Val&MxMask){}$/;"	f	class:TCs
TCs	glib-core/fl.h	/^  TCs(const int& Int): Val(Int&MxMask){}$/;"	f	class:TCs
TCs	glib-core/fl.h	/^class TCs{$/;"	c
TCutInfo	snap-adv/ncp.h	/^    TCutInfo() : Nodes(0), Edges(0), CutSz(0), CutNIdV() { }$/;"	f	class:TLocClustStat::TCutInfo
TCutInfo	snap-adv/ncp.h	/^    TCutInfo(const PUNGraph& G, const TIntV& ClustNIdV, bool TakeNIdV=false) : Nodes(ClustNIdV.Len()) {$/;"	f	class:TLocClustStat::TCutInfo
TCutInfo	snap-adv/ncp.h	/^    TCutInfo(const TCutInfo& CS) : Nodes(CS.Nodes), Edges(CS.Edges), CutSz(CS.CutSz), CutNIdV(CS.CutNIdV) { }$/;"	f	class:TLocClustStat::TCutInfo
TCutInfo	snap-adv/ncp.h	/^    TCutInfo(const int& ClustNodes, const int& EdgesInside, const int& CutSize) : Nodes(ClustNodes), Edges(EdgesInside), CutSz(CutSize) { }$/;"	f	class:TLocClustStat::TCutInfo
TCutInfo	snap-adv/ncp.h	/^    TCutInfo(const int& ClustNodes, const int& EdgesInside, const int& CutSize, const TIntV& NIdV) :$/;"	f	class:TLocClustStat::TCutInfo
TCutInfo	snap-adv/ncp.h	/^  class TCutInfo {$/;"	c	class:TLocClustStat
TD34GraphCounter	snap-adv/graphcounter.cpp	/^TD34GraphCounter::TD34GraphCounter(int GraphSz) {$/;"	f	class:TD34GraphCounter
TD34GraphCounter	snap-adv/graphcounter.h	/^class TD34GraphCounter {$/;"	c
TD3Graph	snap-adv/graphcounter.h	/^class TD3Graph {$/;"	c
TD4Graph	snap-adv/graphcounter.h	/^class TD4Graph {$/;"	c
TDGHashGraphCounter	snap-adv/graphcounter.h	/^  TDGHashGraphCounter() : m_graphs(false) {}$/;"	f	class:TDGHashGraphCounter
TDGHashGraphCounter	snap-adv/graphcounter.h	/^class TDGHashGraphCounter{$/;"	c
TDGraphCounter	snap-adv/graphcounter.h	/^class TDGraphCounter{$/;"	c
TDbStrIntH	glib-core/hash.h	/^typedef THash<TDbStr, TInt> TDbStrIntH;$/;"	t
TDbStrStrH	glib-core/hash.h	/^typedef THash<TDbStr, TStr> TDbStrStrH;$/;"	t
TDblpLoader	snap-exp/dblp.cpp	/^TDblpLoader::TDblpLoader(const TStr& FNm) : SIn(TZipIn::IsZipFNm(FNm)?TZipIn::New(FNm):TFIn::New(FNm)), XmlLx(SIn,xspTruncate) {$/;"	f	class:TDblpLoader
TDblpLoader	snap-exp/dblp.h	/^class TDblpLoader {$/;"	c
TDefaultHashFunc	glib-core/hash.h	/^class TDefaultHashFunc {$/;"	c
TDelSelfEdges	snap-core/alg.h	/^struct TDelSelfEdges { \/\/ not a multigraph graph$/;"	s	namespace:TSnap::TSnapDetail
TDelSelfEdges	snap-core/alg.h	/^struct TDelSelfEdges<PGraph, true> { \/\/ mutligraph specialization$/;"	s	namespace:TSnap::TSnapDetail
TDirNet	snap-core/network.h	/^  TDirNet() : CRef(), MxNId(0), NodeH(), SAttrN(), SAttrE() { }$/;"	f	class:TDirNet
TDirNet	snap-core/network.h	/^  TDirNet(TSIn& SIn) : MxNId(SIn), NodeH(SIn), SAttrN(SIn), SAttrE(SIn) { }$/;"	f	class:TDirNet
TDirNet	snap-core/network.h	/^  TDirNet(const TDirNet& Graph) : MxNId(Graph.MxNId), NodeH(Graph.NodeH), SAttrN(), SAttrE() { }$/;"	f	class:TDirNet
TDirNet	snap-core/network.h	/^  explicit TDirNet(const int& Nodes, const int& Edges) : MxNId(0), SAttrN(), SAttrE() { Reserve(Nodes, Edges); }$/;"	f	class:TDirNet
TDirNet	snap-core/network.h	/^class TDirNet {$/;"	c
TEST	snap-exp/test-dev/Makefile	/^TEST = \\$/;"	m
TEST	test/test-TAttr.cpp	/^TEST(TAttr, AddSAttr) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, AddSAttrDat_flt) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, AddSAttrDat_int) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, AddSAttrDat_str) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, DelSAttrDat) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, DelSAttrId) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, GetIdVSAttr) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, GetSAttrDat_flt) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, GetSAttrDat_int) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, GetSAttrDat_str) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, GetSAttrId) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, GetSAttrName) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttr, GetSAttrV) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, AddSAttr) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, AddSAttrDat_flt) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, AddSAttrDat_int) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, AddSAttrDat_str) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, DelSAttrDat) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, DelSAttrId) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, GetIdVSAttr) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, GetSAttrDat_flt) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, GetSAttrDat_int) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, GetSAttrDat_str) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, GetSAttrId) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, GetSAttrName) {$/;"	f
TEST	test/test-TAttr.cpp	/^TEST(TAttrPair, GetSAttrV) {$/;"	f
TEST	test/test-TCrossNet.cpp	/^TEST(TCrossNet, AddEdgeAfterAttrAdded) {$/;"	f
TEST	test/test-TCrossNet.cpp	/^TEST(TCrossNet, DefaultConstructor) {$/;"	f
TEST	test/test-TCrossNet.cpp	/^TEST(TCrossNet, DefaultDirectednessConstructors) {$/;"	f
TEST	test/test-TCrossNet.cpp	/^TEST(TCrossNet, ManipulateNodesEdgeAttributes) {$/;"	f
TEST	test/test-TCrossNet.cpp	/^TEST(TCrossNet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrDatE_flt) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrDatE_int) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrDatE_str) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrDatN_flt) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrDatN_int) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrDatN_str) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrE) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, AddSAttrN) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, DefaultConstructor) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, DelSAttrDatE) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, DelSAttrDatN) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetIdVSAttrE) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetIdVSAttrN) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrDatE_flt) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrDatE_int) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrDatE_str) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrDatN_flt) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrDatN_int) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrDatN_str) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrIdE) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrIdN) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrNameE) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrNameN) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrVE) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSAttrVN) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, GetSmallGraph) {$/;"	f
TEST	test/test-TDirNet.cpp	/^TEST(TDirNet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-THash.cpp	/^TEST(TIntIntH, DefaultConstructor) {$/;"	f
TEST	test/test-THash.cpp	/^TEST(TIntIntH, ManipulateTable) {$/;"	f
TEST	test/test-THash.cpp	/^TEST(TStrIntH, DefaultConstructor) {$/;"	f
TEST	test/test-THash.cpp	/^TEST(TStrIntH, ManipulateTable) {$/;"	f
TEST	test/test-THashSet.cpp	/^TEST(THashSet, Defrag) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, AddCrossNet) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, AddModeNet) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, BegCrossNetI) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, BegModeNetI) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, CrossNetI) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, DefaultConstructor) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, EndCrossNetI) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, EndModeNetI) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetCrossId) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetCrossName) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetCrossNet) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetCrossNetI) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetModeId) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetModeName) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetModeNet) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, GetModeNetI) {$/;"	f
TEST	test/test-TMMNet.cpp	/^TEST(TMMNet, ModeNetI) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddEdgeAttributeError) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddEdgeNodeAfterAttrAdded) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddNodeAttributeError) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrDatE_flt) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrDatE_int) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrDatE_str) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrDatN_flt) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrDatN_int) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrDatN_str) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrE) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, AddSAttrN) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, DefaultConstructor) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, DelSAttrDatE) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, DelSAttrDatN) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetIdVSAttrE) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetIdVSAttrN) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrDatE_flt) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrDatE_int) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrDatE_str) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrDatN_flt) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrDatN_int) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrDatN_str) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrIdE) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrIdN) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrNameE) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrNameN) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrVE) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, GetSAttrVN) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, IntVAttr) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, ManipulateNodesEdgeAttributes) {$/;"	f
TEST	test/test-TModeNet.cpp	/^TEST(TModeNet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddEdgeAttributeError) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddEdgeNodeAfterAttrAdded) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddNodeAttributeError) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrDatE_flt) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrDatE_int) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrDatE_str) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrDatN_flt) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrDatN_int) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrDatN_str) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrE) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, AddSAttrN) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, DefaultConstructor) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, DelSAttrDatE) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, DelSAttrDatN) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetIdVSAttrE) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetIdVSAttrN) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrDatE_flt) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrDatE_int) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrDatE_str) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrDatN_flt) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrDatN_int) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrDatN_str) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrIdE) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrIdN) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrNameE) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrNameN) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrVE) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSAttrVN) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, GetSmallGraph) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, IntVAttr) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, ManipulateNodesEdgeAttributes) {$/;"	f
TEST	test/test-TNEANet.cpp	/^TEST(TNEANet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TNEGraph.cpp	/^TEST(TNEGraph, DefaultConstructor) {$/;"	f
TEST	test/test-TNEGraph.cpp	/^TEST(TNEGraph, GetSmallGraph) {$/;"	f
TEST	test/test-TNEGraph.cpp	/^TEST(TNEGraph, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TNGraph.cpp	/^TEST(TNGraph, DefaultConstructor) {$/;"	f
TEST	test/test-TNGraph.cpp	/^TEST(TNGraph, GetSmallGraph) {$/;"	f
TEST	test/test-TNGraph.cpp	/^TEST(TNGraph, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, DefaultConstructor) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, GetSmallGraph) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, SetEdgeData) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, SetNodeData) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, SortNodeData) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, UpdateEdgeData) {$/;"	f
TEST	test/test-TNodeEDatNet.cpp	/^TEST(TNodeEDatNet, UpdateNodeData) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, DefaultConstructor) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, GetSmallGraph) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, SetEdgeData) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, SetNodeData) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, SortEdgeData) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, SortNodeData) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, UpdateEdgeData) {$/;"	f
TEST	test/test-TNodeEdgeNet.cpp	/^TEST(TNodeEdgeNet, UpdateNodeData) {$/;"	f
TEST	test/test-TNodeNet.cpp	/^TEST(TNodeNet, DefaultConstructor) {$/;"	f
TEST	test/test-TNodeNet.cpp	/^TEST(TNodeNet, GetSmallGraph) {$/;"	f
TEST	test/test-TNodeNet.cpp	/^TEST(TNodeNet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TNodeNet.cpp	/^TEST(TNodeNet, SetNodeData) {$/;"	f
TEST	test/test-TNodeNet.cpp	/^TEST(TNodeNet, SortNodeData) {$/;"	f
TEST	test/test-TNodeNet.cpp	/^TEST(TNodeNet, UpdateNodeData) {$/;"	f
TEST	test/test-TStrPool.cpp	/^TEST(TStrPool, DefaultConstructor) {$/;"	f
TEST	test/test-TStrPool.cpp	/^TEST(TStrPool, PoolOps) {$/;"	f
TEST	test/test-TSysTm.cpp	/^TEST(TSysTm, DISABLED_Conversion) {$/;"	f
TEST	test/test-TSysTm.cpp	/^TEST(TSysTm, Sleep) {$/;"	f
TEST	test/test-TTable.cpp	/^TEST(TTable, DefaultConstructor) {$/;"	f
TEST	test/test-TTable.cpp	/^TEST(TTable, LoadSave) {$/;"	f
TEST	test/test-TTable.cpp	/^TEST(TTable, ParallelJoin) {$/;"	f
TEST	test/test-TTable.cpp	/^TEST(TTable, ParallelSelect) {$/;"	f
TEST	test/test-TTable.cpp	/^TEST(TTable, ParallelSelectInPlace) {$/;"	f
TEST	test/test-TTable.cpp	/^TEST(TTable, ToGraph) {$/;"	f
TEST	test/test-TTable.cpp	/^TEST(TTable, ToGraphMP) {$/;"	f
TEST	test/test-TUNGraph.cpp	/^TEST(TUNGraph, DefaultConstructor) {$/;"	f
TEST	test/test-TUNGraph.cpp	/^TEST(TUNGraph, GetSmallGraph) {$/;"	f
TEST	test/test-TUNGraph.cpp	/^TEST(TUNGraph, ManipulateEdges) {$/;"	f
TEST	test/test-TUNGraph.cpp	/^TEST(TUNGraph, ManipulateNodesEdges) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrDatE_flt) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrDatE_int) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrDatE_str) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrDatN_flt) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrDatN_int) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrDatN_str) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrE) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, AddSAttrN) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, DefaultConstructor) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, DelSAttrDatE) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, DelSAttrDatN) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetIdVSAttrE) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetIdVSAttrN) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrDatE_flt) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrDatE_int) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrDatE_str) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrDatN_flt) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrDatN_int) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrDatN_str) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrIdE) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrIdN) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrNameE) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrNameN) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrVE) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSAttrVN) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, GetSmallGraph) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, ManipulateEdges) {$/;"	f
TEST	test/test-TUndirNet.cpp	/^TEST(TUndirNet, ManipulateNodesEdges) {$/;"	f
TEST	test/test-bfsdfs.cpp	/^TEST(BfsDfsTest, CompleteGraph) {$/;"	f
TEST	test/test-bfsdfs.cpp	/^TEST(BfsDfsTest, DirectedRandom) {$/;"	f
TEST	test/test-bfsdfs.cpp	/^TEST(BfsDfsTest, UndirectedRandom) {$/;"	f
TEST	test/test-cncom.cpp	/^TEST(CnComTest, CompleteGraph) {$/;"	f
TEST	test/test-cncom.cpp	/^TEST(CnComTest, DirectedDisconnected) {$/;"	f
TEST	test/test-cncom.cpp	/^TEST(CnComTest, UndirectedDisconnected) {$/;"	f
TEST	test/test-flow.cpp	/^TEST(FlowTest, BasicTest) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, DISABLED_GenDegSeq) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenBaraHierar) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenCircle) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenCopyModel) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenForestFire) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenFull) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenGeoPrefAttach) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenGrid) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenPrefAttach) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenRMat) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenRndBipart) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenRndGnm) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenRndPowerLaw) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenSmallWorld) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenStar) {$/;"	f
TEST	test/test-ggen.cpp	/^TEST(GGenTest, GenTree) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, LoadConnList) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, LoadConnListStr) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, LoadDyNet) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, SaveGViz) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, SaveLoadEdgeList) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, SaveLoadEdgeListStr) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, SaveLoadPajek) {$/;"	f
TEST	test/test-gio.cpp	/^TEST(GIOTest, SaveMatlabSparseMtx) {$/;"	f
TEST	test/test-gviz.cpp	/^TEST(GVizTest, DrawGViz) {$/;"	f
TEST	test/test-gviz.cpp	/^TEST(GVizTest, DrawGVizColor) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, AddNbrType) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, CheckNeighborsDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, CheckNeighborsSameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, CheckNeighborsSameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrCrossDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrCrossSameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrCrossSameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrMode1Directed) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrMode1SameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrMode1SameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrMode2Directed) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrMode2SameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ClrMode2SameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelCrossNetDifModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelCrossNetDifModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelCrossNetSameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelCrossNetSameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelEdgeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelEdgeSameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelEdgeSameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelModeNet) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelModeNetWithCrossNet) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelModeNetWithSameModeCrossNet) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelNode1Directed) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelNode1SameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelNode1SameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelNode2Directed) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelNode2SameModeDirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, DelNode2SameModeUndirected) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, GetSubgraph) {$/;"	f
TEST	test/test-multimodal.cpp	/^TEST(multimodal, ToNetwork) {$/;"	f
TEST	test/test-priority-queue.cpp	/^TEST(PriorityQueueTest, IsCorrect) {$/;"	f
TEST	test/test-randwalk.cpp	/^TEST(RandWalkTest, CorrectOnLineGraph) {$/;"	f
TEST	test/test-randwalk.cpp	/^TEST(RandWalkTest, CorrectOnSmallGraph) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestConvertESubGraphs) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestConvertGraphs) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestConvertSubGraphs) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestEDatSubNets) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestEdgeSubNets) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestGetRndGraphs) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestSubTNEGraphs) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestSubTNGraphs) {$/;"	f
TEST	test/test-subgraph.cpp	/^TEST(subgraph, TestSubTUNGraphs) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetClustCf) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetClustCfDist) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetClustCfDistCO) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetCmnNbrs) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetLen2Paths) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetNodeCOTriads) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetNodeClustCfSpecific) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetNodeClustCfVector) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetNodeTriads) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetNodeTriadsGroupSetAndOut) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetTriadEdges) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetTriadParticip) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetTriadsClosed) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetTriadsOpenClosed) {$/;"	f
TEST	test/test-triad.cpp	/^TEST(triad, TestGetTriadsVector) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, AddSelfEdgesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntDegNodesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntEdgesToSetTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntInDegNodesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntNonZNodesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntOutDegNodesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntSelfEdgesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntUniqBiDirEdgesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntUniqDirEdgesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, CntUniqUndirEdgesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, DelDegKNodesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, DelNodesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, DelSelfEdgesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, DelZeroDegNodesTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetDegCntFltTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetDegCntIntTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetDegSeqVInOutDegVTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetDegSeqVTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetInDegCntFltTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetInDegCntIntTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetMxDegNIdTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetMxInDegNIdTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetMxOutDegNIdTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetNodeInDegVTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetNodeOutDegVTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetOutDegCntFltTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetOutDegCntIntTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, GetUnDirTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(GraphTest, MakeUnDirTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(TreeTest, GetTreeRootNIdTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(TreeTest, GetTreeSigTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(TreeTest, GetTreeSigWithNodeMapTest) {$/;"	f
TEST_F	test/test-alg.cpp	/^TEST_F(TreeTest, IsTreeTest) {$/;"	f
TEST_OBJS	test/Makefile	/^TEST_OBJS = $(TEST_SRCS:.cpp=.o)$/;"	m
TEST_SRCS	test/Makefile	/^TEST_SRCS = \\$/;"	m
TEdge	snap-core/graph.h	/^    TEdge() : Id(-1), SrcNId(-1), DstNId(-1) { }$/;"	f	class:TNEGraph::TEdge
TEdge	snap-core/graph.h	/^    TEdge(TSIn& SIn) : Id(SIn), SrcNId(SIn), DstNId(SIn) { }$/;"	f	class:TNEGraph::TEdge
TEdge	snap-core/graph.h	/^    TEdge(const TEdge& Edge) : Id(Edge.Id), SrcNId(Edge.SrcNId), DstNId(Edge.DstNId) { }$/;"	f	class:TNEGraph::TEdge
TEdge	snap-core/graph.h	/^    TEdge(const int& EId, const int& SourceNId, const int& DestNId) : Id(EId), SrcNId(SourceNId), DstNId(DestNId) { }$/;"	f	class:TNEGraph::TEdge
TEdge	snap-core/graph.h	/^  class TEdge {$/;"	c	class:TNEGraph
TEdge	snap-core/network.h	/^    TEdge() : Id(-1), SrcNId(-1), DstNId(-1) { }$/;"	f	class:TNEANet::TEdge
TEdge	snap-core/network.h	/^    TEdge() : Id(-1), SrcNId(-1), DstNId(-1), EdgeDat() { }$/;"	f	class:TNodeEdgeNet::TEdge
TEdge	snap-core/network.h	/^    TEdge(TSIn& SIn) : Id(SIn), SrcNId(SIn), DstNId(SIn) { }$/;"	f	class:TNEANet::TEdge
TEdge	snap-core/network.h	/^    TEdge(TSIn& SIn) : Id(SIn), SrcNId(SIn), DstNId(SIn), EdgeDat(SIn) { }$/;"	f	class:TNodeEdgeNet::TEdge
TEdge	snap-core/network.h	/^    TEdge(const TEdge& Edge) : Id(Edge.Id), SrcNId(Edge.SrcNId), DstNId(Edge.DstNId) { }$/;"	f	class:TNEANet::TEdge
TEdge	snap-core/network.h	/^    TEdge(const TEdge& Edge) : Id(Edge.Id), SrcNId(Edge.SrcNId), DstNId(Edge.DstNId), EdgeDat(Edge.EdgeDat) { }$/;"	f	class:TNodeEdgeNet::TEdge
TEdge	snap-core/network.h	/^    TEdge(const int& EId, const int& SourceNId, const int& DestNId) : Id(EId), SrcNId(SourceNId), DstNId(DestNId) { }$/;"	f	class:TNEANet::TEdge
TEdge	snap-core/network.h	/^    TEdge(const int& EId, const int& SourceNId, const int& DestNId) : Id(EId), SrcNId(SourceNId), DstNId(DestNId), EdgeDat() { }$/;"	f	class:TNodeEdgeNet::TEdge
TEdge	snap-core/network.h	/^    TEdge(const int& EId, const int& SourceNId, const int& DestNId, const TEdgeData& EdgeData) : Id(EId), SrcNId(SourceNId), DstNId(DestNId), EdgeDat(EdgeData) { }$/;"	f	class:TNodeEdgeNet::TEdge
TEdge	snap-core/network.h	/^  class TEdge {$/;"	c	class:TNEANet
TEdge	snap-core/network.h	/^  class TEdge {$/;"	c	class:TNodeEdgeNet
TEdge	snap-core/networkmp.h	/^    TEdge() : Id(-1), SrcNId(-1), DstNId(-1) { }$/;"	f	class:TNEANetMP::TEdge
TEdge	snap-core/networkmp.h	/^    TEdge(TSIn& SIn) : Id(SIn), SrcNId(SIn), DstNId(SIn) { }$/;"	f	class:TNEANetMP::TEdge
TEdge	snap-core/networkmp.h	/^    TEdge(const TEdge& Edge) : Id(Edge.Id), SrcNId(Edge.SrcNId), DstNId(Edge.DstNId) { }$/;"	f	class:TNEANetMP::TEdge
TEdge	snap-core/networkmp.h	/^    TEdge(const int& EId, const int& SourceNId, const int& DestNId) : Id(EId), SrcNId(SourceNId), DstNId(DestNId) { }$/;"	f	class:TNEANetMP::TEdge
TEdge	snap-core/networkmp.h	/^  class TEdge {$/;"	c	class:TNEANetMP
TEdge	snap-exp/mmgraph-exp.h	/^    TEdge() : TypeId(-1), Id(-1), SrcNId(-1), DstNId(-1) { }$/;"	f	class:TMNet::TEdge
TEdge	snap-exp/mmgraph-exp.h	/^    TEdge(TSIn& SIn) : TypeId(SIn), Id(SIn), SrcNId(SIn), DstNId(SIn) { }$/;"	f	class:TMNet::TEdge
TEdge	snap-exp/mmgraph-exp.h	/^    TEdge(const TEdge& Edge) : TypeId(Edge.TypeId), Id(Edge.Id), SrcNId(Edge.SrcNId), DstNId(Edge.DstNId) { }$/;"	f	class:TMNet::TEdge
TEdge	snap-exp/mmgraph-exp.h	/^    TEdge(const int& ETypeId, const int& EId, const int& SourceNId, const int& DestNId) : TypeId(ETypeId), Id(EId), SrcNId(SourceNId), DstNId(DestNId) { }$/;"	f	class:TMNet::TEdge
TEdge	snap-exp/mmgraph-exp.h	/^  class TEdge {$/;"	c	class:TMNet
TEdgeDat	snap-core/network.h	/^  typedef TEdgeData TEdgeDat;$/;"	t	class:TNodeEDatNet
TEdgeDat	snap-core/network.h	/^  typedef TEdgeData TEdgeDat;$/;"	t	class:TNodeEdgeNet
TEdgeGrad	snap-exp/linkpred.h	/^  TEdgeGrad() : Val(0) { }$/;"	f	class:TEdgeGrad
TEdgeGrad	snap-exp/linkpred.h	/^  TEdgeGrad(TSIn& SIn) : Val(SIn), GradV(SIn) { } $/;"	f	class:TEdgeGrad
TEdgeGrad	snap-exp/linkpred.h	/^  TEdgeGrad(const TEdgeGrad& EG) : Val(EG.Val), GradV(EG.GradV), AttrV(EG.AttrV) { }$/;"	f	class:TEdgeGrad
TEdgeGrad	snap-exp/linkpred.h	/^  TEdgeGrad(const TFltV& EdgeAttrV) : Val(0), GradV(EdgeAttrV.Len()), AttrV(EdgeAttrV) { }$/;"	f	class:TEdgeGrad
TEdgeGrad	snap-exp/linkpred.h	/^  TEdgeGrad(const int& NAttr) : Val(0), GradV(NAttr) { }$/;"	f	class:TEdgeGrad
TEdgeGrad	snap-exp/linkpred.h	/^class TEdgeGrad { $/;"	c
TEdgeGrad	snap-exp/linkpred.h	/^typedef TPair<TFlt, TFltV> TEdgeGrad;$/;"	t	namespace:__OLD__
TEdgeI	snap-core/bignet.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TBigNet::TEdgeI
TEdgeI	snap-core/bignet.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TBigNet::TEdgeI
TEdgeI	snap-core/bignet.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(0) { }$/;"	f	class:TBigNet::TEdgeI
TEdgeI	snap-core/bignet.h	/^  class TEdgeI {$/;"	c	class:TBigNet
TEdgeI	snap-core/graph.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TBPGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TNGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TUNGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI() : EdgeHI(), Graph(NULL) { }$/;"	f	class:TNEGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TBPGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TNGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TUNGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const TEdgeI& EdgeI) : EdgeHI(EdgeI.EdgeHI), Graph(EdgeI.Graph) { }$/;"	f	class:TNEGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const THashIter& EdgeHIter, const TNEGraph *GraphPt) : EdgeHI(EdgeHIter), Graph(GraphPt) { }$/;"	f	class:TNEGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TBPGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TNGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TUNGraph::TEdgeI
TEdgeI	snap-core/graph.h	/^  class TEdgeI {$/;"	c	class:TBPGraph
TEdgeI	snap-core/graph.h	/^  class TEdgeI {$/;"	c	class:TNEGraph
TEdgeI	snap-core/graph.h	/^  class TEdgeI {$/;"	c	class:TNGraph
TEdgeI	snap-core/graph.h	/^  class TEdgeI {$/;"	c	class:TUNGraph
TEdgeI	snap-core/graphmp.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TNGraphMP::TEdgeI
TEdgeI	snap-core/graphmp.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TNGraphMP::TEdgeI
TEdgeI	snap-core/graphmp.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TNGraphMP::TEdgeI
TEdgeI	snap-core/graphmp.h	/^  class TEdgeI {$/;"	c	class:TNGraphMP
TEdgeI	snap-core/network.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TDirNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TNodeEDatNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TNodeNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TUndirNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI() : EdgeHI(), Graph(NULL) { }$/;"	f	class:TNEANet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI() : EdgeHI(), Net(NULL) { }$/;"	f	class:TNodeEdgeNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TDirNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TNodeEDatNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TNodeNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TUndirNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TEdgeI& EdgeI) : EdgeHI(EdgeI.EdgeHI), Graph(EdgeI.Graph) { }$/;"	f	class:TNEANet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TEdgeI& EdgeI) : EdgeHI(EdgeI.EdgeHI), Net(EdgeI.Net) { }$/;"	f	class:TNodeEdgeNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const THashIter& EdgeHIter, const TNEANet *GraphPt) : EdgeHI(EdgeHIter), Graph(GraphPt) { }$/;"	f	class:TNEANet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const THashIter& EdgeHIter, const TNodeEdgeNet *NetPt) : EdgeHI(EdgeHIter), Net((TNodeEdgeNet *) NetPt) { }$/;"	f	class:TNodeEdgeNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TDirNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TNodeEDatNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TNodeNet::TEdgeI
TEdgeI	snap-core/network.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TUndirNet::TEdgeI
TEdgeI	snap-core/network.h	/^  class TEdgeI {$/;"	c	class:TDirNet
TEdgeI	snap-core/network.h	/^  class TEdgeI {$/;"	c	class:TNEANet
TEdgeI	snap-core/network.h	/^  class TEdgeI {$/;"	c	class:TNodeEDatNet
TEdgeI	snap-core/network.h	/^  class TEdgeI {$/;"	c	class:TNodeEdgeNet
TEdgeI	snap-core/network.h	/^  class TEdgeI {$/;"	c	class:TNodeNet
TEdgeI	snap-core/network.h	/^  class TEdgeI {$/;"	c	class:TUndirNet
TEdgeI	snap-core/networkmp.h	/^    TEdgeI() : EdgeHI(), Graph(NULL) { }$/;"	f	class:TNEANetMP::TEdgeI
TEdgeI	snap-core/networkmp.h	/^    TEdgeI(const TEdgeI& EdgeI) : EdgeHI(EdgeI.EdgeHI), Graph(EdgeI.Graph) { }$/;"	f	class:TNEANetMP::TEdgeI
TEdgeI	snap-core/networkmp.h	/^    TEdgeI(const THashIter& EdgeHIter, const TNEANetMP *GraphPt) : EdgeHI(EdgeHIter), Graph(GraphPt) { }$/;"	f	class:TNEANetMP::TEdgeI
TEdgeI	snap-core/networkmp.h	/^  class TEdgeI {$/;"	c	class:TNEANetMP
TEdgeI	snap-exp/graphmp-exp.h	/^    TEdgeI() : CurNode(), EndNode(), CurEdge(0) { }$/;"	f	class:TUNGraphMP::TEdgeI
TEdgeI	snap-exp/graphmp-exp.h	/^    TEdgeI(const TEdgeI& EdgeI) : CurNode(EdgeI.CurNode), EndNode(EdgeI.EndNode), CurEdge(EdgeI.CurEdge) { }$/;"	f	class:TUNGraphMP::TEdgeI
TEdgeI	snap-exp/graphmp-exp.h	/^    TEdgeI(const TNodeI& NodeI, const TNodeI& EndNodeI, const int& EdgeN=0) : CurNode(NodeI), EndNode(EndNodeI), CurEdge(EdgeN) { }$/;"	f	class:TUNGraphMP::TEdgeI
TEdgeI	snap-exp/graphmp-exp.h	/^  class TEdgeI {$/;"	c	class:TUNGraphMP
TEdgeI	snap-exp/mmgraph-exp.h	/^    TEdgeI() : EdgeHI(), Graph(NULL) { }$/;"	f	class:TMNet::TEdgeI
TEdgeI	snap-exp/mmgraph-exp.h	/^    TEdgeI(const TEdgeI& EdgeI) : EdgeHI(EdgeI.EdgeHI), Graph(EdgeI.Graph) { }$/;"	f	class:TMNet::TEdgeI
TEdgeI	snap-exp/mmgraph-exp.h	/^    TEdgeI(const THashIter& EdgeHIter, const TMNet *GraphPt) : EdgeHI(EdgeHIter), Graph(GraphPt) { }$/;"	f	class:TMNet::TEdgeI
TEdgeI	snap-exp/mmgraph-exp.h	/^  class TEdgeI {$/;"	c	class:TMNet
TEdgeInfo	snap-adv/cascnetinf.h	/^  TEdgeInfo() { }$/;"	f	class:TEdgeInfo
TEdgeInfo	snap-adv/cascnetinf.h	/^  TEdgeInfo(TSIn& SIn) : Vol(SIn), MarginalGain(SIn), MarginalBound(SIn), MedianTimeDiff(SIn), AverageTimeDiff(SIn) { }$/;"	f	class:TEdgeInfo
TEdgeInfo	snap-adv/cascnetinf.h	/^  TEdgeInfo(const int& v,$/;"	f	class:TEdgeInfo
TEdgeInfo	snap-adv/cascnetinf.h	/^class TEdgeInfo {$/;"	c
TEdgeSignPred	snap-exp/signnet.h	/^  TEdgeSignPred() : Network(TSignNet::New()), MinCmnNbrs(0) { }$/;"	f	class:TEdgeSignPred
TEdgeSignPred	snap-exp/signnet.h	/^class TEdgeSignPred {$/;"	c
TEditCnt	snap-exp/wikinet.h	/^    TEditCnt() { memset(this, 0, sizeof(int)); }$/;"	f	struct:TWikiEditCnt::TEditCnt
TEditCnt	snap-exp/wikinet.h	/^    TEditCnt(TSIn& SIn) { SIn.LoadBf(this, sizeof(TEditCnt)); }$/;"	f	struct:TWikiEditCnt::TEditCnt
TEditCnt	snap-exp/wikinet.h	/^  struct TEditCnt {$/;"	s	class:TWikiEditCnt
TElecSum	snap-exp/wikinet.h	/^  struct TElecSum {$/;"	s	class:TWikiElecBs
TElement	glib-core/unicode.h	/^	typedef TDat TElement;$/;"	t	class:TVecElt
TElement	glib-core/unicode.h	/^	typedef char TElement;$/;"	t	class:TVecElt
TEmptyMatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TEmptyMatchListener() : TMatchListener() { }$/;"	f	class:TEmptyMatchListener
TEmptyMatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TEmptyMatchListener : public TMatchListener {$/;"	c
TEmptyMatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TEmptyMatchListener() : TMatchListener() {}$/;"	f	class:TEmptyMatchListener
TEmptyMatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TEmptyMatchListener : public TMatchListener {$/;"	c
TEncoding	glib-core/unicode.h	/^	typedef TEncoding_ TEncoding;$/;"	t	class:T8BitCodec
TEncoding_CP1250	glib-core/unicode.h	/^class TEncoding_CP1250 \/\/ Windows-1250, similar to ISO Latin 2$/;"	c
TEncoding_CP437	glib-core/unicode.h	/^class TEncoding_CP437 \/\/ DOS US$/;"	c
TEncoding_CP852	glib-core/unicode.h	/^class TEncoding_CP852 \/\/ DOS Latin 2$/;"	c
TEncoding_ISO8859_1	glib-core/unicode.h	/^class TEncoding_ISO8859_1$/;"	c
TEncoding_ISO8859_2	glib-core/unicode.h	/^class TEncoding_ISO8859_2 \/\/ ISO Latin 2$/;"	c
TEncoding_ISO8859_3	glib-core/unicode.h	/^class TEncoding_ISO8859_3$/;"	c
TEncoding_ISO8859_4	glib-core/unicode.h	/^class TEncoding_ISO8859_4$/;"	c
TEncoding_YuAscii	glib-core/unicode.h	/^class TEncoding_YuAscii$/;"	c
TEnv	glib-core/env.cpp	/^TEnv::TEnv(const TStr& _ArgStr, const PNotify& _Notify):$/;"	f	class:TEnv
TEnv	glib-core/env.cpp	/^TEnv::TEnv(const int& _Args, char** _ArgV, const PNotify& _Notify):$/;"	f	class:TEnv
TEnv	glib-core/env.h	/^  TEnv(): \/*Args(0), ArgV(NULL)*\/ ArgV(), HdStr(), MnArgs(1), SilentP(false), Notify(){}$/;"	f	class:TEnv
TEnv	glib-core/env.h	/^class TEnv{$/;"	c
TEpidemModel	snap-exp/sir.h	/^  TEpidemModel() { } \/\/ const double& NZero, const double& IZero) : N0(NZero), I0(IZero)  { }$/;"	f	class:TEpidemModel
TEpidemModel	snap-exp/sir.h	/^class TEpidemModel {$/;"	c
TEq	glib-core/bd.h	/^class TEq{$/;"	c
TEstEpidemParams	snap-exp/sir.h	/^  TEstEpidemParams(const TEpiModel& EpiModel) : Rnd(0), Model(EpiModel) { }$/;"	f	class:TEstEpidemParams
TEstEpidemParams	snap-exp/sir.h	/^class TEstEpidemParams {$/;"	c
TExeTm	glib-core/tm.h	/^  TExeTm(): LastTick(0) { Tick(); }$/;"	f	class:TExeTm
TExeTm	glib-core/tm.h	/^  TExeTm(const TExeTm& Tm): LastTick(Tm.LastTick) { }$/;"	f	class:TExeTm
TExeTm	glib-core/tm.h	/^class TExeTm{$/;"	c
TExperiment	snap-core/util.h	/^      ComputeETypes, EstimateSizes, InitGraph, ExtractNbrETypes, CopyNodes, PopulateGraph, ExtractEdges, BuildSubgraph} TExperiment;$/;"	t	class:TStopwatch	typeref:enum:TStopwatch::__anon80
TFAccess	glib-core/fl.h	/^typedef enum {faUndef, faCreate, faUpdate, faAppend, faRdOnly, faRestore} TFAccess;$/;"	t	typeref:enum:__anon53
TFEval	snap-adv/kronecker.h	/^    TFEval() : LogLike(0), GradV() { }$/;"	f	class:TKronMaxLL::TFEval
TFEval	snap-adv/kronecker.h	/^    TFEval(const TFEval& FEval) : LogLike(FEval.LogLike), GradV(FEval.GradV) { }$/;"	f	class:TKronMaxLL::TFEval
TFEval	snap-adv/kronecker.h	/^    TFEval(const TFlt& LL, const TFltV& DLL) : LogLike(LL), GradV(DLL) { }$/;"	f	class:TKronMaxLL::TFEval
TFEval	snap-adv/kronecker.h	/^  class TFEval {$/;"	c	class:TKronMaxLL
TFFile	glib-core/xfl.cpp	/^TFFile::TFFile(const TStr& FNmWc, const bool& _RecurseP):$/;"	f	class:TFFile
TFFile	glib-core/xfl.cpp	/^TFFile::TFFile(const TStr& _FPath, const TStr& _FExt, const bool& _RecurseP):$/;"	f	class:TFFile
TFFile	glib-core/xfl.cpp	/^TFFile::TFFile(const TStrV& _FPathV, const TStrV& _FExtV, const TStr& _FBaseWc,$/;"	f	class:TFFile
TFFileDesc	glib-core/xfl.cpp	/^TFFileDesc::TFFileDesc(): FDesc(NULL), DirEnt(NULL) {}$/;"	f	class:TFFileDesc
TFFileDesc	glib-core/xfl.cpp	/^TFFileDesc::TFFileDesc(): FFileH(INVALID_HANDLE_VALUE) {}$/;"	f	class:TFFileDesc
TFFileDesc	glib-core/xfl.h	/^  TFFileDesc(TSIn&){Fail;}$/;"	f
TFIn	glib-core/fl.cpp	/^TFIn::TFIn(const TStr& FNm):$/;"	f	class:TFIn
TFIn	glib-core/fl.cpp	/^TFIn::TFIn(const TStr& FNm, bool& OpenedP):$/;"	f	class:TFIn
TFIn	glib-core/fl.h	/^class TFIn: public TSIn{$/;"	c
TFInOut	glib-core/fl.cpp	/^TFInOut::TFInOut(const TStr& FNm, const TFAccess& FAccess, const bool& CreateIfNo) :$/;"	f	class:TFInOut
TFInOut	glib-core/fl.h	/^class TFInOut : public TSInOut {$/;"	c
TFOut	glib-core/fl.cpp	/^TFOut::TFOut(const TStr& FNm, const bool& Append):$/;"	f	class:TFOut
TFOut	glib-core/fl.cpp	/^TFOut::TFOut(const TStr& FNm, const bool& Append, bool& OpenedP):$/;"	f	class:TFOut
TFOut	glib-core/fl.h	/^class TFOut: public TSOut{$/;"	c
TFPathNotify	glib-core/xfl.cpp	/^TFPathNotify::TFPathNotify(const TStr& _LogFPath, const TStr& _PrefixFNm,$/;"	f	class:TFPathNotify
TFRec	glib-core/ds.h	/^  TFRec(const TStr& FNm, const TFAccess& FAccess, const bool& CreateIfNo):$/;"	f	class:TFRec
TFRec	glib-core/ds.h	/^class TFRec{$/;"	c
TFRnd	glib-core/fl.cpp	/^TFRnd::TFRnd(const TStr& _FNm, const TFAccess& FAccess,$/;"	f	class:TFRnd
TFSet	glib-core/bits.cpp	/^TFSet::TFSet($/;"	f	class:TFSet
TFSet	glib-core/bits.h	/^  TFSet(): B4V(4, 4){}$/;"	f	class:TFSet
TFSet	glib-core/bits.h	/^  TFSet(TSIn& SIn): B4V(SIn){}$/;"	f	class:TFSet
TFSet	glib-core/bits.h	/^  TFSet(const TFSet& FSet): B4V(FSet.B4V){}$/;"	f	class:TFSet
TFSet	glib-core/bits.h	/^  TFSet(const TFSet& FSet1, const TFSet& FSet2):$/;"	f	class:TFSet
TFSet	glib-core/bits.h	/^class TFSet{$/;"	c
TFfGGen	snap-core/ff.cpp	/^TFfGGen::TFfGGen(const bool& BurnExpFireP, const int& StartNNodes, const double& ForwBurnProb,$/;"	f	class:TFfGGen
TFfGGen	snap-core/ff.h	/^class TFfGGen {$/;"	c
TFileId	glib-core/bd.h	/^typedef FILE* TFileId;$/;"	t
TFltBoolKd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TBool> TFltBoolKd;$/;"	t
TFltBoolKdV	glib-core/ds.h	/^typedef TVec<TFltBoolKd> TFltBoolKdV;$/;"	t
TFltFltH	glib-core/hash.h	/^typedef THash<TFlt, TFlt> TFltFltH;$/;"	t
TFltFltIntTr	glib-core/ds.h	/^typedef TTriple<TFlt, TFlt, TInt> TFltFltIntTr;$/;"	t
TFltFltStrTr	glib-core/ds.h	/^typedef TTriple<TFlt, TFlt, TStr> TFltFltStrTr;$/;"	t
TFltFltStrTrV	glib-core/ds.h	/^typedef TVec<TFltFltStrTr> TFltFltStrTrV;$/;"	t
TFltIntBoolPrKd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TIntBoolPr> TFltIntBoolPrKd;$/;"	t
TFltIntIntIntQu	glib-core/ds.h	/^typedef TQuad<TFlt, TInt, TInt, TInt> TFltIntIntIntQu;$/;"	t
TFltIntIntIntQuV	glib-core/ds.h	/^typedef TVec<TFltIntIntIntQu> TFltIntIntIntQuV;$/;"	t
TFltIntIntTr	glib-core/ds.h	/^typedef TTriple<TFlt, TInt, TInt> TFltIntIntTr;$/;"	t
TFltIntIntTrV	glib-core/ds.h	/^typedef TVec<TFltIntIntTr> TFltIntIntTrV;$/;"	t
TFltIntKd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TInt> TFltIntKd;$/;"	t
TFltIntKdL	glib-core/ds.h	/^typedef TLst<TFltIntKd> TFltIntKdL;$/;"	t
TFltIntKdV	glib-core/ds.h	/^typedef TVec<TFltIntKd> TFltIntKdV;$/;"	t
TFltIntPr	glib-core/ds.h	/^typedef TPair<TFlt, TInt> TFltIntPr;$/;"	t
TFltIntPrKd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TIntPr> TFltIntPrKd;$/;"	t
TFltIntPrKdV	glib-core/ds.h	/^typedef TVec<TFltIntPrKd> TFltIntPrKdV;$/;"	t
TFltIntPrV	glib-core/ds.h	/^typedef TVec<TFltIntPr> TFltIntPrV;$/;"	t
TFltKd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TFlt> TFltKd;$/;"	t
TFltKdV	glib-core/ds.h	/^typedef TVec<TFltKd> TFltKdV;$/;"	t
TFltL	glib-core/ds.h	/^typedef TLst<TFlt> TFltL;$/;"	t
TFltNENet	snap-core/network.h	/^typedef TNodeEdgeNet<TFlt, TFlt> TFltNENet;$/;"	t
TFltNNet	snap-core/network.h	/^typedef TNodeNet<TFlt> TFltNNet;$/;"	t
TFltPr	glib-core/ds.h	/^typedef TPair<TFlt, TFlt> TFltPr;$/;"	t
TFltPrV	glib-core/ds.h	/^typedef TVec<TFltPr> TFltPrV;$/;"	t
TFltQ	glib-core/ds.h	/^typedef TQQueue<TFlt> TFltQ;$/;"	t
TFltQu	glib-core/ds.h	/^typedef TQuad<TFlt, TFlt, TFlt, TFlt> TFltQu;$/;"	t
TFltSet	glib-core/shash.h	/^typedef THashSet<TFlt> TFltSet;$/;"	t
TFltStrKd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TStr> TFltStrKd;$/;"	t
TFltStrKdV	glib-core/ds.h	/^typedef TVec<TFltStrKd> TFltStrKdV;$/;"	t
TFltStrPr	glib-core/ds.h	/^typedef TPair<TFlt, TStr> TFltStrPr;$/;"	t
TFltStrPrPr	glib-core/ds.h	/^typedef TPair<TFlt, TStrPr> TFltStrPrPr;$/;"	t
TFltStrPrPrV	glib-core/ds.h	/^typedef TVec<TFltStrPrPr> TFltStrPrPrV;$/;"	t
TFltStrPrV	glib-core/ds.h	/^typedef TVec<TFltStrPr> TFltStrPrV;$/;"	t
TFltTr	glib-core/ds.h	/^typedef TTriple<TFlt, TFlt, TFlt> TFltTr;$/;"	t
TFltTrV	glib-core/ds.h	/^typedef TVec<TFltTr> TFltTrV;$/;"	t
TFltTree	glib-core/ds.h	/^typedef TTree<TFlt> TFltTree;$/;"	t
TFltUInt64Kd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TUInt64> TFltUInt64Kd;$/;"	t
TFltUInt64KdV	glib-core/ds.h	/^typedef TVec<TFltUInt64Kd> TFltUInt64KdV;$/;"	t
TFltUInt64Pr	glib-core/ds.h	/^typedef TPair<TFlt, TUInt64> TFltUInt64Pr;$/;"	t
TFltUInt64PrV	glib-core/ds.h	/^typedef TVec<TFltUInt64Pr> TFltUInt64PrV;$/;"	t
TFltUIntKd	glib-core/ds.h	/^typedef TKeyDat<TFlt, TUInt> TFltUIntKd;$/;"	t
TFltV	glib-core/ds.h	/^typedef TVec<TFlt> TFltV;$/;"	t
TFltVP	glib-core/ds.h	/^typedef PVec<TFlt> TFltVP;$/;"	t
TFltVQ	glib-core/ds.h	/^typedef TQQueue<TFltV> TFltVQ;$/;"	t
TFltVToNumpy	snap-core/numpy.cpp	/^void TFltVToNumpy(TFltV& FltV, float* FltNumpyVecOut, int n) {$/;"	f	namespace:TSnap
TFltVV	glib-core/ds.h	/^typedef TVVec<TFlt> TFltVV;$/;"	t
TFltVVV	glib-core/ds.h	/^typedef TVVVec<TFlt> TFltVVV;$/;"	t
TFltVecIter	snap-core/mmnet.h	/^    typedef TFltV::TIter TFltVecIter;$/;"	t	class:TCrossNet::TAFltI
TFltVecIter	snap-core/network.h	/^    typedef TFltV::TIter TFltVecIter;$/;"	t	class:TNEANet::TAFltI
TFltVecIter	snap-core/networkmp.h	/^    typedef TFltV::TIter TFltVecIter;$/;"	t	class:TNEANetMP::TAFltI
TForestFire	snap-core/ff.h	/^  TForestFire() : Rnd(1), Graph(), FwdBurnProb(0.0), BckBurnProb(0.0), ProbDecay(1.0) { }$/;"	f	class:TForestFire
TForestFire	snap-core/ff.h	/^  TForestFire(const PNGraph& GraphPt, const double& ForwBurnProb, const double& BackBurnProb, const double& DecayProb=1.0, const int& RndSeed=1) :$/;"	f	class:TForestFire
TForestFire	snap-core/ff.h	/^class TForestFire {$/;"	c
TFtr	snap-adv/rolx.h	/^typedef TVec<TFlt> TFtr;$/;"	t
TFullColMatrix	glib-core/linalg.cpp	/^TFullColMatrix::TFullColMatrix(const TStr& MatlabMatrixFNm): TMatrix() {$/;"	f	class:TFullColMatrix
TFullColMatrix	glib-core/linalg.h	/^    TFullColMatrix(): TMatrix() {}$/;"	f	class:TFullColMatrix
TFullColMatrix	glib-core/linalg.h	/^class TFullColMatrix: public TMatrix {$/;"	c
TFunc	glib-core/ds.h	/^  TFunc(): FuncPt(NULL){}$/;"	f	class:TFunc
TFunc	glib-core/ds.h	/^  TFunc(TSIn&){Fail;}$/;"	f	class:TFunc
TFunc	glib-core/ds.h	/^  TFunc(const TFunc& Func): FuncPt(Func.FuncPt){}$/;"	f	class:TFunc
TFunc	glib-core/ds.h	/^  TFunc(const TFuncPt& _FuncPt): FuncPt(_FuncPt){}$/;"	f	class:TFunc
TFunc	glib-core/ds.h	/^class TFunc{$/;"	c
TGBlobBs	glib-core/blobbs.cpp	/^TGBlobBs::TGBlobBs($/;"	f	class:TGBlobBs
TGEq	glib-core/bd.h	/^class TGEq{$/;"	c
TGHash	snap-core/ghash.h	/^TGHash<TDat>::TGHash(TSIn& SIn) : MxIsoCheck(SIn), MxSvdGraph(SIn), GSzToPermH(), HashOnlyTrees(SIn), GraphH(SIn) {$/;"	f	class:TGHash
TGHash	snap-core/ghash.h	/^TGHash<TDat>::TGHash(const bool& HashTrees, const int& MaxIsoCheck, const int& MaxSvdGraph) :$/;"	f	class:TGHash
TGHash	snap-core/ghash.h	/^class TGHash {$/;"	c
TGLib_OLD	glib-core/ds.h	/^namespace TGLib_OLD {$/;"	n
TGStat	snap-core/gstat.cpp	/^TGStat::TGStat(TSIn& SIn) : Time(SIn), GraphNm(SIn), ValStatH(SIn), DistrStatH(SIn) { }$/;"	f	class:TGStat
TGStat	snap-core/gstat.cpp	/^TGStat::TGStat(const PNEGraph& Graph, const TSecTm& GraphTm, TFSet StatFSet, const TStr& GraphName) {$/;"	f	class:TGStat
TGStat	snap-core/gstat.cpp	/^TGStat::TGStat(const PNGraph& Graph, const TSecTm& GraphTm, TFSet StatFSet, const TStr& GraphName) {$/;"	f	class:TGStat
TGStat	snap-core/gstat.cpp	/^TGStat::TGStat(const PUNGraph& Graph, const TSecTm& GraphTm, TFSet StatFSet, const TStr& GraphName) {$/;"	f	class:TGStat
TGStat	snap-core/gstat.cpp	/^TGStat::TGStat(const TGStat& GStat) : Time(GStat.Time), GraphNm(GStat.GraphNm),$/;"	f	class:TGStat
TGStat	snap-core/gstat.cpp	/^TGStat::TGStat(const TSecTm& GraphTm, const TStr& GraphName) :$/;"	f	class:TGStat
TGStat	snap-core/gstat.h	/^  template <class PGraph> TGStat(const PGraph& Graph, const TSecTm& Time, TFSet StatFSet=TFSet(), const TStr& GraphName=TStr()) {$/;"	f	class:TGStat
TGStat	snap-core/gstat.h	/^class TGStat {$/;"	c
TGStatDistr	snap-core/gstat.h	/^} TGStatDistr;$/;"	t	typeref:enum:TGStatDistr_
TGStatDistr_	snap-core/gstat.h	/^typedef enum TGStatDistr_ {$/;"	g
TGStatV	snap-core/gstat.h	/^typedef TVec<PGStat> TGStatV;$/;"	t
TGStatVal	snap-core/gstat.h	/^} TGStatVal;$/;"	t	typeref:enum:TGStatVal_
TGStatVal_	snap-core/gstat.h	/^typedef enum TGStatVal_ {$/;"	g
TGStatVec	snap-core/gstat.cpp	/^TGStatVec::TGStatVec(TSIn& SIn) : TmUnit((TTmUnit) TInt(SIn).Val), StatFSet(SIn), GStatV(SIn) {$/;"	f	class:TGStatVec
TGStatVec	snap-core/gstat.cpp	/^TGStatVec::TGStatVec(const TGStatVec& GStat) :$/;"	f	class:TGStatVec
TGStatVec	snap-core/gstat.cpp	/^TGStatVec::TGStatVec(const TTmUnit& _TmUnit) : TmUnit(_TmUnit), StatFSet(), GStatV() {$/;"	f	class:TGStatVec
TGStatVec	snap-core/gstat.cpp	/^TGStatVec::TGStatVec(const TTmUnit& _TmUnit, const TFSet& TakeGrowthStat) :$/;"	f	class:TGStatVec
TGStatVec	snap-core/gstat.h	/^class TGStatVec {$/;"	c
TGUtil	snap-core/util.h	/^class TGUtil {$/;"	c
TGVizLayout	snap-core/gviz.h	/^typedef enum TGVizLayout_ { gvlDot, gvlNeato, gvlTwopi, gvlCirco, gvlSfdp } TGVizLayout;$/;"	t	typeref:enum:TGVizLayout_
TGVizLayout_	snap-core/gviz.h	/^typedef enum TGVizLayout_ { gvlDot, gvlNeato, gvlTwopi, gvlCirco, gvlSfdp } TGVizLayout;$/;"	g
TGetSubGraph	snap-core/subgraph.h	/^struct TGetSubGraph {$/;"	s	namespace:TSnap::TSnapDetail
TGetSubGraph	snap-core/subgraph.h	/^struct TGetSubGraph<PGraph, false> { \/\/ not multigraph$/;"	s	namespace:TSnap::TSnapDetail
TGnuPlot	glib-core/gnuplot.cpp	/^TGnuPlot::TGnuPlot(const TGnuPlot& GnuPlot) : DataFNm(GnuPlot.DataFNm), PlotFNm(GnuPlot.PlotFNm),$/;"	f	class:TGnuPlot
TGnuPlot	glib-core/gnuplot.cpp	/^TGnuPlot::TGnuPlot(const TStr& DataFileNm, const TStr& PlotFileNm, const TStr& PlotTitle, const bool& Grid) :$/;"	f	class:TGnuPlot
TGnuPlot	glib-core/gnuplot.cpp	/^TGnuPlot::TGnuPlot(const TStr& FileNm, const TStr& PlotTitle, const bool& Grid) :$/;"	f	class:TGnuPlot
TGnuPlot	glib-core/gnuplot.h	/^class TGnuPlot {$/;"	c
TGpScaleTy	glib-core/gnuplot.h	/^} TGpScaleTy;$/;"	t	typeref:enum:__anon35
TGpSeries	glib-core/gnuplot.cpp	/^TGnuPlot::TGpSeries::TGpSeries(const TGnuPlot::TGpSeries& Gps) :$/;"	f	class:TGnuPlot::TGpSeries
TGpSeries	glib-core/gnuplot.h	/^    TGpSeries() : SeriesTy(gpwLines), XYValV(), ZValV(), Label(), WithStyle(), DataFNm(), XCol(0), YCol(0), ZCol(0) { }$/;"	f	class:TGnuPlot::TGpSeries
TGpSeries	glib-core/gnuplot.h	/^  class TGpSeries {$/;"	c	class:TGnuPlot
TGpSeriesCmp	glib-core/gnuplot.h	/^    TGpSeriesCmp(const TVec<TGpSeries>& _SeriesV) : SeriesV(_SeriesV) { }$/;"	f	class:TGnuPlot::TGpSeriesCmp
TGpSeriesCmp	glib-core/gnuplot.h	/^  class TGpSeriesCmp {$/;"	c	class:TGnuPlot
TGpSeriesTy	glib-core/gnuplot.h	/^} TGpSeriesTy;$/;"	t	typeref:enum:__anon36
TGraphAnf	snap-core/anf.h	/^  TGraphAnf(const PGraph& GraphPt, const int& Approx=32, const int& moreBits=5, const int& RndSeed=0) :$/;"	f	class:TGraphAnf
TGraphAnf	snap-core/anf.h	/^class TGraphAnf {$/;"	c
TGraphAttributes	snap-adv/circles.h	/^TGraphAttributes::TGraphAttributes(PUNGraph G, const char* NodeFeaturePath,$/;"	f	class:TGraphAttributes
TGraphAttributes	snap-adv/circles.h	/^class TGraphAttributes {$/;"	c
TGraphAttributes	snap-exp/circles/circles.cpp	/^TGraphAttributes::TGraphAttributes(PUNGraph G, const char* nodeFeaturePath) :$/;"	f	class:TGraphAttributes
TGraphAttributes	snap-exp/circles/circles.h	/^class TGraphAttributes {$/;"	c
TGraphEnumUtils	snap-adv/graphcounter.h	/^class TGraphEnumUtils{$/;"	c
TGraphFlag	snap-core/gbase.h	/^} TGraphFlag;$/;"	t	typeref:enum:TGraphFlag_
TGraphFlag_	snap-core/gbase.h	/^typedef enum TGraphFlag_ {$/;"	g
TGraphKey	snap-core/ghash.cpp	/^TGraphKey::TGraphKey(TSIn& SIn) : Nodes(SIn), EdgeV(SIn), SigV(SIn), VariantId(SIn) { }$/;"	f	class:TGraphKey
TGraphKey	snap-core/ghash.cpp	/^TGraphKey::TGraphKey(const TFltV& GraphSigV) : Nodes(-1), EdgeV(), SigV(), VariantId(0) {$/;"	f	class:TGraphKey
TGraphKey	snap-core/ghash.cpp	/^TGraphKey::TGraphKey(const TGraphKey& GraphKey) : Nodes(GraphKey.Nodes),$/;"	f	class:TGraphKey
TGraphKey	snap-core/ghash.cpp	/^TGraphKey::TGraphKey(const TIntV& GraphSigV) : Nodes(-1), EdgeV(), SigV(), VariantId(0) {$/;"	f	class:TGraphKey
TGraphKey	snap-core/ghash.cpp	/^TGraphKey::TGraphKey(const TSFltV& GraphSigV) : Nodes(-1), EdgeV(), SigV(), VariantId(0) {$/;"	f	class:TGraphKey
TGraphKey	snap-core/ghash.h	/^  TGraphKey() : Nodes(-1), EdgeV(), SigV(), VariantId(0) { }$/;"	f	class:TGraphKey
TGraphKey	snap-core/ghash.h	/^class TGraphKey {$/;"	c
TGroupKey	snap-core/table.h	/^typedef TPair<TIntV, TFltV> TGroupKey;$/;"	t
TGroupVI	glib-core/shash.h	/^  typedef typename TVec<TValGroup>::TIter TGroupVI;$/;"	t	class:TSparseTableI
TGtr	glib-core/bd.h	/^class TGtr{$/;"	c
THKeyDat	glib-core/hash.h	/^  typedef THashKeyDat<TKey, TDat> THKeyDat;$/;"	t	class:THash
THKeyDat	glib-core/hash.h	/^  typedef THashKeyDat<TKey, TDat> THKeyDat;$/;"	t	class:THashKeyDatI
THash	glib-core/hash.h	/^  THash():$/;"	f	class:THash
THash	glib-core/hash.h	/^  THash(const THash& Hash):$/;"	f	class:THash
THash	glib-core/hash.h	/^  explicit THash(TSIn& SIn):$/;"	f	class:THash
THash	glib-core/hash.h	/^THash<TKey, TDat, THashFunc>::THash(const int& ExpectVals, const bool& _AutoSizeP):$/;"	f	class:THash
THash	glib-core/hash.h	/^class THash{$/;"	c
THashIter	snap-core/bignet.h	/^    typedef typename TNodeH::TIter THashIter;$/;"	t	class:TBigNet::TNodeI
THashIter	snap-core/graph.h	/^    typedef THash<TInt, TEdge>::TIter THashIter;$/;"	t	class:TNEGraph::TEdgeI
THashIter	snap-core/graph.h	/^    typedef THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TBPGraph::TNodeI
THashIter	snap-core/graph.h	/^    typedef THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TNEGraph::TNodeI
THashIter	snap-core/graph.h	/^    typedef THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TNGraph::TNodeI
THashIter	snap-core/graph.h	/^    typedef THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TUNGraph::TNodeI
THashIter	snap-core/graphmp.h	/^    typedef THashMP<TInt, TNode>::TIter THashIter;$/;"	t	class:TNGraphMP::TNodeI
THashIter	snap-core/mmnet.h	/^    typedef THash<TInt, TCrossEdge>::TIter THashIter;$/;"	t	class:TCrossNet::TCrossEdgeI
THashIter	snap-core/mmnet.h	/^    typedef THash<TInt, TCrossNet>::TIter THashIter;$/;"	t	class:TMMNet::TCrossNetI
THashIter	snap-core/mmnet.h	/^    typedef THash<TInt, TModeNet>::TIter THashIter;$/;"	t	class:TMMNet::TModeNetI
THashIter	snap-core/network.h	/^    typedef THash<TInt, TEdge>::TIter THashIter;$/;"	t	class:TNEANet::TEdgeI
THashIter	snap-core/network.h	/^    typedef THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TDirNet::TNodeI
THashIter	snap-core/network.h	/^    typedef THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TNEANet::TNodeI
THashIter	snap-core/network.h	/^    typedef THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TUndirNet::TNodeI
THashIter	snap-core/network.h	/^    typedef typename THash<TInt, TEdge>::TIter THashIter;$/;"	t	class:TNodeEdgeNet::TEdgeI
THashIter	snap-core/network.h	/^    typedef typename THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TNodeEDatNet::TNodeI
THashIter	snap-core/network.h	/^    typedef typename THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TNodeEdgeNet::TNodeI
THashIter	snap-core/network.h	/^    typedef typename THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TNodeNet::TNodeI
THashIter	snap-core/networkmp.h	/^    typedef THashMP<TInt, TEdge>::TIter THashIter;$/;"	t	class:TNEANetMP::TEdgeI
THashIter	snap-core/networkmp.h	/^    typedef THashMP<TInt, TNode>::TIter THashIter;$/;"	t	class:TNEANetMP::TNodeI
THashIter	snap-exp/graphmp-exp.h	/^    typedef THashMP<TInt, TNode>::TIter THashIter;$/;"	t	class:TUNGraphMP::TNodeI
THashIter	snap-exp/mmgraph-exp.h	/^    typedef typename THash<TInt, TEdge>::TIter THashIter;$/;"	t	class:TMNet::TEdgeI
THashIter	snap-exp/mmgraph-exp.h	/^    typedef typename THash<TInt, TNode>::TIter THashIter;$/;"	t	class:TMNet::TMNodeI
THashKeyDat	glib-core/hash.h	/^  THashKeyDat():$/;"	f	class:THashKeyDat
THashKeyDat	glib-core/hash.h	/^  THashKeyDat(const int& _Next, const int& _HashCd, const TKey& _Key):$/;"	f	class:THashKeyDat
THashKeyDat	glib-core/hash.h	/^  explicit THashKeyDat(TSIn& SIn):$/;"	f	class:THashKeyDat
THashKeyDat	glib-core/hash.h	/^class THashKeyDat{$/;"	c
THashKeyDat	glib-core/shash.h	/^  typedef TSHashKeyDat<TKey, TDat> THashKeyDat;$/;"	t	class:TSparseHash
THashKeyDatCmp	glib-core/hash.h	/^    THashKeyDatCmp(THash<TKey, TDat, THashFunc>& _Hash, const bool& _CmpKey, const bool& _Asc) :$/;"	f	class:THash::THashKeyDatCmp
THashKeyDatCmp	glib-core/hash.h	/^  class THashKeyDatCmp {$/;"	c	class:THash
THashKeyDatI	glib-core/hash.h	/^  THashKeyDatI(): KeyDatI(NULL), EndI(NULL){}$/;"	f	class:THashKeyDatI
THashKeyDatI	glib-core/hash.h	/^  THashKeyDatI(const THKeyDat* _KeyDatI, const THKeyDat* _EndI):$/;"	f	class:THashKeyDatI
THashKeyDatI	glib-core/hash.h	/^  THashKeyDatI(const THashKeyDatI& _HashKeyDatI):$/;"	f	class:THashKeyDatI
THashKeyDatI	glib-core/hash.h	/^class THashKeyDatI{$/;"	c
THashMP	glib-core/hashmp.h	/^  THashMP():$/;"	f	class:THashMP
THashMP	glib-core/hashmp.h	/^  THashMP(const THashMP& PHash):$/;"	f	class:THashMP
THashMP	glib-core/hashmp.h	/^  explicit THashMP(TSIn& SIn):$/;"	f	class:THashMP
THashMP	glib-core/hashmp.h	/^  explicit THashMP(const int& ExpectVals) {$/;"	f	class:THashMP
THashMP	glib-core/hashmp.h	/^class THashMP {$/;"	c
THashMPKeyDat	glib-core/hashmp.h	/^  THashMPKeyDat():$/;"	f	class:THashMPKeyDat
THashMPKeyDat	glib-core/hashmp.h	/^  THashMPKeyDat(const int& _HashCd, const TKey& _Key):$/;"	f	class:THashMPKeyDat
THashMPKeyDat	glib-core/hashmp.h	/^  explicit THashMPKeyDat(TSIn& SIn):$/;"	f	class:THashMPKeyDat
THashMPKeyDat	glib-core/hashmp.h	/^class THashMPKeyDat {$/;"	c
THashMPKeyDatCmp	glib-core/hashmp.h	/^    THashMPKeyDatCmp(THashMP<TKey, TDat, THashFunc>& _Hash, const bool& _CmpKey, const bool& _Asc) :$/;"	f	class:THashMP::THashMPKeyDatCmp
THashMPKeyDatCmp	glib-core/hashmp.h	/^  class THashMPKeyDatCmp {$/;"	c	class:THashMP
THashMPKeyDatI	glib-core/hashmp.h	/^  THashMPKeyDatI(): KeyDatI(NULL), EndI(NULL){}$/;"	f	class:THashMPKeyDatI
THashMPKeyDatI	glib-core/hashmp.h	/^  THashMPKeyDatI(const THashMPKeyDatI& _HashKeyDatI):$/;"	f	class:THashMPKeyDatI
THashMPKeyDatI	glib-core/hashmp.h	/^  THashMPKeyDatI(const TPHKeyDat* _KeyDatI, const TPHKeyDat* _EndI):$/;"	f	class:THashMPKeyDatI
THashMPKeyDatI	glib-core/hashmp.h	/^class THashMPKeyDatI{$/;"	c
THashSet	glib-core/shash.h	/^  THashSet():$/;"	f	class:THashSet
THashSet	glib-core/shash.h	/^  THashSet(const THashSet& Set):$/;"	f	class:THashSet
THashSet	glib-core/shash.h	/^  explicit THashSet(TSIn& SIn):$/;"	f	class:THashSet
THashSet	glib-core/shash.h	/^THashSet<TKey, THashFunc>::THashSet(const TVec<TKey>& _KeyV) :$/;"	f	class:THashSet
THashSet	glib-core/shash.h	/^THashSet<TKey, THashFunc>::THashSet(const int& ExpectVals, const bool& _AutoSizeP):$/;"	f	class:THashSet
THashSet	glib-core/shash.h	/^class THashSet{$/;"	c
THashSetKey	glib-core/shash.h	/^  THashSetKey():$/;"	f	class:THashSetKey
THashSetKey	glib-core/shash.h	/^  THashSetKey(const int& _Next, const int& _HashCd, const TKey& _Key):$/;"	f	class:THashSetKey
THashSetKey	glib-core/shash.h	/^  explicit THashSetKey(TSIn& SIn):$/;"	f	class:THashSetKey
THashSetKey	glib-core/shash.h	/^class THashSetKey{$/;"	c
THashSetKeyI	glib-core/shash.h	/^  THashSetKeyI(): KeyI(NULL), EndI(NULL) { }$/;"	f	class:THashSetKeyI
THashSetKeyI	glib-core/shash.h	/^  THashSetKeyI(const THashSetKeyI& _SetKeyI):$/;"	f	class:THashSetKeyI
THashSetKeyI	glib-core/shash.h	/^  THashSetKeyI(const TSetKey* _KeyI, const TSetKey* _EndI):$/;"	f	class:THashSetKeyI
THashSetKeyI	glib-core/shash.h	/^class THashSetKeyI{$/;"	c
THeap	snap-core/gbase.h	/^  THeap() : HeapV() { }$/;"	f	class:THeap
THeap	snap-core/gbase.h	/^  THeap(const TCmp& _Cmp) : Cmp(_Cmp), HeapV() { }$/;"	f	class:THeap
THeap	snap-core/gbase.h	/^  THeap(const THeap& Heap) : Cmp(Heap.Cmp), HeapV(Heap.HeapV) { }$/;"	f	class:THeap
THeap	snap-core/gbase.h	/^  THeap(const TVec<TVal>& Vec) : Cmp(), HeapV(Vec) { MakeHeap(); }$/;"	f	class:THeap
THeap	snap-core/gbase.h	/^  THeap(const TVec<TVal>& Vec, const TCmp& _Cmp) : Cmp(_Cmp), HeapV(Vec) { MakeHeap(); }$/;"	f	class:THeap
THeap	snap-core/gbase.h	/^  THeap(const int& MxVals) : Cmp(), HeapV(MxVals, 0) { }$/;"	f	class:THeap
THeap	snap-core/gbase.h	/^class THeap {$/;"	c
THitInfo	snap-adv/cascdynetinf.h	/^  THitInfo(TSIn& SIn) : NId(SIn), Tm(SIn), Keywords(SIn) { }$/;"	f	class:THitInfo
THitInfo	snap-adv/cascdynetinf.h	/^  THitInfo(const int& NodeId=-1, const double& HitTime=0) : NId(NodeId), Tm(HitTime) { }$/;"	f	class:THitInfo
THitInfo	snap-adv/cascdynetinf.h	/^class THitInfo {$/;"	c
THitInfo	snap-adv/cascnetinf.h	/^  THitInfo(TSIn& SIn) : NId(SIn), Parent(SIn), Tm(SIn) { }$/;"	f	class:THitInfo
THitInfo	snap-adv/cascnetinf.h	/^  THitInfo(const int& NodeId=-1, const double& HitTime=0) : NId(NodeId), Parent(-1), Tm(HitTime) { }$/;"	f	class:THitInfo
THitInfo	snap-adv/cascnetinf.h	/^class THitInfo {$/;"	c
THopfield	snap-exp/signnet.h	/^  THopfield(const PSignNet& _Net) : Net(_Net) { }$/;"	f	class:THopfield
THopfield	snap-exp/signnet.h	/^class THopfield {$/;"	c
THtmlDoc	glib-core/html.cpp	/^THtmlDoc::THtmlDoc(const PSIn& SIn, const THtmlDocType& Type, const bool& DoUc):$/;"	f	class:THtmlDoc
THtmlHldV	glib-core/html.cpp	/^THtmlHldV::THtmlHldV(const PHtmlDoc& _RefHtmlDoc, const int& HldWnLen):$/;"	f	class:THtmlHldV
THtmlLxChDef	glib-core/html.cpp	/^THtmlLxChDef::THtmlLxChDef():$/;"	f	class:THtmlLxChDef
THtmlLxChDef	glib-core/html.h	/^  THtmlLxChDef(TSIn& SIn): ChTyV(SIn), UcChV(SIn), LcChV(SIn), EscStrH(SIn){}$/;"	f
THtmlLxChTy	glib-core/html.h	/^  hlctLTag, hlctRTag, hlctEof} THtmlLxChTy;$/;"	t	typeref:enum:__anon19
THttp	glib-core/http.h	/^class THttp{$/;"	c
THttpChDef	glib-core/http.cpp	/^THttpChDef::THttpChDef():$/;"	f	class:THttpChDef
THttpChDef	glib-core/http.cpp	/^class THttpChDef{$/;"	c	file:
THttpChRet	glib-core/http.cpp	/^  THttpChRet(const PSIn& _SIn, const THttpExCd& _HttpExCd):$/;"	f	class:THttpChRet
THttpChRet	glib-core/http.cpp	/^class THttpChRet{$/;"	c	file:
THttpChTy	glib-core/http.cpp	/^typedef enum {hpctUndef, hpctAlpha, hpctDigit, hpctCtl, hpctSpec} THttpChTy;$/;"	t	typeref:enum:__anon48	file:
THttpEx	glib-core/http.cpp	/^  THttpEx(const THttpExCd& _HttpExCd): HttpExCd(_HttpExCd){}$/;"	f	class:THttpEx
THttpEx	glib-core/http.cpp	/^class THttpEx{$/;"	c	file:
THttpExCd	glib-core/http.cpp	/^  heBadSearchStr} THttpExCd;$/;"	t	typeref:enum:__anon49	file:
THttpLx	glib-core/http.cpp	/^  THttpLx(const PSIn& _SIn):$/;"	f	class:THttpLx
THttpLx	glib-core/http.cpp	/^class THttpLx{$/;"	c	file:
THttpResp	glib-core/http.cpp	/^THttpResp::THttpResp(const PSIn& SIn):$/;"	f	class:THttpResp
THttpResp	glib-core/http.cpp	/^THttpResp::THttpResp(const int& _StatusCd, const TStr& ContTypeVal,$/;"	f	class:THttpResp
THttpRq	glib-core/http.cpp	/^THttpRq::THttpRq($/;"	f	class:THttpRq
THttpRq	glib-core/http.cpp	/^THttpRq::THttpRq(const PSIn& SIn):$/;"	f	class:THttpRq
THttpRq	glib-core/http.h	/^  THttpRq(TSIn&){Fail;}$/;"	f
THttpRqMethod	glib-core/http.h	/^  hrmUndef, hrmGet, hrmHead, hrmPost} THttpRqMethod;$/;"	t	typeref:enum:__anon51
TICKS_PER_SECOND	glib-core/os.cpp	572;"	d	file:
TIDer	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TIDer() { }$/;"	f	class:TIDer
TIDer	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TIDer{$/;"	c
TILx	glib-core/lx.cpp	/^TILx::TILx(const PSIn& _SIn, const TFSet& OptSet, const TLxChDefTy& ChDefTy):$/;"	f	class:TILx
TILxSymSt	glib-core/lx.cpp	/^TILxSymSt::TILxSymSt():$/;"	f	class:TILxSymSt
TILxSymSt	glib-core/lx.cpp	/^TILxSymSt::TILxSymSt(TILx& Lx):$/;"	f	class:TILxSymSt
TILxSymSt	glib-core/lx.cpp	/^TILxSymSt::TILxSymSt(const TILxSymSt& SymSt):$/;"	f	class:TILxSymSt
TIME	doxygen/Makefile	/^TIME := $(shell date +%Y%m%d-%H%M%S)$/;"	m
TIMEHANDLE	contrib/unict_univr-risnap/RI-DSToSnap/timer.h	/^typedef LARGE_INTEGER TIMEHANDLE;$/;"	t
TIMEHANDLE	contrib/unict_univr-risnap/RI-DSToSnap/timer.h	/^typedef struct timeval TIMEHANDLE;$/;"	t	typeref:struct:timeval
TIMEHANDLE	contrib/unict_univr-risnap/RiToSnap/timer.h	/^typedef LARGE_INTEGER TIMEHANDLE;$/;"	t
TIMEHANDLE	contrib/unict_univr-risnap/RiToSnap/timer.h	/^typedef struct timeval TIMEHANDLE;$/;"	t	typeref:struct:timeval
TIMER_H	contrib/unict_univr-risnap/RI-DSToSnap/timer.h	28;"	d
TIMER_H	contrib/unict_univr-risnap/RiToSnap/timer.h	28;"	d
TIME_STEP	snap-adv/cascdynetinf.h	/^  TIME_STEP, \/\/ run inference every time step$/;"	e	enum:__anon63
TIMap	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	std::map<std::string, int> TIMap;$/;"	m	class:TIDer
TImdbNet	snap-exp/imdbnet.h	/^  TImdbNet() : StrIdH() { }$/;"	f	class:TImdbNet
TImdbNet	snap-exp/imdbnet.h	/^  TImdbNet(TSIn& SIn, const bool& LoadStrH=true) : TNet(SIn) {$/;"	f	class:TImdbNet
TImdbNet	snap-exp/imdbnet.h	/^class TImdbNet : public TNodeNet<TImdbNode> {$/;"	c
TImdbNode	snap-exp/imdbnet.cpp	/^TImdbNode::TImdbNode(TSIn& SIn) : Name(SIn), Year(SIn), Position(SIn), Type(SIn), $/;"	f	class:TImdbNode
TImdbNode	snap-exp/imdbnet.cpp	/^TImdbNode::TImdbNode(const int& ActorName, const int& ActorYear, const int& ActorPos, const bool& IsMaleActor) :$/;"	f	class:TImdbNode
TImdbNode	snap-exp/imdbnet.cpp	/^TImdbNode::TImdbNode(const int& MovieName, const int& MovieYear, const TMovieTy& MovieTy) :$/;"	f	class:TImdbNode
TImdbNode	snap-exp/imdbnet.h	/^  TImdbNode() : Type(mtyUndef) { }$/;"	f	class:TImdbNode
TImdbNode	snap-exp/imdbnet.h	/^  TImdbNode(const PXmlTok& XmlTok) { Fail; }$/;"	f	class:TImdbNode
TImdbNode	snap-exp/imdbnet.h	/^class TImdbNode {$/;"	c
TInAdjList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TInAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &NNet, int NNodeId):$/;"	f	class:TInAdjList
TInAdjList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TInAdjList : public TNodeList {$/;"	c
TInAdjList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TInAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &NNet, int NNodeId):$/;"	f	class:TInAdjList
TInAdjList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TInAdjList : public TNodeList {$/;"	c
TInducedSubGISolver	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TInducedSubGISolver(TMatchingMachine<TNodeData, TEdgeData> &NMaMa,$/;"	f	class:TInducedSubGISolver
TInducedSubGISolver	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TInducedSubGISolver : public TSolver<TNodeData, TEdgeData> {$/;"	c
TInducedSubGISolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TInducedSubGISolver(TMatchingMachine<TNodeData, TEdgeData> &NMaMa,$/;"	f	class:TInducedSubGISolver
TInducedSubGISolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TInducedSubGISolver : public TSolver<TNodeData, TEdgeData> {$/;"	c
TIntBoolH	glib-core/hash.h	/^typedef THash<TInt, TBool> TIntBoolH;$/;"	t
TIntBoolPr	glib-core/ds.h	/^typedef TPair<TInt, TBool> TIntBoolPr;$/;"	t
TIntChPr	glib-core/ds.h	/^typedef TPair<TInt, TCh> TIntChPr;$/;"	t
TIntFltFltTr	glib-core/ds.h	/^typedef TTriple<TInt, TFlt, TFlt> TIntFltFltTr;$/;"	t
TIntFltH	glib-core/hash.h	/^typedef THash<TInt, TFlt> TIntFltH;$/;"	t
TIntFltIntTr	glib-core/ds.h	/^typedef TTriple<TInt, TFlt, TInt> TIntFltIntTr;$/;"	t
TIntFltIntTrV	glib-core/ds.h	/^typedef TVec<TIntFltIntTr> TIntFltIntTrV;$/;"	t
TIntFltKd	glib-core/ds.h	/^typedef TKeyDat<TInt, TFlt> TIntFltKd;$/;"	t
TIntFltKdV	glib-core/ds.h	/^typedef TVec<TIntFltKd> TIntFltKdV;$/;"	t
TIntFltNEDNet	snap-core/network.h	/^typedef TNodeEDatNet<TInt, TFlt> TIntFltNEDNet;$/;"	t
TIntFltPr	glib-core/ds.h	/^typedef TPair<TInt, TFlt> TIntFltPr;$/;"	t
TIntFltPrH	glib-core/hash.h	/^typedef THash<TInt, TFltPr> TIntFltPrH;$/;"	t
TIntFltPrKd	glib-core/ds.h	/^typedef TKeyDat<TInt, TFltPr> TIntFltPrKd;$/;"	t
TIntFltPrKdV	glib-core/ds.h	/^typedef TVec<TIntFltPrKd> TIntFltPrKdV;$/;"	t
TIntFltPrV	glib-core/ds.h	/^typedef TVec<TIntFltPr> TIntFltPrV;$/;"	t
TIntFltTrH	glib-core/hash.h	/^typedef THash<TInt, TFltTr> TIntFltTrH;$/;"	t
TIntFltVH	glib-core/hash.h	/^typedef THash<TInt, TFltV> TIntFltVH;$/;"	t
TIntFtrH	snap-adv/rolx.h	/^typedef THash<TInt, TFtr> TIntFtrH;$/;"	t
TIntH	glib-core/hash.h	/^typedef THash<TInt, TInt> TIntH;$/;"	t
TIntIntFltFltQu	glib-core/ds.h	/^typedef TQuad<TInt, TInt, TFlt, TFlt> TIntIntFltFltQu;$/;"	t
TIntIntFltPrH	glib-core/hash.h	/^typedef THash<TInt, TIntFltPr> TIntIntFltPrH;$/;"	t
TIntIntFltTr	glib-core/ds.h	/^typedef TTriple<TInt, TInt, TFlt> TIntIntFltTr;$/;"	t
TIntIntFltTrV	glib-core/ds.h	/^typedef TVec<TIntIntFltTr> TIntIntFltTrV;$/;"	t
TIntIntH	glib-core/hash.h	/^typedef THash<TInt, TInt> TIntIntH;$/;"	t
TIntIntHH	glib-core/hash.h	/^typedef THash<TInt, TIntH> TIntIntHH;$/;"	t
TIntIntIntVTr	glib-core/ds.h	/^typedef TTriple<TInt, TInt, TVec<TInt, int> > TIntIntIntVTr;$/;"	t
TIntIntIntVTrV	glib-core/ds.h	/^typedef TVec<TIntIntIntVTr> TIntIntIntVTrV;$/;"	t
TIntIntPrH	glib-core/hash.h	/^typedef THash<TInt, TIntPr> TIntIntPrH;$/;"	t
TIntIntPrPr	glib-core/ds.h	/^typedef TPair<TInt, TIntPr> TIntIntPrPr;$/;"	t
TIntIntPrPrFltH	glib-core/hash.h	/^typedef THash<TIntIntPrPr, TFlt> TIntIntPrPrFltH;$/;"	t
TIntIntPrPrIntH	glib-core/hash.h	/^typedef THash<TIntIntPrPr, TInt> TIntIntPrPrIntH;$/;"	t
TIntIntPrPrStrH	glib-core/hash.h	/^typedef THash<TIntIntPrPr, TStr> TIntIntPrPrStrH;$/;"	t
TIntIntPrPrV	glib-core/ds.h	/^typedef TVec<TIntIntPrPr> TIntIntPrPrV;$/;"	t
TIntIntPrVH	glib-core/hash.h	/^typedef THash<TInt, TIntPrV> TIntIntPrVH;$/;"	t
TIntIntStrPrH	glib-core/hash.h	/^typedef THash<TInt, TIntStrPr> TIntIntStrPrH;$/;"	t
TIntIntStrTr	glib-core/ds.h	/^typedef TTriple<TInt, TInt, TStr> TIntIntStrTr;$/;"	t
TIntIntStrTrV	glib-core/ds.h	/^typedef TVec<TIntIntStrTr> TIntIntStrTrV;$/;"	t
TIntIntVH	glib-core/hash.h	/^typedef THash<TInt, TIntV> TIntIntVH;$/;"	t
TIntIntVH	glib-core/unicode.h	/^typedef THash<TInt, TIntV> TIntIntVH;$/;"	t
TIntIntVIntTr	glib-core/ds.h	/^typedef TTriple<TInt, TVec<TInt, int>, TInt> TIntIntVIntTr;$/;"	t
TIntIntVIntTrV	glib-core/ds.h	/^typedef TVec<TIntIntVIntTr> TIntIntVIntTrV;$/;"	t
TIntIntVPr	glib-core/ds.h	/^typedef TPair<TInt, TVec<TInt, int> > TIntIntVPr;$/;"	t
TIntKd	glib-core/ds.h	/^typedef TKeyDat<TInt, TInt> TIntKd;$/;"	t
TIntKdL	glib-core/ds.h	/^typedef TLst<TIntKd> TIntKdL;$/;"	t
TIntKdV	glib-core/ds.h	/^typedef TVec<TIntKd> TIntKdV;$/;"	t
TIntL	glib-core/ds.h	/^typedef TLst<TInt> TIntL;$/;"	t
TIntNEDNet	snap-core/network.h	/^typedef TNodeEDatNet<TInt, TInt> TIntNEDNet;$/;"	t
TIntNENet	snap-core/network.h	/^typedef TNodeEdgeNet<TInt, TInt> TIntNENet;$/;"	t
TIntNNet	snap-core/network.h	/^typedef TNodeNet<TInt> TIntNNet;$/;"	t
TIntPr	glib-core/ds.h	/^typedef TPair<TInt, TInt> TIntPr;$/;"	t
TIntPrFltH	glib-core/hash.h	/^typedef THash<TIntPr, TFlt> TIntPrFltH;$/;"	t
TIntPrFltKd	glib-core/ds.h	/^typedef TKeyDat<TIntPr, TFlt> TIntPrFltKd;$/;"	t
TIntPrFltKdV	glib-core/ds.h	/^typedef TVec<TIntPrFltKd> TIntPrFltKdV;$/;"	t
TIntPrH	glib-core/hash.h	/^typedef THash<TIntPr, TIntPr> TIntPrH;$/;"	t
TIntPrIntH	glib-core/hash.h	/^typedef THash<TIntPr, TInt> TIntPrIntH;$/;"	t
TIntPrIntPr	glib-core/ds.h	/^typedef TPair<TIntPr, TInt> TIntPrIntPr;$/;"	t
TIntPrIntPrVH	glib-core/hash.h	/^typedef THash<TIntPr, TIntPrV> TIntPrIntPrVH;$/;"	t
TIntPrIntVH	glib-core/hash.h	/^typedef THash<TIntPr, TIntV> TIntPrIntVH;$/;"	t
TIntPrQ	glib-core/ds.h	/^typedef TQQueue<TIntPr> TIntPrQ;$/;"	t
TIntPrSet	glib-core/shash.h	/^typedef THashSet<TIntPr> TIntPrSet;$/;"	t
TIntPrStrH	glib-core/hash.h	/^typedef THash<TIntPr, TStr> TIntPrStrH;$/;"	t
TIntPrStrVH	glib-core/hash.h	/^typedef THash<TIntPr, TStrV> TIntPrStrVH;$/;"	t
TIntPrV	glib-core/ds.h	/^typedef TVec<TIntPr> TIntPrV;$/;"	t
TIntPrVV	glib-core/ds.h	/^typedef TVVec<TIntPr> TIntPrVV;$/;"	t
TIntQ	glib-core/ds.h	/^typedef TQQueue<TInt> TIntQ;$/;"	t
TIntQV	glib-core/ds.h	/^typedef TVec<TQQueue<TInt> > TIntQV;$/;"	t
TIntQu	glib-core/ds.h	/^typedef TQuad<TInt, TInt, TInt, TInt> TIntQu;$/;"	t
TIntQuV	glib-core/ds.h	/^typedef TVec<TIntQu> TIntQuV;$/;"	t
TIntS	glib-core/ds.h	/^typedef TSStack<TInt> TIntS;$/;"	t
TIntSFltKd	glib-core/ds.h	/^typedef TKeyDat<TInt, TSFlt> TIntSFltKd;$/;"	t
TIntSet	glib-core/shash.h	/^typedef THashSet<TInt> TIntSet;$/;"	t
TIntStrH	glib-core/hash.h	/^typedef THash<TInt, TStr> TIntStrH;$/;"	t
TIntStrIntIntQu	glib-core/ds.h	/^typedef TQuad<TInt, TStr, TInt, TInt> TIntStrIntIntQu;$/;"	t
TIntStrIntIntQuV	glib-core/ds.h	/^typedef TVec<TIntStrIntIntQu> TIntStrIntIntQuV;$/;"	t
TIntStrIntTr	glib-core/ds.h	/^typedef TTriple<TInt, TStr, TInt> TIntStrIntTr;$/;"	t
TIntStrIntTrV	glib-core/ds.h	/^typedef TVec<TIntStrIntTr> TIntStrIntTrV;$/;"	t
TIntStrKd	glib-core/ds.h	/^typedef TKeyDat<TInt, TStr> TIntStrKd;$/;"	t
TIntStrKdV	glib-core/ds.h	/^typedef TVec<TIntStrKd> TIntStrKdV;$/;"	t
TIntStrPr	glib-core/ds.h	/^typedef TPair<TInt, TStr> TIntStrPr;$/;"	t
TIntStrPrIntH	glib-core/hash.h	/^typedef THash<TIntStrPr, TInt> TIntStrPrIntH;$/;"	t
TIntStrPrPr	glib-core/ds.h	/^typedef TPair<TInt, TStrPr> TIntStrPrPr;$/;"	t
TIntStrPrPrV	glib-core/ds.h	/^typedef TVec<TIntStrPrPr> TIntStrPrPrV;$/;"	t
TIntStrPrQ	glib-core/ds.h	/^typedef TQQueue<TIntStrPr> TIntStrPrQ;$/;"	t
TIntStrPrV	glib-core/ds.h	/^typedef TVec<TIntStrPr> TIntStrPrV;$/;"	t
TIntStrPrVH	glib-core/hash.h	/^typedef THash<TInt, TStrPrV> TIntStrPrVH;$/;"	t
TIntStrStrTr	glib-core/ds.h	/^typedef TTriple<TInt, TStr, TStr> TIntStrStrTr;$/;"	t
TIntStrStrTrV	glib-core/ds.h	/^typedef TVec<TIntStrStrTr> TIntStrStrTrV;$/;"	t
TIntStrVH	glib-core/hash.h	/^typedef THash<TInt, TStrV> TIntStrVH;$/;"	t
TIntStrVPr	glib-core/ds.h	/^typedef TPair<TInt, TStrV> TIntStrVPr;$/;"	t
TIntStrVPrV	glib-core/ds.h	/^typedef TVec<TIntStrVPr> TIntStrVPrV;$/;"	t
TIntTr	glib-core/ds.h	/^typedef TTriple<TInt, TInt, TInt> TIntTr;$/;"	t
TIntTrFltH	glib-core/hash.h	/^typedef THash<TIntTr, TFlt> TIntTrFltH;$/;"	t
TIntTrIntH	glib-core/hash.h	/^typedef THash<TIntTr, TInt> TIntTrIntH;$/;"	t
TIntTrV	glib-core/ds.h	/^typedef TVec<TIntTr> TIntTrV;$/;"	t
TIntTree	glib-core/ds.h	/^typedef TTree<TInt> TIntTree;$/;"	t
TIntUInt64H	glib-core/hash.h	/^typedef THash<TInt, TUInt64> TIntUInt64H;$/;"	t
TIntUInt64Kd	glib-core/ds.h	/^typedef TKeyDat<TInt, TUInt64> TIntUInt64Kd;$/;"	t
TIntUInt64KdV	glib-core/ds.h	/^typedef TVec<TIntUInt64Kd> TIntUInt64KdV;$/;"	t
TIntUInt64Pr	glib-core/ds.h	/^typedef TPair<TInt, TUInt64> TIntUInt64Pr;$/;"	t
TIntUInt64PrV	glib-core/ds.h	/^typedef TVec<TIntUInt64Pr> TIntUInt64PrV;$/;"	t
TIntV	glib-core/ds.h	/^typedef TVec<TInt> TIntV;$/;"	t
TIntVHashFunc	snap-exp/trawling.h	/^class TIntVHashFunc {$/;"	c
TIntVIntH	glib-core/hash.h	/^typedef THash<TIntV, TInt> TIntVIntH;$/;"	t
TIntVToNumpy	snap-core/numpy.cpp	/^void TIntVToNumpy(TIntV& IntV, int* IntNumpyVecOut, int n) {$/;"	f	namespace:TSnap
TIntVV	glib-core/ds.h	/^typedef TVVec<TInt> TIntVV;$/;"	t
TIntVVV	glib-core/ds.h	/^typedef TVVVec<TInt> TIntVVV;$/;"	t
TIntVVecIter	snap-core/network.h	/^    typedef TVec<TIntV>::TIter TIntVVecIter;$/;"	t	class:TNEANet::TAIntVI
TIntVecIter	snap-core/mmnet.h	/^    typedef TIntV::TIter TIntVecIter;$/;"	t	class:TCrossNet::TAIntI
TIntVecIter	snap-core/network.h	/^    typedef TIntV::TIter TIntVecIter;$/;"	t	class:TNEANet::TAIntI
TIntVecIter	snap-core/networkmp.h	/^    typedef TIntV::TIter TIntVecIter;$/;"	t	class:TNEANetMP::TAIntI
TIntVecPool	glib-core/ds.h	/^typedef TVecPool<TInt> TIntVecPool;$/;"	t
TIsoGISolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TIsoGISolver(TMatchingMachine<TNodeData, TEdgeData> &NMaMa,$/;"	f	class:TIsoGISolver
TIsoGISolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TIsoGISolver : public TSolver<TNodeData, TEdgeData> {$/;"	c
TItem	glib-core/unicode.h	/^	typedef TItem_ TItem;$/;"	t	class:TUniTrie
TItemPr	glib-core/unicode.h	/^	typedef TPair<TItem, TItem> TItemPr;$/;"	t	class:TUniTrie
TItemTr	glib-core/unicode.h	/^	typedef TTriple<TItem, TItem, TItem> TItemTr;$/;"	t	class:TUniTrie
TIter	glib-core/ds.h	/^  typedef TVal* TIter;  \/\/!< Random access iterator to \\c TVal.$/;"	t	class:TVec
TIter	glib-core/hash.h	/^  typedef THashKeyDatI<TKey, TDat> TIter;$/;"	t	class:THash
TIter	glib-core/hashmp.h	/^  typedef THashMPKeyDatI<TKey, TDat> TIter;$/;"	t	class:THashMP
TIter	glib-core/shash.h	/^  typedef THashSetKeyI<TKey> TIter;$/;"	t	class:THashSet
TIter	glib-core/shash.h	/^  typedef TSparseTableI<TVal, GroupSize> TIter;$/;"	t	class:TSparseTable
TIter	glib-core/shash.h	/^  typedef TVal* TIter;$/;"	t	class:TPackVec
TIter	glib-core/shash.h	/^  typedef typename TSparseTable<THashKeyDat, GroupSize>::TIter TIter;$/;"	t	class:TSparseHash
TIter	glib-core/shash.h	/^  typedef typename TSparseTable<TKey, GroupSize>::TIter TIter;$/;"	t	class:TSparseSet
TIter	snap-core/ghash.h	/^  typedef typename THash<TGraphKey, TDat>::TIter TIter;$/;"	t	class:TGHash
TIterator	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			TIterator(TSBitSet &sb) : Sb(sb) {$/;"	f	class:TSBitSet::TIterator
TIterator	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			TIterator(TSBitSet &sb, u_size_t wblock) : Sb(sb), WBlock(wblock) {$/;"	f	class:TSBitSet::TIterator
TIterator	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	class TIterator{$/;"	c	class:TSBitSet
TJsonVal	glib-core/json.cpp	/^TJsonVal::TJsonVal(TSIn& SIn):$/;"	f	class:TJsonVal
TJsonVal	glib-core/json.h	/^  TJsonVal(): JsonValType(jvtUndef){}$/;"	f
TJsonVal	glib-core/json.h	/^  UndefCopyAssign(TJsonVal);$/;"	v
TJsonValType	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	t	typeref:enum:__anon30
TJulianDate	glib-core/tm.h	/^class TJulianDate{$/;"	c
TKCore	snap-core/kcore.h	/^  TKCore(const PGraph& _Graph) : Graph(_Graph) { Init(); }$/;"	f	class:TKCore
TKCore	snap-core/kcore.h	/^class TKCore {$/;"	c
TKeyDat	glib-core/ds.h	/^  TKeyDat(): Key(), Dat(){}$/;"	f	class:TKeyDat
TKeyDat	glib-core/ds.h	/^  TKeyDat(const TKey& _Key, const TDat& _Dat): Key(_Key), Dat(_Dat){}$/;"	f	class:TKeyDat
TKeyDat	glib-core/ds.h	/^  TKeyDat(const TKeyDat& KeyDat): Key(KeyDat.Key), Dat(KeyDat.Dat){}$/;"	f	class:TKeyDat
TKeyDat	glib-core/ds.h	/^  explicit TKeyDat(TSIn& SIn): Key(SIn), Dat(SIn){}$/;"	f	class:TKeyDat
TKeyDat	glib-core/ds.h	/^  explicit TKeyDat(const TKey& _Key): Key(_Key), Dat(){}$/;"	f	class:TKeyDat
TKeyDat	glib-core/ds.h	/^class TKeyDat{$/;"	c
TKeyDatFl	glib-core/shash.h	/^  TKeyDatFl(const TStr& FNm) : FIn(FNm) { ElemCnt.Load(FIn); }$/;"	f	class:TKeyDatFl
TKeyDatFl	glib-core/shash.h	/^class TKeyDatFl {$/;"	c
TKeyDatP	glib-core/hash.h	/^  typedef TPair<TKey, TDat> TKeyDatP;$/;"	t	class:THash
TKeyDatP	glib-core/hashmp.h	/^  typedef TPair<TKey, TDat> TKeyDatP;$/;"	t	class:THashMP
TKeyDatV	glib-core/linalg.h	/^	typedef TVec<TKeyDat<TKey, TDat> > TKeyDatV;$/;"	t	class:TSparseOps
TKronEMType	snap-adv/kronecker.h	/^enum TKronEMType {  kronNodeMiss = 0, kronFutureLink, kronEdgeMiss }; \/\/\/ !!!!! MYUNGHWAN, CHECK!$/;"	g
TKronMaxLL	snap-adv/kronecker.h	/^  TKronMaxLL(const PNGraph& GraphPt, const TKronMtx& StartParam) : KronLL(GraphPt, StartParam) { }$/;"	f	class:TKronMaxLL
TKronMaxLL	snap-adv/kronecker.h	/^class TKronMaxLL {$/;"	c
TKronMomentsFit	snap-adv/kronecker.h	/^  TKronMomentsFit(const PUNGraph& G) {$/;"	f	class:TKronMomentsFit
TKronMomentsFit	snap-adv/kronecker.h	/^class TKronMomentsFit {$/;"	c
TKronMtx	snap-adv/kronecker.cpp	/^TKronMtx::TKronMtx(const TFltV& SeedMatrix) : SeedMtx(SeedMatrix) {$/;"	f	class:TKronMtx
TKronMtx	snap-adv/kronecker.h	/^  TKronMtx() : MtxDim(-1), SeedMtx() { }$/;"	f	class:TKronMtx
TKronMtx	snap-adv/kronecker.h	/^  TKronMtx(const TKronMtx& Kronecker) : MtxDim(Kronecker.MtxDim), SeedMtx(Kronecker.SeedMtx) { }$/;"	f	class:TKronMtx
TKronMtx	snap-adv/kronecker.h	/^  TKronMtx(const int& Dim) : MtxDim(Dim), SeedMtx(Dim*Dim) { }$/;"	f	class:TKronMtx
TKronMtx	snap-adv/kronecker.h	/^class TKronMtx {$/;"	c
TKronNoise	snap-adv/kronecker.h	/^	TKronNoise() {};$/;"	f	class:TKronNoise
TKronNoise	snap-adv/kronecker.h	/^class TKronNoise {$/;"	c
TKroneckerLL	snap-adv/kronecker.cpp	/^TKroneckerLL::TKroneckerLL(const PNGraph& GraphPt, const TFltV& ParamV, const double& PermPSwapNd): PermSwapNodeProb(PermPSwapNd) {$/;"	f	class:TKroneckerLL
TKroneckerLL	snap-adv/kronecker.cpp	/^TKroneckerLL::TKroneckerLL(const PNGraph& GraphPt, const TKronMtx& ParamMtx, const TIntV& NodeIdPermV, const double& PermPSwapNd) : PermSwapNodeProb(PermPSwapNd) {$/;"	f	class:TKroneckerLL
TKroneckerLL	snap-adv/kronecker.cpp	/^TKroneckerLL::TKroneckerLL(const PNGraph& GraphPt, const TKronMtx& ParamMtx, const double& PermPSwapNd) : PermSwapNodeProb(PermPSwapNd) {$/;"	f	class:TKroneckerLL
TKroneckerLL	snap-adv/kronecker.h	/^  TKroneckerLL() : Nodes(-1), KronIters(-1), PermSwapNodeProb(0.2), RealNodes(-1), RealEdges(-1), LogLike(TKronMtx::NInf), EMType(kronNodeMiss), MissEdges(-1), DebugMode(false) { }$/;"	f	class:TKroneckerLL
TKroneckerLL	snap-adv/kronecker.h	/^class TKroneckerLL {$/;"	c
TLAMisc	glib-core/linalg.h	/^class TLAMisc {$/;"	c
TLEq	glib-core/bd.h	/^class TLEq{$/;"	c
TLSHash	snap-exp/lsh.cpp	/^TLSHash::TLSHash() { }$/;"	f	class:TLSHash
TLSHash	snap-exp/lsh.cpp	/^TLSHash::TLSHash(int Bands, int Rows, int Dim, DistMeasure Type, int NearDist) :$/;"	f	class:TLSHash
TLSHash	snap-exp/lsh.cpp	/^TLSHash::TLSHash(int Bands, int Rows, int Dim, int ExpectedSz,$/;"	f	class:TLSHash
TLSHash	snap-exp/lsh.h	/^class TLSHash {$/;"	c
TLinAlg	glib-core/linalg.h	/^class TLinAlg {$/;"	c
TLinAlgGemmTranspose	glib-core/linalg.h	/^	typedef enum { GEMM_NO_T = 0, GEMM_A_T = 1, GEMM_B_T = 2, GEMM_C_T = 4 } TLinAlgGemmTranspose;$/;"	t	class:TLinAlg	typeref:enum:TLinAlg::__anon24
TLinAlgInverseType	glib-core/linalg.h	/^	typedef enum { DECOMP_SVD } TLinAlgInverseType;$/;"	t	class:TLinAlg	typeref:enum:TLinAlg::__anon25
TLnRet	glib-core/fl.h	/^  TLnRet(const PSIn& _SIn): SIn(_SIn) {}$/;"	f	class:TLnRet
TLnRet	glib-core/fl.h	/^class TLnRet{$/;"	c
TLoc	glib-core/bd.h	/^typedef enum {lUndef, lUs, lSi} TLoc;$/;"	t	typeref:enum:__anon37
TLocClust	snap-adv/ncp.h	/^  TLocClust(const PUNGraph& GraphPt, const double& AlphaVal) :$/;"	f	class:TLocClust
TLocClust	snap-adv/ncp.h	/^class TLocClust {$/;"	c
TLocClustStat	snap-adv/ncp.cpp	/^TLocClustStat::TLocClustStat(const double& _Alpha, const int& _KMin, const int& _KMax, const double& _KFac,$/;"	f	class:TLocClustStat
TLocClustStat	snap-adv/ncp.h	/^class TLocClustStat {$/;"	c
TLogOp	glib-core/bd.h	/^typedef enum {loUndef, loNot, loAnd, loOr} TLogOp;$/;"	t	typeref:enum:__anon39
TLogRegFit	snap-adv/agm.h	/^  TLogRegFit() {}$/;"	f	class:TLogRegFit
TLogRegFit	snap-adv/agm.h	/^class TLogRegFit {$/;"	c
TLogRegPredict	snap-adv/agm.h	/^    TLogRegPredict(TSIn& SIn) { Theta.Load(SIn); };$/;"	f	class:TLogRegPredict
TLogRegPredict	snap-adv/agm.h	/^    TLogRegPredict(const TFltV& _bb): Theta(_bb) { };$/;"	f	class:TLogRegPredict
TLogRegPredict	snap-adv/agm.h	/^class TLogRegPredict {$/;"	c
TLpBase	snap-exp/linkpred.h	/^  TLpBase() { }$/;"	f	class:__OLD__::TLpBase
TLpBase	snap-exp/linkpred.h	/^class TLpBase {$/;"	c	namespace:__OLD__
TLpExample	snap-exp/linkpred.h	/^  TLpExample() : Graph(), SrcNId(-1), DstNIdV(), NolNIdV(), EAttrV() { }$/;"	f	class:__OLD__::TLpExample
TLpExample	snap-exp/linkpred.h	/^  TLpExample() : SrcNId(-1), DummyNId(-1) { CRef.MkRef(); }$/;"	f	class:TLpExample
TLpExample	snap-exp/linkpred.h	/^class TLpExample : public TNodeEDatNet<TInt, TEdgeGrad> {$/;"	c
TLpExample	snap-exp/linkpred.h	/^class TLpExample {$/;"	c	namespace:__OLD__
TLpNodeTy	snap-exp/linkpred.h	/^  typedef enum { lntUndef, lntSrc, lntDst, lntNoLink, lntDummy } TLpNodeTy;$/;"	t	class:__OLD__::TQGraph	typeref:enum:__OLD__::TQGraph::__anon12
TLpPredictor	snap-exp/linkpred.h	/^  TLpPredictor() : Alpha(0.85), B(0.01), Lambda(0.01), Z(0.01) { }$/;"	f	class:TLpPredictor
TLpPredictor	snap-exp/linkpred.h	/^  TLpPredictor() : Z(0.01) { }$/;"	f	class:__OLD__::TLpPredictor
TLpPredictor	snap-exp/linkpred.h	/^class TLpPredictor {$/;"	c
TLpPredictor	snap-exp/linkpred.h	/^class TLpPredictor {$/;"	c	namespace:__OLD__
TLss	glib-core/bd.h	/^class TLss{$/;"	c
TLst	glib-core/ds.h	/^  TLst(): Nds(0), FirstNd(NULL), LastNd(NULL){}$/;"	f	class:TLst
TLst	glib-core/ds.h	/^TLst<TVal>::TLst(TSIn& SIn):$/;"	f	class:TLst
TLst	glib-core/ds.h	/^class TLst{$/;"	c
TLstNd	glib-core/ds.h	/^  TLstNd(): PrevNd(NULL), NextNd(NULL), Val(){}$/;"	f	class:TLstNd
TLstNd	glib-core/ds.h	/^  TLstNd(TLstNd* _PrevNd, TLstNd* _NextNd, const TVal& _Val):$/;"	f	class:TLstNd
TLstNd	glib-core/ds.h	/^class TLstNd{$/;"	c
TLxChDef	glib-core/lx.cpp	/^TLxChDef::TLxChDef(const TLxChDefTy& ChDefTy):$/;"	f	class:TLxChDef
TLxChDef	glib-core/lx.h	/^  TLxChDef(TSIn& SIn): ChTyV(SIn), UcChV(SIn){}$/;"	f
TLxChDefTy	glib-core/lx.h	/^typedef enum {lcdtUsAscii, lcdtYuAscii} TLxChDefTy;$/;"	t	typeref:enum:__anon23
TLxChTy	glib-core/lx.h	/^typedef enum {lctUndef, lctSpace, lctNum, lctAlpha, lctSSym, lctTerm} TLxChTy;$/;"	t	typeref:enum:__anon22
TMAGAffMtx	snap-adv/mag.cpp	/^TMAGAffMtx::TMAGAffMtx(const TFltV& SeedMatrix) : SeedMtx(SeedMatrix) {$/;"	f	class:TMAGAffMtx
TMAGAffMtx	snap-adv/mag.h	/^  TMAGAffMtx() : MtxDim(-1), SeedMtx() { }$/;"	f	class:TMAGAffMtx
TMAGAffMtx	snap-adv/mag.h	/^  TMAGAffMtx(const TMAGAffMtx& Kronecker) : MtxDim(Kronecker.MtxDim), SeedMtx(Kronecker.SeedMtx) { }$/;"	f	class:TMAGAffMtx
TMAGAffMtx	snap-adv/mag.h	/^  TMAGAffMtx(const int& Dim) : MtxDim(Dim), SeedMtx(Dim*Dim) { }$/;"	f	class:TMAGAffMtx
TMAGAffMtx	snap-adv/mag.h	/^class TMAGAffMtx {$/;"	c
TMAGAffMtxV	snap-adv/mag.h	/^typedef TVec<TMAGAffMtx> TMAGAffMtxV;$/;"	t
TMAGFitBern	snap-adv/mag.h	/^	TMAGFitBern() : PhiVV(), KnownVV(), Graph(), Param(), ESpeedUp(true), MSpeedUp(true), Debug(false), AvgPhiV(), AvgPhiPairVV(), NormConst(1.0)  { }$/;"	f	class:TMAGFitBern
TMAGFitBern	snap-adv/mag.h	/^	TMAGFitBern(const PNGraph& G, const TStr& InitFNm) : Param(G->GetNodes(), InitFNm), ESpeedUp(true), MSpeedUp(true), Debug(false), NormConst(1.0) {$/;"	f	class:TMAGFitBern
TMAGFitBern	snap-adv/mag.h	/^	TMAGFitBern(const PNGraph& G, const int& NAttrs) : PhiVV(G->GetNodes(), NAttrs), KnownVV(G->GetNodes(), NAttrs), Graph(G), Param(G->GetNodes(), NAttrs), ESpeedUp(true), MSpeedUp(true), Debug(false), AvgPhiV(NAttrs), AvgPhiPairVV(NAttrs, NAttrs), NormConst(1.0) { }$/;"	f	class:TMAGFitBern
TMAGFitBern	snap-adv/mag.h	/^class TMAGFitBern {$/;"	c
TMAGNodeBern	snap-adv/mag.h	/^	TMAGNodeBern() : MuV(), Dim(-1) {}$/;"	f	class:TMAGNodeBern
TMAGNodeBern	snap-adv/mag.h	/^	TMAGNodeBern(const TFltV& _MuV) : MuV(_MuV), Dim(_MuV.Len()) {}$/;"	f	class:TMAGNodeBern
TMAGNodeBern	snap-adv/mag.h	/^	TMAGNodeBern(const TMAGNodeBern& Dist) : MuV(Dist.MuV), Dim(Dist.Dim) {}$/;"	f	class:TMAGNodeBern
TMAGNodeBern	snap-adv/mag.h	/^	TMAGNodeBern(const int& _Dim, const double& _Mu = 0.5) : MuV(_Dim), Dim(_Dim) {  IAssert(_Mu >= 0.0 && _Mu <= 1.0);  MuV.PutAll(_Mu);  }$/;"	f	class:TMAGNodeBern
TMAGNodeBern	snap-adv/mag.h	/^class TMAGNodeBern {$/;"	c
TMAGNodeBeta	snap-adv/mag.h	/^	TMAGNodeBeta() : AlphaV(), BetaV(), MuV(), Dim(-1), Dirty(true) {}$/;"	f	class:TMAGNodeBeta
TMAGNodeBeta	snap-adv/mag.h	/^	TMAGNodeBeta(const TFltV& _AlphaV, const TFltV& _BetaV) : AlphaV(_AlphaV), BetaV(_BetaV), Dirty(true) {  IAssert(_AlphaV.Len() == _BetaV.Len());  Dim = _AlphaV.Len();  MuV.Gen(Dim);  }$/;"	f	class:TMAGNodeBeta
TMAGNodeBeta	snap-adv/mag.h	/^	TMAGNodeBeta(const int& _Dim, const double& Alpha = 1, const double& Beta = 1) : AlphaV(_Dim), BetaV(_Dim), MuV(_Dim), Dim(_Dim), Dirty(true) {  AlphaV.PutAll(Alpha);  BetaV.PutAll(Beta);  }$/;"	f	class:TMAGNodeBeta
TMAGNodeBeta	snap-adv/mag.h	/^class TMAGNodeBeta {$/;"	c
TMAGNodeSimple	snap-adv/mag.h	/^	TMAGNodeSimple() : Mu(0.5), Dim(-1) {}$/;"	f	class:TMAGNodeSimple
TMAGNodeSimple	snap-adv/mag.h	/^	TMAGNodeSimple(const TMAGNodeSimple& Simple) : Mu(Simple.Mu), Dim(Simple.Dim) {}$/;"	f	class:TMAGNodeSimple
TMAGNodeSimple	snap-adv/mag.h	/^	TMAGNodeSimple(const int& _Dim, const double& _Mu = 0.5) : Dim(_Dim) {  IAssert(_Mu >= 0.0 && _Mu <= 1.0);  Mu = _Mu;  }$/;"	f	class:TMAGNodeSimple
TMAGNodeSimple	snap-adv/mag.h	/^class TMAGNodeSimple {$/;"	c
TMAGParam	snap-adv/mag.h	/^	TMAGParam() : NNodes(-1), NAttrs(-1), NodeAttr(), AffMtxV() {}$/;"	f	class:TMAGParam
TMAGParam	snap-adv/mag.h	/^	TMAGParam(const TMAGParam<TNodeAttr>& MAGParam) : NNodes(MAGParam.NNodes), NAttrs(MAGParam.NAttrs), NodeAttr(MAGParam.NodeAttr), AffMtxV(MAGParam.AffMtxV) {}$/;"	f	class:TMAGParam
TMAGParam	snap-adv/mag.h	/^	TMAGParam(const int& NumNodes, const TMAGAffMtxV& MtxV) : NNodes(NumNodes), NAttrs(MtxV.Len()), NodeAttr(), AffMtxV(MtxV) {}$/;"	f	class:TMAGParam
TMAGParam	snap-adv/mag.h	/^	TMAGParam(const int& NumNodes, const TStr& ConfFNm) : NNodes(NumNodes) { LoadTxt(ConfFNm); }$/;"	f	class:TMAGParam
TMAGParam	snap-adv/mag.h	/^	TMAGParam(const int& NumNodes, const int& NumAttrs) : NNodes(NumNodes), NAttrs(NumAttrs), NodeAttr(), AffMtxV(NumAttrs) {}$/;"	f	class:TMAGParam
TMAGParam	snap-adv/mag.h	/^	TMAGParam(const int& NumNodes, const int& NumAttrs, const TNodeAttr& Dist) : NNodes(NumNodes), NAttrs(NumAttrs), NodeAttr(Dist), AffMtxV(NumAttrs) {}$/;"	f	class:TMAGParam
TMAGParam	snap-adv/mag.h	/^class TMAGParam {$/;"	c
TMBlobBs	glib-core/blobbs.cpp	/^TMBlobBs::TMBlobBs($/;"	f	class:TMBlobBs
TMIn	glib-core/fl.cpp	/^TMIn::TMIn(TSIn& SIn):$/;"	f	class:TMIn
TMIn	glib-core/fl.cpp	/^TMIn::TMIn(const TChA& ChA):$/;"	f	class:TMIn
TMIn	glib-core/fl.cpp	/^TMIn::TMIn(const TStr& Str, bool FromFile):$/;"	f	class:TMIn
TMIn	glib-core/fl.cpp	/^TMIn::TMIn(const char* CStr):$/;"	f	class:TMIn
TMIn	glib-core/fl.cpp	/^TMIn::TMIn(const void* _Bf, const uint64& _BfL, const bool& TakeBf):$/;"	f	class:TMIn
TMIn	glib-core/fl.h	/^class TMIn: public TSIn{$/;"	c
TMMNet	snap-core/mmnet.h	/^  TMMNet() : CRef(), MxModeId(0), MxCrossNetId(0), TModeNetH(), TCrossNetH(), ModeIdToNameH(), ModeNameToIdH(), CrossIdToNameH(), CrossNameToIdH() {}$/;"	f	class:TMMNet
TMMNet	snap-core/mmnet.h	/^  TMMNet(TSIn& SIn) : MxModeId(SIn), MxCrossNetId(SIn), TModeNetH(SIn), TCrossNetH(SIn), ModeIdToNameH(SIn), ModeNameToIdH(SIn), CrossIdToNameH(SIn), CrossNameToIdH(SIn) { $/;"	f	class:TMMNet
TMMNet	snap-core/mmnet.h	/^  TMMNet(const TMMNet& OtherTMMNet) : MxModeId(OtherTMMNet.MxModeId), MxCrossNetId(OtherTMMNet.MxCrossNetId), TModeNetH(OtherTMMNet.TModeNetH), $/;"	f	class:TMMNet
TMMNet	snap-core/mmnet.h	/^class TMMNet {$/;"	c
TMNet	snap-exp/mmgraph-exp.h	/^  TMNet() : CRef(), MxEId(0), NTypeH(), ETypeH(), TypeNodeV(), EdgeH(), Sz(0), InETypes(), OutETypes(),$/;"	f	class:TMNet
TMNet	snap-exp/mmgraph-exp.h	/^  TMNet(const TMNet& Graph) : MxEId(Graph.MxEId),$/;"	f	class:TMNet
TMNet	snap-exp/mmgraph-exp.h	/^class TMNet {$/;"	c
TMNodeI	snap-exp/mmgraph-exp.h	/^    TMNodeI() : VecI(), VecEndI(), HashI(), Graph(NULL) { }$/;"	f	class:TMNet::TMNodeI
TMNodeI	snap-exp/mmgraph-exp.h	/^    TMNodeI(const TMNodeI& NodeI) : VecI(NodeI.VecI), VecEndI(NodeI.VecEndI), HashI(NodeI.HashI), Graph(NodeI.Graph) { }$/;"	f	class:TMNet::TMNodeI
TMNodeI	snap-exp/mmgraph-exp.h	/^    TMNodeI(const TTypeIter& TypeIter, const THashIter& NodeIter, const TMNet* GraphPt)$/;"	f	class:TMNet::TMNodeI
TMNodeI	snap-exp/mmgraph-exp.h	/^    TMNodeI(const TTypeIter& TypeIter, const TMNet* GraphPt) : VecI(TypeIter), VecEndI(GraphPt->TypeNodeV.EndI()), Graph(GraphPt) {$/;"	f	class:TMNet::TMNodeI
TMNodeI	snap-exp/mmgraph-exp.h	/^  class TMNodeI {$/;"	c	class:TMNet
TMOut	glib-core/fl.cpp	/^TMOut::TMOut(char* _Bf, const int& _MxBfL):$/;"	f	class:TMOut
TMOut	glib-core/fl.cpp	/^TMOut::TMOut(const int& _MxBfL):$/;"	f	class:TMOut
TMOut	glib-core/fl.h	/^class TMOut: public TSOut{$/;"	c
TMVNet	snap-exp/mmgraph-exp.h	/^typedef TMNet<TMVNode> TMVNet;$/;"	t
TMVNode	snap-exp/mmgraph-exp.h	/^  TMVNode() : TypeId(-1), Id(-1), InEIdV(), OutEIdV(), InETypeIdV(), OutETypeIdV() { }$/;"	f	class:TMVNode
TMVNode	snap-exp/mmgraph-exp.h	/^  TMVNode(TSIn& SIn) : TypeId(SIn), Id(SIn), InEIdV(SIn), OutEIdV(SIn), InETypeIdV(SIn), OutETypeIdV(SIn) { }$/;"	f	class:TMVNode
TMVNode	snap-exp/mmgraph-exp.h	/^  TMVNode(const TMVNode& Node) : TypeId(Node.TypeId), Id(Node.Id), InEIdV(Node.InEIdV), OutEIdV(Node.OutEIdV),$/;"	f	class:TMVNode
TMVNode	snap-exp/mmgraph-exp.h	/^  TMVNode(const TMVNode& Node, const TIntV& InETypeIdV, const TIntV& OutETypeIdV) :$/;"	f	class:TMVNode
TMVNode	snap-exp/mmgraph-exp.h	/^  TMVNode(const int& NTypeId, const int& NId) : TypeId(NTypeId), Id(NId), InEIdV(), OutEIdV(), InETypeIdV(), OutETypeIdV() { }$/;"	f	class:TMVNode
TMVNode	snap-exp/mmgraph-exp.h	/^class TMVNode {$/;"	c
TMaMaEdge	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    TMaMaEdge() {$/;"	f	class:TMatchingMachine::TMaMaEdge
TMaMaEdge	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    TMaMaEdge(int NSource, int NTarget, TEdgeData* NAttr, int NId) {$/;"	f	class:TMatchingMachine::TMaMaEdge
TMaMaEdge	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  class TMaMaEdge {$/;"	c	class:TMatchingMachine
TMaMaEdge	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    TMaMaEdge() {$/;"	f	class:TMatchingMachine::TMaMaEdge
TMaMaEdge	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    TMaMaEdge(int NSource, int NTarget, TEdgeData* NAttr) {$/;"	f	class:TMatchingMachine::TMaMaEdge
TMaMaEdge	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  class TMaMaEdge {$/;"	c	class:TMatchingMachine
TMamaParent	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	g
TMamaParent	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	g
TMatch	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMatch { mIso, mIndSub, mMono };$/;"	g
TMatch	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMatch { mIso, mMono, mInd};$/;"	g
TMatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMatchListener() { MatchCount = 0; }$/;"	f	class:TMatchListener
TMatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TMatchListener {$/;"	c
TMatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMatchListener() { MatchCount = 0; }$/;"	f	class:TMatchListener
TMatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TMatchListener {$/;"	c
TMatchingMachine	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TMatchingMachine(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Query,$/;"	f	class:TMatchingMachine
TMatchingMachine	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TMatchingMachine {$/;"	c
TMatchingMachine	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TMatchingMachine(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &Query) {$/;"	f	class:TMatchingMachine
TMatchingMachine	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TMatchingMachine {$/;"	c
TMath	glib-core/xmath.h	/^class TMath{$/;"	c
TMatrix	glib-core/linalg.h	/^    TMatrix(): Transposed(false) {}$/;"	f	class:TMatrix
TMatrix	glib-core/linalg.h	/^class TMatrix {$/;"	c
TMaxPriorityQueue	glib-core/priorityqueue.h	/^  TMaxPriorityQueue() {}$/;"	f	class:TMaxPriorityQueue
TMaxPriorityQueue	glib-core/priorityqueue.h	/^class TMaxPriorityQueue {$/;"	c
TMd5	glib-core/md5.h	/^  TMd5(){Init();}$/;"	f
TMd5	glib-core/md5.h	/^  TMd5(TSIn&){Fail;}$/;"	f
TMd5	glib-core/md5.h	/^  TMd5(const PSIn& SIn){Init(); Add(SIn); Def();}$/;"	f
TMd5	glib-core/md5.h	/^  UndefCopyAssign(TMd5);$/;"	v
TMd5Sig	glib-core/md5.cpp	/^TMd5Sig::TMd5Sig(const PSIn& SIn){$/;"	f	class:TMd5Sig
TMd5Sig	glib-core/md5.cpp	/^TMd5Sig::TMd5Sig(const TChA& ChA) {$/;"	f	class:TMd5Sig
TMd5Sig	glib-core/md5.cpp	/^TMd5Sig::TMd5Sig(const TMem& Mem){$/;"	f	class:TMd5Sig
TMd5Sig	glib-core/md5.cpp	/^TMd5Sig::TMd5Sig(const TStr& Str){$/;"	f	class:TMd5Sig
TMd5Sig	glib-core/md5.cpp	/^TMd5Sig::TMd5Sig(const char* CStr) {$/;"	f	class:TMd5Sig
TMem	glib-core/dt.cpp	/^TMem::TMem(const TStr& Str):$/;"	f	class:TMem
TMem	glib-core/dt.h	/^  TMem(const TMem& Mem):$/;"	f
TMem	glib-core/dt.h	/^  TMem(const int& _MxBfL=0):$/;"	f
TMem	glib-core/dt.h	/^  TMem(const void* _Bf, const int& _BfL):$/;"	f
TMem	glib-core/dt.h	/^  explicit TMem(TSIn& SIn){$/;"	f
TMemIn	glib-core/dt.cpp	/^TMemIn::TMemIn(const TMem& _Mem, const int& _BfC):$/;"	f	class:TMemIn
TMemOut	glib-core/dt.cpp	/^TMemOut::TMemOut(const PMem& _Mem): TSBase("Output-Memory"), TSOut("Output-Memory"), Mem(_Mem){}$/;"	f	class:TMemOut
TMemeNet	snap-exp/memenet.h	/^  TMemeNet(TSIn& SIn) : TNet(SIn), QtStr(SIn) { }$/;"	f	class:TMemeNet
TMemeNet	snap-exp/memenet.h	/^  TMemeNet(const TStr& QuoteStr=TStr()) : QtStr(QuoteStr) { } $/;"	f	class:TMemeNet
TMemeNet	snap-exp/memenet.h	/^class TMemeNet : public TNodeNet<TMemeNetDat> { \/\/ node id == url id$/;"	c
TMemeNetBs	snap-exp/memenet.h	/^  TMemeNetBs() { }$/;"	f	class:TMemeNetBs
TMemeNetBs	snap-exp/memenet.h	/^  TMemeNetBs(TSIn& SIn) : UrlH(SIn), QtIdNetH(SIn) { }$/;"	f	class:TMemeNetBs
TMemeNetBs	snap-exp/memenet.h	/^class TMemeNetBs { $/;"	c
TMemeNetDat	snap-exp/memenet.h	/^  TMemeNetDat() : UrlId(-1), Tm(), QtIdV(), UrlTy(utUndef) { }$/;"	f	class:TMemeNetDat
TMemeNetDat	snap-exp/memenet.h	/^  TMemeNetDat(TSIn& SIn) : UrlId(SIn), Tm(SIn), QtIdV(SIn), UrlTy(utUndef) { UrlTy=TUrlTy(TInt(SIn).Val);}$/;"	f	class:TMemeNetDat
TMemeNetDat	snap-exp/memenet.h	/^class TMemeNetDat {$/;"	c
TMemesDataLoader	snap-exp/memes.h	/^  TMemesDataLoader(const TStr& FNmWc, const bool& IsWc=true) {$/;"	f	class:TMemesDataLoader
TMemesDataLoader	snap-exp/memes.h	/^class TMemesDataLoader {$/;"	c
TModeNet	snap-core/mmnet.h	/^  TModeNet() : TNEANet(), ModeId(-1), MMNet(), NeighborTypes() { }$/;"	f	class:TModeNet
TModeNet	snap-core/mmnet.h	/^  TModeNet(TSIn& SIn) : TNEANet(SIn), ModeId(SIn), MMNet(), NeighborTypes(SIn) { }$/;"	f	class:TModeNet
TModeNet	snap-core/mmnet.h	/^  TModeNet(const TModeNet& Graph) :  TNEANet(true, Graph), ModeId(Graph.ModeId), MMNet(Graph.MMNet), NeighborTypes(Graph.NeighborTypes) { }$/;"	f	class:TModeNet
TModeNet	snap-core/mmnet.h	/^  TModeNet(const TModeNet& Graph, bool isSubModeGraph) : TNEANet(Graph, isSubModeGraph), ModeId(Graph.ModeId), MMNet(), NeighborTypes() {}$/;"	f	class:TModeNet
TModeNet	snap-core/mmnet.h	/^  TModeNet(const int& TypeId) : TNEANet(), ModeId(TypeId), MMNet(), NeighborTypes() { }$/;"	f	class:TModeNet
TModeNet	snap-core/mmnet.h	/^  explicit TModeNet(const int& Nodes, const int& Edges) : TNEANet(Nodes, Edges),$/;"	f	class:TModeNet
TModeNet	snap-core/mmnet.h	/^  explicit TModeNet(const int& Nodes, const int& Edges, const int& TypeId) : TNEANet(Nodes, Edges),$/;"	f	class:TModeNet
TModeNet	snap-core/mmnet.h	/^class TModeNet : public TNEANet {$/;"	c
TModeNetH	snap-core/mmnet.h	/^  THash<TInt, TModeNet> TModeNetH;$/;"	m	class:TMMNet
TModeNetI	snap-core/mmnet.h	/^    TModeNetI() : ModeNetHI(), Graph(NULL) { }$/;"	f	class:TMMNet::TModeNetI
TModeNetI	snap-core/mmnet.h	/^    TModeNetI(const THashIter& ModeNetHIter, const TMMNet* GraphPt) : ModeNetHI(ModeNetHIter), Graph(GraphPt) { }$/;"	f	class:TMMNet::TModeNetI
TModeNetI	snap-core/mmnet.h	/^    TModeNetI(const TModeNetI& ModeNetI) : ModeNetHI(ModeNetI.ModeNetHI), Graph(ModeNetI.Graph) { }$/;"	f	class:TMMNet::TModeNetI
TModeNetI	snap-core/mmnet.h	/^  class TModeNetI {$/;"	c	class:TMMNet
TModel	snap-adv/cascdynetinf.h	/^} TModel;$/;"	t	typeref:enum:__anon58
TMom	glib-core/xmath.cpp	/^TMom::TMom(const TFltV& _ValV):$/;"	f	class:TMom
TMom	glib-core/xmath.h	/^  TMom():$/;"	f
TMom	glib-core/xmath.h	/^  TMom(TSIn& SIn):$/;"	f
TMom	glib-core/xmath.h	/^  TMom(const TMom& Mom):$/;"	f
TMovieTy	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	t	typeref:enum:__anon3
TNComplicatedGraph	test/test-alg.cpp	/^  PNGraph TNComplicatedGraph;$/;"	m	class:GraphTest	file:
TNComplicatedGraphWithLoop	test/test-alg.cpp	/^  PNGraph TNComplicatedGraphWithLoop;$/;"	m	class:GraphTest	file:
TNEANet	snap-core/network.h	/^  TNEANet() : CRef(), MxNId(0), MxEId(0), NodeH(), EdgeH(),$/;"	f	class:TNEANet
TNEANet	snap-core/network.h	/^  TNEANet(TSIn& SIn) : MxNId(SIn), MxEId(SIn), NodeH(SIn), EdgeH(SIn),$/;"	f	class:TNEANet
TNEANet	snap-core/network.h	/^  TNEANet(bool copyAll, const TNEANet& Graph) : MxNId(Graph.MxNId), MxEId(Graph.MxEId),$/;"	f	class:TNEANet
TNEANet	snap-core/network.h	/^  TNEANet(const TNEANet& Graph) : MxNId(Graph.MxNId), MxEId(Graph.MxEId),$/;"	f	class:TNEANet
TNEANet	snap-core/network.h	/^  TNEANet(const TNEANet& Graph, bool modeSubGraph) : MxNId(Graph.MxNId), MxEId(Graph.MxEId),$/;"	f	class:TNEANet
TNEANet	snap-core/network.h	/^  explicit TNEANet(const int& Nodes, const int& Edges) : CRef(),$/;"	f	class:TNEANet
TNEANet	snap-core/network.h	/^class TNEANet {$/;"	c
TNEANetMP	snap-core/networkmp.h	/^  TNEANetMP() : CRef(), MxNId(0), MxEId(0), NodeH(), EdgeH(),$/;"	f	class:TNEANetMP
TNEANetMP	snap-core/networkmp.h	/^  TNEANetMP(TSIn& SIn) : MxNId(SIn), MxEId(SIn), NodeH(SIn), EdgeH(SIn),$/;"	f	class:TNEANetMP
TNEANetMP	snap-core/networkmp.h	/^  TNEANetMP(const TNEANetMP& Graph) : MxNId(Graph.MxNId), MxEId(Graph.MxEId),$/;"	f	class:TNEANetMP
TNEANetMP	snap-core/networkmp.h	/^  explicit TNEANetMP(const int& Nodes, const int& Edges) : CRef(),$/;"	f	class:TNEANetMP
TNEANetMP	snap-core/networkmp.h	/^class TNEANetMP {$/;"	c
TNEComplicatedGraph	test/test-alg.cpp	/^  PNEGraph TNEComplicatedGraph;$/;"	m	class:GraphTest	file:
TNEComplicatedGraphWithLoop	test/test-alg.cpp	/^  PNEGraph TNEComplicatedGraphWithLoop;$/;"	m	class:GraphTest	file:
TNEGraph	snap-core/graph.h	/^  TNEGraph() : CRef(), MxNId(0), MxEId(0) { }$/;"	f	class:TNEGraph
TNEGraph	snap-core/graph.h	/^  TNEGraph(TSIn& SIn) : MxNId(SIn), MxEId(SIn), NodeH(SIn), EdgeH(SIn) { }$/;"	f	class:TNEGraph
TNEGraph	snap-core/graph.h	/^  TNEGraph(const TNEGraph& Graph) : MxNId(Graph.MxNId), MxEId(Graph.MxEId), NodeH(Graph.NodeH), EdgeH(Graph.EdgeH) { }$/;"	f	class:TNEGraph
TNEGraph	snap-core/graph.h	/^  explicit TNEGraph(const int& Nodes, const int& Edges) : CRef(), MxNId(0), MxEId(0) { Reserve(Nodes, Edges); }$/;"	f	class:TNEGraph
TNEGraph	snap-core/graph.h	/^class TNEGraph {$/;"	c
TNELoopGraph	test/test-alg.cpp	/^  PNEGraph TNELoopGraph;$/;"	m	class:GraphTest	file:
TNEReverseTree	test/test-alg.cpp	/^  PNEGraph TNEReverseTree;$/;"	m	class:GraphTest	file:
TNEq	glib-core/bd.h	/^class TNEq{$/;"	c
TNGraph	snap-core/graph.h	/^  TNGraph() : CRef(), MxNId(0), NodeH() { }$/;"	f	class:TNGraph
TNGraph	snap-core/graph.h	/^  TNGraph(TSIn& SIn) : MxNId(SIn), NodeH(SIn) { }$/;"	f	class:TNGraph
TNGraph	snap-core/graph.h	/^  TNGraph(const TNGraph& Graph) : MxNId(Graph.MxNId), NodeH(Graph.NodeH) { }$/;"	f	class:TNGraph
TNGraph	snap-core/graph.h	/^  explicit TNGraph(const int& Nodes, const int& Edges) : MxNId(0) { Reserve(Nodes, Edges); }$/;"	f	class:TNGraph
TNGraph	snap-core/graph.h	/^class TNGraph {$/;"	c
TNGraphMP	snap-core/graphmp.h	/^  TNGraphMP() : CRef(), MxNId(0), NodeH() { }$/;"	f	class:TNGraphMP
TNGraphMP	snap-core/graphmp.h	/^  TNGraphMP(TSIn& SIn) : MxNId(SIn), NodeH(SIn) { }$/;"	f	class:TNGraphMP
TNGraphMP	snap-core/graphmp.h	/^  TNGraphMP(const TNGraphMP& Graph) : MxNId(Graph.MxNId), NodeH(Graph.NodeH) { }$/;"	f	class:TNGraphMP
TNGraphMP	snap-core/graphmp.h	/^  explicit TNGraphMP(const int& Nodes, const int& Edges) : MxNId(0) { Reserve(Nodes, Edges); }$/;"	f	class:TNGraphMP
TNGraphMP	snap-core/graphmp.h	/^class TNGraphMP {$/;"	c
TNGraphMtx	snap-core/gsvd.cpp	/^TNGraphMtx::TNGraphMtx(const PNGraph& GraphPt) : Graph() { $/;"	f	class:TNGraphMtx
TNGraphMtx	snap-core/gsvd.h	/^  TNGraphMtx(const TNGraphMtx& GraphMtx) : Graph(GraphMtx.Graph) { }$/;"	f	class:TNGraphMtx
TNGraphMtx	snap-core/gsvd.h	/^class TNGraphMtx : public TMatrix {$/;"	c
TNIBs	snap-adv/cascdynetinf.h	/^  TNIBs( ) { }$/;"	f	class:TNIBs
TNIBs	snap-adv/cascdynetinf.h	/^  TNIBs(TSIn& SIn) : CascH(SIn), NodeNmH(SIn), CascPerEdge(SIn), InferredNetwork(SIn) { Model = EXP; }$/;"	f	class:TNIBs
TNIBs	snap-adv/cascdynetinf.h	/^class TNIBs {$/;"	c
TNIdDatPrV	snap-core/network.h	/^  typedef TVec<TPair<TInt, TEdgeData> > TNIdDatPrV;$/;"	t	class:TNodeEDatNet
TNLoopGraph	test/test-alg.cpp	/^  PNGraph TNLoopGraph;$/;"	m	class:GraphTest	file:
TNReverseTree	test/test-alg.cpp	/^  PNGraph TNReverseTree;$/;"	m	class:GraphTest	file:
TNSException	glib-core/linalg.h	/^    TNSException(const TStr& Msg): TExcept(Msg) {}$/;"	f	class:TNSException
TNSException	glib-core/linalg.h	/^class TNSException : public TExcept {$/;"	c
TNcpGraphsBase	snap-adv/ncp.cpp	/^TNcpGraphsBase::TNcpGraphsBase(TSIn& SIn) : GNmV(SIn), GSizeV(SIn), WhiskerV(SIn), $/;"	f	class:TNcpGraphsBase
TNcpGraphsBase	snap-adv/ncp.cpp	/^TNcpGraphsBase::TNcpGraphsBase(const TStr& FNmWc) {$/;"	f	class:TNcpGraphsBase
TNcpGraphsBase	snap-adv/ncp.h	/^class TNcpGraphsBase {$/;"	c
TNet	snap-core/bignet.h	/^  typedef TBigNet<TNodeData, IsDir> TNet;$/;"	t	class:TBigNet
TNet	snap-core/graph.h	/^  typedef TBPGraph TNet;$/;"	t	class:TBPGraph
TNet	snap-core/graph.h	/^  typedef TNEGraph TNet;$/;"	t	class:TNEGraph
TNet	snap-core/graph.h	/^  typedef TNGraph TNet;$/;"	t	class:TNGraph
TNet	snap-core/graph.h	/^  typedef TUNGraph TNet;$/;"	t	class:TUNGraph
TNet	snap-core/graphmp.h	/^  typedef TNGraphMP TNet;$/;"	t	class:TNGraphMP
TNet	snap-core/network.h	/^  typedef TDirNet TNet;$/;"	t	class:TDirNet
TNet	snap-core/network.h	/^  typedef TNEANet TNet;$/;"	t	class:TNEANet
TNet	snap-core/network.h	/^  typedef TNodeEDatNet<TNodeData, TEdgeData> TNet;$/;"	t	class:TNodeEDatNet
TNet	snap-core/network.h	/^  typedef TNodeEdgeNet<TNodeData, TEdgeData> TNet;$/;"	t	class:TNodeEdgeNet
TNet	snap-core/network.h	/^  typedef TNodeNet<TNodeData> TNet;$/;"	t	class:TNodeNet
TNet	snap-core/network.h	/^  typedef TUndirNet TNet;$/;"	t	class:TUndirNet
TNet	snap-core/networkmp.h	/^  typedef TNEANetMP TNet;$/;"	t	class:TNEANetMP
TNet	snap-core/timenet.h	/^  typedef TNodeEdgeNet<TSecTm, TSecTm> TNet;$/;"	t	class:TTimeNENet
TNet	snap-core/timenet.h	/^  typedef TNodeNet<TSecTm> TNet;$/;"	t	class:TTimeNet
TNet	snap-exp/imdbnet.h	/^  typedef TNodeNet<TImdbNode> TNet;$/;"	t	class:TImdbNet
TNet	snap-exp/mmgraph-exp.h	/^  typedef TMNet TNet;$/;"	t	class:TMNet
TNetConstraint	snap-core/triad.h	/^TNetConstraint<PGraph>::TNetConstraint(const PGraph& GraphPt, const bool& CalcaAll) : Graph(GraphPt) {$/;"	f	class:TNetConstraint
TNetConstraint	snap-core/triad.h	/^class TNetConstraint {$/;"	c
TNetInfBs	snap-adv/cascnetinf.h	/^  TNetInfBs( ) { BoundOn = false; CompareGroundTruth=false; }$/;"	f	class:TNetInfBs
TNetInfBs	snap-adv/cascnetinf.h	/^  TNetInfBs(TSIn& SIn) : CascV(SIn), NodeNmH(SIn) { }$/;"	f	class:TNetInfBs
TNetInfBs	snap-adv/cascnetinf.h	/^  TNetInfBs(bool bo, bool cgt) { BoundOn=bo; CompareGroundTruth=cgt; }$/;"	f	class:TNetInfBs
TNetInfBs	snap-adv/cascnetinf.h	/^class TNetInfBs {$/;"	c
TNetMM	snap-core/mmnet.h	/^  typedef TModeNet TNetMM;$/;"	t	class:TModeNet
TNode	glib-core/unicode.h	/^		TNode() : child(-1), sib(-1), terminal(false) { }$/;"	f	class:TUniTrie::TNode
TNode	glib-core/unicode.h	/^		TNode(const TItem& item_, const int child_, const int sib_, const bool terminal_) : item(item_), child(child_), sib(sib_), terminal(terminal_) { }$/;"	f	class:TUniTrie::TNode
TNode	glib-core/unicode.h	/^	class TNode {$/;"	c	class:TUniTrie
TNode	snap-core/bignet.h	/^    TNode() : InVId(-1), OutVId(-1), Dat() { }$/;"	f	class:TBigNet::TNode
TNode	snap-core/bignet.h	/^    TNode(TSIn& SIn) : InVId(SIn), OutVId(SIn), Dat(SIn) { }$/;"	f	class:TBigNet::TNode
TNode	snap-core/bignet.h	/^    TNode(const TNode& Node) : InVId(Node.InVId), OutVId(Node.OutVId), Dat(Node.Dat) { }$/;"	f	class:TBigNet::TNode
TNode	snap-core/bignet.h	/^    TNode(const int& InVecId, const int& OutVecId) : InVId(InVecId), OutVId(OutVecId), Dat() { }$/;"	f	class:TBigNet::TNode
TNode	snap-core/bignet.h	/^    TNode(const int& InVecId, const int& OutVecId, const TNodeDat& NodeDat) :$/;"	f	class:TBigNet::TNode
TNode	snap-core/bignet.h	/^  class TNode {$/;"	c	class:TBigNet
TNode	snap-core/graph.h	/^    TNode() : Id(-1), InEIdV(), OutEIdV() { }$/;"	f	class:TNEGraph::TNode
TNode	snap-core/graph.h	/^    TNode() : Id(-1), InNIdV(), OutNIdV() { }$/;"	f	class:TNGraph::TNode
TNode	snap-core/graph.h	/^    TNode() : Id(-1), NIdV() { }$/;"	f	class:TUNGraph::TNode
TNode	snap-core/graph.h	/^    TNode() : Id(-1), NIdV(), NodeTy(bgsUndef) { }$/;"	f	class:TBPGraph::TNode
TNode	snap-core/graph.h	/^    TNode(TSIn& SIn) : Id(SIn), InEIdV(SIn), OutEIdV(SIn) { }$/;"	f	class:TNEGraph::TNode
TNode	snap-core/graph.h	/^    TNode(TSIn& SIn) : Id(SIn), InNIdV(SIn), OutNIdV(SIn) { }$/;"	f	class:TNGraph::TNode
TNode	snap-core/graph.h	/^    TNode(TSIn& SIn) : Id(SIn), NIdV(SIn) { }$/;"	f	class:TUNGraph::TNode
TNode	snap-core/graph.h	/^    TNode(TSIn& SIn) : Id(SIn), NIdV(SIn), NodeTy(bgsUndef) { TInt Ty(SIn); NodeTy=(TNodeTy)Ty.Val; }$/;"	f	class:TBPGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const TNode& Node) : Id(Node.Id), InEIdV(Node.InEIdV), OutEIdV(Node.OutEIdV) { }$/;"	f	class:TNEGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const TNode& Node) : Id(Node.Id), InNIdV(Node.InNIdV), OutNIdV(Node.OutNIdV) { }$/;"	f	class:TNGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const TNode& Node) : Id(Node.Id), NIdV(Node.NIdV) { }$/;"	f	class:TUNGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const TNode& Node) : Id(Node.Id), NIdV(Node.NIdV), NodeTy(Node.NodeTy) { }$/;"	f	class:TBPGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const int& NId) : Id(NId), InEIdV(), OutEIdV() { }$/;"	f	class:TNEGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const int& NId) : Id(NId), InNIdV(), OutNIdV() { }$/;"	f	class:TNGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const int& NId) : Id(NId), NIdV() { }$/;"	f	class:TUNGraph::TNode
TNode	snap-core/graph.h	/^    TNode(const int& NId) : Id(NId), NIdV(), NodeTy(true?bgsLeft:bgsRight) { }$/;"	f	class:TBPGraph::TNode
TNode	snap-core/graph.h	/^  class TNode {$/;"	c	class:TBPGraph
TNode	snap-core/graph.h	/^  class TNode {$/;"	c	class:TNEGraph
TNode	snap-core/graph.h	/^  class TNode {$/;"	c	class:TNGraph
TNode	snap-core/graph.h	/^  class TNode {$/;"	c	class:TUNGraph
TNode	snap-core/graphmp.h	/^    TNode() : Id(-1), InNIdV(), OutNIdV() { }$/;"	f	class:TNGraphMP::TNode
TNode	snap-core/graphmp.h	/^    TNode(TSIn& SIn) : Id(SIn), InNIdV(SIn), OutNIdV(SIn) { }$/;"	f	class:TNGraphMP::TNode
TNode	snap-core/graphmp.h	/^    TNode(const TNode& Node) : Id(Node.Id), InNIdV(Node.InNIdV), OutNIdV(Node.OutNIdV) { }$/;"	f	class:TNGraphMP::TNode
TNode	snap-core/graphmp.h	/^    TNode(const int& NId) : Id(NId), InNIdV(), OutNIdV() { }$/;"	f	class:TNGraphMP::TNode
TNode	snap-core/graphmp.h	/^  class TNode {$/;"	c	class:TNGraphMP
TNode	snap-core/network.h	/^    TNode() : Id(-1), InEIdV(), OutEIdV() { }$/;"	f	class:TNEANet::TNode
TNode	snap-core/network.h	/^    TNode() : Id(-1), InEIdV(), OutEIdV(), NodeDat() { }$/;"	f	class:TNodeEdgeNet::TNode
TNode	snap-core/network.h	/^    TNode() : Id(-1), InNIdV(), OutNIdV() { }$/;"	f	class:TDirNet::TNode
TNode	snap-core/network.h	/^    TNode() : Id(-1), NIdV() { }$/;"	f	class:TUndirNet::TNode
TNode	snap-core/network.h	/^    TNode() : Id(-1), NodeDat(), InNIdV(), OutNIdV() { }$/;"	f	class:TNodeEDatNet::TNode
TNode	snap-core/network.h	/^    TNode() : Id(-1), NodeDat(), InNIdV(), OutNIdV() { }$/;"	f	class:TNodeNet::TNode
TNode	snap-core/network.h	/^    TNode(TSIn& SIn) : Id(SIn), InEIdV(SIn), OutEIdV(SIn) { }$/;"	f	class:TNEANet::TNode
TNode	snap-core/network.h	/^    TNode(TSIn& SIn) : Id(SIn), InEIdV(SIn), OutEIdV(SIn), NodeDat(SIn) { }$/;"	f	class:TNodeEdgeNet::TNode
TNode	snap-core/network.h	/^    TNode(TSIn& SIn) : Id(SIn), InNIdV(SIn), OutNIdV(SIn) { }$/;"	f	class:TDirNet::TNode
TNode	snap-core/network.h	/^    TNode(TSIn& SIn) : Id(SIn), NIdV(SIn) { }$/;"	f	class:TUndirNet::TNode
TNode	snap-core/network.h	/^    TNode(TSIn& SIn) : Id(SIn), NodeDat(SIn), InNIdV(SIn), OutNIdV(SIn) { }$/;"	f	class:TNodeEDatNet::TNode
TNode	snap-core/network.h	/^    TNode(TSIn& SIn) : Id(SIn), NodeDat(SIn), InNIdV(SIn), OutNIdV(SIn) { }$/;"	f	class:TNodeNet::TNode
TNode	snap-core/network.h	/^    TNode(const TNode& Node) : Id(Node.Id), InEIdV(Node.InEIdV), OutEIdV(Node.OutEIdV) { }$/;"	f	class:TNEANet::TNode
TNode	snap-core/network.h	/^    TNode(const TNode& Node) : Id(Node.Id), InEIdV(Node.InEIdV), OutEIdV(Node.OutEIdV), NodeDat(Node.NodeDat) { }$/;"	f	class:TNodeEdgeNet::TNode
TNode	snap-core/network.h	/^    TNode(const TNode& Node) : Id(Node.Id), InNIdV(Node.InNIdV), OutNIdV(Node.OutNIdV) { }$/;"	f	class:TDirNet::TNode
TNode	snap-core/network.h	/^    TNode(const TNode& Node) : Id(Node.Id), NIdV(Node.NIdV) { }$/;"	f	class:TUndirNet::TNode
TNode	snap-core/network.h	/^    TNode(const TNode& Node) : Id(Node.Id), NodeDat(Node.NodeDat), InNIdV(Node.InNIdV), OutNIdV(Node.OutNIdV) { }$/;"	f	class:TNodeEDatNet::TNode
TNode	snap-core/network.h	/^    TNode(const TNode& Node) : Id(Node.Id), NodeDat(Node.NodeDat), InNIdV(Node.InNIdV), OutNIdV(Node.OutNIdV) { }$/;"	f	class:TNodeNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId) : Id(NId), InEIdV(), OutEIdV() { }$/;"	f	class:TNEANet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId) : Id(NId), InEIdV(), OutEIdV(), NodeDat()  { }$/;"	f	class:TNodeEdgeNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId) : Id(NId), InNIdV(), OutNIdV() { }$/;"	f	class:TDirNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId) : Id(NId), NIdV() { }$/;"	f	class:TUndirNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId) : Id(NId), NodeDat(), InNIdV(), OutNIdV() { }$/;"	f	class:TNodeEDatNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId) : Id(NId), NodeDat(), InNIdV(), OutNIdV() { }$/;"	f	class:TNodeNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId, const TNodeData& NodeData) : Id(NId), InEIdV(), OutEIdV(), NodeDat(NodeData) { }$/;"	f	class:TNodeEdgeNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId, const TNodeData& NodeData) : Id(NId), NodeDat(NodeData), InNIdV(), OutNIdV() { }$/;"	f	class:TNodeEDatNet::TNode
TNode	snap-core/network.h	/^    TNode(const int& NId, const TNodeData& NodeData) : Id(NId), NodeDat(NodeData), InNIdV(), OutNIdV() { }$/;"	f	class:TNodeNet::TNode
TNode	snap-core/network.h	/^  class TNode {$/;"	c	class:TDirNet
TNode	snap-core/network.h	/^  class TNode {$/;"	c	class:TNEANet
TNode	snap-core/network.h	/^  class TNode {$/;"	c	class:TNodeEDatNet
TNode	snap-core/network.h	/^  class TNode {$/;"	c	class:TNodeEdgeNet
TNode	snap-core/network.h	/^  class TNode {$/;"	c	class:TNodeNet
TNode	snap-core/network.h	/^  class TNode {$/;"	c	class:TUndirNet
TNode	snap-core/networkmp.h	/^    TNode() : Id(-1), InEIdV(), OutEIdV() { }$/;"	f	class:TNEANetMP::TNode
TNode	snap-core/networkmp.h	/^    TNode(TSIn& SIn) : Id(SIn), InEIdV(SIn), OutEIdV(SIn) { }$/;"	f	class:TNEANetMP::TNode
TNode	snap-core/networkmp.h	/^    TNode(const TNode& Node) : Id(Node.Id), InEIdV(Node.InEIdV), OutEIdV(Node.OutEIdV) { }$/;"	f	class:TNEANetMP::TNode
TNode	snap-core/networkmp.h	/^    TNode(const int& NId) : Id(NId), InEIdV(), OutEIdV() { }$/;"	f	class:TNEANetMP::TNode
TNode	snap-core/networkmp.h	/^  class TNode {$/;"	c	class:TNEANetMP
TNode	snap-exp/graphmp-exp.h	/^    TNode() : Id(-1), NIdV() {}$/;"	f	class:TUNGraphMP::TNode
TNode	snap-exp/graphmp-exp.h	/^    TNode(TSIn& SIn) : Id(SIn), NIdV(SIn) { }$/;"	f	class:TUNGraphMP::TNode
TNode	snap-exp/graphmp-exp.h	/^    TNode(const TNode& Node) : Id(Node.Id), NIdV(Node.NIdV) { }$/;"	f	class:TUNGraphMP::TNode
TNode	snap-exp/graphmp-exp.h	/^    TNode(const int& NId) : Id(NId), NIdV() { }$/;"	f	class:TUNGraphMP::TNode
TNode	snap-exp/graphmp-exp.h	/^  class TNode {$/;"	c	class:TUNGraphMP
TNodeDat	snap-core/bignet.h	/^  typedef TNodeData TNodeDat;$/;"	t	class:TBigNet
TNodeDat	snap-core/network.h	/^  typedef TNodeData TNodeDat;$/;"	t	class:TNodeEDatNet
TNodeDat	snap-core/network.h	/^  typedef TNodeData TNodeDat;$/;"	t	class:TNodeEdgeNet
TNodeDat	snap-core/network.h	/^  typedef TNodeData TNodeDat;$/;"	t	class:TNodeNet
TNodeEDatNet	snap-core/network.h	/^  TNodeEDatNet() : CRef(), MxNId(0), NodeH() { }$/;"	f	class:TNodeEDatNet
TNodeEDatNet	snap-core/network.h	/^  TNodeEDatNet(TSIn& SIn) : MxNId(SIn), NodeH(SIn) { }$/;"	f	class:TNodeEDatNet
TNodeEDatNet	snap-core/network.h	/^  TNodeEDatNet(const TNodeEDatNet& NodeNet) : MxNId(NodeNet.MxNId), NodeH(NodeNet.NodeH) { }$/;"	f	class:TNodeEDatNet
TNodeEDatNet	snap-core/network.h	/^  explicit TNodeEDatNet(const int& Nodes, const int& Edges) : MxNId(0) { Reserve(Nodes, Edges); }$/;"	f	class:TNodeEDatNet
TNodeEDatNet	snap-core/network.h	/^class TNodeEDatNet {$/;"	c
TNodeEdgeNet	snap-core/network.h	/^  TNodeEdgeNet() : CRef(), MxNId(0), MxEId(0) { }$/;"	f	class:TNodeEdgeNet
TNodeEdgeNet	snap-core/network.h	/^  TNodeEdgeNet(TSIn& SIn) : MxNId(SIn), MxEId(SIn), NodeH(SIn), EdgeH(SIn) { }$/;"	f	class:TNodeEdgeNet
TNodeEdgeNet	snap-core/network.h	/^  TNodeEdgeNet(const TNodeEdgeNet& Net) : MxNId(Net.MxNId), MxEId(Net.MxEId), NodeH(Net.NodeH), EdgeH(Net.EdgeH) { }$/;"	f	class:TNodeEdgeNet
TNodeEdgeNet	snap-core/network.h	/^  explicit TNodeEdgeNet(const int& Nodes, const int& Edges) : CRef(), MxNId(0), MxEId(0) { Reserve(Nodes, Edges); }$/;"	f	class:TNodeEdgeNet
TNodeEdgeNet	snap-core/network.h	/^class TNodeEdgeNet {$/;"	c
TNodeGrad	snap-exp/linkpred.h	/^  TNodeGrad() : SumVal(0) { }$/;"	f	struct:TNodeGrad
TNodeGrad	snap-exp/linkpred.h	/^  TNodeGrad(TSIn& SIn) : SumVal(SIn), SumGradV(SIn) { }$/;"	f	struct:TNodeGrad
TNodeGrad	snap-exp/linkpred.h	/^  TNodeGrad(const int& NAttr) : SumVal(0), SumGradV(NAttr) { }$/;"	f	struct:TNodeGrad
TNodeGrad	snap-exp/linkpred.h	/^struct TNodeGrad { \/\/ (value, gradient) pair$/;"	s
TNodeH	snap-core/bignet.h	/^  typedef THash<TInt, TNode> TNodeH; \/\/ use SaveToDisk to convert between the two hash table types$/;"	t	class:TBigNet
TNodeI	snap-core/bignet.h	/^    TNodeI() : NodeHI(), Pool(NULL), InDeg(0), OutDeg(0), InNIdV(NULL), OutNIdV(NULL) { }$/;"	f	class:TBigNet::TNodeI
TNodeI	snap-core/bignet.h	/^    TNodeI(const THashIter& NodeHIter, TVPool *PoolPt) : NodeHI(NodeHIter), Pool(PoolPt) { GetInOutNIdV(); }$/;"	f	class:TBigNet::TNodeI
TNodeI	snap-core/bignet.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI), Pool(NodeI.Pool) { GetInOutNIdV(); }$/;"	f	class:TBigNet::TNodeI
TNodeI	snap-core/bignet.h	/^  class TNodeI {$/;"	c	class:TBigNet
TNodeI	snap-core/graph.h	/^    TNodeI() : LeftHI(), RightHI() { }$/;"	f	class:TBPGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI() : NodeHI() { }$/;"	f	class:TNGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI() : NodeHI() { }$/;"	f	class:TUNGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI() : NodeHI(), Graph(NULL) { }$/;"	f	class:TNEGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const THashIter& LeftHIter, const THashIter& RightHIter) : LeftHI(LeftHIter), RightHI(RightHIter) { }$/;"	f	class:TBPGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const THashIter& NodeHIter) : NodeHI(NodeHIter) { }$/;"	f	class:TNGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const THashIter& NodeHIter) : NodeHI(NodeHIter) { }$/;"	f	class:TUNGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const THashIter& NodeHIter, const TNEGraph* GraphPt) : NodeHI(NodeHIter), Graph(GraphPt) { }$/;"	f	class:TNEGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const TNodeI& NodeI) : LeftHI(NodeI.LeftHI), RightHI(NodeI.RightHI) { }$/;"	f	class:TBPGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI) { }$/;"	f	class:TNGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI) { }$/;"	f	class:TUNGraph::TNodeI
TNodeI	snap-core/graph.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI), Graph(NodeI.Graph) { }$/;"	f	class:TNEGraph::TNodeI
TNodeI	snap-core/graph.h	/^  class TNodeI {$/;"	c	class:TBPGraph
TNodeI	snap-core/graph.h	/^  class TNodeI {$/;"	c	class:TNEGraph
TNodeI	snap-core/graph.h	/^  class TNodeI {$/;"	c	class:TNGraph
TNodeI	snap-core/graph.h	/^  class TNodeI {$/;"	c	class:TUNGraph
TNodeI	snap-core/graphmp.h	/^    TNodeI() : NodeHI() { }$/;"	f	class:TNGraphMP::TNodeI
TNodeI	snap-core/graphmp.h	/^    TNodeI(const THashIter& NodeHIter) : NodeHI(NodeHIter) { }$/;"	f	class:TNGraphMP::TNodeI
TNodeI	snap-core/graphmp.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI) { }$/;"	f	class:TNGraphMP::TNodeI
TNodeI	snap-core/graphmp.h	/^  class TNodeI {$/;"	c	class:TNGraphMP
TNodeI	snap-core/mmnet.h	/^    TNodeI() : TNEANet::TNodeI() { }$/;"	f	class:TModeNet::TNodeI
TNodeI	snap-core/mmnet.h	/^    TNodeI(const THashIter& NodeHIter, const TModeNet* GraphPt) : TNEANet::TNodeI(NodeHIter, GraphPt) { }$/;"	f	class:TModeNet::TNodeI
TNodeI	snap-core/mmnet.h	/^    TNodeI(const TNodeI& NodeI) : TNEANet::TNodeI(NodeI) { }$/;"	f	class:TModeNet::TNodeI
TNodeI	snap-core/mmnet.h	/^  class TNodeI : public TNEANet::TNodeI {$/;"	c	class:TModeNet
TNodeI	snap-core/network.h	/^    TNodeI() : NodeHI() { }$/;"	f	class:TDirNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI() : NodeHI() { }$/;"	f	class:TUndirNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI() : NodeHI(), Graph(NULL) { }$/;"	f	class:TNEANet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI() : NodeHI(), Net(NULL) { }$/;"	f	class:TNodeEDatNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI() : NodeHI(), Net(NULL) { }$/;"	f	class:TNodeEdgeNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI() : NodeHI(), Net(NULL) { }$/;"	f	class:TNodeNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const THashIter& NodeHIter) : NodeHI(NodeHIter) { }$/;"	f	class:TDirNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const THashIter& NodeHIter) : NodeHI(NodeHIter) { }$/;"	f	class:TUndirNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const THashIter& NodeHIter, const TNEANet* GraphPt) : NodeHI(NodeHIter), Graph(GraphPt) { }$/;"	f	class:TNEANet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const THashIter& NodeHIter, const TNodeEDatNet* NetPt) : NodeHI(NodeHIter), Net((TNodeEDatNet *) NetPt) { }$/;"	f	class:TNodeEDatNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const THashIter& NodeHIter, const TNodeEdgeNet* NetPt) : NodeHI(NodeHIter), Net((TNodeEdgeNet *)NetPt) { }$/;"	f	class:TNodeEdgeNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const THashIter& NodeHIter, const TNodeNet* NetPt) : NodeHI(NodeHIter), Net((TNodeNet *) NetPt) { }$/;"	f	class:TNodeNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI) { }$/;"	f	class:TDirNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI) { }$/;"	f	class:TUndirNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI), Graph(NodeI.Graph) { }$/;"	f	class:TNEANet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI), Net(NodeI.Net) { }$/;"	f	class:TNodeEDatNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI), Net(NodeI.Net) { }$/;"	f	class:TNodeEdgeNet::TNodeI
TNodeI	snap-core/network.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI), Net(NodeI.Net) { }$/;"	f	class:TNodeNet::TNodeI
TNodeI	snap-core/network.h	/^  class TNodeI {$/;"	c	class:TDirNet
TNodeI	snap-core/network.h	/^  class TNodeI {$/;"	c	class:TNEANet
TNodeI	snap-core/network.h	/^  class TNodeI {$/;"	c	class:TNodeEDatNet
TNodeI	snap-core/network.h	/^  class TNodeI {$/;"	c	class:TNodeEdgeNet
TNodeI	snap-core/network.h	/^  class TNodeI {$/;"	c	class:TNodeNet
TNodeI	snap-core/network.h	/^  class TNodeI {$/;"	c	class:TUndirNet
TNodeI	snap-core/networkmp.h	/^    TNodeI() : NodeHI(), Graph(NULL) { }$/;"	f	class:TNEANetMP::TNodeI
TNodeI	snap-core/networkmp.h	/^    TNodeI(const THashIter& NodeHIter, const TNEANetMP* GraphPt) : NodeHI(NodeHIter), Graph(GraphPt) { }$/;"	f	class:TNEANetMP::TNodeI
TNodeI	snap-core/networkmp.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI), Graph(NodeI.Graph) { }$/;"	f	class:TNEANetMP::TNodeI
TNodeI	snap-core/networkmp.h	/^  class TNodeI {$/;"	c	class:TNEANetMP
TNodeI	snap-exp/graphmp-exp.h	/^    TNodeI() : NodeHI() { }$/;"	f	class:TUNGraphMP::TNodeI
TNodeI	snap-exp/graphmp-exp.h	/^    TNodeI(const THashIter& NodeHIter) : NodeHI(NodeHIter) { }$/;"	f	class:TUNGraphMP::TNodeI
TNodeI	snap-exp/graphmp-exp.h	/^    TNodeI(const TNodeI& NodeI) : NodeHI(NodeI.NodeHI) { }$/;"	f	class:TUNGraphMP::TNodeI
TNodeI	snap-exp/graphmp-exp.h	/^  class TNodeI {$/;"	c	class:TUNGraphMP
TNodeI	snap-exp/mmgraph-exp.h	/^  typedef TMNodeI<TEdge> TNodeI;$/;"	t	class:TMNet
TNodeInfo	snap-adv/cascdynetinf.h	/^  TNodeInfo() { }$/;"	f	class:TNodeInfo
TNodeInfo	snap-adv/cascdynetinf.h	/^  TNodeInfo(TSIn& SIn) : Name(SIn), Vol(SIn) { }$/;"	f	class:TNodeInfo
TNodeInfo	snap-adv/cascdynetinf.h	/^  TNodeInfo(const TStr& NodeNm, const int& Volume) : Name(NodeNm), Vol(Volume) { }$/;"	f	class:TNodeInfo
TNodeInfo	snap-adv/cascdynetinf.h	/^class TNodeInfo {$/;"	c
TNodeInfo	snap-adv/cascnetinf.h	/^  TNodeInfo() { }$/;"	f	class:TNodeInfo
TNodeInfo	snap-adv/cascnetinf.h	/^  TNodeInfo(TSIn& SIn) : Name(SIn), Vol(SIn) { }$/;"	f	class:TNodeInfo
TNodeInfo	snap-adv/cascnetinf.h	/^  TNodeInfo(const TStr& NodeNm, const int& Volume) : Name(NodeNm), Vol(Volume) { }$/;"	f	class:TNodeInfo
TNodeInfo	snap-adv/cascnetinf.h	/^class TNodeInfo {$/;"	c
TNodeList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TNodeList {$/;"	c
TNodeList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TNodeList {$/;"	c
TNodeNet	snap-core/network.h	/^  TNodeNet() : CRef(), MxNId(0), NodeH() { }$/;"	f	class:TNodeNet
TNodeNet	snap-core/network.h	/^  TNodeNet(TSIn& SIn) : MxNId(SIn), NodeH(SIn) { }$/;"	f	class:TNodeNet
TNodeNet	snap-core/network.h	/^  TNodeNet(const TNodeNet& NodeNet) : MxNId(NodeNet.MxNId), NodeH(NodeNet.NodeH) { }$/;"	f	class:TNodeNet
TNodeNet	snap-core/network.h	/^  explicit TNodeNet(const int& Nodes, const int& Edges) : MxNId(0) { Reserve(Nodes, Edges); }$/;"	f	class:TNodeNet
TNodeNet	snap-core/network.h	/^class TNodeNet {$/;"	c
TNodeSweep	snap-adv/ncp.h	/^    TNodeSweep() {}$/;"	f	class:TLocClustStat::TNodeSweep
TNodeSweep	snap-adv/ncp.h	/^    TNodeSweep(const TNodeSweep& NS) : SeedNId(NS.SeedNId), SweepV(NS.SweepV), PhiV(NS.PhiV) { }$/;"	f	class:TLocClustStat::TNodeSweep
TNodeSweep	snap-adv/ncp.h	/^    TNodeSweep(const int& SeedNode, const TIntV& SweepNIdV, const TFltV& PhiNIdV) :$/;"	f	class:TLocClustStat::TNodeSweep
TNodeSweep	snap-adv/ncp.h	/^  class TNodeSweep {$/;"	c	class:TLocClustStat
TNodeTy	snap-core/graph.h	/^  typedef enum { bgsUndef, bgsLeft, bgsRight, bgsBoth } TNodeTy; \/\/ left or right hand side node$/;"	t	class:TBPGraph	typeref:enum:TBPGraph::__anon103
TNodeType	snap-exp/mmgraph-exp.h	/^    TNodeType() : Id(-1), Name(), MxNId(0), NodeH(){ }$/;"	f	class:TMNet::TNodeType
TNodeType	snap-exp/mmgraph-exp.h	/^    TNodeType(TSIn& SIn) : Id(SIn), Name(SIn), MxNId(SIn), NodeH(SIn) { }$/;"	f	class:TMNet::TNodeType
TNodeType	snap-exp/mmgraph-exp.h	/^    TNodeType(const TNodeType& NodeType) : Id(NodeType.Id), Name(NodeType.Name), MxNId(NodeType.MxNId), NodeH(NodeType.NodeH) { }$/;"	f	class:TMNet::TNodeType
TNodeType	snap-exp/mmgraph-exp.h	/^    TNodeType(const TNodeType& NodeType, const TIntV& InETypeIdV, const TIntV& OutETypeIdV) :$/;"	f	class:TMNet::TNodeType
TNodeType	snap-exp/mmgraph-exp.h	/^    TNodeType(const int& NTypeId, const TStr& NTypeName) : Id(NTypeId), Name(NTypeName), MxNId(0), NodeH(){ }$/;"	f	class:TMNet::TNodeType
TNodeType	snap-exp/mmgraph-exp.h	/^  class TNodeType {$/;"	c	class:TMNet
TNodeV	glib-core/unicode.h	/^	typedef TVec<TNode> TNodeV;$/;"	t	class:TUniTrie
TNotify	glib-core/ut.h	/^  TNotify(){}$/;"	f
TNotifyType	glib-core/ut.h	/^typedef enum TNotifyType_ {ntInfo, ntWarn, ntErr, ntStat} TNotifyType;$/;"	t	typeref:enum:TNotifyType_
TNotifyType_	glib-core/ut.h	/^typedef enum TNotifyType_ {ntInfo, ntWarn, ntErr, ntStat} TNotifyType;$/;"	g
TNumericalStuff	glib-core/linalg.h	/^class TNumericalStuff {$/;"	c
TOLx	glib-core/lx.cpp	/^TOLx::TOLx(const PSOut& _SOut, const TFSet& OptSet, const TLxChDefTy& ChDefTy):$/;"	f	class:TOLx
TObj	glib-core/bd.h	/^  typedef TRec TObj;$/;"	t	class:TPt
TOnExeStop	glib-core/bd.h	/^class TOnExeStop{$/;"	c
TOnExeStopF	glib-core/bd.h	/^  typedef bool (*TOnExeStopF)(char* MsgCStr);$/;"	t	class:TOnExeStop
TOptMethod	snap-adv/cascdynetinf.h	/^} TOptMethod;$/;"	t	typeref:enum:__anon60
TOutAdjList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TOutAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &NNet, int NNodeId):$/;"	f	class:TOutAdjList
TOutAdjList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TOutAdjList : public TNodeList {$/;"	c
TOutAdjList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TOutAdjList(TPt<TNodeEDatNet<TNodeData, TEdgeData> > &NNet, int NNodeId):$/;"	f	class:TOutAdjList
TOutAdjList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TOutAdjList : public TNodeList {$/;"	c
TPHKeyDat	glib-core/hashmp.h	/^  typedef THashMPKeyDat<TKey, TDat> TPHKeyDat;$/;"	t	class:THashMP
TPHKeyDat	glib-core/hashmp.h	/^  typedef THashMPKeyDat<TKey, TDat> TPHKeyDat;$/;"	t	class:THashMPKeyDatI
TPRManager	snap-core/flow.cpp	/^  TPRManager(PNEANet &Net) : Net(Net), CapIndex(0), FlowV(Net->GetMxEId()), ExcessV(Net->GetMxNId()), EdgeNumsV(Net->GetMxNId()), LabelsV(Net->GetMxNId()), LabelCounts(Net->GetNodes() + 1), LabelLimit(0), MaxLabel(Net->GetNodes()), ActiveNodeSet(Net->GetMxNId()), ActiveCount(0) {$/;"	f	class:TSnap::TPRManager
TPRManager	snap-core/flow.cpp	/^class TPRManager {$/;"	c	namespace:TSnap	file:
TPackVec	glib-core/shash.h	/^  TPackVec() : Vals(0), ValT(NULL) { }$/;"	f	class:TPackVec
TPackVec	glib-core/shash.h	/^  TPackVec(const TPackVec& Vec) : Vals(0), ValT(NULL) {$/;"	f	class:TPackVec
TPackVec	glib-core/shash.h	/^  explicit TPackVec(TSIn& SIn): Vals(0), ValT(NULL) { Load(SIn); }$/;"	f	class:TPackVec
TPackVec	glib-core/shash.h	/^  explicit TPackVec(const int& _Vals) : Vals(_Vals) {$/;"	f	class:TPackVec
TPackVec	glib-core/shash.h	/^class TPackVec {$/;"	c
TPair	glib-core/ds.h	/^  TPair(): Val1(), Val2(){}$/;"	f	class:TPair
TPair	glib-core/ds.h	/^  TPair(const TPair& Pair): Val1(Pair.Val1), Val2(Pair.Val2){}$/;"	f	class:TPair
TPair	glib-core/ds.h	/^  TPair(const TVal1& _Val1, const TVal2& _Val2): Val1(_Val1), Val2(_Val2){}$/;"	f	class:TPair
TPair	glib-core/ds.h	/^  explicit TPair(TSIn& SIn): Val1(SIn), Val2(SIn){}$/;"	f	class:TPair
TPair	glib-core/ds.h	/^class TPair{$/;"	c
TPairHashImpl	glib-core/bd.h	/^  typedef TPairHashImpl1 TPairHashImpl;$/;"	t
TPairHashImpl	glib-core/bd.h	/^  typedef TPairHashImpl2 TPairHashImpl;$/;"	t
TPairHashImpl1	glib-core/bd.h	/^class TPairHashImpl1 {$/;"	c
TPairHashImpl2	glib-core/bd.h	/^class TPairHashImpl2 {$/;"	c
TPlotInfo	snap-core/gstat.h	/^  typedef TQuad<TStr, TStr, TStr, TGpScaleTy> TPlotInfo; \/\/ file prefix, x label, y label, scale$/;"	t	class:TGStat
TPredComp	snap-core/table.h	/^typedef enum {LT = 0, LTE, EQ, NEQ, GTE, GT, SUBSTR, SUPERSTR} TPredComp; $/;"	t	typeref:enum:__anon82
TPredOp	snap-core/table.h	/^typedef enum {NOT, AND, OR, NOP} TPredOp; $/;"	t	typeref:enum:__anon81
TPredicate	snap-core/table.h	/^		TPredicate() : IntVars(), FltVars(), StrVars() {}$/;"	f	class:TPredicate
TPredicate	snap-core/table.h	/^		TPredicate(TPredicateNode* R) : IntVars(), FltVars(), StrVars(), Root(R) {}$/;"	f	class:TPredicate
TPredicate	snap-core/table.h	/^		TPredicate(const TPredicate& Pred) : IntVars(Pred.IntVars), FltVars(Pred.FltVars), StrVars(Pred.StrVars), Root(Pred.Root) {}$/;"	f	class:TPredicate
TPredicate	snap-core/table.h	/^class TPredicate {$/;"	c
TPredicateNode	snap-core/table.h	/^		TPredicateNode(): Op(NOP), Result(false), Atom(), Parent(NULL), Left(NULL), $/;"	f	class:TPredicateNode
TPredicateNode	snap-core/table.h	/^		TPredicateNode(TPredOp Opr): Op(Opr), Result(false), Atom(), Parent(NULL), $/;"	f	class:TPredicateNode
TPredicateNode	snap-core/table.h	/^		TPredicateNode(const TAtomicPredicate& A): Op(NOP), Result(false), Atom(A), $/;"	f	class:TPredicateNode
TPredicateNode	snap-core/table.h	/^		TPredicateNode(const TPredicateNode& P): Op(P.Op), Result(P.Result), Atom(P.Atom), $/;"	f	class:TPredicateNode
TPredicateNode	snap-core/table.h	/^class TPredicateNode {$/;"	c
TPreproc	glib-core/lx.cpp	/^TPreproc::TPreproc(const TStr& InFNm, const TStr& OutFNm,$/;"	f	class:TPreproc
TPrimitive	snap-core/table.h	/^  TPrimitive() : IntVal(-1), FltVal(-1), StrVal(""), AttrType(atInt) {}$/;"	f	class:TPrimitive
TPrimitive	snap-core/table.h	/^  TPrimitive(const TFlt& Val) : IntVal(-1), FltVal(Val), StrVal(""), AttrType(atFlt) {}$/;"	f	class:TPrimitive
TPrimitive	snap-core/table.h	/^  TPrimitive(const TInt& Val) : IntVal(Val), FltVal(-1), StrVal(""), AttrType(atInt) {}$/;"	f	class:TPrimitive
TPrimitive	snap-core/table.h	/^  TPrimitive(const TPrimitive& Prim) : IntVal(Prim.IntVal), FltVal(Prim.FltVal),$/;"	f	class:TPrimitive
TPrimitive	snap-core/table.h	/^  TPrimitive(const TStr& Val) : IntVal(-1), FltVal(-1), StrVal(Val.CStr()), AttrType(atStr) {}$/;"	f	class:TPrimitive
TPrimitive	snap-core/table.h	/^class TPrimitive {$/;"	c
TPt	glib-core/bd.h	/^  TPt(): Addr(NULL){}$/;"	f	class:TPt
TPt	glib-core/bd.h	/^  TPt(TRec* _Addr): Addr(_Addr){MkRef();}$/;"	f	class:TPt
TPt	glib-core/bd.h	/^  TPt(const TPt& Pt): Addr(Pt.Addr){MkRef();}$/;"	f	class:TPt
TPt	glib-core/bd.h	/^class TPt{$/;"	c
TPt	glib-core/xmlser.h	/^TPt<TRec>::TPt(TSIn& SIn):$/;"	f	class:TPt
TPt	glib-core/xmlser.h	/^TPt<TRec>::TPt(TSIn& SIn, void* ThisPt):$/;"	f	class:TPt
TQGraph	snap-exp/linkpred.h	/^  TQGraph() : DummyNId(-1) { }$/;"	f	class:__OLD__::TQGraph
TQGraph	snap-exp/linkpred.h	/^class TQGraph : public TNodeEDatNet<TInt, TEdgeGrad> {$/;"	c	namespace:__OLD__
TQQueue	glib-core/ds.h	/^  TQQueue(const TQQueue& Queue):$/;"	f	class:TQQueue
TQQueue	glib-core/ds.h	/^  TQQueue(const int& _MxLast=64, const int& _MxLen=-1):$/;"	f	class:TQQueue
TQQueue	glib-core/ds.h	/^  explicit TQQueue(TSIn& SIn):$/;"	f	class:TQQueue
TQQueue	glib-core/ds.h	/^class TQQueue{$/;"	c
TQtDomNet	snap-exp/memes.h	/^typedef TNodeEDatNet<TPair<TStr, TInt>, TInt> TQtDomNet;  \/\/ domain name, url type$/;"	t
TQtIdTy	snap-exp/memes.h	/^    TQtIdTy(TSIn& SIn) { SIn.LoadBf(this, sizeof(TQtIdTy)); }$/;"	f	class:TQuote::TQtIdTy
TQtIdTy	snap-exp/memes.h	/^    TQtIdTy(const int& _Id=0, const TQtTy& _Ty=qtUndef) : Id(_Id), Ty((uint)_Ty) { IAssert(_Id<(int)TMath::Pow2(26) && int(_Ty)<16); }$/;"	f	class:TQuote::TQtIdTy
TQtIdTy	snap-exp/memes.h	/^  class TQtIdTy {$/;"	c	class:TQuote
TQtTy	snap-exp/memes.h	/^} TQtTy;$/;"	t	typeref:enum:__anon13
TQuad	glib-core/ds.h	/^  TQuad():$/;"	f	class:TQuad
TQuad	glib-core/ds.h	/^  TQuad(const TQuad& Quad):$/;"	f	class:TQuad
TQuad	glib-core/ds.h	/^  TQuad(const TVal1& _Val1, const TVal2& _Val2, const TVal3& _Val3, const TVal4& _Val4):$/;"	f	class:TQuad
TQuad	glib-core/ds.h	/^  explicit TQuad(TSIn& SIn):$/;"	f	class:TQuad
TQuad	glib-core/ds.h	/^class TQuad{$/;"	c
TQuote	snap-exp/memes.h	/^  TQuote() { }$/;"	f	class:TQuote
TQuote	snap-exp/memes.h	/^  TQuote(TSIn& SIn) : QtCIdTy(SIn), QtStr(SIn), TmUrlCntV(SIn) { }$/;"	f	class:TQuote
TQuote	snap-exp/memes.h	/^class TQuote {$/;"	c
TQuoteBs	snap-exp/memes.cpp	/^TQuoteBs::TQuoteBs(TSIn& SIn) : StrQtIdH(SIn), QuoteH(SIn), UrlInDegH(SIn), UrlTyH(SIn) {$/;"	f	class:TQuoteBs
TQuoteBs	snap-exp/memes.h	/^  TQuoteBs() : StrQtIdH() { }$/;"	f	class:TQuoteBs
TQuoteBs	snap-exp/memes.h	/^class TQuoteBs {$/;"	c
TQuoteExtractor	snap-exp/spinn3r.cpp	/^TQuoteExtractor::TQuoteExtractor(const bool& SaveContent) : DoSave(SaveContent), FOut(NULL) {$/;"	f	class:TQuoteExtractor
TQuoteExtractor	snap-exp/spinn3r.h	/^  TQuoteExtractor(const TStr& InFNmWc) : TSpinn3rFullItem(InFNmWc), DoSave(false), FOut(NULL) { }$/;"	f	class:TQuoteExtractor
TQuoteExtractor	snap-exp/spinn3r.h	/^class TQuoteExtractor : public TSpinn3rFullItem {$/;"	c
TQuoteLoader	snap-exp/memes.h	/^  TQuoteLoader(const TStr& InFNmWc) : FFile(InFNmWc), PostCnt(0) { }$/;"	f	class:TQuoteLoader
TQuoteLoader	snap-exp/memes.h	/^class TQuoteLoader {$/;"	c
TQuoteV	snap-exp/memes.h	/^typedef TVec<TQuote> TQuoteV;$/;"	t
TRIAD_H	snap-core/triad.h	2;"	d
TRegularizer	snap-adv/cascdynetinf.h	/^} TRegularizer;$/;"	t	typeref:enum:__anon62
TRelOp	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	t	typeref:enum:__anon40
TRnd	glib-core/dt.h	/^  TRnd(const int& _Seed=1, const int& Steps=0){$/;"	f	class:TRnd
TRnd	glib-core/dt.h	/^  explicit TRnd(TSIn& SIn){SIn.Load(Seed);}$/;"	f	class:TRnd
TRnd	glib-core/dt.h	/^class TRnd{$/;"	c
TRowIterator	snap-core/table.h	/^  TRowIterator(): CurrRowIdx(0), Table(NULL) {}$/;"	f	class:TRowIterator
TRowIterator	snap-core/table.h	/^  TRowIterator(TInt RowIdx, const TTable* TablePtr): CurrRowIdx(RowIdx), Table(TablePtr) {}$/;"	f	class:TRowIterator
TRowIterator	snap-core/table.h	/^  TRowIterator(const TRowIterator& RowI): CurrRowIdx(RowI.CurrRowIdx), Table(RowI.Table) {}$/;"	f	class:TRowIterator
TRowIterator	snap-core/table.h	/^class TRowIterator{$/;"	c
TRowIteratorWithRemove	snap-core/table.cpp	/^TRowIteratorWithRemove::TRowIteratorWithRemove(TInt RowIdx, TTable* TablePtr) :$/;"	f	class:TRowIteratorWithRemove
TRowIteratorWithRemove	snap-core/table.h	/^  TRowIteratorWithRemove(): CurrRowIdx(0), Table(NULL), Start(true) {}$/;"	f	class:TRowIteratorWithRemove
TRowIteratorWithRemove	snap-core/table.h	/^  TRowIteratorWithRemove(TInt RowIdx, TTable* TablePtr, TBool IsStart) : CurrRowIdx(RowIdx),$/;"	f	class:TRowIteratorWithRemove
TRowIteratorWithRemove	snap-core/table.h	/^  TRowIteratorWithRemove(const TRowIteratorWithRemove& RowI) : CurrRowIdx(RowI.CurrRowIdx),$/;"	f	class:TRowIteratorWithRemove
TRowIteratorWithRemove	snap-core/table.h	/^class TRowIteratorWithRemove {$/;"	c
TRunningMode	snap-adv/cascdynetinf.h	/^} TRunningMode;$/;"	t	typeref:enum:__anon63
TSBase	glib-core/fl.h	/^  TSBase(const TSStr& Nm): SNm(Nm){}$/;"	f	class:TSBase
TSBase	glib-core/fl.h	/^class TSBase{$/;"	c
TSBitSet	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TSBitSet() {$/;"	f	class:TSBitSet
TSBitSet	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TSBitSet(TSBitSet &c) {$/;"	f	class:TSBitSet
TSBitSet	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TSBitSet(const TSBitSet &c) {$/;"	f	class:TSBitSet
TSBitSet	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TSBitSet {$/;"	c
TSFltV	glib-core/ds.h	/^typedef TVec<TSFlt> TSFltV;$/;"	t
TSFltVV	glib-core/ds.h	/^typedef TVVec<TSFlt> TSFltVV;$/;"	t
TSGroup	glib-core/shash.h	/^  typedef TSparseGroup<TVal, GroupSize> TSGroup;$/;"	t	class:TSparseTable
TSGroup	glib-core/shash.h	/^  typedef typename TSparseTable<THashKeyDat, GroupSize>::TSGroup TSGroup;$/;"	t	class:TSparseHash
TSGroup	glib-core/shash.h	/^  typedef typename TSparseTable<TKey, GroupSize>::TSGroup TSGroup;$/;"	t	class:TSparseSet
TSHashKeyDat	glib-core/shash.h	/^  TSHashKeyDat() : Key(), Dat() { }$/;"	f	class:TSHashKeyDat
TSHashKeyDat	glib-core/shash.h	/^  TSHashKeyDat(const TKey& _Key) : Key(_Key), Dat() { }$/;"	f	class:TSHashKeyDat
TSHashKeyDat	glib-core/shash.h	/^  TSHashKeyDat(const TKey& _Key, const TDat& _Dat) : Key(_Key), Dat(_Dat) { }$/;"	f	class:TSHashKeyDat
TSHashKeyDat	glib-core/shash.h	/^  TSHashKeyDat(const TSHashKeyDat& HashKeyDat) : Key(HashKeyDat.Key), Dat(HashKeyDat.Dat) { }$/;"	f	class:TSHashKeyDat
TSHashKeyDat	glib-core/shash.h	/^  explicit TSHashKeyDat(TSIn& SIn) : Key(SIn), Dat(SIn) { }$/;"	f	class:TSHashKeyDat
TSHashKeyDat	glib-core/shash.h	/^class TSHashKeyDat {$/;"	c
TSIn	glib-core/fl.cpp	/^TSIn::TSIn(const TStr& Str) : TSBase(Str.CStr()), FastMode(false){}$/;"	f	class:TSIn
TSIn	glib-core/fl.h	/^  TSIn(): TSBase("Input-Stream"), FastMode(false){}$/;"	f	class:TSIn
TSIn	glib-core/fl.h	/^class TSIn: virtual public TSBase{$/;"	c
TSInOut	glib-core/fl.h	/^  TSInOut(): TSBase("Input-Output-Stream"), TSIn(), TSOut() {}$/;"	f	class:TSInOut
TSInOut	glib-core/fl.h	/^class TSInOut: public TSIn, public TSOut{$/;"	c
TSNodeTest	snap-adv/graphcounter.h	/^class TSNodeTest{$/;"	c
TSOut	glib-core/fl.cpp	/^TSOut::TSOut(const TStr& Str):$/;"	f	class:TSOut
TSOut	glib-core/fl.h	/^  TSOut(): TSBase("Output-Stream"), MxLnLen(-1), LnLen(0){}$/;"	f	class:TSOut
TSOut	glib-core/fl.h	/^class TSOut: virtual public TSBase{$/;"	c
TSOutMnp	glib-core/fl.h	/^class TSOutMnp {$/;"	c
TSSet	snap-adv/subgraphenum.h	/^		TSSet(const TSSet &set) {$/;"	f	class:TSubGraphEnum::TSSet
TSSet	snap-adv/subgraphenum.h	/^		TSSet(int capacity) {$/;"	f	class:TSubGraphEnum::TSSet
TSSet	snap-adv/subgraphenum.h	/^	class TSSet {$/;"	c	class:TSubGraphEnum
TSStack	glib-core/ds.h	/^  TSStack(): ValV(){}$/;"	f	class:TSStack
TSStack	glib-core/ds.h	/^  TSStack(const TSStack& Stack): ValV(Stack.ValV){}$/;"	f	class:TSStack
TSStack	glib-core/ds.h	/^  TSStack(const int& MxVals): ValV(MxVals, 0){}$/;"	f	class:TSStack
TSStack	glib-core/ds.h	/^  explicit TSStack(TSIn& SIn): ValV(SIn){}$/;"	f	class:TSStack
TSStack	glib-core/ds.h	/^class TSStack{$/;"	c
TSStr	glib-core/bd.h	/^  TSStr(): Bf(NULL){$/;"	f	class:TSStr
TSStr	glib-core/bd.h	/^  TSStr(const TSStr& SStr): Bf(NULL){$/;"	f	class:TSStr
TSStr	glib-core/bd.h	/^  TSStr(const char* _Bf): Bf(NULL){$/;"	f	class:TSStr
TSStr	glib-core/bd.h	/^class TSStr{$/;"	c
TSVNet	snap-exp/mmgraph-exp.h	/^typedef TMNet<TSVNode> TSVNet;$/;"	t
TSVNode	snap-exp/mmgraph-exp.h	/^  TSVNode() : TypeId(-1), Id(-1), InEIdVV(), OutEIdVV(), InDeg(0), OutDeg(0) { }$/;"	f	class:TSVNode
TSVNode	snap-exp/mmgraph-exp.h	/^  TSVNode(TSIn& SIn) : TypeId(SIn), Id(SIn), InEIdVV(SIn), OutEIdVV(SIn), InDeg(0), OutDeg(0) { }$/;"	f	class:TSVNode
TSVNode	snap-exp/mmgraph-exp.h	/^  TSVNode(const TSVNode& Node) : TypeId(Node.TypeId), Id(Node.Id), InEIdVV(Node.InEIdVV), OutEIdVV(Node.OutEIdVV), InDeg(Node.InDeg), OutDeg(Node.OutDeg) { }$/;"	f	class:TSVNode
TSVNode	snap-exp/mmgraph-exp.h	/^  TSVNode(const TSVNode& Node, const TIntV& InETypeIdV, const TIntV& OutETypeIdV) :$/;"	f	class:TSVNode
TSVNode	snap-exp/mmgraph-exp.h	/^  TSVNode(const int& NTypeId, const int& NId) : TypeId(NTypeId), Id(NId), InEIdVV(), OutEIdVV(), InDeg(0), OutDeg(0) { }$/;"	f	class:TSVNode
TSVNode	snap-exp/mmgraph-exp.h	/^class TSVNode {$/;"	c
TSVec	snap-adv/subgraphenum.h	/^		TSVec(int capacity) {$/;"	f	class:TSubGraphEnum::TSVec
TSVec	snap-adv/subgraphenum.h	/^	class TSVec {$/;"	c	class:TSubGraphEnum
TSampling	snap-adv/cascdynetinf.h	/^} TSampling;$/;"	t	typeref:enum:__anon61
TSccVisitor	snap-core/cncom.h	/^  TSccVisitor(const PGraph& _Graph) :$/;"	f	class:TSccVisitor
TSccVisitor	snap-core/cncom.h	/^class TSccVisitor {$/;"	c
TSecTm	glib-core/tm.cpp	/^TSecTm::TSecTm(const PXmlTok& XmlTok) {$/;"	f	class:TSecTm
TSecTm	glib-core/tm.cpp	/^TSecTm::TSecTm(const TTm& Tm): AbsSecs($/;"	f	class:TSecTm
TSecTm	glib-core/tm.cpp	/^TSecTm::TSecTm(const int& YearN, const int& MonthN, const int& DayN,$/;"	f	class:TSecTm
TSecTm	glib-core/tm.h	/^  TSecTm(): AbsSecs(TUInt::Mx){}$/;"	f	class:TSecTm
TSecTm	glib-core/tm.h	/^  TSecTm(TSIn& SIn): AbsSecs(SIn){}$/;"	f	class:TSecTm
TSecTm	glib-core/tm.h	/^  TSecTm(const TSecTm& SecTm): AbsSecs(SecTm.AbsSecs){}$/;"	f	class:TSecTm
TSecTm	glib-core/tm.h	/^  explicit TSecTm(const uint& _AbsSecs): AbsSecs(_AbsSecs){}$/;"	f	class:TSecTm
TSecTm	glib-core/tm.h	/^class TSecTm {$/;"	c
TSecTmStrKd	glib-core/tm.h	/^typedef TKeyDat<TSecTm, TStr> TSecTmStrKd;$/;"	t
TSecTmStrKdV	glib-core/tm.h	/^typedef TVec<TSecTmStrKd> TSecTmStrKdV;$/;"	t
TSecTmV	glib-core/tm.h	/^typedef TVec<TSecTm> TSecTmV;$/;"	t
TSetKey	glib-core/shash.h	/^  typedef THashSetKey<TKey> TSetKey;$/;"	t	class:THashSet
TSetKey	glib-core/shash.h	/^  typedef THashSetKey<TKey> TSetKey;$/;"	t	class:THashSetKeyI
TSigmoid	glib-core/linalg.cpp	/^TSigmoid::TSigmoid(const TFltIntKdV& data) {$/;"	f	class:TSigmoid
TSigmoid	glib-core/linalg.h	/^    TSigmoid() { };$/;"	f	class:TSigmoid
TSigmoid	glib-core/linalg.h	/^    TSigmoid(TSIn& SIn) { A.Load(SIn); B.Load(SIn); }$/;"	f	class:TSigmoid
TSigmoid	glib-core/linalg.h	/^    TSigmoid(const double& A_, const double& B_): A(A_), B(B_) { };$/;"	f	class:TSigmoid
TSigmoid	glib-core/linalg.h	/^class TSigmoid {$/;"	c
TSignMicroEvol	snap-exp/signnet.cpp	/^TSignMicroEvol::TSignMicroEvol(PSignNet NetPt) : Network(NetPt) {$/;"	f	class:TSignMicroEvol
TSignMicroEvol	snap-exp/signnet.cpp	/^TSignMicroEvol::TSignMicroEvol(TSIn& SIn) {$/;"	f	class:TSignMicroEvol
TSignMicroEvol	snap-exp/signnet.h	/^class TSignMicroEvol {$/;"	c
TSignNet	snap-exp/signnet.h	/^  TSignNet() { }$/;"	f	class:TSignNet
TSignNet	snap-exp/signnet.h	/^  TSignNet(TSIn& SIn) : TNet(SIn) { }$/;"	f	class:TSignNet
TSignNet	snap-exp/signnet.h	/^class TSignNet : public TNodeEDatNet<TInt, TInt> {$/;"	c
TSimType	snap-core/table.h	/^typedef enum {L1Norm, L2Norm, Jaccard, Haversine} TSimType;$/;"	t	typeref:enum:__anon83
TSimpleGraph	snap-core/ghash.h	/^  TSimpleGraph() { }$/;"	f	class:TSimpleGraph
TSimpleGraph	snap-core/ghash.h	/^  TSimpleGraph(const TIntPrV& GEdgeV) : EdgeV(GEdgeV) { }$/;"	f	class:TSimpleGraph
TSimpleGraph	snap-core/ghash.h	/^class TSimpleGraph {$/;"	c
TSimpleGraphV	snap-core/ghash.h	/^typedef TVec<TSimpleGraph> TSimpleGraphV;$/;"	t
TSir2Model	snap-exp/sir.cpp	/^TSir2Model::TSir2Model(double _N0M, TFltTr N0MP, double _I0M, TFltTr I0MP, double _N0B, TFltTr N0BP, double _I0B, TFltTr I0BP, $/;"	f	class:TSir2Model
TSir2Model	snap-exp/sir.h	/^  TSir2Model() { }$/;"	f	class:TSir2Model
TSir2Model	snap-exp/sir.h	/^class TSir2Model : public TEpidemModel {$/;"	c
TSirModel	snap-exp/sir.cpp	/^TSirModel::TSirModel(double NZero, TFltTr NZeroP, double IZero, TFltTr IZeroP, double _Beta, TFltTr BetaP, double _Gamma, TFltTr GammaP, int TZero, TFltTr TZeroP, TStr InFNm, int ColId) :$/;"	f	class:TSirModel
TSirModel	snap-exp/sir.h	/^class TSirModel : public TEpidemModel {$/;"	c
TSirSR2Model	snap-exp/sir.cpp	/^TSirSR2Model::TSirSR2Model(double _N0M, TFltTr N0MP, double _I0M, TFltTr I0MP, double _N0B, TFltTr N0BP, double _I0B, TFltTr I0BP, $/;"	f	class:TSirSR2Model
TSirSR2Model	snap-exp/sir.h	/^class TSirSR2Model : public TEpidemModel {$/;"	c
TSize	glib-core/bd.h	/^typedef size_t TSize;$/;"	t
TSizeMx	glib-core/bd.h	59;"	d
TSnap	snap-core/alg.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/anf.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/anf.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/bfsdfs.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/bignet.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/casc.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/casc.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/centr.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/centr.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/cmty.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/cmty.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/cncom.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/cncom.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/conv.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/conv.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/coreper.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/coreper.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/flow.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/flow.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/gbase.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/gbase.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/ggen.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/ggen.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/gio.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/gio.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/graph.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/graphmp.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/gsvd.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/gsvd.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/gviz.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/gviz.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/kcore.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/mmnet.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/network.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/networkmp.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/numpy.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/numpy.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/randwalk.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/statplot.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/statplot.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/subgraph.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/subgraph.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/table.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/table.h	/^namespace TSnap{$/;"	n
TSnap	snap-core/timenet.h	/^namespace TSnap {$/;"	n
TSnap	snap-core/triad.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-core/triad.h	/^namespace TSnap {$/;"	n
TSnap	snap-exp/centr-exp.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-exp/centr-exp.h	/^namespace TSnap {$/;"	n
TSnap	snap-exp/graphmp-exp.h	/^namespace TSnap {$/;"	n
TSnap	snap-exp/imdbnet.h	/^namespace TSnap {$/;"	n
TSnap	snap-exp/mxdag.cpp	/^namespace TSnap {$/;"	n	file:
TSnap	snap-exp/mxdag.h	/^namespace TSnap {$/;"	n
TSnap	snap-exp/signnet.h	/^namespace TSnap {$/;"	n
TSnap	snap-exp/wgtnet.h	/^namespace TSnap {$/;"	n
TSnap	snap-exp/wikinet.h	/^namespace TSnap {$/;"	n
TSnapDetail	snap-core/alg.h	/^namespace TSnapDetail {$/;"	n	namespace:TSnap
TSnapDetail	snap-core/anf.cpp	/^namespace TSnapDetail {$/;"	n	namespace:TSnap	file:
TSnapDetail	snap-core/anf.h	/^namespace TSnapDetail {$/;"	n	namespace:TSnap
TSnapDetail	snap-core/cmty.cpp	/^namespace TSnapDetail {$/;"	n	namespace:TSnap	file:
TSnapDetail	snap-core/cmty.h	/^namespace TSnapDetail {$/;"	n	namespace:TSnap
TSnapDetail	snap-core/coreper.cpp	/^  namespace TSnapDetail {$/;"	n	namespace:TSnap	file:
TSnapDetail	snap-core/ggen.cpp	/^namespace TSnapDetail {$/;"	n	namespace:TSnap	file:
TSnapDetail	snap-core/ggen.h	/^namespace TSnapDetail {$/;"	n	namespace:TSnap
TSnapDetail	snap-core/gsvd.cpp	/^namespace TSnapDetail {$/;"	n	namespace:TSnap	file:
TSnapDetail	snap-core/gsvd.h	/^namespace TSnapDetail {$/;"	n	namespace:TSnap
TSnapDetail	snap-core/gviz.cpp	/^namespace TSnapDetail {$/;"	n	namespace:TSnap	file:
TSnapDetail	snap-core/gviz.h	/^namespace TSnapDetail {$/;"	n	namespace:TSnap
TSnapDetail	snap-core/subgraph.h	/^namespace TSnapDetail {$/;"	n	namespace:TSnap
TSnapQueue	snap-core/gbase.h	/^  TSnapQueue() : MxFirst(1024), First(0), Last(0), ValV(MxFirst, 0) { }$/;"	f	class:TSnapQueue
TSnapQueue	snap-core/gbase.h	/^  TSnapQueue(const TSnapQueue& Queue) : MxFirst(Queue.MxFirst), First(Queue.First), Last(Queue.Last), ValV(Queue.ValV) { }$/;"	f	class:TSnapQueue
TSnapQueue	snap-core/gbase.h	/^  TSnapQueue(const int& MxVals) : MxFirst(1024+MxVals\/10), First(0), Last(0), ValV(TInt::GetMx(MxFirst, MxVals), 0) { }$/;"	f	class:TSnapQueue
TSnapQueue	snap-core/gbase.h	/^  TSnapQueue(const int& MxVals, const int& MaxFirst) : MxFirst(MaxFirst),$/;"	f	class:TSnapQueue
TSnapQueue	snap-core/gbase.h	/^  explicit TSnapQueue(TSIn& SIn): MxFirst(SIn), First(SIn), Last(SIn), ValV(SIn) { }$/;"	f	class:TSnapQueue
TSnapQueue	snap-core/gbase.h	/^class TSnapQueue {$/;"	c
TSolver	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  TSolver(TMatchingMachine<TNodeData, TEdgeData> &NMaMa,$/;"	f	class:TSolver
TSolver	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^class TSolver {$/;"	c
TSolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TSolver(TMatchingMachine<TNodeData, TEdgeData> &NMaMa,$/;"	f	class:TSolver
TSolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TSolver {$/;"	c
TSpSVDReOrtoType	glib-core/linalg.h	/^typedef enum { ssotNoOrto, ssotSelective, ssotFull } TSpSVDReOrtoType;$/;"	t	typeref:enum:__anon26
TSparseColMatrix	glib-core/linalg.h	/^    TSparseColMatrix(): TMatrix() {}$/;"	f	class:TSparseColMatrix
TSparseColMatrix	glib-core/linalg.h	/^    TSparseColMatrix(TVec<TIntFltKdV> _ColSpVV): TMatrix(), ColSpVV(_ColSpVV) {}$/;"	f	class:TSparseColMatrix
TSparseColMatrix	glib-core/linalg.h	/^    TSparseColMatrix(TVec<TIntFltKdV> _ColSpVV, const int& _RowN, const int& _ColN): $/;"	f	class:TSparseColMatrix
TSparseColMatrix	glib-core/linalg.h	/^class TSparseColMatrix: public TMatrix {$/;"	c
TSparseGroup	glib-core/shash.h	/^  TSparseGroup() : Buckets(0), Group(NULL) { memset(BitSet, 0, sizeof(BitSet)); }$/;"	f	class:TSparseGroup
TSparseGroup	glib-core/shash.h	/^  TSparseGroup(TSIn& SIn) : Buckets(0), Group(NULL) { Load(SIn); }$/;"	f	class:TSparseGroup
TSparseGroup	glib-core/shash.h	/^TSparseGroup<TVal, GroupSize>::TSparseGroup(const TSparseGroup& SG) : Buckets(SG.Buckets), Group(NULL) {$/;"	f	class:TSparseGroup
TSparseGroup	glib-core/shash.h	/^class TSparseGroup {$/;"	c
TSparseHash	glib-core/shash.h	/^  TSparseHash(TSIn& SIn) : ShrinkThresh(SIn), ExpandThresh(SIn), Table(SIn) { }$/;"	f	class:TSparseHash
TSparseHash	glib-core/shash.h	/^  TSparseHash(const int& WantedVals = 0) : Table(GetMinSize(0, WantedVals)) { ResetThresh(); }$/;"	f	class:TSparseHash
TSparseHash	glib-core/shash.h	/^class TSparseHash {$/;"	c
TSparseOps	glib-core/linalg.h	/^class TSparseOps {$/;"	c
TSparseOpsIntFlt	glib-core/linalg.h	/^typedef TSparseOps<TInt, TFlt> TSparseOpsIntFlt;$/;"	t
TSparseRowMatrix	glib-core/linalg.cpp	/^TSparseRowMatrix::TSparseRowMatrix(const TStr& MatlabMatrixFNm) {$/;"	f	class:TSparseRowMatrix
TSparseRowMatrix	glib-core/linalg.h	/^    TSparseRowMatrix(): TMatrix() {}$/;"	f	class:TSparseRowMatrix
TSparseRowMatrix	glib-core/linalg.h	/^    TSparseRowMatrix(TVec<TIntFltKdV> _RowSpVV): TMatrix(), RowSpVV(_RowSpVV) {}$/;"	f	class:TSparseRowMatrix
TSparseRowMatrix	glib-core/linalg.h	/^    TSparseRowMatrix(TVec<TIntFltKdV> _RowSpVV, const int& _RowN, const int& _ColN): $/;"	f	class:TSparseRowMatrix
TSparseRowMatrix	glib-core/linalg.h	/^class TSparseRowMatrix: public TMatrix {$/;"	c
TSparseSVD	glib-core/linalg.h	/^class TSparseSVD {$/;"	c
TSparseSet	glib-core/shash.h	/^  TSparseSet(TSIn& SIn) : ShrinkThresh(SIn), ExpandThresh(SIn), Table(SIn) { }$/;"	f	class:TSparseSet
TSparseSet	glib-core/shash.h	/^  TSparseSet(const int& WantedVals = 0) : Table(GetMinSize(0, WantedVals)) { ResetThresh(); }$/;"	f	class:TSparseSet
TSparseSet	glib-core/shash.h	/^class TSparseSet {$/;"	c
TSparseTable	glib-core/shash.h	/^  TSparseTable(TSIn& SIn) : MxVals(SIn), Vals(SIn), GroupV(SIn) { }$/;"	f	class:TSparseTable
TSparseTable	glib-core/shash.h	/^  TSparseTable(const TSparseTable& ST) : MxVals(ST.MxVals), Vals(ST.Vals), GroupV(ST.GroupV) { }$/;"	f	class:TSparseTable
TSparseTable	glib-core/shash.h	/^  TSparseTable(const int& MaxVals = 0) : MxVals(MaxVals),$/;"	f	class:TSparseTable
TSparseTable	glib-core/shash.h	/^class TSparseTable {$/;"	c
TSparseTableI	glib-core/shash.h	/^  TSparseTableI() : CurOff(0), GroupI(NULL), EndI(NULL) { }$/;"	f	class:TSparseTableI
TSparseTableI	glib-core/shash.h	/^  TSparseTableI(const TGroupVI& BegIter, const TGroupVI& CurIter, const TGroupVI& EndIter,$/;"	f	class:TSparseTableI
TSparseTableI	glib-core/shash.h	/^  TSparseTableI(const TSparseTableI& STI) :$/;"	f	class:TSparseTableI
TSparseTableI	glib-core/shash.h	/^class TSparseTableI {$/;"	c
TSpecFunc	glib-core/xmath.h	/^class TSpecFunc{$/;"	c
TSpinn3rFeedItem	snap-exp/spinn3r.h	/^  TSpinn3rFeedItem(const TStr& InFNmWc) : FFile(InFNmWc), XmlLxPt(NULL) { }$/;"	f	class:TSpinn3rFeedItem
TSpinn3rFeedItem	snap-exp/spinn3r.h	/^class TSpinn3rFeedItem {$/;"	c
TSpinn3rFullItem	snap-exp/spinn3r.cpp	/^TSpinn3rFullItem::TSpinn3rFullItem(TSIn& SIn) : XmlLxPt(NULL) {$/;"	f	class:TSpinn3rFullItem
TSpinn3rFullItem	snap-exp/spinn3r.cpp	/^TSpinn3rFullItem::TSpinn3rFullItem(const TSpinn3rFullItem& Item) : XmlLxPt(NULL) {$/;"	f	class:TSpinn3rFullItem
TSpinn3rFullItem	snap-exp/spinn3r.h	/^  TSpinn3rFullItem() : FFile(NULL), XmlLxPt(NULL) { }$/;"	f	class:TSpinn3rFullItem
TSpinn3rFullItem	snap-exp/spinn3r.h	/^  TSpinn3rFullItem(const TStr& _InFNmWc) : InFNmWc(_InFNmWc), XmlLxPt(NULL) {$/;"	f	class:TSpinn3rFullItem
TSpinn3rFullItem	snap-exp/spinn3r.h	/^class TSpinn3rFullItem {$/;"	c
TSs	glib-core/ss.h	/^  TSs(): CellStrVV(){}$/;"	f
TSs	glib-core/ss.h	/^  TSs(TSIn& SIn): CellStrVV(SIn){}$/;"	f
TSsFmt	glib-core/ss.h	/^  ssfMx} TSsFmt;$/;"	t	typeref:enum:__anon56
TSsParser	glib-core/ss.cpp	/^TSsParser::TSsParser(const TStr& FNm, const TSsFmt _SsFmt, const bool& _SkipLeadBlanks, const bool& _SkipCmt, const bool& _SkipEmptyFld) : SsFmt(_SsFmt), $/;"	f	class:TSsParser
TSsParser	glib-core/ss.cpp	/^TSsParser::TSsParser(const TStr& FNm, const char& Separator, const bool& _SkipLeadBlanks, const bool& _SkipCmt, const bool& _SkipEmptyFld) : SsFmt(ssfSpaceSep), $/;"	f	class:TSsParser
TSsParserMP	glib-core/ssmp.cpp	/^TSsParserMP::TSsParserMP(const TStr& FNm, const char& Separator, const bool& _SkipLeadBlanks, const bool& _SkipCmt, const bool& _SkipEmptyFld) : SsFmt(ssfSpaceSep), $/;"	f	class:TSsParserMP
TSsParserMP	glib-core/ssmp.h	/^  UndefDefaultCopyAssign(TSsParserMP);$/;"	v
TStaticAssert	glib-core/bd.h	/^template <> struct TStaticAssert<true> { enum { value = 1 }; };$/;"	s
TStaticAssertTest	glib-core/bd.h	/^template<int IntVal> struct TStaticAssertTest{};$/;"	s
TStdIOPipe	glib-core/os.cpp	/^TStdIOPipe::TStdIOPipe(const TStr& CmdToExe) : ChildStdinRd(NULL), ChildStdinWrDup(NULL),$/;"	f	class:TStdIOPipe
TStdIOPipe	glib-core/os.cpp	/^TStdIOPipe::TStdIOPipe(const TStr& CmdToExe) {$/;"	f	class:TStdIOPipe
TStdIn	glib-core/fl.cpp	/^TStdIn::TStdIn(): TSBase("Standard input"), TSIn("Standard input") {}$/;"	f	class:TStdIn
TStdIn	glib-core/fl.h	/^class TStdIn: public TSIn{$/;"	c
TStdOut	glib-core/fl.cpp	/^TStdOut::TStdOut(): TSBase(TSStr("Standard output")), TSOut("Standard output"){}$/;"	f	class:TStdOut
TStdOut	glib-core/fl.h	/^class TStdOut: public TSOut{$/;"	c
TStopReason	snap-core/ff.h	/^  typedef enum { srUndef, srOk, srFlood, srTimeLimit } TStopReason;$/;"	t	class:TFfGGen	typeref:enum:TFfGGen::__anon86
TStopwatch	snap-core/util.h	/^  TStopwatch() {$/;"	f	class:TStopwatch
TStopwatch	snap-core/util.h	/^class TStopwatch {$/;"	c
TStrAscFltKd	glib-core/ds.h	/^typedef TKeyDat<TStr, TAscFlt> TStrAscFltKd;$/;"	t
TStrAscFltKdV	glib-core/ds.h	/^typedef TVec<TStrAscFltKd> TStrAscFltKdV;$/;"	t
TStrBoolH	glib-core/hash.h	/^typedef THash<TStr, TBool> TStrBoolH;$/;"	t
TStrBoolKd	glib-core/ds.h	/^typedef TKeyDat<TStr, TBool> TStrBoolKd;$/;"	t
TStrFltFltHNEDNet	snap-adv/cascdynetinf.h	/^typedef TNodeEDatNet<TStr, TFltFltH> TStrFltFltHNEDNet;$/;"	t
TStrFltFltTr	glib-core/ds.h	/^typedef TTriple<TStr, TFlt, TFlt> TStrFltFltTr;$/;"	t
TStrFltFltTrV	glib-core/ds.h	/^typedef TVec<TStrFltFltTr> TStrFltFltTrV;$/;"	t
TStrFltH	glib-core/hash.h	/^typedef THash<TStr, TFlt> TStrFltH;$/;"	t
TStrFltKd	glib-core/ds.h	/^typedef TKeyDat<TStr, TFlt> TStrFltKd;$/;"	t
TStrFltKdV	glib-core/ds.h	/^typedef TVec<TStrFltKd> TStrFltKdV;$/;"	t
TStrFltNEDNet	snap-adv/cascdynetinf.h	/^typedef TNodeEDatNet<TStr, TFlt> TStrFltNEDNet;$/;"	t
TStrFltPr	glib-core/ds.h	/^typedef TPair<TStr, TFlt> TStrFltPr;$/;"	t
TStrFltPrV	glib-core/ds.h	/^typedef TVec<TStrFltPr> TStrFltPrV;$/;"	t
TStrFltVH	glib-core/hash.h	/^typedef THash<TStr, TFltV> TStrFltVH;$/;"	t
TStrH	glib-core/hash.h	/^typedef THash<TStr, TInt> TStrH;$/;"	t
TStrIn	glib-core/dt.cpp	/^TStrIn::TStrIn(const TStr& _Str):$/;"	f	class:TStrIn
TStrIntFltPrH	glib-core/hash.h	/^typedef THash<TStr, TIntFltPr> TStrIntFltPrH;$/;"	t
TStrIntH	glib-core/hash.h	/^typedef THash<TStr, TInt> TStrIntH;$/;"	t
TStrIntIntTr	glib-core/ds.h	/^typedef TTriple<TStr, TInt, TInt> TStrIntIntTr;$/;"	t
TStrIntKd	glib-core/ds.h	/^typedef TKeyDat<TStr, TInt> TStrIntKd;$/;"	t
TStrIntKdV	glib-core/ds.h	/^typedef TVec<TStrIntKd> TStrIntKdV;$/;"	t
TStrIntNEDNet	snap-core/network.h	/^typedef TNodeEDatNet<TStr, TInt> TStrIntNEDNet;$/;"	t
TStrIntPr	glib-core/ds.h	/^typedef TPair<TStr, TInt> TStrIntPr;$/;"	t
TStrIntPrH	glib-core/hash.h	/^typedef THash<TStr, TIntPr> TStrIntPrH;$/;"	t
TStrIntPrIntH	glib-core/hash.h	/^typedef THash<TStrIntPr, TInt> TStrIntPrIntH;$/;"	t
TStrIntPrTree	glib-core/ds.h	/^typedef TTree<TStrIntPr> TStrIntPrTree;$/;"	t
TStrIntPrV	glib-core/ds.h	/^typedef TVec<TStrIntPr> TStrIntPrV;$/;"	t
TStrIntPrVH	glib-core/hash.h	/^typedef THash<TStr, TIntPrV> TStrIntPrVH;$/;"	t
TStrIntStrVTr	glib-core/ds.h	/^typedef TTriple<TStr, TInt, TStrV> TStrIntStrVTr;$/;"	t
TStrIntStrVTrTree	glib-core/ds.h	/^typedef TTree<TStrIntStrVTr> TStrIntStrVTrTree;$/;"	t
TStrIntVH	glib-core/hash.h	/^typedef THash<TStr, TIntV> TStrIntVH;$/;"	t
TStrKd	glib-core/ds.h	/^typedef TKeyDat<TStr, TStr> TStrKd;$/;"	t
TStrKdV	glib-core/ds.h	/^typedef TVec<TStrKd> TStrKdV;$/;"	t
TStrL	glib-core/ds.h	/^typedef TLst<TStr> TStrL;$/;"	t
TStrNNet	snap-core/network.h	/^typedef TNodeNet<TStr> TStrNNet;$/;"	t
TStrPool	glib-core/dt.cpp	/^TStrPool::TStrPool(TSIn& SIn, bool LoadCompact) : MxBfL(0), BfL(0), GrowBy(0), Bf(0) {$/;"	f	class:TStrPool
TStrPool	glib-core/dt.cpp	/^TStrPool::TStrPool(const uint& MxBfLen, const uint& _GrowBy) : MxBfL(MxBfLen), BfL(0), GrowBy(_GrowBy), Bf(0) {$/;"	f	class:TStrPool
TStrPool64	glib-core/dt.cpp	/^TStrPool64::TStrPool64(::TSize _MxBfL, ::TSize _GrowBy):$/;"	f	class:TStrPool64
TStrPool64	glib-core/dt.cpp	/^TStrPool64::TStrPool64(TSIn& SIn, bool LoadCompact): $/;"	f	class:TStrPool64
TStrPool64	glib-core/dt.cpp	/^TStrPool64::TStrPool64(const TStrPool64& StrPool): $/;"	f	class:TStrPool64
TStrPr	glib-core/ds.h	/^typedef TPair<TStr, TStr> TStrPr;$/;"	t
TStrPrBoolH	glib-core/hash.h	/^typedef THash<TStrPr, TBool> TStrPrBoolH;$/;"	t
TStrPrFltH	glib-core/hash.h	/^typedef THash<TStrPr, TFlt> TStrPrFltH;$/;"	t
TStrPrIntH	glib-core/hash.h	/^typedef THash<TStrPr, TInt> TStrPrIntH;$/;"	t
TStrPrStrH	glib-core/hash.h	/^typedef THash<TStrPr, TStr> TStrPrStrH;$/;"	t
TStrPrStrVH	glib-core/hash.h	/^typedef THash<TStrPr, TStrV> TStrPrStrVH;$/;"	t
TStrPrV	glib-core/ds.h	/^typedef TVec<TStrPr> TStrPrV;$/;"	t
TStrQ	glib-core/ds.h	/^typedef TQQueue<TStr> TStrQ;$/;"	t
TStrQu	glib-core/ds.h	/^typedef TQuad<TStr, TStr, TStr, TStr> TStrQu;$/;"	t
TStrQuV	glib-core/ds.h	/^typedef TVec<TStrQu> TStrQuV;$/;"	t
TStrSet	glib-core/shash.h	/^typedef THashSet<TStr> TStrSet;$/;"	t
TStrStrH	glib-core/hash.h	/^typedef THash<TStr, TStr> TStrStrH;$/;"	t
TStrStrIntIntQu	glib-core/ds.h	/^typedef TQuad<TStr, TStr, TInt, TInt> TStrStrIntIntQu;$/;"	t
TStrStrIntKdVH	glib-core/hash.h	/^typedef THash<TStr, TStrIntKdV> TStrStrIntKdVH;$/;"	t
TStrStrIntPrVH	glib-core/hash.h	/^typedef THash<TStr, TStrIntPrV> TStrStrIntPrVH;$/;"	t
TStrStrIntTr	glib-core/ds.h	/^typedef TTriple<TStr, TStr, TInt> TStrStrIntTr;$/;"	t
TStrStrIntTrV	glib-core/ds.h	/^typedef TVec<TStrStrIntTr> TStrStrIntTrV;$/;"	t
TStrStrKdVH	glib-core/hash.h	/^typedef THash<TStr, TStrKdV> TStrStrKdVH;$/;"	t
TStrStrPrH	glib-core/hash.h	/^typedef THash<TStr, TStrPr> TStrStrPrH;$/;"	t
TStrStrPrVH	glib-core/hash.h	/^typedef THash<TStr, TStrPrV> TStrStrPrVH;$/;"	t
TStrStrVH	glib-core/hash.h	/^typedef THash<TStr, TStrV> TStrStrVH;$/;"	t
TStrStrVPr	glib-core/ds.h	/^typedef TPair<TStr, TStrV> TStrStrVPr;$/;"	t
TStrStrVPrV	glib-core/ds.h	/^typedef TVec<TStrStrVPr> TStrStrVPrV;$/;"	t
TStrTmPr	glib-core/tm.h	/^typedef TPair<TStr, TTm> TStrTmPr;$/;"	t
TStrTmPrV	glib-core/tm.h	/^typedef TVec<TStrTmPr> TStrTmPrV;$/;"	t
TStrTr	glib-core/ds.h	/^typedef TTriple<TStr, TStr, TStr> TStrTr;$/;"	t
TStrTrIntH	glib-core/hash.h	/^typedef THash<TStrTr, TInt> TStrTrIntH;$/;"	t
TStrTrV	glib-core/ds.h	/^typedef TVec<TStrTr> TStrTrV;$/;"	t
TStrTree	glib-core/ds.h	/^typedef TTree<TStr> TStrTree;$/;"	t
TStrTypPr	snap-core/table.h	/^typedef TPair<TStr,TAttrType> TStrTypPr;$/;"	t
TStrUInt64H	glib-core/hash.h	/^typedef THash<TStr, TUInt64> TStrUInt64H;$/;"	t
TStrUInt64VH	glib-core/hash.h	/^typedef THash<TStr, TUInt64V> TStrUInt64VH;$/;"	t
TStrUtil	snap-core/util.h	/^class TStrUtil {$/;"	c
TStrV	glib-core/ds.h	/^typedef TVec<TStr> TStrV;$/;"	t
TStrVH	glib-core/hash.h	/^typedef THash<TStrV, TInt> TStrVH;$/;"	t
TStrVIntH	glib-core/hash.h	/^typedef THash<TStrV, TInt> TStrVIntH;$/;"	t
TStrVIntPr	glib-core/ds.h	/^typedef TPair<TStrV, TInt> TStrVIntPr;$/;"	t
TStrVIntPrV	glib-core/ds.h	/^typedef TVec<TStrVIntPr> TStrVIntPrV;$/;"	t
TStrVIntVH	glib-core/hash.h	/^typedef THash<TStrV, TIntV> TStrVIntVH;$/;"	t
TStrVP	glib-core/ds.h	/^typedef PVec<TStr> TStrVP;$/;"	t
TStrVStrH	glib-core/hash.h	/^typedef THash<TStrV, TStr> TStrVStrH;$/;"	t
TStrVStrVH	glib-core/hash.h	/^typedef THash<TStrV, TStrV> TStrVStrVH;$/;"	t
TStrVV	glib-core/ds.h	/^typedef TVVec<TStr> TStrVV;$/;"	t
TStrVecIter	snap-core/mmnet.h	/^    typedef TStrV::TIter TStrVecIter;$/;"	t	class:TCrossNet::TAStrI
TStrVecIter	snap-core/network.h	/^    typedef TStrV::TIter TStrVecIter;$/;"	t	class:TNEANet::TAStrI
TStrVecIter	snap-core/networkmp.h	/^    typedef TStrV::TIter TStrVecIter;$/;"	t	class:TNEANetMP::TAStrI
TSubGISolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  TSubGISolver(TMatchingMachine<TNodeData, TEdgeData> &NMaMa,$/;"	f	class:TSubGISolver
TSubGISolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^class TSubGISolver : public TSolver<TNodeData, TEdgeData> {$/;"	c
TSubGraphEnum	snap-adv/subgraphenum.h	/^  TSubGraphEnum() { }$/;"	f	class:TSubGraphEnum
TSubGraphEnum	snap-adv/subgraphenum.h	/^class TSubGraphEnum {$/;"	c
TSubGraphsEnum	snap-core/ghash.h	/^  TSubGraphsEnum(PNGraph Graph) : NGraph(Graph) { }$/;"	f	class:TSubGraphsEnum
TSubGraphsEnum	snap-core/ghash.h	/^class TSubGraphsEnum {$/;"	c
TSubcatHelper	glib-core/unicode.h	/^		TSubcatHelper(TUniChDb &owner_) : owner(owner_) { }$/;"	f	class:TUniChDb::TSubcatHelper
TSubcatHelper	glib-core/unicode.h	/^	class TSubcatHelper$/;"	c	class:TUniChDb
TSweepCut	snap-adv/motifcluster.h	/^class TSweepCut {$/;"	c
TSysConsole	glib-core/os.cpp	/^TSysConsole::TSysConsole(){$/;"	f	class:TSysConsole
TSysMemStat	glib-core/os.h	/^  TSysMemStat(){Refresh();}$/;"	f
TSysMemStat	glib-core/os.h	/^  TSysMemStat(TSIn&){Fail;}$/;"	f
TSysProc	glib-core/os.h	/^class TSysProc{$/;"	c
TTable	snap-core/table.cpp	/^TTable::TTable(): Context(new TTableContext), NumRows(0), NumValidRows(0),$/;"	f	class:TTable
TTable	snap-core/table.cpp	/^TTable::TTable(TSIn& SIn, TTableContext* Context): Context(Context), NumRows(SIn),$/;"	f	class:TTable
TTable	snap-core/table.cpp	/^TTable::TTable(TTableContext* Context): Context(Context), NumRows(0),$/;"	f	class:TTable
TTable	snap-core/table.cpp	/^TTable::TTable(const Schema& TableSchema, TTableContext* Context): Context(Context), $/;"	f	class:TTable
TTable	snap-core/table.cpp	/^TTable::TTable(const TIntFltH& H, const TStr& Col1, const TStr& Col2,$/;"	f	class:TTable
TTable	snap-core/table.cpp	/^TTable::TTable(const TIntIntH& H, const TStr& Col1, const TStr& Col2,$/;"	f	class:TTable
TTable	snap-core/table.cpp	/^TTable::TTable(const TTable& Table, const TIntV& RowIDs) : Context(Table.Context),$/;"	f	class:TTable
TTable	snap-core/table.h	/^  TTable(const TTable& Table): Context(Table.Context), Sch(Table.Sch),$/;"	f	class:TTable
TTable	snap-core/table.h	/^class TTable {$/;"	c
TTableContext	snap-core/table.h	/^  TTableContext() {}$/;"	f	class:TTableContext
TTableContext	snap-core/table.h	/^  TTableContext(TSIn& SIn): StringVals(SIn) {}$/;"	f	class:TTableContext
TTableContext	snap-core/table.h	/^class TTableContext {$/;"	c
TTableIterator	snap-core/table.h	/^  TTableIterator(TVec<PTable>& PTableV): PTableV(PTableV), CurrTableIdx(0) {}$/;"	f	class:TTableIterator
TTableIterator	snap-core/table.h	/^class TTableIterator {$/;"	c
TTableRow	snap-core/table.h	/^  TTableRow() {}$/;"	f	class:TTableRow
TTableRow	snap-core/table.h	/^class TTableRow {$/;"	c
TTest	glib-core/xmath.cpp	/^void TStatTest::TTest($/;"	f	class:TStatTest
TTimeNENet	snap-core/timenet.h	/^  TTimeNENet() { }$/;"	f	class:TTimeNENet
TTimeNENet	snap-core/timenet.h	/^  TTimeNENet(TSIn& SIn) : TNet(SIn) { }$/;"	f	class:TTimeNENet
TTimeNENet	snap-core/timenet.h	/^  TTimeNENet(const TTimeNENet& TimeNet) : TNet(TimeNet) { }$/;"	f	class:TTimeNENet
TTimeNENet	snap-core/timenet.h	/^  TTimeNENet(const int& Nodes, const int& Edges) : TNet(Nodes, Edges) { }$/;"	f	class:TTimeNENet
TTimeNENet	snap-core/timenet.h	/^class TTimeNENet : public TNodeEdgeNet<TSecTm, TSecTm> {$/;"	c
TTimeNet	snap-core/timenet.h	/^  TTimeNet() { }$/;"	f	class:TTimeNet
TTimeNet	snap-core/timenet.h	/^  TTimeNet(TSIn& SIn) : TNet(SIn) { }$/;"	f	class:TTimeNet
TTimeNet	snap-core/timenet.h	/^  TTimeNet(const TTimeNet& TimeNet) : TNet(TimeNet) { }$/;"	f	class:TTimeNet
TTimeNet	snap-core/timenet.h	/^  TTimeNet(const int& Nodes, const int& Edges) : TNet(Nodes, Edges) { }$/;"	f	class:TTimeNet
TTimeNet	snap-core/timenet.h	/^class TTimeNet : public TNodeNet<TSecTm> {$/;"	c
TTm	glib-core/tm.h	/^  TTm($/;"	f	class:TTm
TTm	glib-core/tm.h	/^  TTm():$/;"	f	class:TTm
TTm	glib-core/tm.h	/^  TTm(TSIn& SIn):$/;"	f	class:TTm
TTm	glib-core/tm.h	/^  TTm(const TSecTm& SecTm):$/;"	f	class:TTm
TTm	glib-core/tm.h	/^  TTm(const TTm& Tm):$/;"	f	class:TTm
TTm	glib-core/tm.h	/^class TTm{$/;"	c
TTmBucket	snap-core/timenet.h	/^    TTmBucket() { }$/;"	f	class:TTimeNet::TTmBucket
TTmBucket	snap-core/timenet.h	/^    TTmBucket(const TSecTm& BucketTm) : BegTm(BucketTm) { }$/;"	f	class:TTimeNet::TTmBucket
TTmBucket	snap-core/timenet.h	/^    TTmBucket(const TTmBucket& TmBucket) : BegTm(TmBucket.BegTm), NIdV(TmBucket.NIdV) { }$/;"	f	class:TTimeNet::TTmBucket
TTmBucket	snap-core/timenet.h	/^  class TTmBucket {$/;"	c	class:TTimeNet
TTmBucketV	snap-core/timenet.h	/^  typedef TVec<TTmBucket> TTmBucketV;$/;"	t	class:TTimeNet
TTmFltPrV	snap-exp/memes.h	/^  typedef TVec<TPair<TSecTm, TFlt> > TTmFltPrV;$/;"	t	class:TQuote
TTmInfo	glib-core/tm.h	/^class TTmInfo{$/;"	c
TTmProfiler	glib-core/tm.h	/^	TTmProfiler() { }$/;"	f
TTmStopWatch	glib-core/tm.h	/^    TTmStopWatch(const bool& Start = false): TmSoFar(0), RunningP(Start) { }$/;"	f	class:TTmStopWatch
TTmStopWatch	glib-core/tm.h	/^class TTmStopWatch {$/;"	c
TTmStrPr	glib-core/tm.h	/^typedef TPair<TTm, TStr> TTmStrPr;$/;"	t
TTmStrPrV	glib-core/tm.h	/^typedef TVec<TTmStrPr> TTmStrPrV;$/;"	t
TTmUnit	glib-core/tm.h	/^} TTmUnit;$/;"	t	typeref:enum:__anon32
TTmUrlCnt	snap-exp/memes.h	/^    TTmUrlCnt() : QtTm(), QtUrlId(0), QtCnt(0) { }$/;"	f	class:TQuote::TTmUrlCnt
TTmUrlCnt	snap-exp/memes.h	/^    TTmUrlCnt(TSIn& SIn) { SIn.LoadBf(this, sizeof(TTmUrlCnt)); }$/;"	f	class:TQuote::TTmUrlCnt
TTmUrlCnt	snap-exp/memes.h	/^    TTmUrlCnt(const TSecTm& Tm, const int& Url, const int& _QtCnt) : QtTm(Tm), QtUrlId(Url) {$/;"	f	class:TQuote::TTmUrlCnt
TTmUrlCnt	snap-exp/memes.h	/^    TTmUrlCnt(const TTmUrlCnt& UrlCnt) { memcpy((void*)this, (void*)&UrlCnt, sizeof(TTmUrlCnt)); }$/;"	f	class:TQuote::TTmUrlCnt
TTmUrlCnt	snap-exp/memes.h	/^  class TTmUrlCnt {$/;"	c	class:TQuote
TTmUrlCntV	snap-exp/memes.h	/^  typedef TVec<TTmUrlCnt> TTmUrlCntV;$/;"	t	class:TQuote
TTmV	glib-core/tm.h	/^typedef TVec<TTm> TTmV;$/;"	t
TTop2FriendNet	snap-exp/wgtnet.h	/^  TTop2FriendNet(const PWgtNet& NetPt) : Net(NetPt) { SetTop2(); }$/;"	f	class:TTop2FriendNet
TTop2FriendNet	snap-exp/wgtnet.h	/^class TTop2FriendNet {$/;"	c
TTransStat	snap-exp/signnet.h	/^    TTransStat() { }$/;"	f	struct:TSignMicroEvol::TTransStat
TTransStat	snap-exp/signnet.h	/^    TTransStat(TSIn& SIn) : Cnt(SIn), SumWgt(SIn), VarSq(SIn) { }$/;"	f	struct:TSignMicroEvol::TTransStat
TTransStat	snap-exp/signnet.h	/^  struct TTransStat {$/;"	s	class:TSignMicroEvol
TTransitionNet	snap-exp/signnet.h	/^  typedef TNodeEDatNet<TInt, TTransStat> TTransitionNet;$/;"	t	class:TSignMicroEvol
TTrawling	snap-exp/trawling.cpp	/^TTrawling::TTrawling(const PNGraph& Graph, const int& MinSupport) : MinSup(MinSupport) {$/;"	f	class:TTrawling
TTrawling	snap-exp/trawling.cpp	/^TTrawling::TTrawling(const PUNGraph& Graph, const TIntV& LeftNIdV, const int& MinSupport) : MinSup(MinSupport) {$/;"	f	class:TTrawling
TTrawling	snap-exp/trawling.h	/^class TTrawling {$/;"	c
TTree	glib-core/ds.h	/^  TTree(): NodeV(){}$/;"	f	class:TTree
TTree	glib-core/ds.h	/^  TTree(const TTree& Tree): NodeV(Tree.NodeV){}$/;"	f	class:TTree
TTree	glib-core/ds.h	/^  explicit TTree(TSIn& SIn): NodeV(SIn){}$/;"	f	class:TTree
TTree	glib-core/ds.h	/^class TTree{$/;"	c
TTriple	glib-core/ds.h	/^  TTriple(): Val1(), Val2(), Val3(){}$/;"	f	class:TTriple
TTriple	glib-core/ds.h	/^  TTriple(const TTriple& Triple):$/;"	f	class:TTriple
TTriple	glib-core/ds.h	/^  TTriple(const TVal1& _Val1, const TVal2& _Val2, const TVal3& _Val3):$/;"	f	class:TTriple
TTriple	glib-core/ds.h	/^  explicit TTriple(TSIn& SIn): Val1(SIn), Val2(SIn), Val3(SIn){}$/;"	f	class:TTriple
TTriple	glib-core/ds.h	/^class TTriple{$/;"	c
TTuple	glib-core/ds.h	/^  TTuple(){}$/;"	f	class:TTuple
TTuple	glib-core/ds.h	/^  TTuple(TSIn& SIn) { for (int i=0; i<Len(); i++) ValV[i].Load(SIn); }$/;"	f	class:TTuple
TTuple	glib-core/ds.h	/^  TTuple(const TTuple& Tup) { for (int i=0; i<Len(); i++) ValV[i]=Tup[i]; }$/;"	f	class:TTuple
TTuple	glib-core/ds.h	/^  TTuple(const TVal& InitVal) { for (int i=0; i<Len(); i++) ValV[i]=InitVal; }$/;"	f	class:TTuple
TTuple	glib-core/ds.h	/^class TTuple {$/;"	c
TTypeIter	snap-exp/mmgraph-exp.h	/^    typedef typename TVec<TNodeType>::TIter TTypeIter;$/;"	t	class:TMNet::TMNodeI
TTypeNm	glib-core/ut.h	/^  TTypeNm(): TStr(GetNrTypeNm((char*)(typeid(Type).name()))){}$/;"	f	class:TTypeNm
TTypeNm	glib-core/ut.h	/^class TTypeNm: public TStr{$/;"	c
TUChIntIntTr	glib-core/ds.h	/^typedef TTriple<TUCh, TInt, TInt> TUChIntIntTr;$/;"	t
TUChIntPr	glib-core/ds.h	/^typedef TPair<TUCh, TInt> TUChIntPr;$/;"	t
TUChIntPrSet	glib-core/shash.h	/^typedef THashSet<TUChIntPr> TUChIntPrSet;$/;"	t
TUChIntPrV	glib-core/ds.h	/^typedef TVec<TUChIntPr> TUChIntPrV;$/;"	t
TUChSet	glib-core/shash.h	/^typedef THashSet<TUCh> TUChSet;$/;"	t
TUChStrPr	glib-core/ds.h	/^typedef TPair<TUCh, TStr> TUChStrPr;$/;"	t
TUChUInt64Pr	glib-core/ds.h	/^typedef TPair<TUCh, TUInt64> TUChUInt64Pr;$/;"	t
TUChUInt64PrSet	glib-core/shash.h	/^typedef THashSet<TUChUInt64Pr> TUChUInt64PrSet;$/;"	t
TUChUInt64PrV	glib-core/ds.h	/^typedef TVec<TUChUInt64Pr> TUChUInt64PrV;$/;"	t
TUChV	glib-core/ds.h	/^typedef TVec<TUCh> TUChV;$/;"	t
TUInt64FltKd	glib-core/ds.h	/^typedef TKeyDat<TUInt64, TFlt> TUInt64FltKd;$/;"	t
TUInt64FltKdV	glib-core/ds.h	/^typedef TVec<TUInt64FltKd> TUInt64FltKdV;$/;"	t
TUInt64FltPr	glib-core/ds.h	/^typedef TPair<TUInt64, TFlt> TUInt64FltPr;$/;"	t
TUInt64FltPrV	glib-core/ds.h	/^typedef TVec<TUInt64FltPr> TUInt64FltPrV;$/;"	t
TUInt64H	glib-core/hash.h	/^typedef THash<TUInt64, TInt> TUInt64H;$/;"	t
TUInt64IntKd	glib-core/ds.h	/^typedef TKeyDat<TUInt64, TInt> TUInt64IntKd;$/;"	t
TUInt64IntKdV	glib-core/ds.h	/^typedef TVec<TUInt64IntKd> TUInt64IntKdV;$/;"	t
TUInt64IntPr	glib-core/ds.h	/^typedef TPair<TUInt64, TInt> TUInt64IntPr;$/;"	t
TUInt64IntPrV	glib-core/ds.h	/^typedef TVec<TUInt64IntPr> TUInt64IntPrV;$/;"	t
TUInt64Pr	glib-core/ds.h	/^typedef TPair<TUInt64, TUInt64> TUInt64Pr;$/;"	t
TUInt64Set	glib-core/shash.h	/^typedef THashSet<TUInt64> TUInt64Set;$/;"	t
TUInt64StrKd	glib-core/ds.h	/^typedef TKeyDat<TUInt64, TStr> TUInt64StrKd;$/;"	t
TUInt64StrKdV	glib-core/ds.h	/^typedef TVec<TUInt64StrKd> TUInt64StrKdV;$/;"	t
TUInt64StrPr	glib-core/ds.h	/^typedef TPair<TUInt64, TStr> TUInt64StrPr;$/;"	t
TUInt64StrPrV	glib-core/ds.h	/^typedef TVec<TUInt64StrPr> TUInt64StrPrV;$/;"	t
TUInt64StrVH	glib-core/hash.h	/^typedef THash<TUInt64, TStrV> TUInt64StrVH;$/;"	t
TUInt64Tr	glib-core/ds.h	/^typedef TTriple<TUInt64, TUInt64, TUInt64> TUInt64Tr;$/;"	t
TUInt64V	glib-core/ds.h	/^typedef TVec<TUInt64> TUInt64V;$/;"	t
TUIntH	glib-core/hash.h	/^typedef THash<TUInt, TUInt> TUIntH;$/;"	t
TUIntIntKd	glib-core/ds.h	/^typedef TKeyDat<TUInt, TInt> TUIntIntKd;$/;"	t
TUIntIntKdV	glib-core/ds.h	/^typedef TVec<TUIntIntKd> TUIntIntKdV;$/;"	t
TUIntIntPr	glib-core/ds.h	/^typedef TPair<TUInt, TInt> TUIntIntPr;$/;"	t
TUIntKd	glib-core/ds.h	/^typedef TKeyDat<TUInt, TUInt> TUIntKd;$/;"	t
TUIntUIntPr	glib-core/ds.h	/^typedef TPair<TUInt, TUInt> TUIntUIntPr;$/;"	t
TUIntV	glib-core/ds.h	/^typedef TVec<TUInt> TUIntV;$/;"	t
TUNComplicatedGraph	test/test-alg.cpp	/^  PUNGraph TUNComplicatedGraph;$/;"	m	class:GraphTest	file:
TUNComplicatedGraphWithLoop	test/test-alg.cpp	/^  PUNGraph TUNComplicatedGraphWithLoop;$/;"	m	class:GraphTest	file:
TUNGraph	snap-core/graph.h	/^  TUNGraph() : CRef(), MxNId(0), NEdges(0), NodeH() { }$/;"	f	class:TUNGraph
TUNGraph	snap-core/graph.h	/^  TUNGraph(TSIn& SIn) : MxNId(SIn), NEdges(SIn), NodeH(SIn) { }$/;"	f	class:TUNGraph
TUNGraph	snap-core/graph.h	/^  TUNGraph(const TUNGraph& Graph) : MxNId(Graph.MxNId), NEdges(Graph.NEdges), NodeH(Graph.NodeH) { }$/;"	f	class:TUNGraph
TUNGraph	snap-core/graph.h	/^  explicit TUNGraph(const int& Nodes, const int& Edges) : MxNId(0), NEdges(0) { Reserve(Nodes, Edges); }$/;"	f	class:TUNGraph
TUNGraph	snap-core/graph.h	/^class TUNGraph {$/;"	c
TUNGraphMP	snap-exp/graphmp-exp.h	/^  TUNGraphMP() : CRef(), MxNId(0), NEdges(0), NodeH() { }$/;"	f	class:TUNGraphMP
TUNGraphMP	snap-exp/graphmp-exp.h	/^  TUNGraphMP(TSIn& SIn) : MxNId(SIn), NEdges(SIn), NodeH(SIn) { }$/;"	f	class:TUNGraphMP
TUNGraphMP	snap-exp/graphmp-exp.h	/^  TUNGraphMP(const TUNGraphMP& Graph) : MxNId(Graph.MxNId), NEdges(Graph.NEdges), NodeH(Graph.NodeH) { }$/;"	f	class:TUNGraphMP
TUNGraphMP	snap-exp/graphmp-exp.h	/^  explicit TUNGraphMP(const int& Nodes, const int& Edges) : MxNId(0), NEdges(0) { Reserve(Nodes, Edges); }$/;"	f	class:TUNGraphMP
TUNGraphMP	snap-exp/graphmp-exp.h	/^class TUNGraphMP {$/;"	c
TUNGraphMtx	snap-core/gsvd.cpp	/^TUNGraphMtx::TUNGraphMtx(const PUNGraph& GraphPt) : Graph() { $/;"	f	class:TUNGraphMtx
TUNGraphMtx	snap-core/gsvd.h	/^  TUNGraphMtx(const TUNGraphMtx& GraphMtx) : Graph(GraphMtx.Graph) { }$/;"	f	class:TUNGraphMtx
TUNGraphMtx	snap-core/gsvd.h	/^class TUNGraphMtx : public TMatrix {$/;"	c
TUNLoopGraph	test/test-alg.cpp	/^  PUNGraph TUNLoopGraph;$/;"	m	class:GraphTest	file:
TUNReverseTree	test/test-alg.cpp	/^  PUNGraph TUNReverseTree;$/;"	m	class:GraphTest	file:
TUStr	glib-core/unicodestring.cpp	/^TUStr::TUStr(const TStr& Str){$/;"	f	class:TUStr
TUStr	glib-core/unicodestring.h	/^  TUStr(): UniChV(){AssertUnicodeDefOk();}$/;"	f	class:TUStr
TUStr	glib-core/unicodestring.h	/^  TUStr(TSIn& SIn): UniChV(SIn){AssertUnicodeDefOk();}$/;"	f	class:TUStr
TUStr	glib-core/unicodestring.h	/^  TUStr(const TIntV& _UniChV): UniChV(_UniChV){AssertUnicodeDefOk();}$/;"	f	class:TUStr
TUStr	glib-core/unicodestring.h	/^  TUStr(const TUStr& UStr): UniChV(UStr.UniChV){AssertUnicodeDefOk();}$/;"	f	class:TUStr
TUStr	glib-core/unicodestring.h	/^class TUStr{$/;"	c
TUStrV	glib-core/unicodestring.h	/^typedef TVec<TUStr> TUStrV;$/;"	t
TUcdFileReader	glib-core/unicode.h	/^		TUcdFileReader() : f(0) { }$/;"	f	class:TUniChDb::TUcdFileReader
TUcdFileReader	glib-core/unicode.h	/^		TUcdFileReader(const TStr& fileName) : f(0), putBackCh(EOF) { Open(fileName); }$/;"	f	class:TUniChDb::TUcdFileReader
TUcdFileReader	glib-core/unicode.h	/^		TUcdFileReader(const TUcdFileReader& r) { Fail; }$/;"	f	class:TUniChDb::TUcdFileReader
TUcdFileReader	glib-core/unicode.h	/^	class TUcdFileReader$/;"	c	class:TUniChDb
TUndirFFire	snap-core/ff.h	/^  TUndirFFire(const double& _BurnProb=0.3) : Graph(TUNGraph::New()), BurnProb(_BurnProb) { }$/;"	f	class:TUndirFFire
TUndirFFire	snap-core/ff.h	/^class TUndirFFire {$/;"	c
TUndirNet	snap-core/network.h	/^  TUndirNet() : CRef(), MxNId(0), NEdges(0), NodeH(), SAttrN(), SAttrE() { }$/;"	f	class:TUndirNet
TUndirNet	snap-core/network.h	/^  TUndirNet(TSIn& SIn) : MxNId(SIn), NEdges(SIn), NodeH(SIn), SAttrN(SIn), SAttrE(SIn) { }$/;"	f	class:TUndirNet
TUndirNet	snap-core/network.h	/^  TUndirNet(const TUndirNet& Graph) : MxNId(Graph.MxNId), NEdges(Graph.NEdges), NodeH(Graph.NodeH),$/;"	f	class:TUndirNet
TUndirNet	snap-core/network.h	/^  explicit TUndirNet(const int& Nodes, const int& Edges) : MxNId(0), NEdges(0), SAttrN(), SAttrE() { Reserve(Nodes, Edges); }$/;"	f	class:TUndirNet
TUndirNet	snap-core/network.h	/^class TUndirNet {$/;"	c
TUniByteOrder	glib-core/unicode.h	/^TUniByteOrder;$/;"	t	typeref:enum:TUniByteOrder_
TUniByteOrder_	glib-core/unicode.h	/^typedef enum TUniByteOrder_$/;"	g
TUniCaseFolding	glib-core/unicode.h	/^	TUniCaseFolding() { }$/;"	f	class:TUniCaseFolding
TUniCaseFolding	glib-core/unicode.h	/^	explicit TUniCaseFolding(TSIn& SIn) : cfCommon(SIn), cfSimple(SIn), cfTurkic(SIn), cfFull(SIn) { SIn.LoadCs(); }$/;"	f	class:TUniCaseFolding
TUniCaseFolding	glib-core/unicode.h	/^class TUniCaseFolding$/;"	c
TUniChCategory	glib-core/unicode.h	/^TUniChCategory;$/;"	t	typeref:enum:TUniChCategory_
TUniChCategory_	glib-core/unicode.h	/^typedef enum TUniChCategory_$/;"	g
TUniChDb	glib-core/unicode.h	/^	TUniChDb() : scriptUnknown(-1) { }$/;"	f	class:TUniChDb
TUniChDb	glib-core/unicode.h	/^	explicit TUniChDb(TSIn& SIn) { Load(SIn); }$/;"	f	class:TUniChDb
TUniChDb	glib-core/unicode.h	/^class TUniChDb$/;"	c
TUniChFlags	glib-core/unicode.h	/^TUniChFlags;$/;"	t	typeref:enum:TUniChFlags_
TUniChFlags_	glib-core/unicode.h	/^typedef enum TUniChFlags_$/;"	g
TUniChInfo	glib-core/unicode.h	/^	TUniChInfo() : chCat(char(ucOther)), chSubCat(char(ucOtherNotAssigned & 0xff)), combClass(ccInvalid),$/;"	f	class:TUniChInfo
TUniChInfo	glib-core/unicode.h	/^	explicit TUniChInfo(TSIn& SIn) { Load(SIn); }$/;"	f	class:TUniChInfo
TUniChInfo	glib-core/unicode.h	/^class TUniChInfo$/;"	c
TUniChProperties	glib-core/unicode.h	/^TUniChProperties;$/;"	t	typeref:enum:TUniChProperties_
TUniChPropertiesX	glib-core/unicode.h	/^TUniChPropertiesX;$/;"	t	typeref:enum:TUniChPropertiesX_
TUniChPropertiesX_	glib-core/unicode.h	/^typedef enum TUniChPropertiesX_$/;"	g
TUniChProperties_	glib-core/unicode.h	/^typedef enum TUniChProperties_$/;"	g
TUniChSubCategory	glib-core/unicode.h	/^TUniChSubCategory;$/;"	t	typeref:enum:TUniChSubCategory_
TUniChSubCategory_	glib-core/unicode.h	/^typedef enum TUniChSubCategory_$/;"	g
TUniCodec	glib-core/unicode.h	/^	TUniCodec() : replacementChar(DefaultReplacementChar), errorHandling(uehIgnore), strict(false), skipBom(true)$/;"	f	class:TUniCodec
TUniCodec	glib-core/unicode.h	/^	TUniCodec(TUnicodeErrorHandling errorHandling_, bool strict_, int replacementChar_, bool skipBom_) :$/;"	f	class:TUniCodec
TUniCodec	glib-core/unicode.h	/^class TUniCodec$/;"	c
TUniTrie	glib-core/unicode.h	/^	TUniTrie() { }$/;"	f	class:TUniTrie
TUniTrie	glib-core/unicode.h	/^class TUniTrie$/;"	c
TUniVecIdx	glib-core/unicode.h	/^typedef int TUniVecIdx;$/;"	t
TUnicode	glib-core/unicode.h	/^	TUnicode() { Init(); }$/;"	f	class:TUnicode
TUnicode	glib-core/unicode.h	/^	explicit TUnicode(const TStr& fnBinUcd) { ucd.LoadBin(fnBinUcd); Init(); }$/;"	f	class:TUnicode
TUnicode	glib-core/unicode.h	/^class TUnicode$/;"	c
TUnicodeDef	glib-core/unicodestring.h	/^  TUnicodeDef(): Unicode(NULL){}$/;"	f	class:TUnicodeDef
TUnicodeDef	glib-core/unicodestring.h	/^class TUnicodeDef{$/;"	c
TUnicodeErrorHandling	glib-core/unicode.h	/^TUnicodeErrorHandling;$/;"	t	typeref:enum:TUnicodeErrorHandling_
TUnicodeErrorHandling_	glib-core/unicode.h	/^typedef enum TUnicodeErrorHandling_$/;"	g
TUnicodeException	glib-core/unicode.h	/^	TUnicodeException(size_t srcIdx_, int srcChar_, const TStr& message_) :$/;"	f	class:TUnicodeException
TUnicodeException	glib-core/unicode.h	/^class TUnicodeException$/;"	c
TUnionFind	snap-core/gbase.h	/^  TUnionFind() : KIdSetH() { }$/;"	f	class:TUnionFind
TUnionFind	snap-core/gbase.h	/^  TUnionFind(const TUnionFind& UnionFind) : KIdSetH(UnionFind.KIdSetH) { }$/;"	f	class:TUnionFind
TUnionFind	snap-core/gbase.h	/^  TUnionFind(const int& ExpectKeys) : KIdSetH(ExpectKeys, true) { }$/;"	f	class:TUnionFind
TUnionFind	snap-core/gbase.h	/^class TUnionFind {$/;"	c
TUrl	glib-core/url.cpp	/^TUrl::TUrl(const TStr& _RelUrlStr, const TStr& _BaseUrlStr):$/;"	f	class:TUrl
TUrl	glib-core/url.h	/^  TUrl(TSIn&){Fail;}$/;"	f
TUrl	glib-core/url.h	/^  UndefDefaultCopyAssign(TUrl);$/;"	v
TUrlLx	glib-core/url.cpp	/^  TUrlLx(const TStr& _Str): Bf(_Str), BfC(0){}$/;"	f	class:TUrlLx
TUrlLx	glib-core/url.cpp	/^class TUrlLx{$/;"	c	file:
TUrlLxChDef	glib-core/url.cpp	/^TUrlLxChDef::TUrlLxChDef():$/;"	f	class:TUrlLxChDef
TUrlLxChDef	glib-core/url.cpp	/^class TUrlLxChDef{$/;"	c	file:
TUrlScheme	glib-core/url.h	/^typedef enum {usUndef, usHttp, usOther} TUrlScheme;$/;"	t	typeref:enum:__anon34
TUrlTy	snap-exp/memes.h	/^} TUrlTy; \/\/ utBlog is the default type$/;"	t	typeref:enum:__anon14
TUtf16BomHandling	glib-core/unicode.h	/^TUtf16BomHandling;$/;"	t	typeref:enum:TUtf16BomHandling_
TUtf16BomHandling_	glib-core/unicode.h	/^typedef enum TUtf16BomHandling_$/;"	g
TVPool	snap-core/bignet.h	/^  typedef TVecPool<TInt> TVPool;$/;"	t	class:TBigNet
TVVVec	glib-core/ds.h	/^  TVVVec(): XDim(), YDim(), ZDim(), ValV(){}$/;"	f	class:TVVVec
TVVVec	glib-core/ds.h	/^  TVVVec(const TVVVec& Vec):$/;"	f	class:TVVVec
TVVVec	glib-core/ds.h	/^  TVVVec(const int& _XDim, const int& _YDim, const int& _ZDim):$/;"	f	class:TVVVec
TVVVec	glib-core/ds.h	/^  explicit TVVVec(TSIn& SIn):$/;"	f	class:TVVVec
TVVVec	glib-core/ds.h	/^class TVVVec{$/;"	c
TVVec	glib-core/ds.h	/^  TVVec(): XDim(), YDim(), ValV(){}$/;"	f	class:TVVec
TVVec	glib-core/ds.h	/^  TVVec(const TVVec& Vec):$/;"	f	class:TVVec
TVVec	glib-core/ds.h	/^  TVVec(const int& _XDim, const int& _YDim):$/;"	f	class:TVVec
TVVec	glib-core/ds.h	/^  explicit TVVec(TSIn& SIn) {Load(SIn);}$/;"	f	class:TVVec
TVVec	glib-core/ds.h	/^  explicit TVVec(const TVec<TVal>& _ValV, const int& _XDim, const int& _YDim):$/;"	f	class:TVVec
TVVec	glib-core/ds.h	/^class TVVec{$/;"	c
TValGroup	glib-core/shash.h	/^  typedef TSparseGroup<TVal, GroupSize> TValGroup;$/;"	t	class:TSparseTableI
TValV	glib-core/ds.h	/^  typedef TVec<TVal, TSizeTy> TValV;$/;"	t	class:TVecPool
TValV	glib-core/ds.h	/^  typedef TVec<TVal> TValV;$/;"	t	class:TGLib_OLD::TVecPool
TVarying	snap-adv/cascdynetinf.h	/^} TVarying;$/;"	t	typeref:enum:__anon59
TVec	glib-core/ds.h	/^  TVec(): MxVals(0), Vals(0), ValT(NULL){}$/;"	f	class:TVec
TVec	glib-core/ds.h	/^  TVec(const TSizeTy& _MxVals, const TSizeTy& _Vals){$/;"	f	class:TVec
TVec	glib-core/ds.h	/^  explicit TVec(TSIn& SIn): MxVals(0), Vals(0), ValT(NULL){Load(SIn);}$/;"	f	class:TVec
TVec	glib-core/ds.h	/^  explicit TVec(TVal *_ValT, const TSizeTy& _Vals):$/;"	f	class:TVec
TVec	glib-core/ds.h	/^  explicit TVec(const TSizeTy& _Vals){$/;"	f	class:TVec
TVec	glib-core/ds.h	/^TVec<TVal, TSizeTy>::TVec(const TVec<TVal, TSizeTy>& Vec){$/;"	f	class:TVec
TVec	glib-core/ds.h	/^class TVec{$/;"	c
TVecElt	glib-core/unicode.h	/^class TVecElt$/;"	c
TVecElt	glib-core/unicode.h	/^class TVecElt<TChA>$/;"	c
TVecElt	glib-core/unicode.h	/^class TVecElt<TVec<TDat> >$/;"	c
TVecIdx	glib-core/unicode.h	/^	typedef TUniVecIdx TVecIdx;$/;"	t	class:T8BitCodec
TVecIdx	glib-core/unicode.h	/^	typedef TUniVecIdx TVecIdx;$/;"	t	class:TUniCaseFolding
TVecIdx	glib-core/unicode.h	/^	typedef TUniVecIdx TVecIdx;$/;"	t	class:TUniChDb
TVecIdx	glib-core/unicode.h	/^	typedef TUniVecIdx TVecIdx;$/;"	t	class:TUniCodec
TVecIdx	glib-core/unicode.h	/^	typedef TUniVecIdx TVecIdx;$/;"	t	class:TUniTrie
TVecPool	glib-core/ds.h	/^TVecPool<TVal, TSizeTy>::TVecPool(TSIn& SIn) : FastCopy(SIn) {$/;"	f	class:TVecPool
TVecPool	glib-core/ds.h	/^TVecPool<TVal, TSizeTy>::TVecPool(const TSize& ExpectVals, const TSize& _GrowBy, const bool& _FastCopy, const TVal& _EmptyVal) : GrowBy(_GrowBy), MxVals(0), Vals(0), EmptyVal(_EmptyVal), ValBf(NULL) {$/;"	f	class:TVecPool
TVecPool	glib-core/ds.h	/^TVecPool<TVal, TSizeTy>::TVecPool(const TVecPool& Pool) : FastCopy(Pool.FastCopy), GrowBy(Pool.GrowBy), MxVals(Pool.MxVals), Vals(Pool.Vals), EmptyVal(Pool.EmptyVal), IdToOffV(Pool.IdToOffV) {$/;"	f	class:TVecPool
TVecPool	glib-core/ds.h	/^TVecPool<TVal>::TVecPool(TSIn& SIn):$/;"	f	class:TGLib_OLD::TVecPool
TVecPool	glib-core/ds.h	/^TVecPool<TVal>::TVecPool(const ::TSize& ExpectVals, const ::TSize& _GrowBy, const bool& _FastCopy, const TVal& _EmptyVal) :$/;"	f	class:TGLib_OLD::TVecPool
TVecPool	glib-core/ds.h	/^TVecPool<TVal>::TVecPool(const TVecPool& Pool):$/;"	f	class:TGLib_OLD::TVecPool
TVecPool	glib-core/ds.h	/^class TVecPool {$/;"	c
TVecPool	glib-core/ds.h	/^class TVecPool {$/;"	c	namespace:TGLib_OLD
TVector	glib-core/unicode.h	/^	typedef TChA TVector;$/;"	t	class:TVecElt
TVector	glib-core/unicode.h	/^	typedef TVec<TDat> TVector;$/;"	t	class:TVecElt
TVectorBuilder	glib-core/unicode.cpp	/^class TVectorBuilder$/;"	c	namespace:__anon54	file:
TVectorBuilder2	glib-core/unicode.cpp	/^	TVectorBuilder2(int i) { v.Add(i); }$/;"	f	class:__anon54::TVectorBuilder2
TVectorBuilder2	glib-core/unicode.cpp	/^class TVectorBuilder2$/;"	c	namespace:__anon54	file:
TWCh	glib-core/wch.h	/^  TWCh(): MsVal(0), LsVal(0){}$/;"	f	class:TWCh
TWCh	glib-core/wch.h	/^  TWCh(TSIn& SIn){SIn.Load(MsVal); SIn.Load(LsVal);}$/;"	f	class:TWCh
TWCh	glib-core/wch.h	/^  TWCh(const int& _MsVal, const int& _LsVal):$/;"	f	class:TWCh
TWCh	glib-core/wch.h	/^  TWCh(const uchar& _LsVal): MsVal(0), LsVal(_LsVal){}$/;"	f	class:TWCh
TWCh	glib-core/wch.h	/^  TWCh(const uchar& _MsVal, const uchar& _LsVal):$/;"	f	class:TWCh
TWCh	glib-core/wch.h	/^class TWCh{$/;"	c
TWChA	glib-core/wch.h	/^  TWChA(TSIn& SIn): WChV(SIn){}$/;"	f	class:TWChA
TWChA	glib-core/wch.h	/^  TWChA(const TChA& ChA): WChV(){PutCStr(ChA.CStr());}$/;"	f	class:TWChA
TWChA	glib-core/wch.h	/^  TWChA(const TStr& Str): WChV(){PutCStr(Str.CStr());}$/;"	f	class:TWChA
TWChA	glib-core/wch.h	/^  TWChA(const TWChA& WChA): WChV(WChA.WChV){}$/;"	f	class:TWChA
TWChA	glib-core/wch.h	/^  TWChA(const TWChV& _WChV): WChV(_WChV){}$/;"	f	class:TWChA
TWChA	glib-core/wch.h	/^  TWChA(const char* CStr): WChV(){PutCStr(CStr);}$/;"	f	class:TWChA
TWChA	glib-core/wch.h	/^  TWChA(const int& MxWChs=0): WChV(MxWChs, 0){}$/;"	f	class:TWChA
TWChA	glib-core/wch.h	/^class TWChA{$/;"	c
TWChV	glib-core/wch.h	/^typedef TVec<TWCh> TWChV;$/;"	t
TWgtNet	snap-exp/wgtnet.h	/^  TWgtNet() : TNet() { }$/;"	f	class:TWgtNet
TWgtNet	snap-exp/wgtnet.h	/^  TWgtNet(TSIn& SIn) : TNet(SIn) { }$/;"	f	class:TWgtNet
TWgtNet	snap-exp/wgtnet.h	/^class TWgtNet : public TNodeEDatNet<TStr, TFlt> {$/;"	c
TWikiEditCnt	snap-exp/wikinet.h	/^  TWikiEditCnt() { }$/;"	f	class:TWikiEditCnt
TWikiEditCnt	snap-exp/wikinet.h	/^  TWikiEditCnt(TSIn& SIn) : RfaEdCntH(SIn) { }$/;"	f	class:TWikiEditCnt
TWikiEditCnt	snap-exp/wikinet.h	/^class TWikiEditCnt {$/;"	c
TWikiElec	snap-exp/wikinet.cpp	/^TWikiElec::TWikiElec(TSIn& SIn) : RfaTitle(SIn), UsrId(SIn), NomUId(SIn), BurUId(SIn), IsSucc(SIn), ElecTm(SIn), VoteV(SIn) {$/;"	f	class:TWikiElec
TWikiElec	snap-exp/wikinet.h	/^  TWikiElec() : UsrId(-1), NomUId(-1), BurUId(-1), ElecTm() { }$/;"	f	class:TWikiElec
TWikiElec	snap-exp/wikinet.h	/^  TWikiElec(const int& Usr, const TSecTm& Tm) : UsrId(Usr), NomUId(-1), BurUId(-1), ElecTm(Tm) { }$/;"	f	class:TWikiElec
TWikiElec	snap-exp/wikinet.h	/^class TWikiElec {$/;"	c
TWikiElecBs	snap-exp/wikinet.h	/^  TWikiElecBs() { }$/;"	f	class:TWikiElecBs
TWikiElecBs	snap-exp/wikinet.h	/^  TWikiElecBs(TSIn& SIn) : UsrH(SIn), ElecV(SIn) { }$/;"	f	class:TWikiElecBs
TWikiElecBs	snap-exp/wikinet.h	/^class TWikiElecBs {$/;"	c
TWikiElecBsOLD	snap-exp/wikinet.h	/^  TWikiElecBsOLD() { }$/;"	f	class:TWikiElecBsOLD
TWikiElecBsOLD	snap-exp/wikinet.h	/^  TWikiElecBsOLD(TSIn& SIn) : UsrH(SIn), UsrElecH(SIn) { }$/;"	f	class:TWikiElecBsOLD
TWikiElecBsOLD	snap-exp/wikinet.h	/^class TWikiElecBsOLD {$/;"	c
TWikiElecV	snap-exp/wikinet.h	/^typedef TVec<TWikiElec> TWikiElecV;$/;"	t
TWikiMetaHist	snap-exp/wikinet.cpp	/^TWikiMetaHist::TWikiMetaHist(const PSIn& SIn) : SInPt(SIn), XmlInPt() {$/;"	f	class:TWikiMetaHist
TWikiMetaHist	snap-exp/wikinet.cpp	/^TWikiMetaHist::TWikiMetaHist(const TStr& InFNm) : SInPt(TZipIn::IsZipFNm(InFNm) ? TZipIn::New(InFNm) : TFIn::New(InFNm)), XmlInPt(TXmlParser::New(SInPt)), PageCnt(0) {$/;"	f	class:TWikiMetaHist
TWikiMetaHist	snap-exp/wikinet.h	/^  TWikiMetaHist() : XmlInPt() { }$/;"	f	class:TWikiMetaHist
TWikiMetaHist	snap-exp/wikinet.h	/^class TWikiMetaHist {$/;"	c
TWikiMetaLoader	snap-exp/wikinet.cpp	/^TWikiMetaLoader::TWikiMetaLoader(const TStr& InFNm) {$/;"	f	class:TWikiMetaLoader
TWikiMetaLoader	snap-exp/wikinet.h	/^class TWikiMetaLoader {$/;"	c
TWikiTalkEdge	snap-exp/wikinet.cpp	/^TWikiTalkEdge::TWikiTalkEdge() : TotTalks(), TotWords(), TalksBE(), WordsBE(), TalksAE(), WordsAE(), VoteSign(0), FirstTalk(), LastTalk(), VoteTm() {$/;"	f	class:TWikiTalkEdge
TWikiTalkEdge	snap-exp/wikinet.cpp	/^TWikiTalkEdge::TWikiTalkEdge(TSIn& SIn) : TotTalks(SIn), TotWords(SIn), TalksBE(SIn), WordsBE(SIn),$/;"	f	class:TWikiTalkEdge
TWikiTalkEdge	snap-exp/wikinet.cpp	/^TWikiTalkEdge::TWikiTalkEdge(const TSecTm& FTalk, const TSecTm& LTalk, const int& NTalks, const int& NWords) :$/;"	f	class:TWikiTalkEdge
TWikiTalkEdge	snap-exp/wikinet.cpp	/^TWikiTalkEdge::TWikiTalkEdge(const TWikiTalkEdge& Talk) : TotTalks(Talk.TotTalks), TotWords(Talk.TotWords),$/;"	f	class:TWikiTalkEdge
TWikiTalkEdge	snap-exp/wikinet.cpp	/^TWikiTalkEdge::TWikiTalkEdge(const int& _VoteSign) : TotTalks(), TotWords(), TalksBE(), WordsBE(), TalksAE(), WordsAE(),$/;"	f	class:TWikiTalkEdge
TWikiTalkEdge	snap-exp/wikinet.h	/^class TWikiTalkEdge {$/;"	c
TWikiTalkEdge2	snap-exp/wikinet.h	/^  TWikiTalkEdge2() { }$/;"	f	class:TWikiTalkEdge2
TWikiTalkEdge2	snap-exp/wikinet.h	/^  TWikiTalkEdge2(TSIn& SIn) : Tm(SIn), Words(SIn) { }$/;"	f	class:TWikiTalkEdge2
TWikiTalkEdge2	snap-exp/wikinet.h	/^  TWikiTalkEdge2(const TSecTm& TalkTm, const int& TalkWords) : Tm(TalkTm), Words(TalkWords) { }$/;"	f	class:TWikiTalkEdge2
TWikiTalkEdge2	snap-exp/wikinet.h	/^class TWikiTalkEdge2 {$/;"	c
TWikiTalkNet	snap-exp/wikinet.h	/^  TWikiTalkNet() : TNet() { }$/;"	f	class:TWikiTalkNet
TWikiTalkNet	snap-exp/wikinet.h	/^  TWikiTalkNet(TSIn& SIn) : TNet(SIn), UsrNIdH(SIn) {$/;"	f	class:TWikiTalkNet
TWikiTalkNet	snap-exp/wikinet.h	/^class TWikiTalkNet : public TNodeEDatNet<TWikiUsr, TWikiTalkEdge> {$/;"	c
TWikiTimeTalkNet	snap-exp/wikinet.h	/^  TWikiTimeTalkNet() : TNet() { }$/;"	f	class:TWikiTimeTalkNet
TWikiTimeTalkNet	snap-exp/wikinet.h	/^  TWikiTimeTalkNet(TSIn& SIn) : TNet(SIn), UsrNIdH(SIn) { }$/;"	f	class:TWikiTimeTalkNet
TWikiTimeTalkNet	snap-exp/wikinet.h	/^class TWikiTimeTalkNet : public TNodeEdgeNet<TChA, TWikiTalkEdge2> { \/\/ (talk time, number of words)$/;"	c
TWikiUsr	snap-exp/wikinet.cpp	/^TWikiUsr::TWikiUsr() : Usr(), Admin(false), ElecTm(), BarnStars(), MnEdCnt(), MnEdWrds(), MnTkEdCnt(), MnTkEdWrds(),$/;"	f	class:TWikiUsr
TWikiUsr	snap-exp/wikinet.cpp	/^TWikiUsr::TWikiUsr(TSIn& SIn) : Usr(SIn), Admin(SIn), ElecTm(SIn), BarnStars(SIn), MnEdCnt(SIn),$/;"	f	class:TWikiUsr
TWikiUsr	snap-exp/wikinet.cpp	/^TWikiUsr::TWikiUsr(const TChA& UsrStr) : Usr(UsrStr), Admin(false), ElecTm(), BarnStars(), MnEdCnt(), MnEdWrds(),$/;"	f	class:TWikiUsr
TWikiUsr	snap-exp/wikinet.cpp	/^TWikiUsr::TWikiUsr(const TWikiUsr& WikiUsr) : Usr(WikiUsr.Usr), Admin(WikiUsr.Admin), ElecTm(WikiUsr.ElecTm),$/;"	f	class:TWikiUsr
TWikiUsr	snap-exp/wikinet.h	/^class TWikiUsr {$/;"	c
TWikiVote	snap-exp/wikinet.h	/^  TWikiVote() { }$/;"	f	class:TWikiVote
TWikiVote	snap-exp/wikinet.h	/^  TWikiVote(TSIn& SIn) { SIn.LoadBf(this, sizeof(TWikiVote)); }$/;"	f	class:TWikiVote
TWikiVote	snap-exp/wikinet.h	/^  TWikiVote(const int& UsrID, const int _UsrVote, const int& _UsrIndent, const int& TextLen, const TSecTm& VoteTime) :$/;"	f	class:TWikiVote
TWikiVote	snap-exp/wikinet.h	/^class TWikiVote {$/;"	c
TWikiVoteV	snap-exp/wikinet.h	/^typedef TVec<TWikiVote> TWikiVoteV;$/;"	t
TXmlChDef	glib-core/xml.cpp	/^TXmlChDef::TXmlChDef():$/;"	f	class:TXmlChDef
TXmlChDef	glib-core/xml.h	/^  TXmlChDef(TSIn& SIn):$/;"	f
TXmlObjSer	glib-core/xml.h	/^class TXmlObjSer{$/;"	c
TXmlObjSerTagNm	glib-core/xml.cpp	/^TXmlObjSerTagNm::TXmlObjSerTagNm($/;"	f	class:TXmlObjSerTagNm
TXmlObjSerTagNm	glib-core/xml.h	/^class TXmlObjSerTagNm{$/;"	c
TZipIn	glib-core/zipfl.cpp	/^TZipIn::TZipIn(const TStr& FNm) : TSBase(FNm.CStr()), TSIn(FNm), ZipStdoutRd(NULL), ZipStdoutWr(NULL),$/;"	f	class:TZipIn
TZipIn	glib-core/zipfl.cpp	/^TZipIn::TZipIn(const TStr& FNm, bool& OpenedP) : TSBase(FNm.CStr()), TSIn(FNm), ZipStdoutRd(NULL), ZipStdoutWr(NULL),$/;"	f	class:TZipIn
TZipIn	glib-core/zipfl.h	/^class TZipIn : public TSIn {$/;"	c
TZipOut	glib-core/zipfl.cpp	/^TZipOut::TZipOut(const TStr& FNm) : TSBase(FNm.CStr()), TSOut(FNm), ZipStdinRd(NULL), ZipStdinWr(NULL), Bf(NULL), BfL(0){$/;"	f	class:TZipOut
TZipOut	glib-core/zipfl.h	/^class TZipOut : public TSOut{$/;"	c
TabCh	glib-core/dt.cpp	/^const char TCh::TabCh=char(9);$/;"	m	class:TCh	file:
TabStr	glib-core/lx.cpp	/^const TStr TLxSymStr::TabStr="<tab>";$/;"	m	class:TLxSymStr	file:
TabWCh	glib-core/wch.h	/^  static const TWCh TabWCh;$/;"	m	class:TWCh
Table	glib-core/hashmp.h	/^  TVec<TPHKeyDat> Table;$/;"	m	class:THashMP
Table	glib-core/shash.h	/^  TSparseTable<THashKeyDat, GroupSize> Table;$/;"	m	class:TSparseHash
Table	glib-core/shash.h	/^  TSparseTable<TKey, GroupSize> Table;$/;"	m	class:TSparseSet
Table	snap-core/table.h	/^  TTable* Table; \/\/\/< Reference to table containing this row.$/;"	m	class:TRowIteratorWithRemove
Table	snap-core/table.h	/^  const TTable* Table; \/\/\/< Reference to table containing this row.$/;"	m	class:TRowIterator
Table	snap-exp/alternativetable.h	/^  ExplicitStringTable* Table; \/\/\/< Reference to table containing this row.$/;"	m	class:ExplicitStringRowIteratorWithRemove
Table	snap-exp/alternativetable.h	/^  const ExplicitStringTable* Table; \/\/\/< Reference to table containing this row.$/;"	m	class:ExplicitStringRowIterator
Table	snap-exp/alternativetable.h	/^  const RowBasedTable* Table; \/\/\/< Reference to table containing this row.$/;"	m	class:RowBasedRowIterator
TableFromHashMap	snap-core/table.h	/^  static PTable TableFromHashMap(const THash<TInt,TFlt>& H, const TStr& Col1, const TStr& Col2,$/;"	f	class:TTable
TableFromHashMap	snap-core/table.h	/^  static PTable TableFromHashMap(const THash<TInt,TInt>& H, const TStr& Col1, const TStr& Col2,$/;"	f	class:TTable
TagNm	glib-core/xml.h	/^  TStr TagNm;$/;"	m	class:TXmlObjSerTagNm
TagNm	snap-exp/dblp.h	/^  TChA TagNm, TagVal;$/;"	m	class:TDblpLoader
TagVal	snap-exp/dblp.h	/^  TChA TagNm, TagVal;$/;"	m	class:TDblpLoader
Take2AmbProb	snap-core/ff.h	/^  TFlt Take2AmbProb, OrphanProb;$/;"	m	class:TFfGGen
TakeBasicStat	snap-core/gstat.h	/^void TGStat::TakeBasicStat(const PGraph& Graph, TFSet FSet, const bool& IsMxWcc) {$/;"	f	class:TGStat
TakeBasicStat	snap-core/gstat.h	/^void TGStat::TakeBasicStat(const PGraph& Graph, const bool& IsMxWcc) {$/;"	f	class:TGStat
TakeBccStat	snap-core/gstat.h	/^void TGStat::TakeBccStat(const PGraph& Graph, TFSet StatFSet) {$/;"	f	class:TGStat
TakeClustCf	snap-core/gstat.h	/^void TGStat::TakeClustCf(const PGraph& Graph, const int& SampleNodes) {$/;"	f	class:TGStat
TakeConnComp	snap-core/gstat.h	/^void TGStat::TakeConnComp(const PGraph& Graph) {$/;"	f	class:TGStat
TakeConnComp	snap-core/gstat.h	/^void TGStat::TakeConnComp(const PGraph& Graph, TFSet StatFSet) {$/;"	f	class:TGStat
TakeDegDistr	snap-core/gstat.h	/^void TGStat::TakeDegDistr(const PGraph& Graph) {$/;"	f	class:TGStat
TakeDegDistr	snap-core/gstat.h	/^void TGStat::TakeDegDistr(const PGraph& Graph, TFSet StatFSet) {$/;"	f	class:TGStat
TakeDiam	snap-core/gstat.h	/^void TGStat::TakeDiam(const PGraph& Graph, TFSet StatFSet, const bool& IsMxWcc) {$/;"	f	class:TGStat
TakeDiam	snap-core/gstat.h	/^void TGStat::TakeDiam(const PGraph& Graph, const bool& IsMxWcc) {$/;"	f	class:TGStat
TakeGraph	snap-core/ghash.cpp	/^void TGraphKey::TakeGraph(const PNGraph& Graph) {$/;"	f	class:TGraphKey
TakeGraph	snap-core/ghash.cpp	/^void TGraphKey::TakeGraph(const PNGraph& Graph, TIntPrV& NodeMap) {$/;"	f	class:TGraphKey
TakeSccStat	snap-core/gstat.h	/^void TGStat::TakeSccStat(const PGraph& Graph, TFSet StatFSet) {$/;"	f	class:TGStat
TakeSig	snap-core/ghash.cpp	/^void TGraphKey::TakeSig(const PNGraph& Graph, const int& MnSvdGraph, const int& MxSvdGraph) {$/;"	f	class:TGraphKey
TakeSngVals	snap-core/gstat.cpp	/^int TGStat::TakeSngVals = 100;$/;"	m	class:TGStat	file:
TakeSngVals	snap-core/gstat.h	/^  static int TakeSngVals;$/;"	m	class:TGStat
TakeSpectral	snap-core/gstat.cpp	/^void TGStat::TakeSpectral(const PNGraph& Graph, TFSet StatFSet, int _TakeSngVals) {$/;"	f	class:TGStat
TakeSpectral	snap-core/gstat.cpp	/^void TGStat::TakeSpectral(const PNGraph& Graph, const int _TakeSngVals) {$/;"	f	class:TGStat
TakeStat	examples/cascades/cascades.cpp	/^  void TakeStat(const PGraph& InfG, const PGraph& NetG, const TIntH& NIdInfTmH, const double& P, const bool& DivByM=true) {$/;"	f	class:TCascadeStat
TakeStat	snap-core/gstat.cpp	/^void TGStat::TakeStat(const PNGraph& Graph, const TSecTm& _Time, TFSet StatFSet, const TStr& GraphName) {$/;"	f	class:TGStat
TakeStat	snap-core/gstat.cpp	/^void TGStat::TakeStat(const PUNGraph& Graph, const TSecTm& _Time, TFSet StatFSet, const TStr& GraphName) {$/;"	f	class:TGStat
TakeStat	snap-core/gstat.h	/^void TGStat::TakeStat(const PGraph& Graph, const TSecTm& _Time, TFSet StatFSet, const TStr& GraphName) {$/;"	f	class:TGStat
TakeTriadPart	snap-core/gstat.h	/^void TGStat::TakeTriadPart(const PGraph& Graph) {$/;"	f	class:TGStat
TakeValAt	snap-adv/ncp.h	/^  static int TakeValAt;$/;"	m	class:TLocClustStat
TalkLStr	snap-exp/wikinet.h	/^  TChA MainLStr, TalkLStr, UserLStr, UserTalkLStr, OtherLStr, ExternalLStr; \/\/ links to other namespaces and external links$/;"	m	class:TWikiMetaLoader
TalksAE	snap-exp/wikinet.h	/^  TInt TotTalks, TotWords, TalksBE, WordsBE, TalksAE, WordsAE; \/\/ number of talks before\/after election (vote)$/;"	m	class:TWikiTalkEdge
TalksBE	snap-exp/wikinet.h	/^  TInt TotTalks, TotWords, TalksBE, WordsBE, TalksAE, WordsAE; \/\/ number of talks before\/after election (vote)$/;"	m	class:TWikiTalkEdge
Target	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^    int Target;$/;"	m	class:TMatchingMachine::TMaMaEdge
Target	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^    int Target;$/;"	m	class:TMatchingMachine::TMaMaEdge
TemplateStr	snap-exp/wikinet.h	/^  TChA CatStr, ImgStr, TemplateStr; \/\/ list of categories, images and templates$/;"	m	class:TWikiMetaLoader
Test	glib-core/gnuplot.cpp	/^void TGnuPlot::Test() {$/;"	f	class:TGnuPlot
Test	glib-core/unicode.cpp	/^void TUniCaseFolding::Test()$/;"	f	class:TUniCaseFolding
Test	glib-core/unicode.cpp	/^void TUniCaseFolding::Test(const TIntV& src, const TIntV& expectedDest, const bool full, const bool turkic, FILE *f)$/;"	f	class:TUniCaseFolding
Test	glib-core/unicode.cpp	/^void TUniChDb::Test(const TStr& basePath)$/;"	f	class:TUniChDb
Test	glib-core/unicode.h	/^	virtual void Test() const { impl.Test(); }$/;"	f	class:TCodecWrapper
Test	glib-core/unicode.h	/^	virtual void Test() const { }$/;"	f	class:TCodecBase
Test	glib-core/unicode.h	/^	void Test() const$/;"	f	class:T8BitCodec
Test	snap-adv/kronecker.cpp	/^void TKronMaxLL::Test() {$/;"	f	class:TKronMaxLL
Test	snap-adv/kronecker.h	/^  static void Test() {$/;"	f	class:TKronMomentsFit
Test	snap-core/triad.h	/^void TNetConstraint<PGraph>::Test() {$/;"	f	class:TNetConstraint
TestAnf	snap-core/anf.h	/^template <class PGraph> void TestAnf() {$/;"	f	namespace:TSnap
TestBicCriterion	snap-adv/kronecker.cpp	/^void TKroneckerLL::TestBicCriterion(const TStr& OutFNm, const TStr& Desc1, const PNGraph& G, const int& GradIters,$/;"	f	class:TKroneckerLL
TestCaseConversion	glib-core/unicode.cpp	/^void TUniChDb::TestCaseConversion(const TStr& source, const TStr& trueLc,$/;"	f	class:TUniChDb
TestCaseConversions	glib-core/unicode.cpp	/^void TUniChDb::TestCaseConversions()$/;"	f	class:TUniChDb
TestCat	glib-core/unicode.h	/^		void TestCat(const int cp) {$/;"	f	class:TUniChDb::TSubcatHelper
TestComposition	glib-core/unicode.cpp	/^void TUniChDb::TestComposition(const TStr& basePath)$/;"	f	class:TUniChDb
TestConnList	test/test-gio.cpp	/^void TestConnList() {$/;"	f
TestConnListStr	test/test-gio.cpp	/^void TestConnListStr() {$/;"	f
TestConvertESubGraphs	tutorials/demo-subgraph.cpp	/^void TestConvertESubGraphs() {$/;"	f
TestConvertGraphs	tutorials/demo-subgraph.cpp	/^void TestConvertGraphs() {$/;"	f
TestConvertSubGraphs	tutorials/demo-subgraph.cpp	/^void TestConvertSubGraphs() {$/;"	f
TestCur	glib-core/unicode.h	2715;"	d
TestCur	glib-core/unicode.h	2727;"	d
TestCurNext	glib-core/unicode.h	2519;"	d
TestCurNext	glib-core/unicode.h	2550;"	d
TestCurNext	glib-core/unicode.h	2751;"	d
TestCurNext	glib-core/unicode.h	2782;"	d
TestCurNext2	glib-core/unicode.h	2520;"	d
TestCurNext2	glib-core/unicode.h	2551;"	d
TestCurNext2	glib-core/unicode.h	2752;"	d
TestCurNext2	glib-core/unicode.h	2783;"	d
TestDecodeUtf16	glib-core/unicode.cpp	/^void TUniCodec::TestDecodeUtf16(TRnd& rnd, const TStr& testCaseDesc,$/;"	f	class:TUniCodec
TestDecodeUtf8	glib-core/unicode.cpp	/^void TUniCodec::TestDecodeUtf8(TRnd& rnd, const TStr& testCaseDesc)$/;"	f	class:TUniCodec
TestDegToCCfVector	test/test-triad.cpp	/^void TestDegToCCfVector(TFltPrV& DegToCCfV) {$/;"	f
TestEDatSubNets	tutorials/demo-subgraph.cpp	/^void TestEDatSubNets() {$/;"	f
TestEdgeList	test/test-gio.cpp	/^void TestEdgeList() {$/;"	f
TestEdgeListStr	test/test-gio.cpp	/^void TestEdgeListStr() {$/;"	f
TestEdgeSubNets	tutorials/demo-subgraph.cpp	/^void TestEdgeSubNets() {$/;"	f
TestEigSvd	examples/testgraph/testgraph.cpp	/^void TestEigSvd() {$/;"	f
TestEurlerVsRk	snap-exp/sir.cpp	/^void TSirModel::TestEurlerVsRk() {$/;"	f	class:TSirModel
TestFindNextWordOrSentenceBoundary	glib-core/unicode.cpp	/^void TUniChDb::TestFindNextWordOrSentenceBoundary(const TStr& basePath, bool sentence)$/;"	f	class:TUniChDb
TestFrugalInt	glib-core/dt.cpp	/^void TInt::TestFrugalInt(){$/;"	f	class:TInt
TestFull	test/test-cncom.cpp	/^void TestFull() {$/;"	f
TestFullBfsDfs	test/test-bfsdfs.cpp	/^void TestFullBfsDfs() {$/;"	f
TestGetClustCf	tutorials/demo-triad.cpp	/^void TestGetClustCf() {$/;"	f
TestGetClustCfDist	tutorials/demo-triad.cpp	/^void TestGetClustCfDist() {$/;"	f
TestGetClustCfDistCO	tutorials/demo-triad.cpp	/^void TestGetClustCfDistCO() {$/;"	f
TestGetClustCfDistHelper	tutorials/demo-triad.cpp	/^void TestGetClustCfDistHelper(TFltPrV& DegToCCfV) {$/;"	f
TestGetCmnNbrs	tutorials/demo-triad.cpp	/^void TestGetCmnNbrs() {$/;"	f
TestGetLen2Paths	tutorials/demo-triad.cpp	/^void TestGetLen2Paths() {$/;"	f
TestGetNodeCOTriads	tutorials/demo-triad.cpp	/^void TestGetNodeCOTriads() {$/;"	f
TestGetNodeClustCfSpecific	tutorials/demo-triad.cpp	/^void TestGetNodeClustCfSpecific() {$/;"	f
TestGetNodeClustCfVector	tutorials/demo-triad.cpp	/^void TestGetNodeClustCfVector() {$/;"	f
TestGetNodeTriads	tutorials/demo-triad.cpp	/^void TestGetNodeTriads() {$/;"	f
TestGetNodeTriadsGroupSetAndOut	tutorials/demo-triad.cpp	/^void TestGetNodeTriadsGroupSetAndOut() {$/;"	f
TestGetRndGraphs	tutorials/demo-subgraph.cpp	/^void TestGetRndGraphs() {$/;"	f
TestGetTriadEdges	tutorials/demo-triad.cpp	/^void TestGetTriadEdges() {$/;"	f
TestGetTriadParticip	tutorials/demo-triad.cpp	/^void TestGetTriadParticip() {$/;"	f
TestGetTriadsClosed	tutorials/demo-triad.cpp	/^void TestGetTriadsClosed() {$/;"	f
TestGetTriadsOpenClosed	tutorials/demo-triad.cpp	/^void TestGetTriadsOpenClosed() {$/;"	f
TestGetTriadsVector	tutorials/demo-triad.cpp	/^void TestGetTriadsVector() {$/;"	f
TestGetTriadsVectorHelper	tutorials/demo-triad.cpp	/^void TestGetTriadsVectorHelper(TIntTrV& NIdCOTriadV) {$/;"	f
TestGrad	snap-exp/linkpred.cpp	/^void TLpBase::TestGrad() {$/;"	f	class:__OLD__::TLpBase
TestGradDescent	snap-adv/kronecker.cpp	/^void TKroneckerLL::TestGradDescent(const int& KronIters, const int& KiloSamples, const TStr& Permutation) {$/;"	f	class:TKroneckerLL
TestKronDescent	snap-adv/kronecker.cpp	/^TFltQu TKroneckerLL::TestKronDescent(const bool& DoExact, const bool& TruePerm, double LearnRate, const int& WarmUp, const int& NSamples, const TKronMtx& TrueParam) {$/;"	f	class:TKroneckerLL
TestMatlabSparseMtx	test/test-gio.cpp	/^void TestMatlabSparseMtx() {$/;"	f
TestOpenCloseVector	test/test-triad.cpp	/^void TestOpenCloseVector(TIntTrV& NIdCOTriadV) {$/;"	f
TestPajek	test/test-gio.cpp	/^void TestPajek() {$/;"	f
TestPartitions	snap-exp/wikinet.cpp	/^void TWikiTalkNet::TestPartitions(const TStr& OutFNm) {$/;"	f	class:TWikiTalkNet
TestPrevCurNext	glib-core/unicode.h	2521;"	d
TestPrevCurNext	glib-core/unicode.h	2552;"	d
TestPrevCurNext	glib-core/unicode.h	2753;"	d
TestPrevCurNext	glib-core/unicode.h	2784;"	d
TestSamplePerm	snap-adv/kronecker.cpp	/^TFltV TKroneckerLL::TestSamplePerm(const TStr& OutFNm, const int& WarmUp, const int& NSamples, const TKronMtx& TrueMtx, const bool& DoPlot) {$/;"	f	class:TKroneckerLL
TestSaveGViz	test/test-gio.cpp	/^void TestSaveGViz() {$/;"	f
TestSubTNEGraphs	tutorials/demo-subgraph.cpp	/^void TestSubTNEGraphs() {$/;"	f
TestSubTNGraphs	tutorials/demo-subgraph.cpp	/^void TestSubTNGraphs() {$/;"	f
TestSubTUNGraphs	tutorials/demo-subgraph.cpp	/^void TestSubTUNGraphs() {$/;"	f
TestUtf16	glib-core/unicode.cpp	/^void TUniCodec::TestUtf16()$/;"	f	class:TUniCodec
TestUtf16	glib-core/unicode.cpp	/^void TUniCodec::TestUtf16(bool decode, size_t expectedRetVal, bool expectedThrow, const TIntV& src, const TIntV& expectedDest,$/;"	f	class:TUniCodec
TestUtf8	glib-core/unicode.cpp	/^void TUniCodec::TestUtf8()$/;"	f	class:TUniCodec
TestUtf8	glib-core/unicode.cpp	/^void TUniCodec::TestUtf8(bool decode, size_t expectedRetVal, bool expectedThrow, const TIntV& src, const TIntV& expectedDest, FILE *f)$/;"	f	class:TUniCodec
TestWbFindNonIgnored	glib-core/unicode.cpp	/^void TUniChDb::TestWbFindNonIgnored() const$/;"	f	class:TUniChDb
TestWbFindNonIgnored	glib-core/unicode.cpp	/^void TUniChDb::TestWbFindNonIgnored(const TIntV& src) const$/;"	f	class:TUniChDb
Text	snap-exp/wikinet.h	/^  TChA Title, Text, Tmp; \/\/ page title and text$/;"	m	class:TWikiMetaHist
TextCssFldVal	glib-core/http.cpp	/^const TStr THttp::TextCssFldVal="text\/css";$/;"	m	class:THttp	file:
TextCssFldVal	glib-core/http.h	/^  static const TStr TextCssFldVal;$/;"	m	class:THttp
TextFldVal	glib-core/http.cpp	/^const TStr THttp::TextFldVal="text\/";$/;"	m	class:THttp	file:
TextFldVal	glib-core/http.h	/^  static const TStr TextFldVal;$/;"	m	class:THttp
TextHtmlFldVal	glib-core/http.cpp	/^const TStr THttp::TextHtmlFldVal="text\/html";$/;"	m	class:THttp	file:
TextHtmlFldVal	glib-core/http.h	/^  static const TStr TextHtmlFldVal;$/;"	m	class:THttp
TextJavaScriptFldVal	glib-core/http.cpp	/^const TStr THttp::TextJavaScriptFldVal="text\/javascript";$/;"	m	class:THttp	file:
TextJavaScriptFldVal	glib-core/http.h	/^  static const TStr TextJavaScriptFldVal;$/;"	m	class:THttp
TextPlainFldVal	glib-core/http.cpp	/^const TStr THttp::TextPlainFldVal="text\/plain";$/;"	m	class:THttp	file:
TextPlainFldVal	glib-core/http.h	/^  static const TStr TextPlainFldVal;$/;"	m	class:THttp
TextWmlFldVal	glib-core/http.cpp	/^const TStr THttp::TextWmlFldVal="text\/vnd.wap.wml";$/;"	m	class:THttp	file:
TextWmlFldVal	glib-core/http.h	/^  static const TStr TextWmlFldVal;$/;"	m	class:THttp
TextXmlFldVal	glib-core/http.cpp	/^const TStr THttp::TextXmlFldVal="text\/xml";$/;"	m	class:THttp	file:
TextXmlFldVal	glib-core/http.h	/^  static const TStr TextXmlFldVal;$/;"	m	class:THttp
Theta	snap-adv/agm.h	/^    TFltV Theta;$/;"	m	class:TLogRegPredict
Theta	snap-adv/agm.h	/^  TFltV Theta;$/;"	m	class:TLogRegFit
Theta	snap-adv/circles.h	/^  TFlt* Theta; \/\/ Community parameters$/;"	m	class:TCluster
ThresholdJoin	snap-core/table.cpp	/^PTable TTable::ThresholdJoin(const TStr& KeyCol1, const TStr& JoinCol1, const TTable& Table, $/;"	f	class:TTable
ThresholdJoinCountCollisions	snap-core/table.cpp	/^void TTable::ThresholdJoinCountCollisions(const TTable& TB, const TTable& TS, $/;"	f	class:TTable
ThresholdJoinCountPerJoinKeyCollisions	snap-core/table.cpp	/^void TTable::ThresholdJoinCountPerJoinKeyCollisions(const TTable& TB, const TTable& TS, $/;"	f	class:TTable
ThresholdJoinInputCorrectness	snap-core/table.cpp	/^void TTable::ThresholdJoinInputCorrectness(const TStr& KeyCol1, const TStr& JoinCol1, const TTable& Table, $/;"	f	class:TTable
ThresholdJoinOutputTable	snap-core/table.cpp	/^PTable TTable::ThresholdJoinOutputTable(const THash<TIntPr,TIntTr>& Counters, TInt Threshold, const TTable& Table){$/;"	f	class:TTable
ThresholdJoinPerJoinKeyOutputTable	snap-core/table.cpp	/^PTable TTable::ThresholdJoinPerJoinKeyOutputTable(const THash<TIntTr,TIntTr>& Counters, TInt Threshold, const TTable& Table){$/;"	f	class:TTable
ThresholdSupp	snap-exp/trawling.cpp	/^void TTrawling::ThresholdSupp() {$/;"	f	class:TTrawling
ThuN	glib-core/tm.cpp	/^const int TTmInfo::ThuN=5; const int TTmInfo::FriN=6;$/;"	m	class:TTmInfo	file:
ThuN	glib-core/tm.h	/^  static const int ThuN; static const int FriN;$/;"	m	class:TTmInfo
Tick	glib-core/tm.h	/^  void Tick(){LastTick=(int)clock();}$/;"	f	class:TExeTm
Tick	snap-core/util.cpp	/^double TStopwatch::Tick() {$/;"	f	class:TStopwatch
Tick	snap-exp/multimodal-dev/benchmark-util.cpp	/^double Tick() {$/;"	f
Tics42	glib-core/gnuplot.cpp	/^int TGnuPlot::Tics42 = -2;$/;"	m	class:TGnuPlot	file:
Tics42	glib-core/gnuplot.h	/^  static int Tics42;        \/\/ 1 - "set ticks", 0 - "set ticscale"$/;"	m	class:TGnuPlot
Time	snap-core/cncom.h	/^  TInt Time;$/;"	m	class:TArtPointVisitor
Time	snap-core/cncom.h	/^  TInt Time;$/;"	m	class:TBiConVisitor
Time	snap-core/cncom.h	/^  TInt Time;$/;"	m	class:TSccVisitor
Time	snap-core/gstat.h	/^  TSecTm Time;$/;"	m	class:TGStat
Time	snap-exp/arxiv.h	/^    TTm Time;$/;"	m	class:TArxivPaperList::TArxivPaper
Time	snap-exp/arxiv.h	/^  TSecTm Time;$/;"	m	class:TArxivPaperList
TimeGrowth	snap-core/timenet.cpp	/^PGStatVec TTimeNENet::TimeGrowth(const TStr& FNmPref, const TStr& Desc, const TFSet& TakeStat, const int& NDiamRuns,$/;"	f	class:TTimeNENet
TimeGrowth	snap-core/timenet.cpp	/^PGStatVec TTimeNENet::TimeGrowth(const TTmUnit& TimeStep, const TFSet& TakeStat, const TSecTm& StartTm) const {$/;"	f	class:TTimeNENet
TimeGrowth	snap-core/timenet.cpp	/^PGStatVec TTimeNet::TimeGrowth(const TTmUnit& TmUnit, const TFSet& TakeStat, const TSecTm& StartTm) const {$/;"	f	class:TTimeNet
TimeLimitSec	snap-core/ff.cpp	/^int TFfGGen::TimeLimitSec = 30*60; \/\/ 30 minutes$/;"	m	class:TFfGGen	file:
TimeLimitSec	snap-core/ff.h	/^  static int TimeLimitSec;$/;"	m	class:TFfGGen
TimerH	glib-core/tm.h	/^	THash<TStr, TTmStopWatch> TimerH;$/;"	v
Title	glib-core/gnuplot.h	/^  TStr Title, LblX, LblY;$/;"	m	class:TGnuPlot
Title	snap-exp/arxiv.h	/^    TStr Title;$/;"	m	class:TArxivPaperList::TArxivPaper
Title	snap-exp/arxiv.h	/^  TStr Title;$/;"	m	class:TArxivPaperList
Title	snap-exp/dblp.h	/^  TChA Title;$/;"	m	class:TDblpLoader
Title	snap-exp/wikinet.h	/^  TChA Title, Text, Tmp; \/\/ page title and text$/;"	m	class:TWikiMetaHist
Title	snap-exp/wikinet.h	/^  TChA Title, Usr;$/;"	m	class:TWikiMetaLoader
TitleArgNm	glib-core/html.cpp	/^const TStr THtmlTok::TitleArgNm="TITLE";$/;"	m	class:THtmlTok	file:
TitleETagNm	glib-core/html.cpp	/^const TStr THtmlTok::TitleETagNm="<\/TITLE>";$/;"	m	class:THtmlTok	file:
TitleTagNm	glib-core/html.cpp	/^const TStr THtmlTok::TitleTagNm="<TITLE>";$/;"	m	class:THtmlTok	file:
Tm	snap-adv/cascdynetinf.h	/^  TFlt Tm;$/;"	m	class:THitInfo
Tm	snap-adv/cascnetinf.h	/^  TFlt Tm;$/;"	m	class:THitInfo
Tm	snap-exp/memenet.h	/^  TSecTm Tm;$/;"	m	class:TMemeNetDat
Tm	snap-exp/memes.h	/^    TSecTm Tm() const { return QtTm; }$/;"	f	class:TQuote::TTmUrlCnt
Tm	snap-exp/wikinet.h	/^  TSecTm Tm;$/;"	m	class:TWikiTalkEdge2
TmRtH	snap-core/cncom.h	/^  THash<TInt, TIntPr> TmRtH;$/;"	m	class:TSccVisitor
TmSoFar	glib-core/tm.h	/^    int TmSoFar;$/;"	m	class:TTmStopWatch
TmUnit	snap-core/gstat.h	/^  TTmUnit TmUnit;$/;"	m	class:TGStatVec
TmUrlCntV	snap-exp/memes.h	/^  TVec<TTmUrlCnt> TmUrlCntV;$/;"	m	class:TQuote
Tmp	snap-exp/wikinet.h	/^  TChA Title, Text, Tmp; \/\/ page title and text$/;"	m	class:TWikiMetaHist
ToCap	glib-core/dt.cpp	/^TStr& TStr::ToCap(){$/;"	f	class:TStr
ToCap	glib-core/dt.cpp	/^void TRStr::ToCap(){$/;"	f	class:TRStr
ToCaseFolded	glib-core/unicode.h	/^	template<typename TSrcVec> void ToCaseFolded(TSrcVec& src, const bool turkic = false) const { ToCaseFolded(src, 0, src.Len(), turkic); }$/;"	f	class:TUniChDb
ToCaseFolded	glib-core/unicode.h	/^	template<typename TSrcVec> void ToCaseFolded(TSrcVec& src, size_t srcIdx, const size_t srcCount, const bool turkic = false) const { caseFolding.FoldInPlace(src, srcIdx, srcCount, turkic); }$/;"	f	class:TUniChDb
ToCaseFolded	glib-core/unicode.h	/^	void ToCaseFolded(TIntV& src) const { return ucd.ToCaseFolded(src, false); }$/;"	f	class:TUnicode
ToGraph	snap-core/conv.h	/^PGraph ToGraph(PTable Table, const TStr& SrcCol, const TStr& DstCol, TAttrAggr AggrPolicy)$/;"	f	namespace:TSnap
ToGraphMP	snap-core/conv.h	/^PGraphMP ToGraphMP(PTable Table, const TStr& SrcCol, const TStr& DstCol) {$/;"	f	namespace:TSnap
ToGraphMP3	snap-core/conv.h	/^PGraphMP ToGraphMP3(PTable Table, const TStr& SrcCol, const TStr& DstCol) {$/;"	f	namespace:TSnap
ToGraphPerGroup	snap-core/table.cpp	/^TVec<PNEANet> TTable::ToGraphPerGroup(TStr GroupAttr, TAttrAggr AggrPolicy) {$/;"	f	class:TTable
ToGraphPerGroupIterator	snap-core/table.cpp	/^PNEANet TTable::ToGraphPerGroupIterator(TStr GroupAttr, TAttrAggr AggrPolicy) {$/;"	f	class:TTable
ToGraphSequence	snap-core/table.cpp	/^TVec<PNEANet> TTable::ToGraphSequence(TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, TInt JumpSize, TInt StartVal, TInt EndVal) {$/;"	f	class:TTable
ToGraphSequenceIterator	snap-core/table.cpp	/^PNEANet TTable::ToGraphSequenceIterator(TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, TInt JumpSize, TInt StartVal, TInt EndVal) {$/;"	f	class:TTable
ToHex	glib-core/dt.cpp	/^TStr& TStr::ToHex(){$/;"	f	class:TStr
ToLc	glib-core/dt.cpp	/^TChA& TChA::ToLc() {$/;"	f	class:TChA
ToLc	glib-core/dt.cpp	/^TStr& TStr::ToLc(){$/;"	f	class:TStr
ToLc	glib-core/dt.cpp	/^void TRStr::ToLc(){$/;"	f	class:TRStr
ToLc	glib-core/ss.cpp	/^void TSsParser::ToLc() {$/;"	f	class:TSsParser
ToLc	glib-core/ssmp.cpp	/^void TSsParserMP::ToLc() {$/;"	f	class:TSsParserMP
ToLcPath	glib-core/url.cpp	/^void TUrl::ToLcPath(){$/;"	f	class:TUrl
ToLowerCase	glib-core/unicodestring.cpp	/^void TUStr::ToLowerCase(){$/;"	f	class:TUStr
ToNetwork	snap-core/conv.h	/^PGraph ToNetwork(PTable Table,$/;"	f	namespace:TSnap
ToNetwork	snap-core/mmnet.cpp	/^PNEANet TMMNet::ToNetwork(TIntV& CrossNetTypes, TIntStrStrTrV& NodeAttrMap, TVec<TTriple<TInt, TStr, TStr> >& EdgeAttrMap) {$/;"	f	class:TMMNet
ToNetwork2	snap-core/mmnet.cpp	/^PNEANet TMMNet::ToNetwork2(TIntV& CrossNetTypes, TIntStrPrVH& NodeAttrMap, THash<TInt, TVec<TPair<TStr, TStr> > >& EdgeAttrMap) {$/;"	f	class:TMMNet
ToNetworkMP	snap-core/conv.h	/^PGraphMP ToNetworkMP(PTable Table,$/;"	f	namespace:TSnap
ToNetworkMP	snap-core/conv.h	/^inline PGraphMP ToNetworkMP(PTable Table,$/;"	f	namespace:TSnap
ToNetworkMP	snap-core/mmnet.cpp	/^PNEANetMP TMMNet::ToNetworkMP(TStrV& CrossNetNames) {$/;"	f	class:TMMNet
ToNetworkMP2	snap-core/conv.h	/^PGraphMP ToNetworkMP2(PTable Table,$/;"	f	namespace:TSnap
ToNetworkMP2	snap-core/conv.h	/^inline PGraphMP ToNetworkMP2(PTable Table,$/;"	f	namespace:TSnap
ToNrSpacing	glib-core/xml.cpp	/^void TXmlLx::ToNrSpacing(){$/;"	f	class:TXmlLx
ToOneMinusMtx	snap-adv/kronecker.cpp	/^void TKronMtx::ToOneMinusMtx() {$/;"	f	class:TKronMtx
ToSimpleCaseConverted	glib-core/unicode.h	/^void TUniChDb::ToSimpleCaseConverted(TSrcVec& src, size_t srcIdx, const size_t srcCount, const TCaseConversion how) const$/;"	f	class:TUniChDb
ToSimpleLowerCase	glib-core/unicode.h	/^	template<typename TSrcVec> void ToSimpleLowerCase(TSrcVec& src) const { ToSimpleLowerCase(src, 0, src.Len()); }$/;"	f	class:TUniChDb
ToSimpleLowerCase	glib-core/unicode.h	/^	template<typename TSrcVec> void ToSimpleLowerCase(TSrcVec& src, size_t srcIdx, const size_t srcCount) const { ToSimpleCaseConverted(src, srcIdx, srcCount, ccLower); }$/;"	f	class:TUniChDb
ToSimpleLowerCase	glib-core/unicode.h	/^	void ToSimpleLowerCase(TIntV& src) const { ucd.ToSimpleLowerCase(src); }$/;"	f	class:TUnicode
ToSimpleTitleCase	glib-core/unicode.h	/^	template<typename TSrcVec> void ToSimpleTitleCase(TSrcVec& src) const { ToSimpleTitleCase(src, 0, src.Len()); }$/;"	f	class:TUniChDb
ToSimpleTitleCase	glib-core/unicode.h	/^	template<typename TSrcVec> void ToSimpleTitleCase(TSrcVec& src, size_t srcIdx, const size_t srcCount) const { ToSimpleCaseConverted(src, srcIdx, srcCount, ccTitle); }$/;"	f	class:TUniChDb
ToSimpleTitleCase	glib-core/unicode.h	/^	void ToSimpleTitleCase(TIntV& src) const { ucd.ToSimpleTitleCase(src); }$/;"	f	class:TUnicode
ToSimpleUpperCase	glib-core/unicode.h	/^	template<typename TSrcVec> void ToSimpleUpperCase(TSrcVec& src) const { ToSimpleUpperCase(src, 0, src.Len()); }$/;"	f	class:TUniChDb
ToSimpleUpperCase	glib-core/unicode.h	/^	template<typename TSrcVec> void ToSimpleUpperCase(TSrcVec& src, size_t srcIdx, const size_t srcCount) const { ToSimpleCaseConverted(src, srcIdx, srcCount, ccUpper); }$/;"	f	class:TUniChDb
ToSimpleUpperCase	glib-core/unicode.h	/^	void ToSimpleUpperCase(TIntV& src) const { ucd.ToSimpleUpperCase(src); }$/;"	f	class:TUnicode
ToSpVec	glib-core/linalg.cpp	/^void TLAMisc::ToSpVec(const TFltV& Vec, TIntFltKdV& SpVec,$/;"	f	class:TLAMisc
ToStarterCase	glib-core/unicodestring.cpp	/^void TUStr::ToStarterCase(){$/;"	f	class:TUStr
ToTrunc	glib-core/dt.cpp	/^TChA& TChA::ToTrunc(){$/;"	f	class:TChA
ToTrunc	glib-core/dt.cpp	/^TStr& TStr::ToTrunc(){$/;"	f	class:TStr
ToUc	glib-core/dt.cpp	/^TChA& TChA::ToUc() {$/;"	f	class:TChA
ToUc	glib-core/dt.cpp	/^TStr& TStr::ToUc(){$/;"	f	class:TStr
ToUc	glib-core/dt.cpp	/^void TRStr::ToUc(){$/;"	f	class:TRStr
ToUnicode	glib-core/unicode.h	/^	size_t ToUnicode($/;"	f	class:T8BitCodec
ToUnicode	glib-core/unicode.h	/^	size_t ToUnicode(const TIntV& src, TIntV& dest, const bool clrDest = true) const { return ToUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:T8BitCodec
ToUnicode	glib-core/unicode.h	/^	size_t ToUnicode(const TIntV& src, TIntV& dest, const bool clrDest = true) const { return ToUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TCodecBase
ToUnicode	glib-core/unicode.h	/^	size_t ToUnicode(const TSrcVec& src, TVec<TDestCh>& dest, const bool clrDest = true) const { return ToUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:T8BitCodec
ToUnicode	glib-core/unicode.h	/^	size_t ToUnicode(const TStr& src, TIntV& dest, const bool clrDest = true) const { return ToUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:T8BitCodec
ToUnicode	glib-core/unicode.h	/^	size_t ToUnicode(const TStr& src, TIntV& dest, const bool clrDest = true) const { return ToUnicode(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:TCodecBase
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255); return c; }$/;"	f	class:TEncoding_ISO8859_1
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255);$/;"	f	class:TEncoding_CP1250
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255);$/;"	f	class:TEncoding_CP437
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255);$/;"	f	class:TEncoding_CP852
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255);$/;"	f	class:TEncoding_ISO8859_2
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255);$/;"	f	class:TEncoding_ISO8859_3
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255);$/;"	f	class:TEncoding_ISO8859_4
ToUnicode	glib-core/unicode.h	/^	static int ToUnicode(int c) { Assert(0 <= c && c <= 255);$/;"	f	class:TEncoding_YuAscii
ToUnicode	glib-core/unicode.h	/^	virtual size_t ToUnicode(const TIntV& src, size_t srcIdx, const size_t srcCount, TIntV& dest, const bool clrDest = true) const {$/;"	f	class:TCodecWrapper
ToUnicode	glib-core/unicode.h	/^	virtual size_t ToUnicode(const TStr& src, size_t srcIdx, const size_t srcCount, TIntV& dest, const bool clrDest = true) const {$/;"	f	class:TCodecWrapper
ToUpperCase	glib-core/unicodestring.cpp	/^void TUStr::ToUpperCase(){$/;"	f	class:TUStr
ToVarGraphSequence	snap-core/table.cpp	/^TVec<PNEANet> TTable::ToVarGraphSequence(TStr SplitAttr, TAttrAggr AggrPolicy, TIntPrV SplitIntervals) {$/;"	f	class:TTable
ToVarGraphSequenceIterator	snap-core/table.cpp	/^PNEANet TTable::ToVarGraphSequenceIterator(TStr SplitAttr, TAttrAggr AggrPolicy, TIntPrV SplitIntervals) {$/;"	f	class:TTable
ToVec	glib-core/linalg.cpp	/^void TLAMisc::ToVec(const TIntFltKdV& SpVec, TFltV& Vec, const int& VecLen) {$/;"	f	class:TLAMisc
Tol	snap-adv/cascdynetinf.h	/^  TFlt Tol, MaxAlpha, MinAlpha, InitAlpha;$/;"	m	class:TNIBs
Top	glib-core/ds.h	/^  TVal& Top(){Assert(0<ValV.Len()); return ValV.Last();}$/;"	f	class:TSStack
Top	glib-core/ds.h	/^  const TVal& Top() const {$/;"	f	class:TQQueue
Top	glib-core/ds.h	/^  const TVal& Top() const {Assert(0<ValV.Len()); return ValV.Last();}$/;"	f	class:TSStack
Top	snap-core/gbase.h	/^  const TVal& Top() const { return ValV[First]; }$/;"	f	class:TSnapQueue
Top1UF	snap-exp/wgtnet.h	/^  TUnionFind Top1UF;$/;"	m	class:TTop2FriendNet
Top2NIdH	snap-exp/wgtnet.h	/^  THash<TInt, TIntPr> Top2NIdH;$/;"	m	class:TTop2FriendNet
TopDomsByLag	snap-exp/memes.cpp	/^void TQuoteBs::TopDomsByLag(const TTmUnit& TmUnit, const int& TakeNDoms, const int& TakeNClusts, const int& Thresh) const {$/;"	f	class:TQuoteBs
TopDownStep	snap-core/bfsdfs.h	/^bool TBreathFS<PGraph>::TopDownStep(TIntV &NIdDistV, TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS
TopDownStep	snap-exp/bfs-dev/bfs-hybrid-test.h	/^bool TBreathFS_Hybrid_Test<PGraph>::TopDownStep(TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS_Hybrid_Test
TopDownStep	snap-exp/bfs-dev/bfs-hybrid.h	/^bool TBreathFS_Hybrid<PGraph>::TopDownStep(TIntV &NIdDistV, TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS_Hybrid
TopDownStep	snap-exp/bfs-dev/bfs-parallel.h	/^bool TBreathFS_Parallel<PGraph>::TopDownStep(TIntV &NIdDistV, TIntV *Frontier, TIntV *NextFrontier, int& MaxDist, const int& TargetNId, const bool& FollowOut, const bool& FollowIn) {$/;"	f	class:TBreathFS_Parallel
TopHeap	snap-core/gbase.h	/^  const TVal& TopHeap() const { return HeapV[0]; }$/;"	f	class:THeap
TotExeTm	snap-exp/spinn3r.h	/^  TExeTm TotExeTm;$/;"	m	class:TSpinn3rFeedItem
TotExeTm	snap-exp/spinn3r.h	/^  TExeTm TotExeTm;$/;"	m	class:TSpinn3rFullItem
TotTalks	snap-exp/wikinet.h	/^  TInt TotTalks, TotWords, TalksBE, WordsBE, TalksAE, WordsAE; \/\/ number of talks before\/after election (vote)$/;"	m	class:TWikiTalkEdge
TotWords	snap-exp/wikinet.h	/^  TInt TotTalks, TotWords, TalksBE, WordsBE, TalksAE, WordsAE; \/\/ number of talks before\/after election (vote)$/;"	m	class:TWikiTalkEdge
TotalCascadesAlpha	snap-adv/cascdynetinf.h	/^  TIntFltH TotalCascadesAlpha;$/;"	m	class:TNIBs
TotalMemberships	snap-adv/agm.cpp	/^int TAGMUtil::TotalMemberships(const TVec<TIntV>& CmtyVV){$/;"	f	class:TAGMUtil
TotalTime	snap-adv/cascdynetinf.h	/^  TFlt Window, TotalTime;$/;"	m	class:TNIBs
Train	snap-adv/circles.h	/^void TCluster::Train(TInt OuterReps, TInt GradientReps, TInt MCMCReps) {$/;"	f	class:TCluster
Trans	glib-core/unicode.h	2716;"	d
Trans	glib-core/unicode.h	2726;"	d
TransNet	snap-exp/signnet.h	/^  PTransitionNet TransNet;  \/\/ transition statistics between open -> closed triads (TriadIdV)$/;"	m	class:TSignMicroEvol
TransProb	snap-adv/cascnetinf.cpp	/^double TCascade::TransProb(const int& NId1, const int& NId2) const {$/;"	f	class:TCascade
Transform	glib-core/md5.cpp	/^void TMd5::Transform(uint1 block[64]){$/;"	f	class:TMd5
Transpose	glib-core/linalg.cpp	/^void TLinAlg::Transpose(const TFltVV& A, TFltVV& B) {$/;"	f	class:TLinAlg
Transpose	glib-core/linalg.h	/^    void Transpose() { Transposed = !Transposed; }$/;"	f	class:TMatrix
Transposed	glib-core/linalg.h	/^    bool Transposed;$/;"	m	class:TMatrix
Tree	test/test-alg.cpp	/^  PNGraph Tree;$/;"	m	class:TreeTest	file:
TreeEdge	snap-core/cncom.h	/^  void TreeEdge(const int& NId1, const int& NId2) { ParentH.AddDat(NId2, NId1); }$/;"	f	class:TArtPointVisitor
TreeEdge	snap-core/cncom.h	/^  void TreeEdge(const int& NId1, const int& NId2) { }$/;"	f	class:TSccVisitor
TreeEdge	snap-core/cncom.h	/^  void TreeEdge(const int& NId1, const int& NId2) {$/;"	f	class:TBiConVisitor
TreeTest	test/test-alg.cpp	/^class TreeTest : public ::testing::Test {$/;"	c	file:
Triad3to4H	snap-exp/signnet.h	/^  THash<TIntPr, TCloseStat> Triad3to4H; \/\/ 3-edge to 4-edge triad (edge (0,1) is the new edge)$/;"	m	class:TSignMicroEvol
TriadGetTestTNEGraph	test/test-triad.cpp	/^PNEGraph TriadGetTestTNEGraph() {$/;"	f
TriadGetTestTNEGraph	tutorials/demo-triad.cpp	/^PNEGraph TriadGetTestTNEGraph() {$/;"	f
TriadGetTestTNGraph	test/test-triad.cpp	/^PNGraph TriadGetTestTNGraph() {$/;"	f
TriadGetTestTNGraph	tutorials/demo-triad.cpp	/^PNGraph TriadGetTestTNGraph() {$/;"	f
TriadGetTestTUNGraph	test/test-triad.cpp	/^PUNGraph TriadGetTestTUNGraph() {$/;"	f
TriadGetTestTUNGraph	tutorials/demo-triad.cpp	/^PUNGraph TriadGetTestTUNGraph() {$/;"	f
TriadIdV	snap-exp/signnet.h	/^  TVec<PSignNet> TriadIdV;  \/\/ non-isomorphic open and closed triads$/;"	m	class:TSignMicroEvol
TriadVecV	snap-exp/signnet.h	/^  THash<TTuple<TInt, 16>, TIntPr> TriadVecV;$/;"	m	class:TSignMicroEvol
Triads	snap-adv/kronecker.h	/^  double Edges, Hairpins, Tripins, Triads;$/;"	m	class:TKronMomentsFit
TriangleMotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::TriangleMotifAdjacency(PNGraph graph, MotifType motif,$/;"	f	class:MotifCluster
Tripins	snap-adv/kronecker.h	/^  double Edges, Hairpins, Tripins, Triads;$/;"	m	class:TKronMomentsFit
TrueInfectV	snap-exp/sir.h	/^  TFltV TrueInfectV;$/;"	m	class:TSirModel
TrueStr	glib-core/dt.cpp	/^const TStr TBool::TrueStr="T";$/;"	m	class:TBool	file:
Trunc	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Trunc(const TSizeTy& _Vals){$/;"	f	class:TVec
Trunc	glib-core/dt.cpp	/^void TChA::Trunc(){$/;"	f	class:TChA
Trunc	glib-core/dt.h	/^  void Trunc(const int& _BfL){$/;"	f
TueN	glib-core/tm.cpp	/^const int TTmInfo::TueN=3; const int TTmInfo::WedN=4;$/;"	m	class:TTmInfo	file:
TueN	glib-core/tm.h	/^  static const int TueN; static const int WedN;$/;"	m	class:TTmInfo
TxtFExt	glib-core/fl.cpp	/^const TStr TFile::TxtFExt=".Txt";$/;"	m	class:TFile	file:
TxtLen	snap-exp/wikinet.h	/^  TInt TxtLen;     \/\/ length of the text explaining the vote$/;"	m	class:TWikiVote
Type	snap-core/table.h	/^    TAttrType Type; \/\/\/< Type of the predicate variables$/;"	m	class:TAtomicPredicate
Type	snap-exp/imdbnet.h	/^  TCh Type; TBool IsMaleAct;$/;"	m	class:TImdbNode
Type	snap-exp/lsh.h	/^  DistMeasure Type;$/;"	m	class:TLSHash
TypeId	snap-exp/mmgraph-exp.h	/^    TInt TypeId, Id, SrcNId, DstNId;$/;"	m	class:TMNet::TEdge
TypeId	snap-exp/mmgraph-exp.h	/^  TInt TypeId; \/\/ Node type ID$/;"	m	class:TCVNode
TypeId	snap-exp/mmgraph-exp.h	/^  TInt TypeId; \/\/ Node type ID$/;"	m	class:TMVNode
TypeId	snap-exp/mmgraph-exp.h	/^  TInt TypeId;$/;"	m	class:TSVNode
TypeNmToTagNmH	glib-core/xml.cpp	/^TStrStrH TXmlObjSer::TypeNmToTagNmH;$/;"	m	class:TXmlObjSer	file:
TypeNmToTagNmH	glib-core/xml.h	/^  static TStrStrH TypeNmToTagNmH;$/;"	m	class:TXmlObjSer
TypeNodeV	snap-exp/mmgraph-exp.h	/^  TVec<TNodeType> TypeNodeV;$/;"	m	class:TMNet
UInt32	glib-core/bd.h	/^    struct {uint Ls; uint Ms;} UInt32;$/;"	m	union:TConv_Pt64Ints32::__anon41	typeref:struct:TConv_Pt64Ints32::__anon41::__anon42
UInt64	glib-core/bd.h	/^    uint64 UInt64;$/;"	m	union:TConv_Pt64Ints32::__anon41
UNIF_SAMPLING	snap-adv/cascdynetinf.h	/^  UNIF_SAMPLING,$/;"	e	enum:__anon61
USE_OPENMP	glib-core/base.h	154;"	d
UcChV	glib-core/html.h	/^  TChV UcChV;$/;"	v
UcChV	glib-core/lx.h	/^  TChV UcChV;$/;"	v
UlTagNm	glib-core/html.cpp	/^const TStr THtmlTok::UlTagNm="<UL>";$/;"	m	class:THtmlTok	file:
UnNormalizeAffMtxV	snap-adv/mag.cpp	/^void TMAGFitBern::UnNormalizeAffMtxV(TMAGAffMtxV& MtxV, const bool UseMu) {$/;"	f	class:TMAGFitBern
UnRef	glib-core/bd.h	/^  void UnRef() const {$/;"	f	class:TPt
UnRef	glib-core/bd.h	/^  void UnRef(){Assert(Refs>0); Refs--;}$/;"	f	class:TCRef
Undef	glib-core/tm.h	/^  void Undef(){$/;"	f	class:TTm
Undef	glib-core/tm.h	/^  void Undef(){AbsSecs=TUInt::Mx;}$/;"	f	class:TSecTm
UndefAssign	glib-core/bd.h	218;"	d
UndefCopy	glib-core/bd.h	214;"	d
UndefCopyAssign	glib-core/bd.h	209;"	d
UndefDefaultCopyAssign	glib-core/bd.h	203;"	d
UndefMethodNm	glib-core/http.cpp	/^const TStr THttp::UndefMethodNm="UndefinedMethod";$/;"	m	class:THttp	file:
UndefMethodNm	glib-core/http.h	/^  static const TStr UndefMethodNm;$/;"	m	class:THttp
UndefStr	glib-core/lx.cpp	/^const TStr TLxSymStr::UndefStr="<undefined>";$/;"	m	class:TLxSymStr	file:
UniChV	glib-core/unicodestring.h	/^  TIntV UniChV;$/;"	m	class:TUStr
UniToStr	glib-core/unicode.h	/^	size_t UniToStr(const TIntV& src, TStr& dest, const bool clrDest = true) const { return UniToStr(src, 0, src.Len(), dest, clrDest); }$/;"	f	class:T8BitCodec
UniToStr	glib-core/unicode.h	/^	size_t UniToStr(const TIntV& src, size_t srcIdx, const size_t srcCount, TStr& dest, const bool clrDest = true) const {$/;"	f	class:T8BitCodec
Unicode	glib-core/unicodestring.h	/^  TUnicode* Unicode;$/;"	m	class:TUnicodeDef
UnicodeDef	glib-core/unicodestring.cpp	/^TUnicodeDef TUnicodeDef::UnicodeDef;$/;"	m	class:TUnicodeDef	file:
UnicodeDef	glib-core/unicodestring.h	/^  static TUnicodeDef UnicodeDef;$/;"	m	class:TUnicodeDef
Union	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Union(const TVec<TVal, TSizeTy>& ValV){$/;"	f	class:TVec
Union	glib-core/ds.h	/^void TVec<TVal, TSizeTy>::Union(const TVec<TVal, TSizeTy>& ValV, TVec<TVal, TSizeTy>& DstValV) const {$/;"	f	class:TVec
Union	snap-core/anf.h	/^void TGraphAnf<PGraph>::Union(TAnfBitV& BitV1, const uint64& NId1Offset, TAnfBitV& BitV2, const uint64& NId2Offset) const {$/;"	f	class:TGraphAnf
Union	snap-core/gbase.cpp	/^void TUnionFind::Union(const int& Key1, const int& Key2) {$/;"	f	class:TUnionFind
Union	snap-core/table.cpp	/^PTable TTable::Union(const TTable& Table) {$/;"	f	class:TTable
Union	snap-core/table.h	/^  PTable Union(const PTable& Table) { return Union(*Table); };$/;"	f	class:TTable
UnionAll	snap-core/table.cpp	/^PTable TTable::UnionAll(const TTable& Table) {$/;"	f	class:TTable
UnionAll	snap-core/table.h	/^  PTable UnionAll(const PTable& Table) { return UnionAll(*Table); };$/;"	f	class:TTable
UnionAllInPlace	snap-core/table.cpp	/^void TTable::UnionAllInPlace(const TTable& Table) {$/;"	f	class:TTable
UnionAllInPlace	snap-core/table.h	/^  void UnionAllInPlace(const PTable& Table) { return UnionAllInPlace(*Table); };$/;"	f	class:TTable
UnionLen	glib-core/ds.h	/^TSizeTy TVec<TVal, TSizeTy>::UnionLen(const TVec<TVal, TSizeTy>& ValV) const {$/;"	f	class:TVec
Unique	snap-core/table.cpp	/^void TTable::Unique(const TStr& Col) {$/;"	f	class:TTable
Unique	snap-core/table.cpp	/^void TTable::Unique(const TStrV& Cols, TBool Ordered) {$/;"	f	class:TTable
UnregisterCodec	glib-core/unicode.h	/^	void UnregisterCodec(const TStr& nameList) {$/;"	f	class:TUnicode
UnusableVal	glib-core/xmath.h	/^  TFlt UnusableVal;$/;"	v
UnvisitedInDegrees	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  unsigned int UnvisitedInDegrees;$/;"	m	class:TBreathFS_Hybrid_Test
UnweightedGraphRepresentation	snap-adv/motifcluster.cpp	/^static PUNGraph UnweightedGraphRepresentation(const WeightVH& weights) {$/;"	f	file:
UpdateAffMtx	snap-adv/mag.cpp	/^const double TMAGFitBern::UpdateAffMtx(const int& AId, const double& LrnRate, const double& MaxGrad, const double& Lambda, TFltVV& ProdVV, TFltVV& SqVV, TMAGAffMtx& NewMtx) {$/;"	f	class:TMAGFitBern
UpdateAffMtxV	snap-adv/mag.cpp	/^const double TMAGFitBern::UpdateAffMtxV(const int& GradIter, const double& LrnRate, const double& MaxGrad, const double& Lambda, const int& NReal) {$/;"	f	class:TMAGFitBern
UpdateApxPhiMI	snap-adv/mag.cpp	/^const double TMAGFitBern::UpdateApxPhiMI(const double& Lambda, const int& NId, const int& AId, double& Phi, TFltVV& ProdVV) {$/;"	f	class:TMAGFitBern
UpdateDiff	snap-adv/cascdynetinf.cpp	/^void TNIBs::UpdateDiff(const TOptMethod& OptMethod, const int& NId, TCascade& Cascade, TIntPrV& AlphasToUpdate, const double& CurrentTime) {$/;"	f	class:TNIBs
UpdateEdgeData	tutorials/demo-TNodeEDatNet.cpp	/^void UpdateEdgeData() {$/;"	f
UpdateEdgeData	tutorials/demo-TNodeEdgeNet.cpp	/^void UpdateEdgeData() {$/;"	f
UpdateFltFromTable	snap-core/table.cpp	/^void TTable::UpdateFltFromTable(const TStr& KeyAttr, const TStr& UpdateAttr, const TTable& Table, $/;"	f	class:TTable
UpdateFltFromTableMP	snap-core/table.cpp	/^void TTable::UpdateFltFromTableMP(const TStr& KeyAttr, const TStr& UpdateAttr,$/;"	f	class:TTable
UpdateGrad	snap-exp/linkpred.cpp	/^void TQGraph::UpdateGrad(const double& Alpha, const TIntPr& Edge, TEdgeGrad& Grad) {$/;"	f	class:__OLD__::TQGraph
UpdateGraph	snap-exp/linkpred.cpp	/^void TQGraph::UpdateGraph(const TLpExample& Example, const TLpPredictor& Pred, const TFltV& WgtV) {$/;"	f	class:__OLD__::TQGraph
UpdateGraphDLL	snap-adv/kronecker.cpp	/^void TKroneckerLL::UpdateGraphDLL(const int& SwapNId1, const int& SwapNId2) {$/;"	f	class:TKroneckerLL
UpdateGrouping	snap-core/table.h	/^void TTable::UpdateGrouping(THash<T,TIntV>& Grouping, T Key, TInt Val) const{$/;"	f	class:TTable
UpdateGrouping	snap-core/table.h	/^void TTable::UpdateGrouping(THashMP<T,TIntV>& Grouping, T Key, TInt Val) const{$/;"	f	class:TTable
UpdateGrouping	snap-exp/alternativetable.h	/^  void ExplicitStringTable::UpdateGrouping(THash<T,TIntV>& Grouping, T Key, TInt Val) const{$/;"	f	class:ExplicitStringTable
UpdateLnLen	glib-core/fl.cpp	/^int TSOut::UpdateLnLen(const int& StrLen, const bool& ForceInLn){$/;"	f	class:TSOut
UpdateMaxQ	snap-core/cmty.cpp	/^    void UpdateMaxQ() {$/;"	f	struct:TSnap::TSnapDetail::TCNMQMatrix::TCmtyDat
UpdateMu	snap-adv/mag.cpp	/^const double TMAGFitBern::UpdateMu(const int& AId) {$/;"	f	class:TMAGFitBern
UpdateNodeData	tutorials/demo-TNodeEDatNet.cpp	/^void UpdateNodeData() {$/;"	f
UpdateNodeData	tutorials/demo-TNodeEdgeNet.cpp	/^void UpdateNodeData() {$/;"	f
UpdateNodeData	tutorials/demo-TNodeNet.cpp	/^void UpdateNodeData() {$/;"	f
UpdateNodeTimes	snap-core/timenet.cpp	/^void TTimeNENet::UpdateNodeTimes() {$/;"	f	class:TTimeNENet
UpdateNormConst	snap-exp/linkpred.cpp	/^void TQGraph::UpdateNormConst() {$/;"	f	class:__OLD__::TQGraph
UpdatePhi	snap-adv/mag.cpp	/^const double TMAGFitBern::UpdatePhi(const int& NId, const int& AId, double& Phi) {$/;"	f	class:TMAGFitBern
UpdatePhiMI	snap-adv/mag.cpp	/^const double TMAGFitBern::UpdatePhiMI(const double& Lambda, const int& NId, const int& AId, double& Phi) {$/;"	f	class:TMAGFitBern
UpdateProb	snap-adv/cascnetinf.cpp	/^double TCascade::UpdateProb(const int& N1, const int& N2, const bool& UpdateProb) {$/;"	f	class:TCascade
UpdateQGraph	snap-exp/linkpred.cpp	/^void TLpExample::UpdateQGraph(const TLpPredictor& Predictor) {$/;"	f	class:TLpExample
UpdateSOut	glib-core/xfl.cpp	/^void TFPathNotify::UpdateSOut(const TTm& Tm) {$/;"	f	class:TFPathNotify
UpdateTableForNewRow	snap-core/table.cpp	/^void TTable::UpdateTableForNewRow() {$/;"	f	class:TTable
UpdateTableForNewRow	snap-exp/alternativetable.cpp	/^void ExplicitStringTable::UpdateTableForNewRow() {$/;"	f	class:ExplicitStringTable
UpdateWeights	snap-adv/motifcluster.cpp	/^void ChibaNishizekiWeighter::UpdateWeights(const TIntV& clique) {$/;"	f	class:ChibaNishizekiWeighter
Url	glib-core/http.h	/^  PUrl Url;$/;"	v
UrlEnv	glib-core/http.h	/^  PUrlEnv UrlEnv;$/;"	v
UrlH	snap-exp/memenet.h	/^  THash<TMd5Sig, TSecTm> UrlH; \/\/ quotes and urls, data: post time$/;"	m	class:TBlogPostNet
UrlH	snap-exp/memenet.h	/^  TStrHash<TInt> UrlH; \/\/ quotes and urls, data: url type$/;"	m	class:TMemeNetBs
UrlHttpAbsPrefixStr	glib-core/url.cpp	/^const TStr TUrl::UrlHttpAbsPrefixStr="http:\/\/";$/;"	m	class:TUrl	file:
UrlHttpAbsPrefixStr	glib-core/url.h	/^  static const TStr UrlHttpAbsPrefixStr;$/;"	v
UrlHttpPrefixStr	glib-core/url.cpp	/^const TStr TUrl::UrlHttpPrefixStr="http:";$/;"	m	class:TUrl	file:
UrlHttpPrefixStr	glib-core/url.h	/^  static const TStr UrlHttpPrefixStr;$/;"	v
UrlId	snap-exp/memenet.h	/^  TInt UrlId;$/;"	m	class:TMemeNetDat
UrlId	snap-exp/memes.h	/^    int UrlId() const { return QtUrlId; }$/;"	f	class:TQuote::TTmUrlCnt
UrlInDegH	snap-exp/memes.h	/^  TIntH UrlInDegH;  \/\/ Url\/Domain in-degree (only for Domains\/URLs that have quotes)$/;"	m	class:TQuoteBs
UrlStr	glib-core/url.h	/^  TStr UrlStr, RelUrlStr, BaseUrlStr;$/;"	v
UrlTy	snap-exp/memenet.h	/^  TUrlTy UrlTy;$/;"	m	class:TMemeNetDat
UrlTyH	snap-exp/memes.h	/^  TIntH UrlTyH;     \/\/ UrlId to TypeId (only for known URLs that have quotes)$/;"	m	class:TQuoteBs
UsDayOfWeekNmV	glib-core/tm.cpp	/^TStrV TTmInfo::UsDayOfWeekNmV;$/;"	m	class:TTmInfo	file:
UsDayOfWeekNmV	glib-core/tm.h	/^  static TStrV UsDayOfWeekNmV;$/;"	m	class:TTmInfo
UsMonthNmV	glib-core/tm.cpp	/^TStrV TTmInfo::UsMonthNmV;$/;"	m	class:TTmInfo	file:
UsMonthNmV	glib-core/tm.h	/^  static TStrV UsMonthNmV;$/;"	m	class:TTmInfo
UsableP	glib-core/xmath.h	/^  TBool UsableP;$/;"	v
UseEnglishSentenceBoundaryExceptions	glib-core/unicode.h	/^	void UseEnglishSentenceBoundaryExceptions() { ucd.SbEx_SetStdEnglish(); }$/;"	f	class:TUnicode
UseMP	snap-core/table.cpp	/^TInt TTable::UseMP = 1;$/;"	m	class:TTable	file:
UseMP	snap-core/table.h	/^  static TInt UseMP; \/\/\/< Global switch for choosing multi-threaded versions of TTable functions.$/;"	m	class:TTable
UseMP	snap-exp/alternativetable.cpp	/^TInt PhysicalOrderTable::UseMP = 1;$/;"	m	class:PhysicalOrderTable	file:
UseMP	snap-exp/alternativetable.h	/^  static TInt UseMP; \/\/\/< Global switch for choosing multi-threaded versions of PhysicalOrderTable functions.$/;"	m	class:PhysicalOrderTable
UsePhysicalIds	snap-core/table.h	/^	TBool UsePhysicalIds(){return UsePhysicalRowIds;}$/;"	f	class:GroupStmt
UsePhysicalRowIds	snap-core/table.h	/^	TBool UsePhysicalRowIds;$/;"	m	class:GroupStmt
UserLStr	snap-exp/wikinet.h	/^  TChA MainLStr, TalkLStr, UserLStr, UserTalkLStr, OtherLStr, ExternalLStr; \/\/ links to other namespaces and external links$/;"	m	class:TWikiMetaLoader
UserTalkLStr	snap-exp/wikinet.h	/^  TChA MainLStr, TalkLStr, UserLStr, UserTalkLStr, OtherLStr, ExternalLStr; \/\/ links to other namespaces and external links$/;"	m	class:TWikiMetaLoader
Usr	snap-exp/wikinet.h	/^    TStr Usr, RfA, NominatedBy, Bureaucrat;$/;"	m	struct:TWikiElecBs::TElecSum
Usr	snap-exp/wikinet.h	/^  TChA Title, Usr;$/;"	m	class:TWikiMetaLoader
Usr	snap-exp/wikinet.h	/^  TChA Usr, Cmt;$/;"	m	class:TWikiMetaHist
Usr	snap-exp/wikinet.h	/^  TChA Usr;$/;"	m	class:TWikiUsr
UsrElecH	snap-exp/wikinet.h	/^  THash<TInt, TWikiElecV> UsrElecH; \/\/ keep all versions of the election page (last is the newest)$/;"	m	class:TWikiElecBsOLD
UsrH	snap-exp/wikinet.h	/^  TStrHash<TInt> UsrH;      \/\/ UId (election id == user id)$/;"	m	class:TWikiElecBs
UsrH	snap-exp/wikinet.h	/^  TStrHash<TInt> UsrH;$/;"	m	class:TWikiElecBsOLD
UsrId	snap-exp/wikinet.h	/^  TInt RevWrds, UsrId;$/;"	m	class:TWikiMetaLoader
UsrId	snap-exp/wikinet.h	/^  TInt UsrId, NomUId, BurUId; \/\/ user, nominator, bureaucrat user-id$/;"	m	class:TWikiElec
UsrId	snap-exp/wikinet.h	/^  TInt UsrId;      \/\/ user id (see TWikiElecBs::UsrH)$/;"	m	class:TWikiVote
UsrId	snap-exp/wikinet.h	/^  int PageId, RevId, UsrId;$/;"	m	class:TWikiMetaHist
UsrIndent	snap-exp/wikinet.h	/^  TInt UsrIndent;  \/\/ indentation level of the vote$/;"	m	class:TWikiVote
UsrNIdH	snap-exp/wikinet.h	/^  THash<TStr, TInt> UsrNIdH;$/;"	m	class:TWikiTalkNet
UsrNIdH	snap-exp/wikinet.h	/^  TStrHash<TInt> UsrNIdH;$/;"	m	class:TWikiTimeTalkNet
UsrVote	snap-exp/wikinet.h	/^  TInt UsrVote;    \/\/ -1:oppose, 0:neutral, 1:support$/;"	m	class:TWikiVote
Utf16FirstSurrogate	glib-core/unicode.h	/^		Utf16FirstSurrogate = 0xd800,$/;"	e	enum:TUniCodec::__anon45
Utf16SecondSurrogate	glib-core/unicode.h	/^		Utf16SecondSurrogate = 0xdc00$/;"	e	enum:TUniCodec::__anon45
V	glib-core/ds.h	/^  TVec<TVal> V;$/;"	m	class:PVec
VB	glib-core/unicode.cpp	/^TVectorBuilder VB;$/;"	m	namespace:__anon54	file:
VBarStr	glib-core/lx.cpp	/^const TStr TLxSymStr::VBarStr="|";$/;"	m	class:TLxSymStr	file:
Val	glib-core/bd.h	/^  } Val;$/;"	m	class:TConv_Pt64Ints32	typeref:union:TConv_Pt64Ints32::__anon41
Val	glib-core/ds.h	/^  TVal Val;$/;"	m	class:TLstNd
Val	glib-core/fl.h	/^  int Val;$/;"	m	class:TCs
Val	snap-core/bignet.h	/^template <class TNodeData, bool IsDir> struct IsDirected<TBigNet<TNodeData, IsDir> > { enum { Val = 0 }; };$/;"	e	enum:TSnap::IsDirected::__anon107
Val	snap-core/bignet.h	/^template <class TNodeData, bool IsDir> struct IsNodeDat<TBigNet<TNodeData, IsDir> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon109
Val	snap-core/bignet.h	/^template <class TNodeData> struct IsDirected<TBigNet<TNodeData, true> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon108
Val	snap-core/gbase.h	/^template <class TGraph> struct IsBipart     { enum { Val = 0 }; };$/;"	e	enum:TSnap::IsBipart::__anon76
Val	snap-core/gbase.h	/^template <class TGraph> struct IsDirected   { enum { Val = 0 }; };$/;"	e	enum:TSnap::IsDirected::__anon71
Val	snap-core/gbase.h	/^template <class TGraph> struct IsEdgeDat    { enum { Val = 0 }; };$/;"	e	enum:TSnap::IsEdgeDat::__anon74
Val	snap-core/gbase.h	/^template <class TGraph> struct IsMultiGraph { enum { Val = 0 }; };$/;"	e	enum:TSnap::IsMultiGraph::__anon72
Val	snap-core/gbase.h	/^template <class TGraph> struct IsNodeDat    { enum { Val = 0 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon73
Val	snap-core/gbase.h	/^template <class TGraph> struct IsSources    { enum { Val = 0 }; };$/;"	e	enum:TSnap::IsSources::__anon75
Val	snap-core/graph.h	/^template <> struct IsBipart<TBPGraph> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsBipart::__anon104
Val	snap-core/graph.h	/^template <> struct IsDirected<TNEGraph> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon102
Val	snap-core/graph.h	/^template <> struct IsDirected<TNGraph> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon100
Val	snap-core/graph.h	/^template <> struct IsMultiGraph<TNEGraph> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsMultiGraph::__anon101
Val	snap-core/graphmp.h	/^template <> struct IsDirected<TNGraphMP> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon105
Val	snap-core/mmnet.h	/^template <> struct IsDirected<TModeNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon112
Val	snap-core/mmnet.h	/^template <> struct IsMultiGraph<TModeNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsMultiGraph::__anon111
Val	snap-core/network.h	/^template <> struct IsDirected<TDirNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon99
Val	snap-core/network.h	/^template <> struct IsDirected<TNEANet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon98
Val	snap-core/network.h	/^template <> struct IsMultiGraph<TNEANet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsMultiGraph::__anon97
Val	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsDirected<TNodeEDatNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon89
Val	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsDirected<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon93
Val	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsEdgeDat<TNodeEDatNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsEdgeDat::__anon91
Val	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsEdgeDat<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsEdgeDat::__anon95
Val	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsMultiGraph<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsMultiGraph::__anon92
Val	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsNodeDat<TNodeEDatNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon90
Val	snap-core/network.h	/^template <class TNodeData, class TEdgeData> struct IsNodeDat<TNodeEdgeNet<TNodeData, TEdgeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon94
Val	snap-core/network.h	/^template <class TNodeData> struct IsDirected<TNodeNet<TNodeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon87
Val	snap-core/network.h	/^template <class TNodeData> struct IsNodeDat<TNodeNet<TNodeData> > { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon88
Val	snap-core/networkmp.h	/^template <> struct IsDirected<TNEANetMP> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon79
Val	snap-core/networkmp.h	/^template <> struct IsMultiGraph<TNEANetMP> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsMultiGraph::__anon78
Val	snap-core/timenet.h	/^template <> struct IsDirected<TTimeNENet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon68
Val	snap-core/timenet.h	/^template <> struct IsDirected<TTimeNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon65
Val	snap-core/timenet.h	/^template <> struct IsEdgeDat<TTimeNENet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsEdgeDat::__anon70
Val	snap-core/timenet.h	/^template <> struct IsMultiGraph<TTimeNENet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsMultiGraph::__anon67
Val	snap-core/timenet.h	/^template <> struct IsNodeDat<TTimeNENet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon69
Val	snap-core/timenet.h	/^template <> struct IsNodeDat<TTimeNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon66
Val	snap-exp/graphmp-exp.h	/^template <> struct IsDirected<TUNGraphMP> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon1
Val	snap-exp/imdbnet.h	/^template <> struct IsDirected<TImdbNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon4
Val	snap-exp/imdbnet.h	/^template <> struct IsNodeDat<TImdbNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon5
Val	snap-exp/linkpred.h	/^  TFlt Val;       \/\/ value f_w(features)$/;"	m	class:TEdgeGrad
Val	snap-exp/signnet.h	/^template <> struct IsDirected<TSignNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon9
Val	snap-exp/signnet.h	/^template <> struct IsEdgeDat<TSignNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsEdgeDat::__anon11
Val	snap-exp/signnet.h	/^template <> struct IsNodeDat<TSignNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon10
Val	snap-exp/wgtnet.h	/^template <> struct IsDirected<TWgtNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon15
Val	snap-exp/wgtnet.h	/^template <> struct IsEdgeDat<TWgtNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsEdgeDat::__anon17
Val	snap-exp/wgtnet.h	/^template <> struct IsNodeDat<TWgtNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon16
Val	snap-exp/wikinet.h	/^template <> struct IsDirected<TWikiTalkNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsDirected::__anon6
Val	snap-exp/wikinet.h	/^template <> struct IsEdgeDat<TWikiTalkNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsEdgeDat::__anon8
Val	snap-exp/wikinet.h	/^template <> struct IsNodeDat<TWikiTalkNet> { enum { Val = 1 }; };$/;"	e	enum:TSnap::IsNodeDat::__anon7
Val1	glib-core/ds.h	/^  TVal1 Val1;$/;"	m	class:TPair
Val1	glib-core/ds.h	/^  TVal1 Val1;$/;"	m	class:TQuad
Val1	glib-core/ds.h	/^  TVal1 Val1;$/;"	m	class:TTriple
Val2	glib-core/ds.h	/^  TVal2 Val2;$/;"	m	class:TPair
Val2	glib-core/ds.h	/^  TVal2 Val2;$/;"	m	class:TQuad
Val2	glib-core/ds.h	/^  TVal2 Val2;$/;"	m	class:TTriple
Val3	glib-core/ds.h	/^  TVal3 Val3;$/;"	m	class:TQuad
Val3	glib-core/ds.h	/^  TVal3 Val3;$/;"	m	class:TTriple
Val4	glib-core/ds.h	/^  TVal4 Val4;$/;"	m	class:TQuad
ValBf	glib-core/ds.h	/^  TVal *ValBf;                  \/\/ Buffer for storing all the values$/;"	m	class:TVecPool
ValBf	glib-core/ds.h	/^  TVal *ValBf;             \/\/ buffer storing all the values$/;"	m	class:TGLib_OLD::TVecPool
ValCmp	snap-core/gstat.h	/^    TGStatVal ValCmp;$/;"	m	class:TGStat::TCmpByVal
ValStatH	snap-core/gstat.h	/^  TIntFltH ValStatH; \/\/ scalar statistics$/;"	m	class:TGStat
ValSumW	glib-core/xmath.h	/^  TFlt SumW, ValSumW;$/;"	v
ValT	glib-core/ds.h	/^  TVal* ValT;     \/\/!< Pointer to the memory where the elements of the vector are stored.$/;"	m	class:TVec
ValT	glib-core/shash.h	/^  TVal* ValT;$/;"	m	class:TPackVec
ValToIndex	glib-core/priorityqueue.h	/^  THash<TVal, int> ValToIndex;$/;"	m	class:TMaxPriorityQueue
ValV	glib-core/ds.h	/^  TVal ValV [NVals];$/;"	m	class:TTuple
ValV	glib-core/ds.h	/^  TVec<TVal> ValV;$/;"	m	class:TQQueue
ValV	glib-core/ds.h	/^  TVec<TVal> ValV;$/;"	m	class:TSStack
ValV	glib-core/ds.h	/^  TVec<TVal> ValV;$/;"	m	class:TVVVec
ValV	glib-core/ds.h	/^  TVec<TVal> ValV;$/;"	m	class:TVVec
ValV	glib-core/json.h	/^  TJsonValV ValV;$/;"	v
ValV	snap-core/gbase.h	/^  TVec<TVal> ValV;$/;"	m	class:TSnapQueue
ValWgtV	glib-core/xmath.h	/^  TFltPrV ValWgtV;$/;"	v
Valid	snap-core/table.h	/^	TBool Valid;$/;"	m	class:GroupStmt
Vals	glib-core/ds.h	/^  ::TSize GrowBy, MxVals, Vals;$/;"	m	class:TGLib_OLD::TVecPool
Vals	glib-core/ds.h	/^  TSize GrowBy, MxVals, Vals;$/;"	m	class:TVecPool
Vals	glib-core/ds.h	/^  TSizeTy Vals;   \/\/!< Vector length. Length is the number of elements stored in the vector.$/;"	m	class:TVec
Vals	glib-core/dt.cpp	/^const int TBool::Vals=TBool::Mx-TBool::Mn+1;$/;"	m	class:TBool	file:
Vals	glib-core/dt.cpp	/^const int TCh::Vals=int(TCh::Mx)-int(TCh::Mn)+1;$/;"	m	class:TCh	file:
Vals	glib-core/dt.cpp	/^const int TUCh::Vals=int(TUCh::Mx)-int(TUCh::Mn)+1;$/;"	m	class:TUCh	file:
Vals	glib-core/shash.h	/^  TInt MxVals, Vals;$/;"	m	class:TSparseTable
Vals	glib-core/shash.h	/^  int Vals;$/;"	m	class:TPackVec
Vals	glib-core/wch.cpp	/^const int TWCh::Vals=0x10000;$/;"	m	class:TWCh	file:
Vals	glib-core/wch.h	/^  static const int Vals;$/;"	m	class:TWCh
Vals	glib-core/xmath.h	/^  TInt Vals;$/;"	v
VarSq	snap-exp/signnet.h	/^    TFlt VarSq;  \/\/ sum_+ p*(1-p)$/;"	m	struct:TSignMicroEvol::TTransStat
Vari	glib-core/xmath.h	/^  TFlt Mean, Vari, SDev, SErr;$/;"	v
VariantId	snap-core/ghash.h	/^  TInt VariantId; \/\/ graphs can have the same signature but are not-isomorphic. VariantId starts with 1.$/;"	m	class:TGraphKey
VecBench	tutorials/demo-hashvec-benchmark.cpp	/^void VecBench(const int& n) {$/;"	f
VecElemBegI	snap-exp/mmgraph-exp.h	/^    THashIter VecElemBegI() {$/;"	f	class:TMNet::TMNodeI
VecEndI	snap-exp/mmgraph-exp.h	/^    TTypeIter VecEndI;$/;"	m	class:TMNet::TMNodeI
VecI	snap-exp/mmgraph-exp.h	/^    TTypeIter VecI;$/;"	m	class:TMNet::TMNodeI
VecOfFltVecsE	snap-core/mmnet.h	/^  TVec<TFltV> VecOfFltVecsE;$/;"	m	class:TCrossNet
VecOfFltVecsE	snap-core/network.h	/^  TVec<TFltV> VecOfFltVecsN, VecOfFltVecsE;$/;"	m	class:TNEANet
VecOfFltVecsE	snap-core/networkmp.h	/^  TVec<TFltV> VecOfFltVecsN, VecOfFltVecsE;$/;"	m	class:TNEANetMP
VecOfFltVecsN	snap-core/network.h	/^  TVec<TFltV> VecOfFltVecsN, VecOfFltVecsE;$/;"	m	class:TNEANet
VecOfFltVecsN	snap-core/networkmp.h	/^  TVec<TFltV> VecOfFltVecsN, VecOfFltVecsE;$/;"	m	class:TNEANetMP
VecOfIntVecVecsE	snap-core/network.h	/^  TVec<TVec<TIntV> > VecOfIntVecVecsN, VecOfIntVecVecsE;$/;"	m	class:TNEANet
VecOfIntVecVecsN	snap-core/network.h	/^  TVec<TVec<TIntV> > VecOfIntVecVecsN, VecOfIntVecVecsE;$/;"	m	class:TNEANet
VecOfIntVecsE	snap-core/mmnet.h	/^  TVec<TIntV> VecOfIntVecsE;$/;"	m	class:TCrossNet
VecOfIntVecsE	snap-core/network.h	/^  TVec<TIntV> VecOfIntVecsN, VecOfIntVecsE;$/;"	m	class:TNEANet
VecOfIntVecsE	snap-core/networkmp.h	/^  TVec<TIntV> VecOfIntVecsN, VecOfIntVecsE;$/;"	m	class:TNEANetMP
VecOfIntVecsN	snap-core/network.h	/^  TVec<TIntV> VecOfIntVecsN, VecOfIntVecsE;$/;"	m	class:TNEANet
VecOfIntVecsN	snap-core/networkmp.h	/^  TVec<TIntV> VecOfIntVecsN, VecOfIntVecsE;$/;"	m	class:TNEANetMP
VecOfStrVecsE	snap-core/mmnet.h	/^  TVec<TStrV> VecOfStrVecsE;$/;"	m	class:TCrossNet
VecOfStrVecsE	snap-core/network.h	/^  TVec<TStrV> VecOfStrVecsN, VecOfStrVecsE;$/;"	m	class:TNEANet
VecOfStrVecsE	snap-core/networkmp.h	/^  TVec<TStrV> VecOfStrVecsN, VecOfStrVecsE;$/;"	m	class:TNEANetMP
VecOfStrVecsN	snap-core/network.h	/^  TVec<TStrV> VecOfStrVecsN, VecOfStrVecsE;$/;"	m	class:TNEANet
VecOfStrVecsN	snap-core/networkmp.h	/^  TVec<TStrV> VecOfStrVecsN, VecOfStrVecsE;$/;"	m	class:TNEANetMP
Verbose	snap-adv/ncp.cpp	/^bool TLocClust::Verbose = true;$/;"	m	class:TLocClust	file:
Verbose	snap-adv/ncp.h	/^  static bool Verbose;$/;"	m	class:TLocClust
VerifyClosedTriads	test/test-triad.cpp	/^void VerifyClosedTriads(int NId, int ClosedTriads) {$/;"	f
VerifyCmnNbrs	test/test-triad.cpp	/^void VerifyCmnNbrs(int NId1, int NId2, int CmnNbrs) {$/;"	f
VerifyGetTriadParticip	test/test-triad.cpp	/^void VerifyGetTriadParticip(TIntPrV& TriadCntV) {$/;"	f
VerifyInGroupEdges	test/test-triad.cpp	/^void VerifyInGroupEdges(int NId, int InGroupEdges) {$/;"	f
VerifyInOutGroupEdges	test/test-triad.cpp	/^void VerifyInOutGroupEdges(int NId, int InOutGroupEdges) {$/;"	f
VerifyLen2Paths	test/test-triad.cpp	/^void VerifyLen2Paths(int NId1, int NId2, int Len2Paths, int type) {$/;"	f
VerifyNodeClustCf	test/test-triad.cpp	/^void VerifyNodeClustCf(int NId, double ClustCf) {$/;"	f
VerifyOpenTriads	test/test-triad.cpp	/^void VerifyOpenTriads(int NId, int OpenTriads) {$/;"	f
VerifyOutGroupEdges	test/test-triad.cpp	/^void VerifyOutGroupEdges(int NId, int OutGroupEdges) {$/;"	f
VnLowH	snap-core/cncom.h	/^  THash<TInt, TIntPr> VnLowH;$/;"	m	class:TArtPointVisitor
VnLowH	snap-core/cncom.h	/^  THash<TInt, TIntPr> VnLowH;$/;"	m	class:TBiConVisitor
Vol	snap-adv/cascdynetinf.h	/^  TInt Vol;$/;"	m	class:TNodeInfo
Vol	snap-adv/cascnetinf.h	/^  TInt Vol;$/;"	m	class:TEdgeInfo
Vol	snap-adv/cascnetinf.h	/^  TInt Vol;$/;"	m	class:TNodeInfo
VolV	snap-adv/ncp.h	/^  TIntV NIdV, VolV, CutV;  \/\/ Vol=2*edges_inside+cut (vol = sum of the degrees)$/;"	m	class:TLocClust
VoteSign	snap-exp/wikinet.h	/^  TInt VoteSign; \/\/ vote is only if VoteTm.Def()==true$/;"	m	class:TWikiTalkEdge
VoteTm	snap-exp/wikinet.h	/^  TSecTm FirstTalk, LastTalk, VoteTm;$/;"	m	class:TWikiTalkEdge
VoteTm	snap-exp/wikinet.h	/^  TSecTm VoteTm;$/;"	m	class:TWikiVote
VoteV	snap-exp/wikinet.h	/^  TWikiVoteV VoteV; \/\/ all votes$/;"	m	class:TWikiElec
W	snap-adv/agmattr.h	/^  TVec<TFltV> W; \/\/ weight vector for logistic regression. w_ck = W[k][c] (Column vector)$/;"	m	class:TCesna
WAssert	glib-core/bd.h	268;"	d
WBlock	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^		u_size_t WBlock;$/;"	m	class:TSBitSet::TIterator
WChV	glib-core/wch.h	/^  TWChV WChV;$/;"	m	class:TWChA
WCompare	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int WCompare(int i, int j, int** Weights) {$/;"	f	class:TMatchingMachine
WCompare	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  int WCompare(int i, int j, int** Weights) {$/;"	f	class:TMatchingMachine
WEI	snap-adv/cascdynetinf.h	/^  WEI \/\/ weibull$/;"	e	enum:__anon58
WIN32_LEAN_AND_MEAN	glib-core/base.h	50;"	d
WIN_EXP_SAMPLING	snap-adv/cascdynetinf.h	/^  WIN_EXP_SAMPLING,$/;"	e	enum:__anon61
WIN_SAMPLING	snap-adv/cascdynetinf.h	/^  WIN_SAMPLING,$/;"	e	enum:__anon61
WallClockTime	snap-core/randwalk.h	/^  double WallClockTime() {$/;"	f	namespace:__anon64
WarnNotify	glib-core/bd.h	/^inline void WarnNotify(const char* NotifyCStr){$/;"	f
WarnNotify	glib-core/ut.h	/^inline void WarnNotify(const TStr& MsgStr){WarnNotify(MsgStr.CStr());}$/;"	f
WbFindCurOrNextNonIgnored	glib-core/unicode.h	/^	template<typename TSrcVec> void WbFindCurOrNextNonIgnored(const TSrcVec& src, size_t& position, const size_t srcEnd) const {$/;"	f	class:TUniChDb
WbFindNextNonIgnored	glib-core/unicode.h	/^	template<typename TSrcVec> void WbFindNextNonIgnored(const TSrcVec& src, size_t& position, const size_t srcEnd) const {$/;"	f	class:TUniChDb
WbFindNextNonIgnoredS	glib-core/unicode.h	/^	template<typename TSrcVec> void WbFindNextNonIgnoredS(const TSrcVec& src, size_t& position, const size_t srcEnd) const {$/;"	f	class:TUniChDb
WbFindPrevNonIgnored	glib-core/unicode.h	/^	template<typename TSrcVec> bool WbFindPrevNonIgnored(const TSrcVec& src, const size_t srcStart, size_t& position) const {$/;"	f	class:TUniChDb
WedN	glib-core/tm.cpp	/^const int TTmInfo::TueN=3; const int TTmInfo::WedN=4;$/;"	m	class:TTmInfo	file:
WedN	glib-core/tm.h	/^  static const int TueN; static const int WedN;$/;"	m	class:TTmInfo
WedgeMotifAdjacency	snap-adv/motifcluster.cpp	/^void MotifCluster::WedgeMotifAdjacency(PNGraph graph, MotifType motif,$/;"	f	class:MotifCluster
WeightAttr	snap-adv/agmattr.h	/^  TFlt WeightAttr; \/\/ likelihood = log P(G|F) + WeightAttr * log P(X|F, W)$/;"	m	class:TCesna
WeightVH	snap-adv/motifcluster.h	/^typedef TVec< THash<TInt, TInt> > WeightVH;$/;"	t
WgtV	snap-exp/linkpred.h	/^  TFltV WgtV;     \/\/ this is what we try to learn$/;"	m	class:TLpPredictor
WgtV	snap-exp/linkpred.h	/^  TFltV WgtV;  \/\/ this is what we aim to learn$/;"	m	class:__OLD__::TLpBase
WhiskNcpV	snap-adv/ncp.h	/^  TVec<TFltPrV> WhiskNcpV;$/;"	m	class:TNcpGraphsBase
WhiskerV	snap-adv/ncp.h	/^  TFltPrV WhiskerV, RewWhiskerV; \/\/ (size, conductance)$/;"	m	class:TNcpGraphsBase
WikiE	snap-exp/wikinet.h	/^    TInt WikiE, WikiW, WikiTE, WikiTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
WikiTE	snap-exp/wikinet.h	/^    TInt WikiE, WikiW, WikiTE, WikiTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
WikiTW	snap-exp/wikinet.h	/^    TInt WikiE, WikiW, WikiTE, WikiTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
WikiW	snap-exp/wikinet.h	/^    TInt WikiE, WikiW, WikiTE, WikiTW;$/;"	m	struct:TWikiEditCnt::TEditCnt
Window	snap-adv/cascdynetinf.h	/^  TFlt Window, TotalTime;$/;"	m	class:TNIBs
WithStyle	glib-core/gnuplot.h	/^    TStr Label, WithStyle, DataFNm;$/;"	m	class:TGnuPlot::TGpSeries
WkEdCnt	snap-exp/wikinet.h	/^  TInt WkEdCnt, WkEdWrds;      \/\/ number of edits, changed words (in wikipedia namespace)$/;"	m	class:TWikiUsr
WkEdWrds	snap-exp/wikinet.h	/^  TInt WkEdCnt, WkEdWrds;      \/\/ number of edits, changed words (in wikipedia namespace)$/;"	m	class:TWikiUsr
WkTkEdCnt	snap-exp/wikinet.h	/^  TInt WkTkEdCnt, WkTkEdWrds;  \/\/ number of edits, changed words (in talk pages of wikipedia namespace)$/;"	m	class:TWikiUsr
WkTkEdWrds	snap-exp/wikinet.h	/^  TInt WkTkEdCnt, WkTkEdWrds;  \/\/ number of edits, changed words (in talk pages of wikipedia namespace)$/;"	m	class:TWikiUsr
Words	snap-exp/wikinet.h	/^  TInt Words;$/;"	m	class:TWikiTalkEdge2
WordsAE	snap-exp/wikinet.h	/^  TInt TotTalks, TotWords, TalksBE, WordsBE, TalksAE, WordsAE; \/\/ number of talks before\/after election (vote)$/;"	m	class:TWikiTalkEdge
WordsBE	snap-exp/wikinet.h	/^  TInt TotTalks, TotWords, TalksBE, WordsBE, TalksAE, WordsAE; \/\/ number of talks before\/after election (vote)$/;"	m	class:TWikiTalkEdge
WordsToBytes	glib-core/unicode.cpp	/^void TUniCodec::WordsToBytes(const TIntV& src, TIntV& dest)$/;"	f	class:TUniCodec
Wr	glib-core/bits.cpp	/^void TB32Set::Wr(){$/;"	f	class:TB32Set
Wr	glib-core/bits.cpp	/^void TB8Set::Wr(){$/;"	f	class:TB8Set
Wr	glib-core/bits.cpp	/^void TBSet::Wr(){$/;"	f	class:TBSet
Wr	glib-core/xmath.cpp	/^void TComb::Wr(){$/;"	f	class:TComb
Wr	glib-core/xmath.cpp	/^void TLinReg::Wr() const {$/;"	f	class:TLinReg
Wr	glib-core/xmath.cpp	/^void TSvd::Wr() const {$/;"	f	class:TSvd
WrNotify	glib-core/bd.cpp	/^void WrNotify(const char* CaptionCStr, const char* NotifyCStr){$/;"	f
WrTree	glib-core/ds.h	/^void TTree<TVal>::WrTree(const int& NodeId, const int& Lev){$/;"	f	class:TTree
Write	glib-core/os.cpp	/^int TStdIOPipe::Write(const char* Bf, const int& BfLen) {$/;"	f	class:TStdIOPipe
WriteEdgeSchemaToFile	snap-core/gio.cpp	/^void WriteEdgeSchemaToFile(FILE *F, TStrV &IntAttrENames, TStrV &FltAttrENames, TStrV &StrAttrENames) {$/;"	f	namespace:TSnap
WriteEdgesToFile	snap-core/gio.cpp	/^void WriteEdgesToFile(FILE *F, const PNEANet& Graph, TStrV &IntAttrENames, TStrV &FltAttrENames, TStrV &StrAttrENames) {$/;"	f	namespace:TSnap
WriteN	snap-core/util.cpp	/^int WriteN(int fd, char *ptr, int nbytes) {$/;"	f
WriteNodeSchemaToFile	snap-core/gio.cpp	/^void WriteNodeSchemaToFile(FILE *F, TStrV &IntAttrNNames, TStrV &FltAttrNNames, TStrV &StrAttrNNames) {$/;"	f	namespace:TSnap
WriteNodesToFile	snap-core/gio.cpp	/^void WriteNodesToFile(FILE *F, const PNEANet& Graph, TStrV &IntAttrNNames, TStrV &FltAttrNNames, TStrV &StrAttrNNames) {$/;"	f	namespace:TSnap
X	snap-adv/agm.h	/^  TVec<TFltV> X;$/;"	m	class:TLogRegFit
X	snap-adv/agmattr.h	/^  TVec<TIntSet> X; \/\/ X[u] = {k| X_uk = 1}$/;"	m	class:TCesna
XCol	glib-core/gnuplot.h	/^    int XCol, YCol, ZCol;$/;"	m	class:TGnuPlot::TGpSeries
XDim	glib-core/ds.h	/^  TInt XDim, YDim, ZDim;$/;"	m	class:TVVVec
XDim	glib-core/ds.h	/^  TInt XDim, YDim;$/;"	m	class:TVVec
XLoad	glib-core/bd.h	315;"	d
XLoadFromFile	glib-core/xmlser.h	/^void XLoadFromFile(const TStr& FNm, const TStr& Nm, TRec& Rec){$/;"	f
XLoadHd	glib-core/bd.h	312;"	d
XRange	glib-core/gnuplot.h	/^  TFltPr YRange, XRange;$/;"	m	class:TGnuPlot
XSave	glib-core/bd.h	333;"	d
XSaveBETag	glib-core/bd.h	324;"	d
XSaveBETagArg	glib-core/bd.h	327;"	d
XSaveBETagArg4	glib-core/bd.h	330;"	d
XSaveHd	glib-core/bd.h	318;"	d
XSaveHdArg	glib-core/bd.h	321;"	d
XSaveToFile	glib-core/bd.h	335;"	d
XYValV	glib-core/gnuplot.h	/^    TFltKdV XYValV;$/;"	m	class:TGnuPlot::TGpSeries
XmlInPt	snap-exp/wikinet.h	/^  PXmlParser XmlInPt;$/;"	m	class:TWikiMetaHist
XmlLx	snap-exp/dblp.h	/^  TXmlLx XmlLx;$/;"	m	class:TDblpLoader
XmlLxPt	snap-exp/spinn3r.h	/^  TXmlLx* XmlLxPt;$/;"	m	class:TSpinn3rFeedItem
XmlLxPt	snap-exp/spinn3r.h	/^  TXmlLx* XmlLxPt;$/;"	m	class:TSpinn3rFullItem
Y	snap-adv/agm.h	/^  TFltV Y;$/;"	m	class:TLogRegFit
YCol	glib-core/gnuplot.h	/^    int XCol, YCol, ZCol;$/;"	m	class:TGnuPlot::TGpSeries
YDim	glib-core/ds.h	/^  TInt XDim, YDim, ZDim;$/;"	m	class:TVVVec
YDim	glib-core/ds.h	/^  TInt XDim, YDim;$/;"	m	class:TVVec
YRange	glib-core/gnuplot.h	/^  TFltPr YRange, XRange;$/;"	m	class:TGnuPlot
YStr	glib-core/dt.cpp	/^const TStr TBool::YStr="Y";$/;"	m	class:TBool	file:
Year	glib-core/tm.h	/^  TInt Year, Month, Day, DayOfWeek;$/;"	m	class:TTm
Year	snap-exp/dblp.h	/^  TInt Year;$/;"	m	class:TDblpLoader
Year	snap-exp/imdbnet.h	/^  TInt Name, Year, Position; \/\/ movie title or actor name$/;"	m	class:TImdbNode
YesStr	glib-core/dt.cpp	/^const TStr TBool::YesStr="Yes";$/;"	m	class:TBool	file:
Z	snap-exp/linkpred.h	/^  double Z;       \/\/ huber loss window width$/;"	m	class:TLpPredictor
Z	snap-exp/linkpred.h	/^  double Z; \/\/ huber loss window width$/;"	m	class:__OLD__::TLpPredictor
ZCol	glib-core/gnuplot.h	/^    int XCol, YCol, ZCol;$/;"	m	class:TGnuPlot::TGpSeries
ZDim	glib-core/ds.h	/^  TInt XDim, YDim, ZDim;$/;"	m	class:TVVVec
ZValV	glib-core/gnuplot.h	/^    TFltV ZValV; \/\/ error bar and 3d plots$/;"	m	class:TGnuPlot::TGpSeries
ZipStdinRd	glib-core/zipfl.h	/^    FILE *ZipStdinRd, *ZipStdinWr;$/;"	m	class:TZipOut
ZipStdinRd	glib-core/zipfl.h	/^    HANDLE ZipStdinRd, ZipStdinWr;$/;"	m	class:TZipOut
ZipStdinWr	glib-core/zipfl.h	/^    FILE *ZipStdinRd, *ZipStdinWr;$/;"	m	class:TZipOut
ZipStdinWr	glib-core/zipfl.h	/^    HANDLE ZipStdinRd, ZipStdinWr;$/;"	m	class:TZipOut
ZipStdoutRd	glib-core/zipfl.h	/^    FILE* ZipStdoutRd, *ZipStdoutWr;$/;"	m	class:TZipIn
ZipStdoutRd	glib-core/zipfl.h	/^    HANDLE ZipStdoutRd, ZipStdoutWr;$/;"	m	class:TZipIn
ZipStdoutWr	glib-core/zipfl.h	/^    FILE* ZipStdoutRd, *ZipStdoutWr;$/;"	m	class:TZipIn
ZipStdoutWr	glib-core/zipfl.h	/^    HANDLE ZipStdoutRd, ZipStdoutWr;$/;"	m	class:TZipIn
_C	glib-core/base.h	19;"	d
_CMPWARN	glib-core/base.h	31;"	d
_CMPWARN	glib-core/base.h	43;"	d
_CMPWARN	glib-core/base.h	44;"	d
_CONSOLE	glib-core/bd.h	96;"	d
_GirvanNewmanGetModularity	snap-core/cmty.cpp	/^double _GirvanNewmanGetModularity(const PUNGraph& G, const TIntH& OutDegH, const int& OrigEdges, TCnComV& CnComV) {$/;"	f	namespace:TSnap::TSnapDetail
_IsTagRedir	glib-core/html.cpp	/^bool THtmlDoc::_IsTagRedir($/;"	f	class:THtmlDoc
_USE_MATH_DEFINES	snap-core/Snap.h	5;"	d
_ValV	glib-core/xmath.h	/^  TMom(const TFltV& _ValV);$/;"	v
_WIN32_WINNT	examples/agmfit/targetver.h	11;"	d
_WIN32_WINNT	examples/agmgen/targetver.h	11;"	d
_WIN32_WINNT	examples/bigclam/targetver.h	11;"	d
_WIN32_WINNT	examples/cascadegen/targetver.h	11;"	d
_WIN32_WINNT	examples/cascades/targetver.h	11;"	d
_WIN32_WINNT	examples/centrality/targetver.h	11;"	d
_WIN32_WINNT	examples/cesna/targetver.h	11;"	d
_WIN32_WINNT	examples/circles/targetver.h	11;"	d
_WIN32_WINNT	examples/cliques/targetver.h	11;"	d
_WIN32_WINNT	examples/coda/targetver.h	11;"	d
_WIN32_WINNT	examples/community/targetver.h	11;"	d
_WIN32_WINNT	examples/concomp/targetver.h	11;"	d
_WIN32_WINNT	examples/flows/targetver.h	11;"	d
_WIN32_WINNT	examples/forestfire/targetver.h	11;"	d
_WIN32_WINNT	examples/graphgen/targetver.h	11;"	d
_WIN32_WINNT	examples/graphhash/targetver.h	11;"	d
_WIN32_WINNT	examples/infopath/targetver.h	11;"	d
_WIN32_WINNT	examples/kcores/targetver.h	11;"	d
_WIN32_WINNT	examples/kronem/targetver.h	11;"	d
_WIN32_WINNT	examples/kronfit/targetver.h	11;"	d
_WIN32_WINNT	examples/krongen/targetver.h	11;"	d
_WIN32_WINNT	examples/magfit/targetver.h	11;"	d
_WIN32_WINNT	examples/maggen/targetver.h	11;"	d
_WIN32_WINNT	examples/mkdatasets/targetver.h	11;"	d
_WIN32_WINNT	examples/motifcluster/targetver.h	11;"	d
_WIN32_WINNT	examples/motifs/targetver.h	11;"	d
_WIN32_WINNT	examples/ncpplot/targetver.h	11;"	d
_WIN32_WINNT	examples/netevol/targetver.h	11;"	d
_WIN32_WINNT	examples/netinf/targetver.h	11;"	d
_WIN32_WINNT	examples/netstat/targetver.h	11;"	d
_WIN32_WINNT	examples/randwalk/targetver.h	11;"	d
_WIN32_WINNT	examples/rolx/targetver.h	11;"	d
_WIN32_WINNT	examples/testgraph/targetver.h	11;"	d
_WIN32_WINNT	examples/zygote/targetver.h	11;"	d
_WIN32_WINNT	snap-exp/bfs-dev/targetver.h	11;"	d
_WIN32_WINNT	snap-exp/cascades-benchmark/targetver.h	11;"	d
_WIN32_WINNT	snap-exp/cascades-dev/targetver.h	11;"	d
_WIN32_WINNT	snap-exp/circles/targetver.h	11;"	d
_WIN32_WINNT	snap-exp/multimodal-dev/targetver.h	11;"	d
__OLD__	snap-exp/linkpred.cpp	/^namespace __OLD__ {$/;"	n	file:
__OLD__	snap-exp/linkpred.h	/^namespace __OLD__ {$/;"	n
__STDC_LIMIT_MACROS	glib-core/base.h	60;"	d
__STDC_LIMIT_MACROS	glib-core/base.h	61;"	d
__TEST	glib-core/dt.cpp	2001;"	d	file:
__TEST	glib-core/dt.cpp	2012;"	d	file:
__UniFwd1	glib-core/unicode.h	2017;"	d
___OutRepl	glib-core/unicode.h	2443;"	d
___OutRepl	glib-core/unicode.h	2461;"	d
___UniFwd1	glib-core/unicode.h	1361;"	d
___UniFwd1	glib-core/unicode.h	1381;"	d
___UniFwd1	glib-core/unicode.h	2014;"	d
___UniFwd2	glib-core/unicode.h	1362;"	d
___UniFwd3	glib-core/unicode.h	1363;"	d
___UniFwd4	glib-core/unicode.h	1364;"	d
___UniFwd5	glib-core/unicode.h	1365;"	d
__snap_test__test_helper__	test/test-helper.h	10;"	d
__stdcall	glib-core/base.h	109;"	d
_daylight	glib-core/base.cpp	/^int _daylight = 0;$/;"	v
_environ	glib-core/base.h	100;"	d
_environ	glib-core/base.h	102;"	d
_environ	glib-core/base.h	105;"	d
_finite	glib-core/bd.h	48;"	d
_finite	glib-core/bd.h	50;"	d
_freq	contrib/unict_univr-risnap/RI-DSToSnap/timer.h	/^LARGE_INTEGER _freq;$/;"	v
_freq	contrib/unict_univr-risnap/RiToSnap/timer.h	/^LARGE_INTEGER _freq;$/;"	v
_isnan	glib-core/bd.h	46;"	d
_matherr	glib-core/bd.cpp	/^int _matherr(struct __exception* e){$/;"	f
_matherr	glib-core/bd.cpp	/^int _matherr(struct __math_exception* e){$/;"	f
_matherr	glib-core/bd.cpp	/^int _matherr(struct _exception* e){$/;"	f
_matherr	glib-core/bd.cpp	/^int std::_matherr(struct math_exception* e){$/;"	f	class:std
_tz	contrib/unict_univr-risnap/RI-DSToSnap/timer.h	/^struct timezone _tz;$/;"	v	typeref:struct:timezone
_tz	contrib/unict_univr-risnap/RiToSnap/timer.h	/^struct timezone _tz;$/;"	v	typeref:struct:timezone
_vsnprintf	glib-core/bd.h	55;"	d
_xmlser_h	glib-core/xmlser.h	2;"	d
a	glib-core/dt.cpp	/^const int TRnd::a=16807;$/;"	m	class:TRnd	file:
a	glib-core/dt.h	/^  static const int a, m, q, r;$/;"	m	class:TRnd
aaCount	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
aaFirst	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
aaLast	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
aaMax	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
aaMean	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
aaMedian	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
aaMin	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
aaSum	snap-core/table.h	/^typedef enum {aaMin, aaMax, aaFirst, aaLast, aaMean, aaMedian, aaSum, aaCount} TAttrAggr;$/;"	e	enum:__anon84
alpha	snap-core/bfsdfs.h	/^  static const unsigned int alpha = 100;$/;"	m	class:TBreathFS
alpha	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  static const unsigned int alpha = 10;$/;"	m	class:TBreathFS_Hybrid_Test
alpha	snap-exp/bfs-dev/bfs-hybrid.h	/^  static const unsigned int alpha = 100;$/;"	m	class:TBreathFS_Hybrid
alpha	snap-exp/bfs-dev/bfs-parallel.h	/^  static const unsigned int alpha = 100;$/;"	m	class:TBreathFS_Parallel
aoAdd	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	e	enum:__anon85
aoDiv	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	e	enum:__anon85
aoMax	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	e	enum:__anon85
aoMin	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	e	enum:__anon85
aoMod	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	e	enum:__anon85
aoMul	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	e	enum:__anon85
aoSub	snap-core/table.h	/^typedef enum {aoAdd, aoSub, aoMul, aoDiv, aoMod, aoMin, aoMax} TArithOp;$/;"	e	enum:__anon85
atFlt	snap-core/gbase.h	/^typedef enum TAttrType_ {atInt, atFlt, atStr} TAttrType;$/;"	e	enum:TAttrType_
atInt	snap-core/gbase.h	/^typedef enum TAttrType_ {atInt, atFlt, atStr} TAttrType;$/;"	e	enum:TAttrType_
atStr	snap-core/gbase.h	/^typedef enum TAttrType_ {atInt, atFlt, atStr} TAttrType;$/;"	e	enum:TAttrType_
attr	snap-core/mmnet.h	/^    TStr attr;$/;"	m	class:TCrossNet::TAFltI
attr	snap-core/mmnet.h	/^    TStr attr;$/;"	m	class:TCrossNet::TAIntI
attr	snap-core/mmnet.h	/^    TStr attr;$/;"	m	class:TCrossNet::TAStrI
attr	snap-core/network.h	/^    TStr attr;$/;"	m	class:TNEANet::TAFltI
attr	snap-core/network.h	/^    TStr attr;$/;"	m	class:TNEANet::TAIntI
attr	snap-core/network.h	/^    TStr attr;$/;"	m	class:TNEANet::TAIntVI
attr	snap-core/network.h	/^    TStr attr;$/;"	m	class:TNEANet::TAStrI
attr	snap-core/networkmp.h	/^    TStr attr;$/;"	m	class:TNEANetMP::TAFltI
attr	snap-core/networkmp.h	/^    TStr attr;$/;"	m	class:TNEANetMP::TAIntI
attr	snap-core/networkmp.h	/^    TStr attr;$/;"	m	class:TNEANetMP::TAStrI
balancedError	snap-adv/circles.h	/^  balancedError = 1,$/;"	e	enum:lossType
base_h	glib-core/base.h	2;"	d
bd_h	glib-core/bd.h	2;"	d
beta	snap-core/bfsdfs.h	/^  static const unsigned int beta = 20;$/;"	m	class:TBreathFS
beta	snap-exp/bfs-dev/bfs-hybrid-test.h	/^  static const unsigned int beta = 20;$/;"	m	class:TBreathFS_Hybrid_Test
beta	snap-exp/bfs-dev/bfs-hybrid.h	/^  static const unsigned int beta = 20;$/;"	m	class:TBreathFS_Hybrid
beta	snap-exp/bfs-dev/bfs-parallel.h	/^  static const unsigned int beta = 20;$/;"	m	class:TBreathFS_Parallel
bgsBoth	snap-core/graph.h	/^  typedef enum { bgsUndef, bgsLeft, bgsRight, bgsBoth } TNodeTy; \/\/ left or right hand side node$/;"	e	enum:TBPGraph::__anon103
bgsLeft	snap-core/graph.h	/^  typedef enum { bgsUndef, bgsLeft, bgsRight, bgsBoth } TNodeTy; \/\/ left or right hand side node$/;"	e	enum:TBPGraph::__anon103
bgsRight	snap-core/graph.h	/^  typedef enum { bgsUndef, bgsLeft, bgsRight, bgsBoth } TNodeTy; \/\/ left or right hand side node$/;"	e	enum:TBPGraph::__anon103
bgsUndef	snap-core/graph.h	/^  typedef enum { bgsUndef, bgsLeft, bgsRight, bgsBoth } TNodeTy; \/\/ left or right hand side node$/;"	e	enum:TBPGraph::__anon103
bifan	snap-adv/motifcluster.h	/^  bifan,      \/\/ u  --> w, u  --> x, v  --> w, v  --> x$/;"	e	enum:MotifType
bits_per_block	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^static const size_t bits_per_block = sizeof(sbitset_block)*8;$/;"	m	class:TSBitSet
blockprefix	doxygen/doxyblock.py	/^blockprefix = "\/\/\/"$/;"	v
boBigEndian	glib-core/unicode.h	/^	boBigEndian = 2$/;"	e	enum:TUniByteOrder_
boLittleEndian	glib-core/unicode.h	/^	boLittleEndian = 1,$/;"	e	enum:TUniByteOrder_
boMachineEndian	glib-core/unicode.h	/^	boMachineEndian = 0,$/;"	e	enum:TUniByteOrder_
bomAllowed	glib-core/unicode.h	/^	bomAllowed = 0,   \/\/ if a BOM is present, it is used to determine the byte order; otherwise, the default byte order is used$/;"	e	enum:TUtf16BomHandling_
bomIgnored	glib-core/unicode.h	/^	bomIgnored = 2    \/\/ the default byte order is used; if a BOM is present, it is treated like any other character$/;"	e	enum:TUtf16BomHandling_
bomRequired	glib-core/unicode.h	/^	bomRequired = 1,  \/\/ if a BOM is present, it is used to determine the byte order; otherwise, an error is reported$/;"	e	enum:TUtf16BomHandling_
briefprefix	doxygen/doxyblock.py	/^briefprefix = "\/\/\/"$/;"	v
buf	glib-core/unicode.h	/^		TChA buf;$/;"	m	class:TUniChDb::TUcdFileReader
buffer	glib-core/md5.h	/^  uint1 buffer[64]; \/\/ input buffer$/;"	v
bytes_per_block	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^static const size_t bytes_per_block = sizeof(sbitset_block);$/;"	m	class:TSBitSet
caseFolding	glib-core/unicode.h	/^	TUniCaseFolding caseFolding;$/;"	m	class:TUniChDb
cat	glib-core/unicode.h	/^	TUniChCategory cat; \/\/ = TUniChCategory(chCat)$/;"	m	class:TUniChInfo
ccAbove	glib-core/unicode.h	/^		ccAbove = 230,$/;"	e	enum:TUniChInfo::__anon46
ccAboveAttached	glib-core/unicode.h	/^		ccAboveAttached = 214,$/;"	e	enum:TUniChInfo::__anon46
ccAboveLeft	glib-core/unicode.h	/^		ccAboveLeft = 228,$/;"	e	enum:TUniChInfo::__anon46
ccAboveLeftAttached	glib-core/unicode.h	/^		ccAboveLeftAttached = 212,$/;"	e	enum:TUniChInfo::__anon46
ccAboveRight	glib-core/unicode.h	/^		ccAboveRight = 232,$/;"	e	enum:TUniChInfo::__anon46
ccAboveRightAttached	glib-core/unicode.h	/^		ccAboveRightAttached = 216,$/;"	e	enum:TUniChInfo::__anon46
ccBelow	glib-core/unicode.h	/^		ccBelow = 220,$/;"	e	enum:TUniChInfo::__anon46
ccBelowAttached	glib-core/unicode.h	/^		ccBelowAttached = 202,$/;"	e	enum:TUniChInfo::__anon46
ccBelowIotaSubscript	glib-core/unicode.h	/^		ccBelowIotaSubscript = 240, \/\/ Below (iota subscript)$/;"	e	enum:TUniChInfo::__anon46
ccBelowLeft	glib-core/unicode.h	/^		ccBelowLeft = 218,$/;"	e	enum:TUniChInfo::__anon46
ccBelowLeftAttached	glib-core/unicode.h	/^		ccBelowLeftAttached = 200,$/;"	e	enum:TUniChInfo::__anon46
ccBelowRight	glib-core/unicode.h	/^		ccBelowRight = 222,$/;"	e	enum:TUniChInfo::__anon46
ccBelowRightAttached	glib-core/unicode.h	/^		ccBelowRightAttached = 204,$/;"	e	enum:TUniChInfo::__anon46
ccDoubleAbove	glib-core/unicode.h	/^		ccDoubleAbove = 234,$/;"	e	enum:TUniChInfo::__anon46
ccDoubleBelow	glib-core/unicode.h	/^		ccDoubleBelow = 233,$/;"	e	enum:TUniChInfo::__anon46
ccFixedPositionEnd	glib-core/unicode.h	/^		ccFixedPositionEnd = 199, \/\/ End of fixed position classes$/;"	e	enum:TUniChInfo::__anon46
ccFixedPositionStart	glib-core/unicode.h	/^		ccFixedPositionStart = 10, \/\/ Start of fixed position classes$/;"	e	enum:TUniChInfo::__anon46
ccHiraganaKatakanaVoicingMarks	glib-core/unicode.h	/^		ccHiraganaKatakanaVoicingMarks = 8,$/;"	e	enum:TUniChInfo::__anon46
ccInvalid	glib-core/unicode.h	/^		ccInvalid = 255 \/\/ not defined by Unicode$/;"	e	enum:TUniChInfo::__anon46
ccLeft	glib-core/unicode.h	/^		ccLeft = 224, \/\/ Left (reordrant around single base character)$/;"	e	enum:TUniChInfo::__anon46
ccLeftAttached	glib-core/unicode.h	/^		ccLeftAttached = 208, \/\/ Left attached (reordrant around single base character)$/;"	e	enum:TUniChInfo::__anon46
ccLower	glib-core/unicode.h	/^	typedef enum TCaseConversion_ { ccLower = 0, ccUpper = 1, ccTitle = 2, ccMax = 3 } TCaseConversion;$/;"	e	enum:TUniChDb::TCaseConversion_
ccMax	glib-core/unicode.h	/^	typedef enum TCaseConversion_ { ccLower = 0, ccUpper = 1, ccTitle = 2, ccMax = 3 } TCaseConversion;$/;"	e	enum:TUniChDb::TCaseConversion_
ccNuktas	glib-core/unicode.h	/^		ccNuktas = 7,$/;"	e	enum:TUniChInfo::__anon46
ccOverlaysAndInterior	glib-core/unicode.h	/^		ccOverlaysAndInterior = 1,$/;"	e	enum:TUniChInfo::__anon46
ccRight	glib-core/unicode.h	/^		ccRight = 226,$/;"	e	enum:TUniChInfo::__anon46
ccRightAttached	glib-core/unicode.h	/^		ccRightAttached = 210,$/;"	e	enum:TUniChInfo::__anon46
ccStarter	glib-core/unicode.h	/^		ccStarter = 0, \/\/ 0: Spacing, split, enclosing, reordrant, and Tibetan subjoined$/;"	e	enum:TUniChInfo::__anon46
ccTitle	glib-core/unicode.h	/^	typedef enum TCaseConversion_ { ccLower = 0, ccUpper = 1, ccTitle = 2, ccMax = 3 } TCaseConversion;$/;"	e	enum:TUniChDb::TCaseConversion_
ccUpper	glib-core/unicode.h	/^	typedef enum TCaseConversion_ { ccLower = 0, ccUpper = 1, ccTitle = 2, ccMax = 3 } TCaseConversion;$/;"	e	enum:TUniChDb::TCaseConversion_
ccViramas	glib-core/unicode.h	/^		ccViramas = 9,$/;"	e	enum:TUniChInfo::__anon46
cfCommon	glib-core/unicode.h	/^	TIntH cfCommon, cfSimple, cfTurkic;$/;"	m	class:TUniCaseFolding
cfFull	glib-core/unicode.h	/^	TIntIntVH cfFull;$/;"	m	class:TUniCaseFolding
cfSimple	glib-core/unicode.h	/^	TIntH cfCommon, cfSimple, cfTurkic;$/;"	m	class:TUniCaseFolding
cfTurkic	glib-core/unicode.h	/^	TIntH cfCommon, cfSimple, cfTurkic;$/;"	m	class:TUniCaseFolding
chCat	glib-core/unicode.h	/^	char chCat, chSubCat; \/\/ chCat + chSubCat together comprise the general category (from UnicodeData.txt)$/;"	m	class:TUniChInfo
chSubCat	glib-core/unicode.h	/^	char chCat, chSubCat; \/\/ chCat + chSubCat together comprise the general category (from UnicodeData.txt)$/;"	m	class:TUniChInfo
charNames	glib-core/unicode.h	/^	TStrPool charNames;$/;"	m	class:TUniChDb
chat	snap-exp/circles/circles.h	/^  TVec<TIntSet> chat; \/\/ Latent community memberships$/;"	m	class:TCluster
checkResults	snap-exp/bfs-dev/test.cpp	/^bool checkResults(TBreathFS<PGraph> &bfs_hybrid, TBreathFS<PGraph> &bfs) {$/;"	f
checkResults	snap-exp/bfs-dev/test1.cpp	/^bool checkResults(TBreathFS_Hybrid<PGraph> &bfs_hybrid, TBreathFS_Test<PGraph> &bfs) {$/;"	f
checkResults	snap-exp/bfs-dev/test_parallel.cpp	/^bool checkResults(TBreathFS_Hybrid<PGraph> &bfs_hybrid, TBreathFS_Parallel<PGraph> &bfs) {$/;"	f
chekIfCrossing	snap-core/cmty.cpp	/^bool chekIfCrossing(TIntV& a, TIntH& t, int f, int l, int TP) {$/;"	f	namespace:TSnap::TSnapDetail
child	glib-core/unicode.h	/^		int child, sib;$/;"	m	class:TUniTrie::TNode
clique3	snap-adv/motifcluster.h	/^  clique3,    \/\/       |$/;"	e	enum:MotifType
clique4	snap-adv/motifcluster.h	/^  clique4,    \/\/       |$/;"	e	enum:MotifType
clique5	snap-adv/motifcluster.h	/^  clique5,    \/\/       |$/;"	e	enum:MotifType
clique6	snap-adv/motifcluster.h	/^  clique6,    \/\/       |$/;"	e	enum:MotifType
clique7	snap-adv/motifcluster.h	/^  clique7,    \/\/       |$/;"	e	enum:MotifType
clique8	snap-adv/motifcluster.h	/^  clique8,    \/\/       |$/;"	e	enum:MotifType
clique9	snap-adv/motifcluster.h	/^  clique9,    \/\/       |$/;"	e	enum:MotifType
cluster	snap-adv/motifcluster.h	/^  TIntV cluster;        \/\/ Set of indices forming cluster$/;"	m	class:TSweepCut
codec	glib-core/unicode.h	/^	TUniCodec codec;$/;"	m	class:TUnicode
codecs	glib-core/unicode.h	/^	THash<TStr, PCodecBase> codecs;$/;"	m	class:TUnicode
combClass	glib-core/unicode.h	/^	uchar combClass; \/\/ canonical combining class$/;"	m	class:TUniChInfo
comment	glib-core/unicode.h	/^		TChA comment; \/\/ contains '#' and everything after it$/;"	m	class:TUniChDb::TUcdFileReader
compareFiles	test/test-helper.cpp	/^bool compareFiles(const std::string& fname1, const std::string& fname2) {$/;"	f
component	snap-adv/motifcluster.h	/^  TCnCom component;     \/\/ connected component that the cut runs on$/;"	m	class:TSweepCut
cond	snap-adv/motifcluster.h	/^  double cond;          \/\/ conductance of the cluster$/;"	m	class:TSweepCut
convert	doxygen/doxyblock.py	/^def convert(dirpath,srcname,dstname):$/;"	f
count	glib-core/md5.h	/^  uint4 count[2]; \/\/ number of *bits*, mod 2^64$/;"	v
cp1250	glib-core/unicode.h	/^	T8BitCodec<TEncoding_CP1250> cp1250;$/;"	m	class:TUnicode
cp437	glib-core/unicode.h	/^	T8BitCodec<TEncoding_CP437> cp437;$/;"	m	class:TUnicode
cp852	glib-core/unicode.h	/^	T8BitCodec<TEncoding_CP852> cp852;$/;"	m	class:TUnicode
curr	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  int curr;$/;"	m	class:TCandidatesList
decompOffset	glib-core/unicode.h	/^	int decompOffset; \/\/ offset into 'TUniChDb.decompositions'; or -1 if the character doesn't change during decomposition$/;"	m	class:TUniChInfo
decompositions	glib-core/unicode.h	/^	TIntV decompositions;$/;"	m	class:TUniChDb
detailprefix	doxygen/doxyblock.py	/^detailprefix = "##"$/;"	v
dl	snap-exp/circles/circles.cpp	/^void TCluster::dl(void) {$/;"	f	class:TCluster
dldt	snap-exp/circles/circles.h	/^  TFlt* dldt; \/\/ Partial derivatives$/;"	m	class:TCluster
docdir	doxygen/doxyblock.py	/^docdir = "doc"$/;"	v
docprefix	doxygen/doxyblock.py	/^docprefix = "\/\/\/ "$/;"	v
docsuffix	doxygen/doxyblock.py	/^docsuffix = ".txt"$/;"	v
dstdir	doxygen/doxyblock.py	/^    dstdir = sys.argv[2]$/;"	v
dstpath	doxygen/doxyblock.py	/^        dstpath = os.path.join(workdir,path.replace(srcdir,dstdir,1))$/;"	v
edge	snap-adv/motifcluster.h	/^  edge,       \/\/ (undirected) edges$/;"	e	enum:MotifType
edgeFeatures	snap-exp/circles/circles.h	/^  THash<TIntPr, TIntIntH> edgeFeatures;$/;"	m	class:TGraphAttributes
edgeIntersect	snap-core/cmty.cpp	/^bool edgeIntersect(PNGraph& graph, TIntV& a, TIntV& b) {$/;"	f	namespace:TSnap::TSnapDetail
eig	snap-adv/motifcluster.h	/^  double eig;           \/\/ Eigenvalue of Fiedler vector$/;"	m	class:TSweepCut
end_time	contrib/unict_univr-risnap/RI-DSToSnap/timer.h	/^inline double end_time(TIMEHANDLE th)$/;"	f
end_time	contrib/unict_univr-risnap/RiToSnap/timer.h	/^inline double end_time(TIMEHANDLE th)$/;"	f
errorHandling	glib-core/unicode.h	/^	TUnicodeErrorHandling errorHandling;$/;"	m	class:T8BitCodec
errorHandling	glib-core/unicode.h	/^	TUnicodeErrorHandling errorHandling;$/;"	m	class:TUniCodec
f	glib-core/unicode.h	/^		FILE *f;$/;"	m	class:TUniChDb::TUcdFileReader
fScore	snap-adv/circles.h	/^  fScore = 2$/;"	e	enum:lossType
faAppend	glib-core/fl.h	/^typedef enum {faUndef, faCreate, faUpdate, faAppend, faRdOnly, faRestore} TFAccess;$/;"	e	enum:__anon53
faCreate	glib-core/fl.h	/^typedef enum {faUndef, faCreate, faUpdate, faAppend, faRdOnly, faRestore} TFAccess;$/;"	e	enum:__anon53
faRdOnly	glib-core/fl.h	/^typedef enum {faUndef, faCreate, faUpdate, faAppend, faRdOnly, faRestore} TFAccess;$/;"	e	enum:__anon53
faRestore	glib-core/fl.h	/^typedef enum {faUndef, faCreate, faUpdate, faAppend, faRdOnly, faRestore} TFAccess;$/;"	e	enum:__anon53
faUndef	glib-core/fl.h	/^typedef enum {faUndef, faCreate, faUpdate, faAppend, faRdOnly, faRestore} TFAccess;$/;"	e	enum:__anon53
faUpdate	glib-core/fl.h	/^typedef enum {faUndef, faCreate, faUpdate, faAppend, faRdOnly, faRestore} TFAccess;$/;"	e	enum:__anon53
fileExists	test/test-helper.cpp	/^bool fileExists(const std::string& filename)$/;"	f
findMinimum	snap-core/centr.cpp	/^int findMinimum(TIntV& Frontier, TIntFltH& NIdDistH) {$/;"	f	namespace:TSnap
find_C	snap-adv/cascdynetinf.cpp	/^void TNIBs::find_C( int t, TFltV &x, TFltVV &C, const int& k, const double& s, const double& gamma, const double& T ){$/;"	f	class:TNIBs
find_min_state	snap-adv/cascdynetinf.cpp	/^void TNIBs::find_min_state( TFltVV &C, TIntV &states, const int& k, const double& s, const double& gamma, const double& T ){$/;"	f	class:TNIBs
flags	glib-core/unicode.h	/^	int flags; \/\/ a combination of TUniChFlags$/;"	m	class:TUniChInfo
forever	glib-core/bd.h	6;"	d
fromUnicodeTable1	glib-core/unicode.cpp	/^const int TEncoding_CP1250::fromUnicodeTable1[14 * 16] = {$/;"	m	class:TEncoding_CP1250	file:
fromUnicodeTable1	glib-core/unicode.cpp	/^const int TEncoding_CP437::fromUnicodeTable1[6 * 16] = {$/;"	m	class:TEncoding_CP437	file:
fromUnicodeTable1	glib-core/unicode.cpp	/^const int TEncoding_CP852::fromUnicodeTable1[14 * 16] = {$/;"	m	class:TEncoding_CP852	file:
fromUnicodeTable1	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_2::fromUnicodeTable1[14 * 16] = {$/;"	m	class:TEncoding_ISO8859_2	file:
fromUnicodeTable1	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_3::fromUnicodeTable1[14 * 16] = {$/;"	m	class:TEncoding_ISO8859_3	file:
fromUnicodeTable1	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_4::fromUnicodeTable1[14 * 16] = {$/;"	m	class:TEncoding_ISO8859_4	file:
fromUnicodeTable1	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16];$/;"	m	class:TEncoding_ISO8859_2
fromUnicodeTable1	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16];$/;"	m	class:TEncoding_ISO8859_4
fromUnicodeTable1	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2];$/;"	m	class:TEncoding_ISO8859_3
fromUnicodeTable1	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[11 * 16];$/;"	m	class:TEncoding_CP852
fromUnicodeTable1	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[3 * 16];$/;"	m	class:TEncoding_CP1250
fromUnicodeTable1	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[6 * 16], fromUnicodeTable2[4 * 16], fromUnicodeTable3[6 * 16], fromUnicodeTable4[11 * 16];$/;"	m	class:TEncoding_CP437
fromUnicodeTable2	glib-core/unicode.cpp	/^const int TEncoding_CP1250::fromUnicodeTable2[2 * 16] = {$/;"	m	class:TEncoding_CP1250	file:
fromUnicodeTable2	glib-core/unicode.cpp	/^const int TEncoding_CP437::fromUnicodeTable2[4 * 16] = {$/;"	m	class:TEncoding_CP437	file:
fromUnicodeTable2	glib-core/unicode.cpp	/^const int TEncoding_CP852::fromUnicodeTable2[2* 16] = {$/;"	m	class:TEncoding_CP852	file:
fromUnicodeTable2	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_2::fromUnicodeTable2[2 * 16] = {$/;"	m	class:TEncoding_ISO8859_2	file:
fromUnicodeTable2	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_3::fromUnicodeTable2[2] = {$/;"	m	class:TEncoding_ISO8859_3	file:
fromUnicodeTable2	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_4::fromUnicodeTable2[2 * 16] = {$/;"	m	class:TEncoding_ISO8859_4	file:
fromUnicodeTable2	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16];$/;"	m	class:TEncoding_ISO8859_2
fromUnicodeTable2	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16];$/;"	m	class:TEncoding_ISO8859_4
fromUnicodeTable2	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2];$/;"	m	class:TEncoding_ISO8859_3
fromUnicodeTable2	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[11 * 16];$/;"	m	class:TEncoding_CP852
fromUnicodeTable2	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[3 * 16];$/;"	m	class:TEncoding_CP1250
fromUnicodeTable2	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[6 * 16], fromUnicodeTable2[4 * 16], fromUnicodeTable3[6 * 16], fromUnicodeTable4[11 * 16];$/;"	m	class:TEncoding_CP437
fromUnicodeTable3	glib-core/unicode.cpp	/^const int TEncoding_CP1250::fromUnicodeTable3[3 * 16] = {$/;"	m	class:TEncoding_CP1250	file:
fromUnicodeTable3	glib-core/unicode.cpp	/^const int TEncoding_CP437::fromUnicodeTable3[6 * 16] = {$/;"	m	class:TEncoding_CP437	file:
fromUnicodeTable3	glib-core/unicode.cpp	/^const int TEncoding_CP852::fromUnicodeTable3[11 * 16] = {$/;"	m	class:TEncoding_CP852	file:
fromUnicodeTable3	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[11 * 16];$/;"	m	class:TEncoding_CP852
fromUnicodeTable3	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[3 * 16];$/;"	m	class:TEncoding_CP1250
fromUnicodeTable3	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[6 * 16], fromUnicodeTable2[4 * 16], fromUnicodeTable3[6 * 16], fromUnicodeTable4[11 * 16];$/;"	m	class:TEncoding_CP437
fromUnicodeTable4	glib-core/unicode.cpp	/^const int TEncoding_CP437::fromUnicodeTable4[11 * 16] = {$/;"	m	class:TEncoding_CP437	file:
fromUnicodeTable4	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[6 * 16], fromUnicodeTable2[4 * 16], fromUnicodeTable3[6 * 16], fromUnicodeTable4[11 * 16];$/;"	m	class:TEncoding_CP437
gd	snap-exp/circles/circles.h	/^  PGraphAttributes gd; \/\/ Graph with attributes$/;"	m	class:TCluster
getCircles	snap-exp/circles/circles.h	/^  TVec<TIntSet> getCircles(void) {$/;"	f	class:TCluster
getId	snap-adv/graphcounter.cpp	/^int TD3Graph::getId(const PNGraph &G, const TIntV &sg) {$/;"	f	class:TD3Graph
getId	snap-adv/graphcounter.cpp	/^int TD4Graph::getId(const PNGraph &G, const TIntV &sg) {$/;"	f	class:TD4Graph
getVec	snap-adv/subgraphenum.h	/^		inline const TIntV &getVec() const { return m_v; }$/;"	f	class:TSubGraphEnum::TSVec
getcputime	examples/flows/flows.cpp	/^double getcputime() {$/;"	f
getmaxcpumem	snap-exp/test-dev/BenchmarkUtilities.h	/^void getmaxcpumem(float *scpu, float *smem) {$/;"	f
gettimeofday	glib-core/base.cpp	/^int gettimeofday(struct timeval * tp, struct timezone * tzp)$/;"	f
gfBipart	snap-core/gbase.h	/^  gfBipart,     \/\/\/< bipartite graph$/;"	e	enum:TGraphFlag_
gfDirected	snap-core/gbase.h	/^  gfDirected,   \/\/\/< directed graph (TNGraph, TNEGraph), else graph is undirected TUNGraph$/;"	e	enum:TGraphFlag_
gfEdgeDat	snap-core/gbase.h	/^  gfEdgeDat,    \/\/\/< network with data on edges$/;"	e	enum:TGraphFlag_
gfMultiGraph	snap-core/gbase.h	/^  gfMultiGraph, \/\/\/< have explicit edges (multigraph): TNEGraph, TNodeEdgeNet$/;"	e	enum:TGraphFlag_
gfMx	snap-core/gbase.h	/^  gfMx          \/\/\/< sentinel, last value for iteration$/;"	e	enum:TGraphFlag_
gfNodeDat	snap-core/gbase.h	/^  gfNodeDat,    \/\/\/< network with data on nodes$/;"	e	enum:TGraphFlag_
gfSources	snap-core/gbase.h	/^  gfSources,    \/\/\/< nodes only store out-edges (but not in-edges). See TBigNet$/;"	e	enum:TGraphFlag_
gfUndef	snap-core/gbase.h	/^  gfUndef=0,    \/\/\/< default value, no flags$/;"	e	enum:TGraphFlag_
gnuplot_h	glib-core/gnuplot.h	2;"	d
gpsAuto	glib-core/gnuplot.h	/^  gpsNoAuto, gpsAuto, gpsLog, gpsLog2X, gpsLog2Y, gpsLog2XY, gpsLog10X,$/;"	e	enum:__anon35
gpsLog	glib-core/gnuplot.h	/^  gpsNoAuto, gpsAuto, gpsLog, gpsLog2X, gpsLog2Y, gpsLog2XY, gpsLog10X,$/;"	e	enum:__anon35
gpsLog10X	glib-core/gnuplot.h	/^  gpsNoAuto, gpsAuto, gpsLog, gpsLog2X, gpsLog2Y, gpsLog2XY, gpsLog10X,$/;"	e	enum:__anon35
gpsLog10XY	glib-core/gnuplot.h	/^  gpsLog10Y, gpsLog10XY$/;"	e	enum:__anon35
gpsLog10Y	glib-core/gnuplot.h	/^  gpsLog10Y, gpsLog10XY$/;"	e	enum:__anon35
gpsLog2X	glib-core/gnuplot.h	/^  gpsNoAuto, gpsAuto, gpsLog, gpsLog2X, gpsLog2Y, gpsLog2XY, gpsLog10X,$/;"	e	enum:__anon35
gpsLog2XY	glib-core/gnuplot.h	/^  gpsNoAuto, gpsAuto, gpsLog, gpsLog2X, gpsLog2Y, gpsLog2XY, gpsLog10X,$/;"	e	enum:__anon35
gpsLog2Y	glib-core/gnuplot.h	/^  gpsNoAuto, gpsAuto, gpsLog, gpsLog2X, gpsLog2Y, gpsLog2XY, gpsLog10X,$/;"	e	enum:__anon35
gpsNoAuto	glib-core/gnuplot.h	/^  gpsNoAuto, gpsAuto, gpsLog, gpsLog2X, gpsLog2Y, gpsLog2XY, gpsLog10X,$/;"	e	enum:__anon35
gpwBoxes	glib-core/gnuplot.h	/^  gpwSteps, gpwFSteps, gpwHiSteps, gpwBoxes, gpwErrBars, gpwFilledCurves, gpwMax$/;"	e	enum:__anon36
gpwDots	glib-core/gnuplot.h	/^  gpwUndef, gpwLines, gpwPoints, gpwLinesPoints, gpwImpulses, gpwDots,$/;"	e	enum:__anon36
gpwErrBars	glib-core/gnuplot.h	/^  gpwSteps, gpwFSteps, gpwHiSteps, gpwBoxes, gpwErrBars, gpwFilledCurves, gpwMax$/;"	e	enum:__anon36
gpwFSteps	glib-core/gnuplot.h	/^  gpwSteps, gpwFSteps, gpwHiSteps, gpwBoxes, gpwErrBars, gpwFilledCurves, gpwMax$/;"	e	enum:__anon36
gpwFilledCurves	glib-core/gnuplot.h	/^  gpwSteps, gpwFSteps, gpwHiSteps, gpwBoxes, gpwErrBars, gpwFilledCurves, gpwMax$/;"	e	enum:__anon36
gpwHiSteps	glib-core/gnuplot.h	/^  gpwSteps, gpwFSteps, gpwHiSteps, gpwBoxes, gpwErrBars, gpwFilledCurves, gpwMax$/;"	e	enum:__anon36
gpwImpulses	glib-core/gnuplot.h	/^  gpwUndef, gpwLines, gpwPoints, gpwLinesPoints, gpwImpulses, gpwDots,$/;"	e	enum:__anon36
gpwLines	glib-core/gnuplot.h	/^  gpwUndef, gpwLines, gpwPoints, gpwLinesPoints, gpwImpulses, gpwDots,$/;"	e	enum:__anon36
gpwLinesPoints	glib-core/gnuplot.h	/^  gpwUndef, gpwLines, gpwPoints, gpwLinesPoints, gpwImpulses, gpwDots,$/;"	e	enum:__anon36
gpwMax	glib-core/gnuplot.h	/^  gpwSteps, gpwFSteps, gpwHiSteps, gpwBoxes, gpwErrBars, gpwFilledCurves, gpwMax$/;"	e	enum:__anon36
gpwPoints	glib-core/gnuplot.h	/^  gpwUndef, gpwLines, gpwPoints, gpwLinesPoints, gpwImpulses, gpwDots,$/;"	e	enum:__anon36
gpwSteps	glib-core/gnuplot.h	/^  gpwSteps, gpwFSteps, gpwHiSteps, gpwBoxes, gpwErrBars, gpwFilledCurves, gpwMax$/;"	e	enum:__anon36
gpwUndef	glib-core/gnuplot.h	/^  gpwUndef, gpwLines, gpwPoints, gpwLinesPoints, gpwImpulses, gpwDots,$/;"	e	enum:__anon36
graph_	snap-adv/motifcluster.h	/^  TVec < TVec<TIntV> > graph_;$/;"	m	class:ChibaNishizekiWeighter
gsdClustCf	snap-core/gstat.h	/^  gsdHops, gsdWccHops, gsdSngVal, gsdSngVec, gsdClustCf,$/;"	e	enum:TGStatDistr_
gsdHops	snap-core/gstat.h	/^  gsdHops, gsdWccHops, gsdSngVal, gsdSngVec, gsdClustCf,$/;"	e	enum:TGStatDistr_
gsdInDeg	snap-core/gstat.h	/^  gsdUndef=100, gsdInDeg, gsdOutDeg, gsdWcc, gsdScc,$/;"	e	enum:TGStatDistr_
gsdMx	snap-core/gstat.h	/^  gsdMx,$/;"	e	enum:TGStatDistr_
gsdOutDeg	snap-core/gstat.h	/^  gsdUndef=100, gsdInDeg, gsdOutDeg, gsdWcc, gsdScc,$/;"	e	enum:TGStatDistr_
gsdScc	snap-core/gstat.h	/^  gsdUndef=100, gsdInDeg, gsdOutDeg, gsdWcc, gsdScc,$/;"	e	enum:TGStatDistr_
gsdSngVal	snap-core/gstat.h	/^  gsdHops, gsdWccHops, gsdSngVal, gsdSngVec, gsdClustCf,$/;"	e	enum:TGStatDistr_
gsdSngVec	snap-core/gstat.h	/^  gsdHops, gsdWccHops, gsdSngVal, gsdSngVec, gsdClustCf,$/;"	e	enum:TGStatDistr_
gsdTriadPart	snap-core/gstat.h	/^  gsdTriadPart, \/\/ triad participation$/;"	e	enum:TGStatDistr_
gsdUndef	snap-core/gstat.h	/^  gsdUndef=100, gsdInDeg, gsdOutDeg, gsdWcc, gsdScc,$/;"	e	enum:TGStatDistr_
gsdWcc	snap-core/gstat.h	/^  gsdUndef=100, gsdInDeg, gsdOutDeg, gsdWcc, gsdScc,$/;"	e	enum:TGStatDistr_
gsdWccHops	snap-core/gstat.h	/^  gsdHops, gsdWccHops, gsdSngVal, gsdSngVec, gsdClustCf,$/;"	e	enum:TGStatDistr_
gsvBccEdges	snap-core/gstat.h	/^  gsvSccNodes, gsvSccEdges,gsvBccNodes, gsvBccEdges,$/;"	e	enum:TGStatVal_
gsvBccNodes	snap-core/gstat.h	/^  gsvSccNodes, gsvSccEdges,gsvBccNodes, gsvBccEdges,$/;"	e	enum:TGStatVal_
gsvBccSize	snap-core/gstat.h	/^  gsvClustCf, gsvOpenTriads, gsvClosedTriads, gsvWccSize, gsvSccSize, gsvBccSize,$/;"	e	enum:TGStatVal_
gsvBiDirEdges	snap-core/gstat.h	/^  gsvEdges, gsvUniqEdges, gsvBiDirEdges,$/;"	e	enum:TGStatVal_
gsvClosedTriads	snap-core/gstat.h	/^  gsvClustCf, gsvOpenTriads, gsvClosedTriads, gsvWccSize, gsvSccSize, gsvBccSize,$/;"	e	enum:TGStatVal_
gsvClustCf	snap-core/gstat.h	/^  gsvClustCf, gsvOpenTriads, gsvClosedTriads, gsvWccSize, gsvSccSize, gsvBccSize,$/;"	e	enum:TGStatVal_
gsvDstNodes	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gsvEdges	snap-core/gstat.h	/^  gsvEdges, gsvUniqEdges, gsvBiDirEdges,$/;"	e	enum:TGStatVal_
gsvEffDiam	snap-core/gstat.h	/^  gsvFullDiam, gsvEffDiam, gsvEffWccDiam, gsvFullWccDiam,$/;"	e	enum:TGStatVal_
gsvEffDiamDev	snap-core/gstat.h	/^  gsvFullDiamDev, gsvEffDiamDev, gsvEffWccDiamDev, gsvFullWccDiamDev, \/\/ diameter+variance$/;"	e	enum:TGStatVal_
gsvEffWccDiam	snap-core/gstat.h	/^  gsvFullDiam, gsvEffDiam, gsvEffWccDiam, gsvFullWccDiam,$/;"	e	enum:TGStatVal_
gsvEffWccDiamDev	snap-core/gstat.h	/^  gsvFullDiamDev, gsvEffDiamDev, gsvEffWccDiamDev, gsvFullWccDiamDev, \/\/ diameter+variance$/;"	e	enum:TGStatVal_
gsvFullDiam	snap-core/gstat.h	/^  gsvFullDiam, gsvEffDiam, gsvEffWccDiam, gsvFullWccDiam,$/;"	e	enum:TGStatVal_
gsvFullDiamDev	snap-core/gstat.h	/^  gsvFullDiamDev, gsvEffDiamDev, gsvEffWccDiamDev, gsvFullWccDiamDev, \/\/ diameter+variance$/;"	e	enum:TGStatVal_
gsvFullWccDiam	snap-core/gstat.h	/^  gsvFullDiam, gsvEffDiam, gsvEffWccDiam, gsvFullWccDiam,$/;"	e	enum:TGStatVal_
gsvFullWccDiamDev	snap-core/gstat.h	/^  gsvFullDiamDev, gsvEffDiamDev, gsvEffWccDiamDev, gsvFullWccDiamDev, \/\/ diameter+variance$/;"	e	enum:TGStatVal_
gsvIndex	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gsvMx	snap-core/gstat.h	/^  gsvMx$/;"	e	enum:TGStatVal_
gsvNodes	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gsvNonZNodes	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gsvNone	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gsvOpenTriads	snap-core/gstat.h	/^  gsvClustCf, gsvOpenTriads, gsvClosedTriads, gsvWccSize, gsvSccSize, gsvBccSize,$/;"	e	enum:TGStatVal_
gsvSccEdges	snap-core/gstat.h	/^  gsvSccNodes, gsvSccEdges,gsvBccNodes, gsvBccEdges,$/;"	e	enum:TGStatVal_
gsvSccNodes	snap-core/gstat.h	/^  gsvSccNodes, gsvSccEdges,gsvBccNodes, gsvBccEdges,$/;"	e	enum:TGStatVal_
gsvSccSize	snap-core/gstat.h	/^  gsvClustCf, gsvOpenTriads, gsvClosedTriads, gsvWccSize, gsvSccSize, gsvBccSize,$/;"	e	enum:TGStatVal_
gsvSrcNodes	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gsvTime	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gsvUniqEdges	snap-core/gstat.h	/^  gsvEdges, gsvUniqEdges, gsvBiDirEdges,$/;"	e	enum:TGStatVal_
gsvWccBiDirEdges	snap-core/gstat.h	/^  gsvWccNodes, gsvWccSrcNodes, gsvWccDstNodes, gsvWccEdges, gsvWccUniqEdges, gsvWccBiDirEdges,$/;"	e	enum:TGStatVal_
gsvWccDstNodes	snap-core/gstat.h	/^  gsvWccNodes, gsvWccSrcNodes, gsvWccDstNodes, gsvWccEdges, gsvWccUniqEdges, gsvWccBiDirEdges,$/;"	e	enum:TGStatVal_
gsvWccEdges	snap-core/gstat.h	/^  gsvWccNodes, gsvWccSrcNodes, gsvWccDstNodes, gsvWccEdges, gsvWccUniqEdges, gsvWccBiDirEdges,$/;"	e	enum:TGStatVal_
gsvWccNodes	snap-core/gstat.h	/^  gsvWccNodes, gsvWccSrcNodes, gsvWccDstNodes, gsvWccEdges, gsvWccUniqEdges, gsvWccBiDirEdges,$/;"	e	enum:TGStatVal_
gsvWccSize	snap-core/gstat.h	/^  gsvClustCf, gsvOpenTriads, gsvClosedTriads, gsvWccSize, gsvSccSize, gsvBccSize,$/;"	e	enum:TGStatVal_
gsvWccSrcNodes	snap-core/gstat.h	/^  gsvWccNodes, gsvWccSrcNodes, gsvWccDstNodes, gsvWccEdges, gsvWccUniqEdges, gsvWccBiDirEdges,$/;"	e	enum:TGStatVal_
gsvWccUniqEdges	snap-core/gstat.h	/^  gsvWccNodes, gsvWccSrcNodes, gsvWccDstNodes, gsvWccEdges, gsvWccUniqEdges, gsvWccBiDirEdges,$/;"	e	enum:TGStatVal_
gsvZeroNodes	snap-core/gstat.h	/^  gsvNone, gsvIndex, gsvTime, gsvNodes, gsvZeroNodes, gsvNonZNodes, gsvSrcNodes, gsvDstNodes,$/;"	e	enum:TGStatVal_
gvlCirco	snap-core/gviz.h	/^typedef enum TGVizLayout_ { gvlDot, gvlNeato, gvlTwopi, gvlCirco, gvlSfdp } TGVizLayout;$/;"	e	enum:TGVizLayout_
gvlDot	snap-core/gviz.h	/^typedef enum TGVizLayout_ { gvlDot, gvlNeato, gvlTwopi, gvlCirco, gvlSfdp } TGVizLayout;$/;"	e	enum:TGVizLayout_
gvlNeato	snap-core/gviz.h	/^typedef enum TGVizLayout_ { gvlDot, gvlNeato, gvlTwopi, gvlCirco, gvlSfdp } TGVizLayout;$/;"	e	enum:TGVizLayout_
gvlSfdp	snap-core/gviz.h	/^typedef enum TGVizLayout_ { gvlDot, gvlNeato, gvlTwopi, gvlCirco, gvlSfdp } TGVizLayout;$/;"	e	enum:TGVizLayout_
gvlTwopi	snap-core/gviz.h	/^typedef enum TGVizLayout_ { gvlDot, gvlNeato, gvlTwopi, gvlCirco, gvlSfdp } TGVizLayout;$/;"	e	enum:TGVizLayout_
h	glib-core/unicode.h	/^	THash<TInt, TUniChInfo> h; \/\/ key: codepoint$/;"	m	class:TUniChDb
hasCat	glib-core/unicode.h	/^		bool hasCat; TUniChSubCategory subCat;$/;"	m	class:TUniChDb::TSubcatHelper
hashmp_h	glib-core/hashmp.h	2;"	d
heBadSearchStr	glib-core/http.cpp	/^  heBadSearchStr} THttpExCd;$/;"	e	enum:__anon49	file:
heBadUrl	glib-core/http.cpp	/^  heCrLfExpected, heMethodNmExpected, heUrlEmpty, heBadUrl,$/;"	e	enum:__anon49	file:
heCrLfExpected	glib-core/http.cpp	/^  heCrLfExpected, heMethodNmExpected, heUrlEmpty, heBadUrl,$/;"	e	enum:__anon49	file:
heInvalidNumPlaces	glib-core/http.cpp	/^  heTSpecExpected, heInvalidTSpec, heNumExpected, heInvalidNumPlaces,$/;"	e	enum:__anon49	file:
heInvalidTSpec	glib-core/http.cpp	/^  heTSpecExpected, heInvalidTSpec, heNumExpected, heInvalidNumPlaces,$/;"	e	enum:__anon49	file:
heInvalidToken	glib-core/http.cpp	/^  heUnexpectedEof, hePeriodExpected, heTokenExpected, heInvalidToken,$/;"	e	enum:__anon49	file:
heMethodNmExpected	glib-core/http.cpp	/^  heCrLfExpected, heMethodNmExpected, heUrlEmpty, heBadUrl,$/;"	e	enum:__anon49	file:
heNumExpected	glib-core/http.cpp	/^  heTSpecExpected, heInvalidTSpec, heNumExpected, heInvalidNumPlaces,$/;"	e	enum:__anon49	file:
hePeriodExpected	glib-core/http.cpp	/^  heUnexpectedEof, hePeriodExpected, heTokenExpected, heInvalidToken,$/;"	e	enum:__anon49	file:
heTSpecExpected	glib-core/http.cpp	/^  heTSpecExpected, heInvalidTSpec, heNumExpected, heInvalidNumPlaces,$/;"	e	enum:__anon49	file:
heTokenExpected	glib-core/http.cpp	/^  heUnexpectedEof, hePeriodExpected, heTokenExpected, heInvalidToken,$/;"	e	enum:__anon49	file:
heUnexpectedEof	glib-core/http.cpp	/^  heUnexpectedEof, hePeriodExpected, heTokenExpected, heInvalidToken,$/;"	e	enum:__anon49	file:
heUrlEmpty	glib-core/http.cpp	/^  heCrLfExpected, heMethodNmExpected, heUrlEmpty, heBadUrl,$/;"	e	enum:__anon49	file:
hlctAlpha	glib-core/html.h	/^  hlctSpace, hlctAlpha, hlctNum, hlctSym,$/;"	e	enum:__anon19
hlctEof	glib-core/html.h	/^  hlctLTag, hlctRTag, hlctEof} THtmlLxChTy;$/;"	e	enum:__anon19
hlctLTag	glib-core/html.h	/^  hlctLTag, hlctRTag, hlctEof} THtmlLxChTy;$/;"	e	enum:__anon19
hlctNum	glib-core/html.h	/^  hlctSpace, hlctAlpha, hlctNum, hlctSym,$/;"	e	enum:__anon19
hlctRTag	glib-core/html.h	/^  hlctLTag, hlctRTag, hlctEof} THtmlLxChTy;$/;"	e	enum:__anon19
hlctSpace	glib-core/html.h	/^  hlctSpace, hlctAlpha, hlctNum, hlctSym,$/;"	e	enum:__anon19
hlctSym	glib-core/html.h	/^  hlctSpace, hlctAlpha, hlctNum, hlctSym,$/;"	e	enum:__anon19
hpctAlpha	glib-core/http.cpp	/^typedef enum {hpctUndef, hpctAlpha, hpctDigit, hpctCtl, hpctSpec} THttpChTy;$/;"	e	enum:__anon48	file:
hpctCtl	glib-core/http.cpp	/^typedef enum {hpctUndef, hpctAlpha, hpctDigit, hpctCtl, hpctSpec} THttpChTy;$/;"	e	enum:__anon48	file:
hpctDigit	glib-core/http.cpp	/^typedef enum {hpctUndef, hpctAlpha, hpctDigit, hpctCtl, hpctSpec} THttpChTy;$/;"	e	enum:__anon48	file:
hpctSpec	glib-core/http.cpp	/^typedef enum {hpctUndef, hpctAlpha, hpctDigit, hpctCtl, hpctSpec} THttpChTy;$/;"	e	enum:__anon48	file:
hpctUndef	glib-core/http.cpp	/^typedef enum {hpctUndef, hpctAlpha, hpctDigit, hpctCtl, hpctSpec} THttpChTy;$/;"	e	enum:__anon48	file:
hrmGet	glib-core/http.h	/^  hrmUndef, hrmGet, hrmHead, hrmPost} THttpRqMethod;$/;"	e	enum:__anon51
hrmHead	glib-core/http.h	/^  hrmUndef, hrmGet, hrmHead, hrmPost} THttpRqMethod;$/;"	e	enum:__anon51
hrmPost	glib-core/http.h	/^  hrmUndef, hrmGet, hrmHead, hrmPost} THttpRqMethod;$/;"	e	enum:__anon51
hrmUndef	glib-core/http.h	/^  hrmUndef, hrmGet, hrmHead, hrmPost} THttpRqMethod;$/;"	e	enum:__anon51
impl	glib-core/unicode.h	/^	TCodecImpl impl;$/;"	m	class:TCodecWrapper
inComp	snap-core/cmty.cpp	/^bool inComp(PNGraph& g1, PNGraph& Graph, TIntH& inCompCount, int id, int neigh) {$/;"	f	namespace:TSnap::TSnapDetail
inp	snap-exp/circles/circles.cpp	/^TFlt inp(TIntIntH& feature, TFlt* parameter) {$/;"	f
insert	doxygen/doxyblock.py	/^def insert(lines,bfile,bname):$/;"	f
int16	glib-core/bd.h	/^typedef short int16;$/;"	t
int32	glib-core/bd.h	/^typedef int int32;$/;"	t
int64	glib-core/bd.h	/^typedef __int64 int64;$/;"	t
int64	glib-core/bd.h	/^typedef int64_t int64;$/;"	t
int64	glib-core/bd.h	/^typedef long long int64;$/;"	t
int8	glib-core/bd.h	/^typedef char int8;$/;"	t
invalidCatCodes	glib-core/unicode.h	/^		TStrH invalidCatCodes;$/;"	m	class:TUniChDb::TSubcatHelper
inverseDec	glib-core/unicode.h	/^	THash<TIntPr, TInt> inverseDec;$/;"	m	class:TUniChDb
isNode	snap-core/network.h	/^    bool isNode;$/;"	m	class:TNEANet::TAFltI
isNode	snap-core/network.h	/^    bool isNode;$/;"	m	class:TNEANet::TAIntI
isNode	snap-core/network.h	/^    bool isNode;$/;"	m	class:TNEANet::TAIntVI
isNode	snap-core/network.h	/^    bool isNode;$/;"	m	class:TNEANet::TAStrI
isNode	snap-core/networkmp.h	/^    bool isNode;$/;"	m	class:TNEANetMP::TAFltI
isNode	snap-core/networkmp.h	/^    bool isNode;$/;"	m	class:TNEANetMP::TAIntI
isNode	snap-core/networkmp.h	/^    bool isNode;$/;"	m	class:TNEANetMP::TAStrI
iso8859_1	glib-core/unicode.h	/^	T8BitCodec<TEncoding_ISO8859_1> iso8859_1;$/;"	m	class:TUnicode
iso8859_2	glib-core/unicode.h	/^	T8BitCodec<TEncoding_ISO8859_2> iso8859_2;$/;"	m	class:TUnicode
iso8859_3	glib-core/unicode.h	/^	T8BitCodec<TEncoding_ISO8859_3> iso8859_3;$/;"	m	class:TUnicode
iso8859_4	glib-core/unicode.h	/^	T8BitCodec<TEncoding_ISO8859_4> iso8859_4;$/;"	m	class:TUnicode
item	glib-core/unicode.h	/^		TItem item;$/;"	m	class:TUniTrie::TNode
jvtArr	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	e	enum:__anon30
jvtBool	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	e	enum:__anon30
jvtNull	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	e	enum:__anon30
jvtNum	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	e	enum:__anon30
jvtObj	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	e	enum:__anon30
jvtStr	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	e	enum:__anon30
jvtUndef	glib-core/json.h	/^  jvtUndef, jvtNull, jvtBool, jvtNum, jvtStr, jvtArr, jvtObj} TJsonValType;$/;"	e	enum:__anon30
kDefaultTol	snap-adv/motifcluster.h	/^const double kDefaultTol = 1e-12;$/;"	v
kMaxIter	snap-adv/motifcluster.h	/^const int kMaxIter = 300;$/;"	v
k_	snap-adv/motifcluster.h	/^  int k_;  \/\/ size of clique$/;"	m	class:ChibaNishizekiWeighter
kronEdgeMiss	snap-adv/kronecker.h	/^enum TKronEMType {  kronNodeMiss = 0, kronFutureLink, kronEdgeMiss }; \/\/\/ !!!!! MYUNGHWAN, CHECK!$/;"	e	enum:TKronEMType
kronFutureLink	snap-adv/kronecker.h	/^enum TKronEMType {  kronNodeMiss = 0, kronFutureLink, kronEdgeMiss }; \/\/\/ !!!!! MYUNGHWAN, CHECK!$/;"	e	enum:TKronEMType
kronNodeMiss	snap-adv/kronecker.h	/^enum TKronEMType {  kronNodeMiss = 0, kronFutureLink, kronEdgeMiss }; \/\/\/ !!!!! MYUNGHWAN, CHECK!$/;"	e	enum:TKronEMType
lSi	glib-core/bd.h	/^typedef enum {lUndef, lUs, lSi} TLoc;$/;"	e	enum:__anon37
lUndef	glib-core/bd.h	/^typedef enum {lUndef, lUs, lSi} TLoc;$/;"	e	enum:__anon37
lUs	glib-core/bd.h	/^typedef enum {lUndef, lUs, lSi} TLoc;$/;"	e	enum:__anon37
labels_	snap-adv/motifcluster.h	/^  TIntV labels_;$/;"	m	class:ChibaNishizekiWeighter
lambda	snap-exp/circles/circles.h	/^  TFlt lambda;$/;"	m	class:TCluster
lcdtUsAscii	glib-core/lx.h	/^typedef enum {lcdtUsAscii, lcdtYuAscii} TLxChDefTy;$/;"	e	enum:__anon23
lcdtYuAscii	glib-core/lx.h	/^typedef enum {lcdtUsAscii, lcdtYuAscii} TLxChDefTy;$/;"	e	enum:__anon23
lctAlpha	glib-core/lx.h	/^typedef enum {lctUndef, lctSpace, lctNum, lctAlpha, lctSSym, lctTerm} TLxChTy;$/;"	e	enum:__anon22
lctNum	glib-core/lx.h	/^typedef enum {lctUndef, lctSpace, lctNum, lctAlpha, lctSSym, lctTerm} TLxChTy;$/;"	e	enum:__anon22
lctSSym	glib-core/lx.h	/^typedef enum {lctUndef, lctSpace, lctNum, lctAlpha, lctSSym, lctTerm} TLxChTy;$/;"	e	enum:__anon22
lctSpace	glib-core/lx.h	/^typedef enum {lctUndef, lctSpace, lctNum, lctAlpha, lctSSym, lctTerm} TLxChTy;$/;"	e	enum:__anon22
lctTerm	glib-core/lx.h	/^typedef enum {lctUndef, lctSpace, lctNum, lctAlpha, lctSSym, lctTerm} TLxChTy;$/;"	e	enum:__anon22
lctUndef	glib-core/lx.h	/^typedef enum {lctUndef, lctSpace, lctNum, lctAlpha, lctSSym, lctTerm} TLxChTy;$/;"	e	enum:__anon22
ldouble	glib-core/bd.h	/^typedef long double ldouble;$/;"	t
lineBreak	glib-core/unicode.h	/^	ushort lineBreak; \/\/ from LineBreak.txt$/;"	m	class:TUniChInfo
lntDst	snap-exp/linkpred.h	/^  typedef enum { lntUndef, lntSrc, lntDst, lntNoLink, lntDummy } TLpNodeTy;$/;"	e	enum:__OLD__::TQGraph::__anon12
lntDummy	snap-exp/linkpred.h	/^  typedef enum { lntUndef, lntSrc, lntDst, lntNoLink, lntDummy } TLpNodeTy;$/;"	e	enum:__OLD__::TQGraph::__anon12
lntNoLink	snap-exp/linkpred.h	/^  typedef enum { lntUndef, lntSrc, lntDst, lntNoLink, lntDummy } TLpNodeTy;$/;"	e	enum:__OLD__::TQGraph::__anon12
lntSrc	snap-exp/linkpred.h	/^  typedef enum { lntUndef, lntSrc, lntDst, lntNoLink, lntDummy } TLpNodeTy;$/;"	e	enum:__OLD__::TQGraph::__anon12
lntUndef	snap-exp/linkpred.h	/^  typedef enum { lntUndef, lntSrc, lntDst, lntNoLink, lntDummy } TLpNodeTy;$/;"	e	enum:__OLD__::TQGraph::__anon12
loAnd	glib-core/bd.h	/^typedef enum {loUndef, loNot, loAnd, loOr} TLogOp;$/;"	e	enum:__anon39
loNot	glib-core/bd.h	/^typedef enum {loUndef, loNot, loAnd, loOr} TLogOp;$/;"	e	enum:__anon39
loOr	glib-core/bd.h	/^typedef enum {loUndef, loNot, loAnd, loOr} TLogOp;$/;"	e	enum:__anon39
loUndef	glib-core/bd.h	/^typedef enum {loUndef, loNot, loAnd, loOr} TLogOp;$/;"	e	enum:__anon39
locks	snap-exp/bfs-dev/bfs-parallel.h	/^  std::vector<omp_lock_t> locks;$/;"	m	class:TBreathFS_Parallel
log10Delta	snap-exp/wikinet.cpp	/^int log10Delta(const int& Delta) {$/;"	f
loglikelihood	snap-exp/circles/circles.cpp	/^TFlt TCluster::loglikelihood(void) {$/;"	f	class:TCluster
lossType	snap-adv/circles.h	/^enum lossType$/;"	g
m	glib-core/dt.cpp	/^const int TRnd::m=2147483647;$/;"	m	class:TRnd	file:
m	glib-core/dt.h	/^  static const int a, m, q, r;$/;"	m	class:TRnd
mInd	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMatch { mIso, mMono, mInd};$/;"	e	enum:TMatch
mIndSub	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMatch { mIso, mIndSub, mMono };$/;"	e	enum:TMatch
mIso	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMatch { mIso, mIndSub, mMono };$/;"	e	enum:TMatch
mIso	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMatch { mIso, mMono, mInd};$/;"	e	enum:TMatch
mMono	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMatch { mIso, mIndSub, mMono };$/;"	e	enum:TMatch
mMono	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMatch { mIso, mMono, mInd};$/;"	e	enum:TMatch
m_G	snap-adv/cliques.h	/^	PUNGraph m_G;$/;"	m	class:TCliqueOverlap
m_Q	snap-adv/cliques.h	/^	TIntV m_Q;$/;"	m	class:TCliqueOverlap
m_arr	snap-adv/subgraphenum.h	/^		int *m_arr;$/;"	m	class:TSubGraphEnum::TSVec
m_capacity	snap-adv/subgraphenum.h	/^		int m_capacity;$/;"	m	class:TSubGraphEnum::TSSet
m_capacity	snap-adv/subgraphenum.h	/^		int m_capacity;$/;"	m	class:TSubGraphEnum::TSVec
m_functor	snap-adv/subgraphenum.h	/^	TGraphCounter *m_functor;$/;"	m	class:TSubGraphEnum
m_graph	snap-adv/subgraphenum.h	/^	PNGraph m_graph;$/;"	m	class:TSubGraphEnum
m_graphCounters	snap-adv/graphcounter.h	/^  THash<TInt,TUInt64> m_graphCounters;$/;"	m	class:TD34GraphCounter
m_graphCounters	snap-adv/graphcounter.h	/^  THash<TUInt64,TUInt64> m_graphCounters;$/;"	m	class:TDGraphCounter
m_graphIds	snap-adv/graphcounter.cpp	/^int TD3Graph::m_graphIds[] = {6,12,14,36,38,46,78,102,140,164,166,174,238};$/;"	m	class:TD3Graph	file:
m_graphIds	snap-adv/graphcounter.cpp	/^int TD4Graph::m_graphIds[] = {14, 28, 30, 74, 76, 78, 90, 92, 94, 204, 206, 222, 280, 282, 286, $/;"	m	class:TD4Graph	file:
m_graphIds	snap-adv/graphcounter.h	/^  static int m_graphIds[];$/;"	m	class:TD3Graph
m_graphIds	snap-adv/graphcounter.h	/^  static int m_graphIds[];$/;"	m	class:TD4Graph
m_graphMaps	snap-adv/graphcounter.h	/^  THash<TInt,TInt> m_graphMaps;$/;"	m	class:TD34GraphCounter
m_graphMaps	snap-adv/graphcounter.h	/^  THash<TUInt64,TUInt64> m_graphMaps;$/;"	m	class:TDGraphCounter
m_graphs	snap-adv/graphcounter.h	/^  TGHash<TUInt64> m_graphs;$/;"	m	class:TDGHashGraphCounter
m_maxCliques	snap-adv/cliques.h	/^	TVec<TIntV> *m_maxCliques;$/;"	m	class:TCliqueOverlap
m_minMaxCliqueSize	snap-adv/cliques.h	/^	int m_minMaxCliqueSize;$/;"	m	class:TCliqueOverlap
m_nodes	snap-adv/subgraphenum.h	/^		bool *m_nodes;$/;"	m	class:TSubGraphEnum::TSSet
m_nodes	snap-adv/subgraphenum.h	/^	int m_nodes;$/;"	m	class:TSubGraphEnum
m_numOfGraphs	snap-adv/graphcounter.cpp	/^int TD3Graph::m_numOfGraphs = 13;$/;"	m	class:TD3Graph	file:
m_numOfGraphs	snap-adv/graphcounter.cpp	/^int TD4Graph::m_numOfGraphs = 199;$/;"	m	class:TD4Graph	file:
m_numOfGraphs	snap-adv/graphcounter.h	/^  static int m_numOfGraphs;$/;"	m	class:TD3Graph
m_numOfGraphs	snap-adv/graphcounter.h	/^  static int m_numOfGraphs;$/;"	m	class:TD4Graph
m_size	snap-adv/subgraphenum.h	/^		int m_size;$/;"	m	class:TSubGraphEnum::TSSet
m_size	snap-adv/subgraphenum.h	/^		int m_size;$/;"	m	class:TSubGraphEnum::TSVec
m_subGraphSize	snap-adv/graphcounter.h	/^  int m_subGraphSize;$/;"	m	class:TD34GraphCounter
m_subGraphSz	snap-adv/subgraphenum.h	/^	int m_subGraphSz;$/;"	m	class:TSubGraphEnum
m_v	snap-adv/subgraphenum.h	/^		TIntV m_v;$/;"	m	class:TSubGraphEnum::TSVec
main	contrib/unict_univr-risnap/RI-DSToSnap/risnapds.cpp	/^int main(int argc, char** argv){$/;"	f
main	contrib/unict_univr-risnap/RiToSnap/risnap.cpp	/^int main(int argc, char** argv) {$/;"	f
main	examples/XcodeTest/XcodeTest/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/agmfit/agmfitmain.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/agmgen/agmgen.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/bigclam/bigclam.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cascadegen/cascadegen.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	examples/cascades/cascades.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/centrality/centrality.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cesna/cesna.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/circles/circles.cpp	/^int main(int argc, char** argv) {$/;"	f
main	examples/cliques/cliquesmain.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/coda/coda.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/community/community.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/concomp/concomp.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/flows/flows.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/forestfire/forestfire.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/graphgen/graphgen.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/graphhash/graphhash.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/infopath/generate_nets.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/infopath/infopath.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/kcores/kcores.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/kronem/kronem.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/kronfit/kronfit.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/krongen/krongen.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/lshtest/lshtest.cpp	/^int main() {$/;"	f
main	examples/magfit/magfit.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/maggen/maggen.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/mkdatasets/mkdatasets.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/motifcluster/motifclustermain.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/motifs/motifs.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/ncpplot/ncpplot.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/netevol/netevol.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/netinf/netinf.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/netstat/netstat.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/randwalk/randwalk.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/rolx/testrolx.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/testgraph/testgraph.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/zygote/zydemo.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-core/testSnap.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/bfs-dev/getScc.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/bfs-dev/livejournal.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/bfs-dev/microsoft.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/bfs-dev/test.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/bfs-dev/test1.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/bfs-dev/test_parallel.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/bfs-dev/twitter.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/cascades-benchmark/baseline.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	snap-exp/cascades-benchmark/sortSource.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	snap-exp/cascades-benchmark/sortTime.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	snap-exp/cascades-dev/devBaseline.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	snap-exp/cascades-dev/devBaselineTop.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	snap-exp/cascades-dev/devGraph_v1.2.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	snap-exp/cascades-dev/devSort_v1.4.cpp	/^int main(int argc,char* argv[]) {$/;"	f
main	snap-exp/circles/circles.cpp	/^int main(int argc, char** argv) {$/;"	f
main	snap-exp/multimodal-dev/benchmark-TNEANet-unweighted.cpp	/^int main(int argc, char* argv[])$/;"	f
main	snap-exp/multimodal-dev/benchmark-TNEANet-weighted.cpp	/^int main(int argc, char* argv[])$/;"	f
main	snap-exp/multimodal-dev/benchmark-unweighted.cpp	/^int main(int argc, char* argv[])$/;"	f
main	snap-exp/multimodal-dev/benchmark-weighted.cpp	/^int main(int argc, char* argv[])$/;"	f
main	snap-exp/multimodal-dev/benchmark.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/multimodal-dev/delete-exp.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/multimodal-dev/graph-construct-exp.cpp	/^int main(int argc, char* argv[])$/;"	f
main	snap-exp/multimodal-dev/rand-construct-exp.cpp	/^int main(int argc, char* argv[])$/;"	f
main	snap-exp/multimodal-dev/subgraph-exp.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/multimodal-dev/triad-exp.cpp	/^int main(int argc, char* argv[])$/;"	f
main	snap-exp/test-dev/AggrTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/ArithOpsTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/Benchmark.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/BenchmarkAshton.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/ConvBenchmark.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/test-dev/ConvBenchmarkMP.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/test-dev/ExplicitStringTableTest1.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ExplicitStringTableTest2.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ExplicitStringTableTest3.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ExplicitStringTableTest4.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ExplicitStringTableTest5.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ExplicitStringTableTest6.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/FilterTest.cpp	/^int main(int argc, char* argv[]){$/;"	f
main	snap-exp/test-dev/GraphOperationsTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/GroupTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/HashtagGraphTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/IdTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/LoadTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/MemoryAllocTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ParGroupAggrTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ParJoinTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ParLargeGraph.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ParSelect2Test.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ParSelectTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ParToGraphTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ParallelGroupByTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/PhysicalOrderSortTest1.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/PhysicalOrderSortTest2.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/SetOperationsTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/SimJoinPerGroupTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/SimJoinTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/TableAttributeTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/TableIndexTest.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/test-dev/TablePageRank.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/TableTest.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/TableTest1.cpp	/^int main(){$/;"	f
main	snap-exp/test-dev/ToGraphSeqTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/ToGraphTest.cpp	/^int main(int argc, char** argv){$/;"	f
main	snap-exp/test-dev/testPageRank.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	snap-exp/test-dev/testTriangleCount.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	test/run-all-tests.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tutorials/demo-TAttr.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TDirNet.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-THash.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TNEANet.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TNEGraph.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TNGraph.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TNodeEDatNet.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TNodeEdgeNet.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TNodeNet.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TSsParser.cpp	/^int main(int argc, const char * argv[]) {$/;"	f
main	tutorials/demo-TUNGraph.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-TUndirNet.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-alg.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-bfsdfs.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-cncom.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-cncom1.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-ggen.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-gio.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-gviz.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-hashvec-benchmark.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-multimodal.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-subgraph.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-topology-benchmark.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tutorials/demo-triad.cpp	/^int main(int argc, char *argv[]) {$/;"	f
matherr	glib-core/bd.cpp	/^int matherr(struct __exception *e){$/;"	f
mcmc	snap-exp/circles/circles.cpp	/^TIntSet TCluster::mcmc(TInt k, TInt mcmcReps) {$/;"	f	class:TCluster
message	glib-core/unicode.h	/^	TStr message;  \/\/ error message$/;"	m	class:TUnicodeException
mkdirs	doxygen/doxyblock.py	/^def mkdirs(path):$/;"	f
mpParentTypeIn	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	e	enum:TMamaParent
mpParentTypeIn	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	e	enum:TMamaParent
mpParentTypeNull	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	e	enum:TMamaParent
mpParentTypeNull	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	e	enum:TMamaParent
mpParentTypeOut	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	e	enum:TMamaParent
mpParentTypeOut	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^enum TMamaParent { mpParentTypeIn, mpParentTypeOut, mpParentTypeNull };$/;"	e	enum:TMamaParent
mtyA	snap-exp/imdbnet.h	/^typedef enum { mtyUndef, mtyActor, mtyMovie, mtyTv, mtyV, mtyVg, mtyA,$/;"	e	enum:__anon3
mtyActor	snap-exp/imdbnet.h	/^typedef enum { mtyUndef, mtyActor, mtyMovie, mtyTv, mtyV, mtyVg, mtyA,$/;"	e	enum:__anon3
mtyAls	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	e	enum:__anon3
mtyArch	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	e	enum:__anon3
mtyEpisod	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	e	enum:__anon3
mtyMini	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	e	enum:__anon3
mtyMovie	snap-exp/imdbnet.h	/^typedef enum { mtyUndef, mtyActor, mtyMovie, mtyTv, mtyV, mtyVg, mtyA,$/;"	e	enum:__anon3
mtyScene	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	e	enum:__anon3
mtySing	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	e	enum:__anon3
mtyTv	snap-exp/imdbnet.h	/^typedef enum { mtyUndef, mtyActor, mtyMovie, mtyTv, mtyV, mtyVg, mtyA,$/;"	e	enum:__anon3
mtyUndef	snap-exp/imdbnet.h	/^typedef enum { mtyUndef, mtyActor, mtyMovie, mtyTv, mtyV, mtyVg, mtyA,$/;"	e	enum:__anon3
mtyV	snap-exp/imdbnet.h	/^typedef enum { mtyUndef, mtyActor, mtyMovie, mtyTv, mtyV, mtyVg, mtyA,$/;"	e	enum:__anon3
mtyVg	snap-exp/imdbnet.h	/^typedef enum { mtyUndef, mtyActor, mtyMovie, mtyTv, mtyV, mtyVg, mtyA,$/;"	e	enum:__anon3
mtyVoice	snap-exp/imdbnet.h	/^  mtyScene, mtyMini, mtyArch, mtyVoice, mtySing, mtyAls, mtyEpisod } TMovieTy;$/;"	e	enum:__anon3
nFeatures	snap-exp/circles/circles.h	/^  TInt nFeatures;$/;"	m	class:TGraphAttributes
nameOffset	glib-core/unicode.h	/^	int nameOffset; \/\/ offset into 'TUniChDb.charNames'$/;"	m	class:TUniChInfo
next_ones	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			void next_ones() {$/;"	f	class:TSBitSet::TIterator
nodeFeatures	snap-exp/circles/circles.h	/^  THash<TInt, TIntIntH> nodeFeatures;$/;"	m	class:TGraphAttributes
nodeIds	snap-exp/circles/circles.h	/^  TVec<TInt> nodeIds;$/;"	m	class:TGraphAttributes
nodes	glib-core/unicode.h	/^	TNodeV nodes;$/;"	m	class:TUniTrie
nrerror	glib-core/linalg.cpp	/^void TNumericalStuff::nrerror(const TStr& error_text) {$/;"	f	class:TNumericalStuff
ntErr	glib-core/ut.h	/^typedef enum TNotifyType_ {ntInfo, ntWarn, ntErr, ntStat} TNotifyType;$/;"	e	enum:TNotifyType_
ntInfo	glib-core/ut.h	/^typedef enum TNotifyType_ {ntInfo, ntWarn, ntErr, ntStat} TNotifyType;$/;"	e	enum:TNotifyType_
ntStat	glib-core/ut.h	/^typedef enum TNotifyType_ {ntInfo, ntWarn, ntErr, ntStat} TNotifyType;$/;"	e	enum:TNotifyType_
ntWarn	glib-core/ut.h	/^typedef enum TNotifyType_ {ntInfo, ntWarn, ntErr, ntStat} TNotifyType;$/;"	e	enum:TNotifyType_
operator !=	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			const bool operator!=(const TIterator &IT) {$/;"	f	class:TSBitSet::TIterator
operator !=	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	bool operator!=(TSBitSet &b){$/;"	f	class:TSBitSet
operator !=	glib-core/bd.h	/^  bool operator!=(const TPt& Pt) const {return *Addr!=*Pt.Addr;}$/;"	f	class:TPt
operator !=	glib-core/bd.h	/^bool operator!=(const TRec& Rec1, const TRec& Rec2){return !(Rec1==Rec2);}$/;"	f
operator !=	glib-core/ds.h	/^  bool operator!=(const TAPt& Pt) const {return *Addr!=*Pt.Addr;}$/;"	f	class:TAPt
operator !=	glib-core/json.cpp	/^bool TJsonVal::operator!=(const TJsonVal& JsonVal) const {$/;"	f	class:TJsonVal
operator &	glib-core/bits.h	/^  friend TB32Set operator&(const TB32Set& LBSet, const TB32Set& RBSet){$/;"	f	class:TB32Set
operator &	glib-core/bits.h	/^  friend TB8Set operator&(const TB8Set& LBSet, const TB8Set& RBSet){$/;"	f	class:TB8Set
operator &	glib-core/bits.h	/^  friend TBSet operator&(const TBSet& LBSet, const TBSet& RBSet){$/;"	f
operator &	glib-core/bits.h	/^  friend TBSet operator&(const TBSet& LBSet, const int& BitN){$/;"	f
operator &=	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TSBitSet& operator&=(TSBitSet &bs){$/;"	f	class:TSBitSet
operator &=	glib-core/bits.h	/^  TB32Set& operator&=(const TB32Set& BSet){B4&=BSet.B4; return *this;}$/;"	f	class:TB32Set
operator &=	glib-core/bits.h	/^  TB8Set& operator&=(const TB8Set& BSet){B1&=BSet.B1; return *this;}$/;"	f	class:TB8Set
operator &=	glib-core/bits.h	/^  TBSet& operator&=(const TBSet& BSet){$/;"	f
operator ()	glib-core/bd.h	/^  TRec* operator()() const {return Addr;}$/;"	f	class:TPt
operator ()	glib-core/bd.h	/^  bool operator() (const T& x, const T& y) const { return x>y; }$/;"	f	class:TGtr
operator ()	glib-core/bd.h	/^  bool operator()(const T& x, const T& y) const {return x!=y;}$/;"	f	class:TNEq
operator ()	glib-core/bd.h	/^  bool operator()(const T& x, const T& y) const {return x<=y;}$/;"	f	class:TLEq
operator ()	glib-core/bd.h	/^  bool operator()(const T& x, const T& y) const {return x<y;}$/;"	f	class:TLss
operator ()	glib-core/bd.h	/^  bool operator()(const T& x, const T& y) const {return x==y;}$/;"	f	class:TEq
operator ()	glib-core/bd.h	/^  bool operator()(const T& x, const T& y) const {return x>=y;}$/;"	f	class:TGEq
operator ()	glib-core/bd.h	/^  int operator()(const T& x, const T& y) const {$/;"	f	class:TCmp
operator ()	glib-core/ds.h	/^  TFuncPt operator()() const {return FuncPt;}$/;"	f	class:TFunc
operator ()	glib-core/ds.h	/^  TRec* operator()() const {return Addr;}$/;"	f	class:TAPt
operator ()	glib-core/ds.h	/^  TVal& operator()(const int& X, const int& Y){$/;"	f	class:TVVec
operator ()	glib-core/ds.h	/^  TVal& operator()(const int& X, const int& Y, const int& Z){$/;"	f	class:TVVVec
operator ()	glib-core/ds.h	/^  bool operator () (const TKeyDat<TVal1, TVal2>& P1, const TKeyDat<TVal1, TVal2>& P2) const {$/;"	f	class:TCmpKeyDatByDat
operator ()	glib-core/ds.h	/^  bool operator () (const TPair<TVal1, TVal2>& P1, const TPair<TVal1, TVal2>& P2) const {$/;"	f	class:TCmpPairByVal2
operator ()	glib-core/ds.h	/^  bool operator () (const TTriple<TVal1, TVal2, TVal3>& T1, const TTriple<TVal1, TVal2, TVal3>& T2) const {$/;"	f	class:TCmpTripleByVal2
operator ()	glib-core/ds.h	/^  bool operator () (const TTriple<TVal1, TVal2, TVal3>& T1, const TTriple<TVal1, TVal2, TVal3>& T2) const {$/;"	f	class:TCmpTripleByVal3
operator ()	glib-core/ds.h	/^  const TVal& operator()(const int& X, const int& Y) const {$/;"	f	class:TVVec
operator ()	glib-core/ds.h	/^  const TVal& operator()(const int& X, const int& Y, const int& Z) const {$/;"	f	class:TVVVec
operator ()	glib-core/dt.h	/^  char* operator()() const {return Bf;}$/;"	f
operator ()	glib-core/fl.h	/^  char operator()(){return Ch;}$/;"	f	class:TChRet
operator ()	glib-core/gnuplot.h	/^    bool operator () (const int& Left, const int& Right) const {$/;"	f	class:TGnuPlot::TGpSeriesCmp
operator ()	glib-core/hash.h	/^    bool operator () (const int& KeyId1, const int& KeyId2) const {$/;"	f	class:THash::THashKeyDatCmp
operator ()	glib-core/hash.h	/^  TDat& operator()(const TKey& Key){return AddDat(Key);}$/;"	f	class:THash
operator ()	glib-core/hash.h	/^  THKeyDat& operator()() const { return *KeyDatI; }$/;"	f	class:THashKeyDatI
operator ()	glib-core/hash.h	/^  char* operator () () const { return Bf; }$/;"	f
operator ()	glib-core/hashmp.h	/^    bool operator () (const int& KeyId1, const int& KeyId2) const {$/;"	f	class:THashMP::THashMPKeyDatCmp
operator ()	glib-core/hashmp.h	/^  TDat& operator()(const TKey& Key){return AddDat(Key);}$/;"	f	class:THashMP
operator ()	glib-core/hashmp.h	/^  TPHKeyDat& operator()() const { return *KeyDatI; }$/;"	f	class:THashMPKeyDatI
operator ()	glib-core/linalg.h	/^    double operator()(const double& x) const {$/;"	f	class:TSigmoid
operator ()	glib-core/shash.h	/^  TVal& operator()() const { return GroupI->Offset(CurOff); }$/;"	f	class:TSparseTableI
operator ()	glib-core/shash.h	/^  const TKey& operator()() const { return KeyI->Key; }$/;"	f	class:THashSetKeyI
operator ()	snap-adv/graphcounter.cpp	/^void TD34GraphCounter::operator()(const PNGraph &G, const TIntV &sg) {$/;"	f	class:TD34GraphCounter
operator ()	snap-adv/graphcounter.cpp	/^void TDGHashGraphCounter::operator()(const PNGraph &G, const TIntV &sg) {$/;"	f	class:TDGHashGraphCounter
operator ()	snap-adv/graphcounter.cpp	/^void TDGraphCounter::operator()(const PNGraph &G, const TIntV &sg) {$/;"	f	class:TDGraphCounter
operator ()	snap-adv/graphcounter.h	/^  void operator()(const PNGraph &G, const TIntV &sg) {$/;"	f	class:TSNodeTest
operator ()	snap-core/bignet.h	/^    TNodeData& operator () () { return GetDat(); }$/;"	f	class:TBigNet::TNodeI
operator ()	snap-core/bignet.h	/^    const TNodeData& operator () () const { return GetDat(); }$/;"	f	class:TBigNet::TNodeI
operator ()	snap-core/cncom.h	/^  TIntV& operator () () { return NIdV; }$/;"	f	class:TCnCom
operator ()	snap-core/cncom.h	/^  const TIntV& operator () () const { return NIdV; }$/;"	f	class:TCnCom
operator ()	snap-core/gbase.h	/^  TVec<TVal>& operator()() { return HeapV; }$/;"	f	class:THeap
operator ()	snap-core/gbase.h	/^  const TVec<TVal>& operator()() const { return HeapV; }$/;"	f	class:THeap
operator ()	snap-core/ghash.h	/^  TDat& operator () (const TGraphKey& Key) { return GraphH.GetDat(Key); }$/;"	f	class:TGHash
operator ()	snap-core/ghash.h	/^  TIntPrV& operator () () { return EdgeV; }$/;"	f	class:TSimpleGraph
operator ()	snap-core/ghash.h	/^  const TDat& operator () (const TGraphKey& Key) const { return GraphH.GetDat(Key); }$/;"	f	class:TGHash
operator ()	snap-core/gstat.cpp	/^bool TGStat::TCmpByVal::operator () (const PGStat& GS1, const PGStat& GS2) const {$/;"	f	class:TGStat::TCmpByVal
operator ()	snap-core/gstat.cpp	/^bool TGStat::TCmpByVal::operator () (const TGStat& GS1, const TGStat& GS2) const {$/;"	f	class:TGStat::TCmpByVal
operator ()	snap-core/network.h	/^    TEdgeData& operator () () { return CurNode.GetOutEDat(CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
operator ()	snap-core/network.h	/^    TEdgeData& operator () () { return EdgeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TEdgeI
operator ()	snap-core/network.h	/^    TNodeData& operator () () { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEDatNet::TNodeI
operator ()	snap-core/network.h	/^    TNodeData& operator () () { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TNodeI
operator ()	snap-core/network.h	/^    TNodeData& operator () () { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeNet::TNodeI
operator ()	snap-core/network.h	/^    const TEdgeData& operator () () const { return CurNode.GetOutEDat(CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
operator ()	snap-core/network.h	/^    const TEdgeData& operator () () const { return EdgeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TEdgeI
operator ()	snap-core/network.h	/^    const TNodeData& operator () () const { return NodeHI.GetDat().GetDat(); }$/;"	f	class:TNodeEdgeNet::TNodeI
operator ()	snap-core/network.h	/^    const TNodeData& operator () () const { return NodeHI.GetDat().NodeDat; }$/;"	f	class:TNodeEDatNet::TNodeI
operator ()	snap-core/network.h	/^    const TNodeData& operator () () const { return NodeHI.GetDat().NodeDat; }$/;"	f	class:TNodeNet::TNodeI
operator *	glib-core/bd.h	/^  TRec& operator*() const {Assert(Addr!=NULL); return *Addr;}$/;"	f	class:TPt
operator *	glib-core/ds.h	/^  TRec& operator*() const {Assert(Addr!=NULL); return *Addr;}$/;"	f	class:TAPt
operator *	glib-core/hash.h	/^  THKeyDat& operator*() const { return *KeyDatI; }$/;"	f	class:THashKeyDatI
operator *	glib-core/hashmp.h	/^  TPHKeyDat& operator*() const { return *KeyDatI; }$/;"	f	class:THashMPKeyDatI
operator *	glib-core/shash.h	/^  TVal& operator*() const { return GroupI->Offset(CurOff); }$/;"	f	class:TSparseTableI
operator *	glib-core/shash.h	/^  const TKey& operator*() const { return KeyI->Key; }$/;"	f	class:THashSetKeyI
operator +	glib-core/ds.h	/^  TVec<TVal, TSizeTy>& operator+(const TVal& Val){Add(Val); return *this;}$/;"	f	class:TVec
operator +	glib-core/dt.cpp	/^TStr operator+(const TStr& LStr, const TStr& RStr){$/;"	f
operator +	glib-core/dt.cpp	/^TStr operator+(const TStr& LStr, const char* RCStr){$/;"	f
operator ++	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			TIterator& operator++() {$/;"	f	class:TSBitSet::TIterator
operator ++	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			void operator++ (int) {$/;"	f	class:TSBitSet::TIterator
operator ++	glib-core/hash.h	/^  THashKeyDatI& operator++(int){ KeyDatI++; while (KeyDatI < EndI && KeyDatI->HashCd==-1) { KeyDatI++; } return *this; }$/;"	f	class:THashKeyDatI
operator ++	glib-core/hashmp.h	/^  THashMPKeyDatI& operator++(int){ KeyDatI++; while (KeyDatI < EndI && KeyDatI->HashCd==-1) { KeyDatI++; } return *this; }$/;"	f	class:THashMPKeyDatI
operator ++	glib-core/shash.h	/^  THashSetKeyI& operator++(int) { KeyI++; while (KeyI < EndI && KeyI->HashCd==-1) { KeyI++; } return *this; }$/;"	f	class:THashSetKeyI
operator ++	glib-core/shash.h	/^  TSparseTableI& operator++ (int) {$/;"	f	class:TSparseTableI
operator ++	snap-core/bignet.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0;  CurNode++;$/;"	f	class:TBigNet::TEdgeI
operator ++	snap-core/bignet.h	/^    TNodeI& operator++ (int) { NodeHI++; GetInOutNIdV(); return *this; }$/;"	f	class:TBigNet::TNodeI
operator ++	snap-core/graph.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0; CurNode++;$/;"	f	class:TBPGraph::TEdgeI
operator ++	snap-core/graph.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0; CurNode++;$/;"	f	class:TNGraph::TEdgeI
operator ++	snap-core/graph.h	/^    TEdgeI& operator++ (int) { EdgeHI++; return *this; }$/;"	f	class:TNEGraph::TEdgeI
operator ++	snap-core/graph.h	/^    TEdgeI& operator++ (int) { do { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0; CurNode++; while (CurNode < EndNode && CurNode.GetOutDeg()==0) { CurNode++; } } } while (CurNode < EndNode && GetSrcNId()>GetDstNId()); return *this; }$/;"	f	class:TUNGraph::TEdgeI
operator ++	snap-core/graph.h	/^    TNodeI& operator++ (int) { $/;"	f	class:TBPGraph::TNodeI
operator ++	snap-core/graph.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TNEGraph::TNodeI
operator ++	snap-core/graph.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TNGraph::TNodeI
operator ++	snap-core/graph.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TUNGraph::TNodeI
operator ++	snap-core/graphmp.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0; CurNode++;$/;"	f	class:TNGraphMP::TEdgeI
operator ++	snap-core/graphmp.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TNGraphMP::TNodeI
operator ++	snap-core/mmnet.h	/^    TAFltI& operator++(int) { HI++; return *this; }$/;"	f	class:TCrossNet::TAFltI
operator ++	snap-core/mmnet.h	/^    TAIntI& operator++(int) { HI++; return *this; }$/;"	f	class:TCrossNet::TAIntI
operator ++	snap-core/mmnet.h	/^    TAStrI& operator++(int) { HI++; return *this; }$/;"	f	class:TCrossNet::TAStrI
operator ++	snap-core/mmnet.h	/^    TCrossEdgeI& operator++ (int) { CrossHI++; return *this; }$/;"	f	class:TCrossNet::TCrossEdgeI
operator ++	snap-core/mmnet.h	/^    TCrossNetI& operator++ (int) { CrossNetHI++; return *this; }$/;"	f	class:TMMNet::TCrossNetI
operator ++	snap-core/mmnet.h	/^    TModeNetI& operator++ (int) { ModeNetHI++; return *this; }$/;"	f	class:TMMNet::TModeNetI
operator ++	snap-core/mmnet.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TModeNet::TNodeI
operator ++	snap-core/network.h	/^    TAFltI& operator++(int) { HI++; return *this; }$/;"	f	class:TNEANet::TAFltI
operator ++	snap-core/network.h	/^    TAIntI& operator++(int) { HI++; return *this; }$/;"	f	class:TNEANet::TAIntI
operator ++	snap-core/network.h	/^    TAIntVI& operator++(int) { HI++; return *this; }$/;"	f	class:TNEANet::TAIntVI
operator ++	snap-core/network.h	/^    TAStrI& operator++(int) { HI++; return *this; }$/;"	f	class:TNEANet::TAStrI
operator ++	snap-core/network.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0;  CurNode++;$/;"	f	class:TNodeEDatNet::TEdgeI
operator ++	snap-core/network.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0;  CurNode++;$/;"	f	class:TNodeNet::TEdgeI
operator ++	snap-core/network.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0; CurNode++;$/;"	f	class:TDirNet::TEdgeI
operator ++	snap-core/network.h	/^    TEdgeI& operator++ (int) { EdgeHI++;  return *this; }$/;"	f	class:TNodeEdgeNet::TEdgeI
operator ++	snap-core/network.h	/^    TEdgeI& operator++ (int) { EdgeHI++; return *this; }$/;"	f	class:TNEANet::TEdgeI
operator ++	snap-core/network.h	/^    TEdgeI& operator++ (int) { do { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0; CurNode++; while (CurNode < EndNode && CurNode.GetOutDeg()==0) { CurNode++; } } } while (CurNode < EndNode && GetSrcNId()>GetDstNId()); return *this; }$/;"	f	class:TUndirNet::TEdgeI
operator ++	snap-core/network.h	/^    TNodeI& operator++ (int) { NodeHI++;  return *this; }$/;"	f	class:TNodeEDatNet::TNodeI
operator ++	snap-core/network.h	/^    TNodeI& operator++ (int) { NodeHI++;  return *this; }$/;"	f	class:TNodeEdgeNet::TNodeI
operator ++	snap-core/network.h	/^    TNodeI& operator++ (int) { NodeHI++;  return *this; }$/;"	f	class:TNodeNet::TNodeI
operator ++	snap-core/network.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TDirNet::TNodeI
operator ++	snap-core/network.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TNEANet::TNodeI
operator ++	snap-core/network.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TUndirNet::TNodeI
operator ++	snap-core/networkmp.h	/^    TAFltI& operator++(int) { HI++; return *this; }$/;"	f	class:TNEANetMP::TAFltI
operator ++	snap-core/networkmp.h	/^    TAIntI& operator++(int) { HI++; return *this; }$/;"	f	class:TNEANetMP::TAIntI
operator ++	snap-core/networkmp.h	/^    TAStrI& operator++(int) { HI++; return *this; }$/;"	f	class:TNEANetMP::TAStrI
operator ++	snap-core/networkmp.h	/^    TEdgeI& operator++ (int) { EdgeHI++; return *this; }$/;"	f	class:TNEANetMP::TEdgeI
operator ++	snap-core/networkmp.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TNEANetMP::TNodeI
operator ++	snap-core/table.cpp	/^TRowIterator& TRowIterator::operator++(int) {$/;"	f	class:TRowIterator
operator ++	snap-core/table.cpp	/^TRowIteratorWithRemove& TRowIteratorWithRemove::operator++(int) {$/;"	f	class:TRowIteratorWithRemove
operator ++	snap-exp/alternativetable.cpp	/^ExplicitStringRowIterator& ExplicitStringRowIterator::operator++(int) {$/;"	f	class:ExplicitStringRowIterator
operator ++	snap-exp/alternativetable.cpp	/^ExplicitStringRowIteratorWithRemove& ExplicitStringRowIteratorWithRemove::operator++(int) {$/;"	f	class:ExplicitStringRowIteratorWithRemove
operator ++	snap-exp/alternativetable.cpp	/^RowBasedRowIterator& RowBasedRowIterator::operator++(int) {$/;"	f	class:RowBasedRowIterator
operator ++	snap-exp/graphmp-exp.h	/^    TEdgeI& operator++ (int) { CurEdge++; if (CurEdge >= CurNode.GetOutDeg()) { CurEdge=0; CurNode++;$/;"	f	class:TUNGraphMP::TEdgeI
operator ++	snap-exp/graphmp-exp.h	/^    TNodeI& operator++ (int) { NodeHI++; return *this; }$/;"	f	class:TUNGraphMP::TNodeI
operator ++	snap-exp/mmgraph-exp.h	/^    TEdgeI& operator++ (int) { EdgeHI++; return *this; }$/;"	f	class:TMNet::TEdgeI
operator ++	snap-exp/mmgraph-exp.h	/^    TMNodeI& operator++ (int) {$/;"	f	class:TMNet::TMNodeI
operator +=	glib-core/dt.cpp	/^TChA& TChA::operator+=(const TChA& ChA){$/;"	f	class:TChA
operator +=	glib-core/dt.cpp	/^TChA& TChA::operator+=(const TMem& Mem) {$/;"	f	class:TChA
operator +=	glib-core/dt.cpp	/^TChA& TChA::operator+=(const TStr& Str){$/;"	f	class:TChA
operator +=	glib-core/dt.cpp	/^TChA& TChA::operator+=(const char* CStr){$/;"	f	class:TChA
operator +=	glib-core/dt.cpp	/^TMem& TMem::operator+=(const PSIn& SIn){$/;"	f	class:TMem
operator +=	glib-core/dt.cpp	/^TMem& TMem::operator+=(const TMem& Mem){$/;"	f	class:TMem
operator +=	glib-core/dt.cpp	/^TMem& TMem::operator+=(const TStr& Str){$/;"	f	class:TMem
operator +=	glib-core/dt.cpp	/^TMem& TMem::operator+=(const char& Ch){$/;"	f	class:TMem
operator +=	glib-core/fl.h	/^  TCs& operator+=(const TCs& Cs){Val=(Val+Cs.Val)&MxMask; return *this;}$/;"	f	class:TCs
operator +=	glib-core/fl.h	/^  TCs& operator+=(const char& Ch){Val=(Val+Ch)&MxMask; return *this;}$/;"	f	class:TCs
operator +=	glib-core/fl.h	/^  TCs& operator+=(const int& Int){Val=(Val+Int)&MxMask; return *this;}$/;"	f	class:TCs
operator +=	glib-core/tm.h	/^  TSecTm& operator+=(const uint& Secs){$/;"	f	class:TSecTm
operator +=	glib-core/unicodestring.h	/^  TUStr& operator+=(const TUStr& UStr){UniChV.AddV(UStr.UniChV); return *this;}$/;"	f	class:TUStr
operator +=	glib-core/wch.h	/^  TWChA& operator+=(const TChA& ChA){AddCStr(ChA.CStr()); return *this;}$/;"	f	class:TWChA
operator +=	glib-core/wch.h	/^  TWChA& operator+=(const TStr& Str){AddCStr(Str.CStr()); return *this;}$/;"	f	class:TWChA
operator +=	glib-core/wch.h	/^  TWChA& operator+=(const TWCh& WCh){WChV.Add(WCh); return *this;}$/;"	f	class:TWChA
operator +=	glib-core/wch.h	/^  TWChA& operator+=(const TWChA& WChA){WChV.AddV(WChA.WChV); return *this;}$/;"	f	class:TWChA
operator +=	glib-core/wch.h	/^  TWChA& operator+=(const char& Ch){WChV.Add(TWCh(Ch)); return *this;}$/;"	f	class:TWChA
operator +=	glib-core/wch.h	/^  TWChA& operator+=(const char* CStr){AddCStr(CStr); return *this;}$/;"	f	class:TWChA
operator ,	glib-core/unicode.cpp	/^	TVectorBuilder2 operator ,(int i) { return TVectorBuilder2(i); }$/;"	f	class:__anon54::TVectorBuilder
operator ,	glib-core/unicode.cpp	/^	TVectorBuilder2& operator ,(int i) { v.Add(i); return *this; }$/;"	f	class:__anon54::TVectorBuilder2
operator --	glib-core/hash.h	/^  THashKeyDatI& operator--(int){ do { KeyDatI--; } while (KeyDatI->HashCd==-1); return *this;}$/;"	f	class:THashKeyDatI
operator --	glib-core/hashmp.h	/^  THashMPKeyDatI& operator--(int){ do { KeyDatI--; } while (KeyDatI->HashCd==-1); return *this;}$/;"	f	class:THashMPKeyDatI
operator --	glib-core/shash.h	/^  THashSetKeyI& operator--(int) { do { KeyI--; } while (KeyI->HashCd==-1); return *this; }$/;"	f	class:THashSetKeyI
operator --	glib-core/shash.h	/^  TSparseTableI& operator-- (int) {$/;"	f	class:TSparseTableI
operator --	snap-core/graph.h	/^    TNodeI& operator-- (int) { NodeHI--; return *this; }$/;"	f	class:TNEGraph::TNodeI
operator --	snap-core/graph.h	/^    TNodeI& operator-- (int) { NodeHI--; return *this; }$/;"	f	class:TNGraph::TNodeI
operator --	snap-core/graph.h	/^    TNodeI& operator-- (int) { NodeHI--; return *this; }$/;"	f	class:TUNGraph::TNodeI
operator --	snap-core/network.h	/^    TNodeI& operator-- (int) { NodeHI--; return *this; }$/;"	f	class:TDirNet::TNodeI
operator --	snap-core/network.h	/^    TNodeI& operator-- (int) { NodeHI--; return *this; }$/;"	f	class:TUndirNet::TNodeI
operator -=	glib-core/tm.h	/^  TSecTm& operator-=(const uint& Secs){$/;"	f	class:TSecTm
operator ->	glib-core/bd.h	/^  TRec* operator->() const {Assert(Addr!=NULL); return Addr;}$/;"	f	class:TPt
operator ->	glib-core/ds.h	/^  TRec* operator->() const {Assert(Addr!=NULL); return Addr;}$/;"	f	class:TAPt
operator ->	glib-core/hash.h	/^  THKeyDat* operator->() const { return KeyDatI; }$/;"	f	class:THashKeyDatI
operator ->	glib-core/hashmp.h	/^  TPHKeyDat* operator->() const { return KeyDatI; }$/;"	f	class:THashMPKeyDatI
operator ->	glib-core/shash.h	/^  TVal* operator->() const { return &(operator*()); }$/;"	f	class:TSparseTableI
operator ->	glib-core/shash.h	/^  const TKey* operator->() const { return &KeyI->Key; }$/;"	f	class:THashSetKeyI
operator <	glib-core/bd.h	/^  bool operator<(const TPt& Pt) const {return *Addr<*Pt.Addr;}$/;"	f	class:TPt
operator <	glib-core/bits.h	/^  bool operator<(const TB32Set& BSet) const {return B4<BSet.B4;}$/;"	f	class:TB32Set
operator <	glib-core/bits.h	/^  bool operator<(const TB8Set& BSet) const {return B1<BSet.B1;}$/;"	f	class:TB8Set
operator <	glib-core/blobbs.h	/^  bool operator<(const TBlobPt& Pt) const {$/;"	f
operator <	glib-core/ds.h	/^  bool operator < (const TTuple& Tup) const {$/;"	f	class:TTuple
operator <	glib-core/ds.h	/^  bool operator<(const PVec<TVal>& Vec) const {return V<Vec.V;}$/;"	f	class:PVec
operator <	glib-core/ds.h	/^  bool operator<(const TAPt& Pt) const {return *Addr<*Pt.Addr;}$/;"	f	class:TAPt
operator <	glib-core/ds.h	/^  bool operator<(const TFunc&) const {$/;"	f	class:TFunc
operator <	glib-core/ds.h	/^  bool operator<(const TKeyDat& KeyDat) const {return Key<KeyDat.Key;}$/;"	f	class:TKeyDat
operator <	glib-core/ds.h	/^  bool operator<(const TPair& Pair) const {$/;"	f	class:TPair
operator <	glib-core/ds.h	/^  bool operator<(const TQuad& Quad) const {$/;"	f	class:TQuad
operator <	glib-core/ds.h	/^  bool operator<(const TTree& Tree) const {return false;}$/;"	f	class:TTree
operator <	glib-core/ds.h	/^  bool operator<(const TTriple& Triple) const {$/;"	f	class:TTriple
operator <	glib-core/ds.h	/^bool TVec<TVal, TSizeTy>::operator<(const TVec<TVal, TSizeTy>& Vec) const {$/;"	f	class:TVec
operator <	glib-core/gnuplot.cpp	/^bool TGnuPlot::TGpSeries::operator < (const TGpSeries& Gps) const {$/;"	f	class:TGnuPlot::TGpSeries
operator <	glib-core/hash.h	/^  bool operator < (const THash& Hash) const { Fail; return true; }$/;"	f	class:THash
operator <	glib-core/hash.h	/^  bool operator<(const PHash<TKey, TDat>& Vec) const {return H<Vec.H;}$/;"	f	class:PHash
operator <	glib-core/hash.h	/^  bool operator<(const THashKeyDatI& HashKeyDatI) const {$/;"	f	class:THashKeyDatI
operator <	glib-core/hashmp.h	/^  bool operator<(const THashMPKeyDatI& HashKeyDatI) const {$/;"	f	class:THashMPKeyDatI
operator <	glib-core/shash.h	/^  bool operator < (const TSHashKeyDat& HashKeyDat) const { return Key < HashKeyDat.Key; }$/;"	f	class:TSHashKeyDat
operator <	glib-core/shash.h	/^  bool operator < (const TSparseTableI& STI) const {$/;"	f	class:TSparseTableI
operator <	glib-core/shash.h	/^  bool operator<(const THashSetKeyI& SetKeyI) const {$/;"	f	class:THashSetKeyI
operator <	glib-core/shash.h	/^bool TSparseGroup<TVal, GroupSize>::operator < (const TSparseGroup& SG) const {$/;"	f	class:TSparseGroup
operator <	glib-core/shash.h	/^bool TSparseHash<TKey, TDat, GroupSize>::operator < (const TSparseHash& SHT) const {$/;"	f	class:TSparseHash
operator <	glib-core/shash.h	/^bool TSparseSet<TKey, GroupSize>::operator < (const TSparseSet& SSet) const {$/;"	f	class:TSparseSet
operator <	glib-core/shash.h	/^bool TSparseTable<TVal, GroupSize>::operator < (const TSparseTable& ST) const {$/;"	f	class:TSparseTable
operator <	glib-core/tm.h	/^  bool operator<(const TSecTm& SecTm) const {$/;"	f	class:TSecTm
operator <	glib-core/tm.h	/^  bool operator<(const TTm& Tm) const {$/;"	f	class:TTm
operator <	glib-core/wch.h	/^  bool operator<(const TWCh& WCh) const {$/;"	f	class:TWCh
operator <	glib-core/xmath.h	/^  bool operator<(const TMom& Mom) const {$/;"	f
operator <	snap-adv/cascdynetinf.h	/^  bool operator < (const TCascade& Cascade) const {$/;"	f	class:TCascade
operator <	snap-adv/cascdynetinf.h	/^  bool operator < (const THitInfo& Hit) const {$/;"	f	class:THitInfo
operator <	snap-adv/cascdynetinf.h	/^  bool operator < (const TNodeInfo& NodeInfo) const {$/;"	f	class:TNodeInfo
operator <	snap-adv/cascnetinf.h	/^  bool operator < (const THitInfo& Hit) const {$/;"	f	class:THitInfo
operator <	snap-adv/ncp.h	/^    bool operator < (const TCutInfo& CS) const { return GetPhi() < CS.GetPhi(); }$/;"	f	class:TLocClustStat::TCutInfo
operator <	snap-adv/ncp.h	/^    bool operator < (const TNodeSweep& CS) const { return Len() < CS.Len(); }$/;"	f	class:TLocClustStat::TNodeSweep
operator <	snap-core/bignet.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TBigNet::TEdgeI
operator <	snap-core/bignet.h	/^    bool operator < (const TNodeI& NI) const { return NodeHI < NI.NodeHI; }$/;"	f	class:TBigNet::TNodeI
operator <	snap-core/cncom.h	/^  bool operator < (const TCnCom& CC) const { return NIdV < CC.NIdV; }$/;"	f	class:TCnCom
operator <	snap-core/ghash.h	/^  bool operator < (const TSimpleGraph& Graph) const { return EdgeV < Graph.EdgeV; }$/;"	f	class:TSimpleGraph
operator <	snap-core/graph.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TBPGraph::TEdgeI
operator <	snap-core/graph.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TNGraph::TEdgeI
operator <	snap-core/graph.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TUNGraph::TEdgeI
operator <	snap-core/graph.h	/^    bool operator < (const TEdgeI& EdgeI) const { return EdgeHI < EdgeI.EdgeHI; }$/;"	f	class:TNEGraph::TEdgeI
operator <	snap-core/graph.h	/^    bool operator < (const TNodeI& NodeI) const { return LeftHI < NodeI.LeftHI || (LeftHI==NodeI.LeftHI && RightHI < NodeI.RightHI); }$/;"	f	class:TBPGraph::TNodeI
operator <	snap-core/graph.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNEGraph::TNodeI
operator <	snap-core/graph.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNGraph::TNodeI
operator <	snap-core/graph.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TUNGraph::TNodeI
operator <	snap-core/graphmp.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TNGraphMP::TEdgeI
operator <	snap-core/graphmp.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNGraphMP::TNodeI
operator <	snap-core/gstat.cpp	/^bool TGStat::operator < (const TGStat& GStat) const {$/;"	f	class:TGStat
operator <	snap-core/mmnet.h	/^    bool operator < (const TAFltI& I) const { return HI < I.HI; }$/;"	f	class:TCrossNet::TAFltI
operator <	snap-core/mmnet.h	/^    bool operator < (const TAIntI& I) const { return HI < I.HI; }$/;"	f	class:TCrossNet::TAIntI
operator <	snap-core/mmnet.h	/^    bool operator < (const TAStrI& I) const { return HI < I.HI; }$/;"	f	class:TCrossNet::TAStrI
operator <	snap-core/mmnet.h	/^    bool operator < (const TCrossEdgeI& EdgeI) const { return CrossHI < EdgeI.CrossHI; }$/;"	f	class:TCrossNet::TCrossEdgeI
operator <	snap-core/mmnet.h	/^    bool operator < (const TCrossNetI& CrossNetI) const { return CrossNetHI < CrossNetI.CrossNetHI; }$/;"	f	class:TMMNet::TCrossNetI
operator <	snap-core/mmnet.h	/^    bool operator < (const TModeNetI& ModeNetI) const { return ModeNetHI < ModeNetI.ModeNetHI; }$/;"	f	class:TMMNet::TModeNetI
operator <	snap-core/mmnet.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TModeNet::TNodeI
operator <	snap-core/network.h	/^    bool operator < (const TAFltI& I) const { return HI < I.HI; }$/;"	f	class:TNEANet::TAFltI
operator <	snap-core/network.h	/^    bool operator < (const TAIntI& I) const { return HI < I.HI; }$/;"	f	class:TNEANet::TAIntI
operator <	snap-core/network.h	/^    bool operator < (const TAIntVI& I) const { return HI < I.HI; }$/;"	f	class:TNEANet::TAIntVI
operator <	snap-core/network.h	/^    bool operator < (const TAStrI& I) const { return HI < I.HI; }$/;"	f	class:TNEANet::TAStrI
operator <	snap-core/network.h	/^    bool operator < (const TEdge& Edge) const { return EdgeDat < Edge.EdgeDat; }$/;"	f	class:TNodeEdgeNet::TEdge
operator <	snap-core/network.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TDirNet::TEdgeI
operator <	snap-core/network.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TNodeEDatNet::TEdgeI
operator <	snap-core/network.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TNodeNet::TEdgeI
operator <	snap-core/network.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TUndirNet::TEdgeI
operator <	snap-core/network.h	/^    bool operator < (const TEdgeI& EdgeI) const { return EdgeHI < EdgeI.EdgeHI; }$/;"	f	class:TNEANet::TEdgeI
operator <	snap-core/network.h	/^    bool operator < (const TEdgeI& EdgeI) const { return EdgeHI < EdgeI.EdgeHI; }$/;"	f	class:TNodeEdgeNet::TEdgeI
operator <	snap-core/network.h	/^    bool operator < (const TNode& Node) const { return NodeDat < Node.NodeDat; }$/;"	f	class:TNodeEDatNet::TNode
operator <	snap-core/network.h	/^    bool operator < (const TNode& Node) const { return NodeDat < Node.NodeDat; }$/;"	f	class:TNodeEdgeNet::TNode
operator <	snap-core/network.h	/^    bool operator < (const TNode& Node) const { return NodeDat < Node.NodeDat; }$/;"	f	class:TNodeNet::TNode
operator <	snap-core/network.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TDirNet::TNodeI
operator <	snap-core/network.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNEANet::TNodeI
operator <	snap-core/network.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNodeEDatNet::TNodeI
operator <	snap-core/network.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNodeEdgeNet::TNodeI
operator <	snap-core/network.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNodeNet::TNodeI
operator <	snap-core/network.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TUndirNet::TNodeI
operator <	snap-core/networkmp.h	/^    bool operator < (const TAFltI& I) const { return HI < I.HI; }$/;"	f	class:TNEANetMP::TAFltI
operator <	snap-core/networkmp.h	/^    bool operator < (const TAIntI& I) const { return HI < I.HI; }$/;"	f	class:TNEANetMP::TAIntI
operator <	snap-core/networkmp.h	/^    bool operator < (const TAStrI& I) const { return HI < I.HI; }$/;"	f	class:TNEANetMP::TAStrI
operator <	snap-core/networkmp.h	/^    bool operator < (const TEdgeI& EdgeI) const { return EdgeHI < EdgeI.EdgeHI; }$/;"	f	class:TNEANetMP::TEdgeI
operator <	snap-core/networkmp.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TNEANetMP::TNodeI
operator <	snap-core/table.cpp	/^bool TRowIterator::operator < (const TRowIterator& RowI) const{$/;"	f	class:TRowIterator
operator <	snap-core/table.cpp	/^bool TRowIteratorWithRemove::operator < (const TRowIteratorWithRemove& RowI) const {$/;"	f	class:TRowIteratorWithRemove
operator <	snap-exp/alternativetable.cpp	/^bool ExplicitStringRowIterator::operator < (const ExplicitStringRowIterator& RowI) const{ $/;"	f	class:ExplicitStringRowIterator
operator <	snap-exp/alternativetable.cpp	/^bool ExplicitStringRowIteratorWithRemove::operator < (const ExplicitStringRowIteratorWithRemove& RowI) const { $/;"	f	class:ExplicitStringRowIteratorWithRemove
operator <	snap-exp/alternativetable.cpp	/^bool RowBasedRowIterator::operator < (const RowBasedRowIterator& RowI) const{ $/;"	f	class:RowBasedRowIterator
operator <	snap-exp/graphmp-exp.h	/^    bool operator < (const TEdgeI& EdgeI) const { return CurNode<EdgeI.CurNode || (CurNode==EdgeI.CurNode && CurEdge<EdgeI.CurEdge); }$/;"	f	class:TUNGraphMP::TEdgeI
operator <	snap-exp/graphmp-exp.h	/^    bool operator < (const TNodeI& NodeI) const { return NodeHI < NodeI.NodeHI; }$/;"	f	class:TUNGraphMP::TNodeI
operator <	snap-exp/linkpred.h	/^  bool operator < (const TEdgeGrad& EG) const  { return Val < EG.Val; }$/;"	f	class:TEdgeGrad
operator <	snap-exp/linkpred.h	/^  bool operator < (const TNodeGrad& VG) const  { return SumVal < VG.SumVal; }$/;"	f	struct:TNodeGrad
operator <	snap-exp/memes.h	/^    bool operator < (const TTmUrlCnt& Val) const {$/;"	f	class:TQuote::TTmUrlCnt
operator <	snap-exp/mmgraph-exp.h	/^    bool operator < (const TEdgeI& EdgeI) const { return EdgeHI < EdgeI.EdgeHI; }$/;"	f	class:TMNet::TEdgeI
operator <	snap-exp/mmgraph-exp.h	/^    bool operator < (const TMNodeI& NodeI) const { return VecI < NodeI.VecI || HashI < NodeI.HashI; }$/;"	f	class:TMNet::TMNodeI
operator <	snap-exp/signnet.h	/^    bool operator < (const TTransStat& S) const { return Cnt<S.Cnt; }$/;"	f	struct:TSignMicroEvol::TTransStat
operator <	snap-exp/wikinet.cpp	/^bool TWikiElec::operator < (const TWikiElec& WE) const {$/;"	f	class:TWikiElec
operator <	snap-exp/wikinet.h	/^  bool operator < (const TWikiTalkEdge& Edge) const { return TotTalks < Edge.TotTalks; }$/;"	f	class:TWikiTalkEdge
operator <	snap-exp/wikinet.h	/^  bool operator < (const TWikiUsr& WUsr) const {$/;"	f	class:TWikiUsr
operator <	snap-exp/wikinet.h	/^  bool operator < (const TWikiVote& WV) const { return VoteTm<WV.VoteTm; }$/;"	f	class:TWikiVote
operator <<	glib-core/fl.cpp	/^TSOut& TSOut::operator<<(TSIn& SIn) {$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(PSIn& SIn){return operator<<(*SIn);}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const TSOutMnp& Mnp){return Mnp(*this);}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const bool& Bool){Cs+=PutBf(&Bool, sizeof(Bool)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const char& Ch){Cs+=PutBf(&Ch, sizeof(Ch)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const double& Double){Cs+=PutBf(&Double, sizeof(Double)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const float& Flt){Cs+=PutBf(&Flt, sizeof(Flt)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const int& Int){Cs+=PutBf(&Int, sizeof(Int)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const int64& Int){Cs+=PutBf(&Int, sizeof(Int)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const long double& LDouble){Cs+=PutBf(&LDouble, sizeof(LDouble)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const short& Sh){Cs+=PutBf(&Sh, sizeof(Sh)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const uchar& UCh){Cs+=PutBf(&UCh, sizeof(UCh)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const uint& Int){Cs+=PutBf(&Int, sizeof(Int)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const uint64& UInt){Cs+=PutBf(&UInt, sizeof(UInt)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^  TSOut& operator<<(const ushort& USh){Cs+=PutBf(&USh, sizeof(USh)); return *this;}$/;"	f	class:TSOut
operator <<	glib-core/fl.h	/^TSOut& operator<<(TSOut& SOut, const T& Val){$/;"	f
operator <<=	glib-core/bits.h	/^  TB32Set& operator<<=(const int& ShiftBits){B4<<=ShiftBits; return *this;}$/;"	f	class:TB32Set
operator <<=	glib-core/bits.h	/^  TB8Set& operator<<=(const int& ShiftBits){B1<<=ShiftBits; return *this;}$/;"	f	class:TB8Set
operator <=	glib-core/bd.h	/^bool operator<=(const TRec& Rec1, const TRec& Rec2){return !(Rec2<Rec1);}$/;"	f
operator =	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TSBitSet& operator =(TSBitSet &b){$/;"	f	class:TSBitSet
operator =	glib-core/bd.h	/^  TPt& operator=(const TPt& Pt){$/;"	f	class:TPt
operator =	glib-core/bd.h	/^  TSStr& operator=(const TSStr& SStr){$/;"	f	class:TSStr
operator =	glib-core/bits.cpp	/^TBSet& TBSet::operator=(const TBSet& BSet){$/;"	f	class:TBSet
operator =	glib-core/bits.h	/^  TB1Def& operator=(const TB1Def&){Fail; return *this;}$/;"	f	class:TB1Def
operator =	glib-core/bits.h	/^  TB2Def& operator=(const TB2Def&){Fail; return *this;}$/;"	f	class:TB2Def
operator =	glib-core/bits.h	/^  TB32Set& operator=(const TB32Set& BSet){B4=BSet.B4; return *this;}$/;"	f	class:TB32Set
operator =	glib-core/bits.h	/^  TB4Def& operator=(const TB4Def&){Fail; return *this;}$/;"	f	class:TB4Def
operator =	glib-core/bits.h	/^  TB8Set& operator=(const TB8Set& BSet){B1=BSet.B1; return *this;}$/;"	f	class:TB8Set
operator =	glib-core/bits.h	/^  TB8Set& operator=(const uchar& _B1){B1=_B1; return *this;}$/;"	f	class:TB8Set
operator =	glib-core/bits.h	/^  TFSet& operator=(const TFSet& FSet){$/;"	f	class:TFSet
operator =	glib-core/blobbs.h	/^  TBlobPt& operator=(const TBlobPt& Pt){$/;"	f
operator =	glib-core/ds.h	/^  PVec<TVal>& operator=(const PVec<TVal>& Vec){$/;"	f	class:PVec
operator =	glib-core/ds.h	/^  TAPt& operator=(TRec* _Addr){Addr=_Addr; return *this;}$/;"	f	class:TAPt
operator =	glib-core/ds.h	/^  TAPt& operator=(const TAPt& Pt){Addr=Pt.Addr; return *this;}$/;"	f	class:TAPt
operator =	glib-core/ds.h	/^  TFunc& operator=(const TFunc& Func){$/;"	f	class:TFunc
operator =	glib-core/ds.h	/^  TKeyDat& operator=(const TKeyDat& KeyDat){$/;"	f	class:TKeyDat
operator =	glib-core/ds.h	/^  TPair& operator=(const TPair& Pair){$/;"	f	class:TPair
operator =	glib-core/ds.h	/^  TQQueue& operator=(const TQQueue& Queue){$/;"	f	class:TQQueue
operator =	glib-core/ds.h	/^  TQuad& operator=(const TQuad& Quad){$/;"	f	class:TQuad
operator =	glib-core/ds.h	/^  TSStack& operator=(const TSStack& Stack){$/;"	f	class:TSStack
operator =	glib-core/ds.h	/^  TTree& operator=(const TTree& Tree){if (this!=&Tree){NodeV=Tree.NodeV;} return *this;}$/;"	f	class:TTree
operator =	glib-core/ds.h	/^  TTriple& operator=(const TTriple& Triple){$/;"	f	class:TTriple
operator =	glib-core/ds.h	/^  TTuple& operator = (const TTuple& Tup) { if (this != & Tup) {$/;"	f	class:TTuple
operator =	glib-core/ds.h	/^  TVVVec<TVal>& operator=(const TVVVec<TVal>& Vec){$/;"	f	class:TVVVec
operator =	glib-core/ds.h	/^  TVVec<TVal>& operator=(const TVVec<TVal>& Vec){$/;"	f	class:TVVec
operator =	glib-core/ds.h	/^TVec<TVal, TSizeTy>& TVec<TVal, TSizeTy>::operator=(const TVec<TVal, TSizeTy>& Vec){$/;"	f	class:TVec
operator =	glib-core/ds.h	/^TVecPool<TVal, TSizeTy>& TVecPool<TVal, TSizeTy>::operator = (const TVecPool& Pool) {$/;"	f	class:TVecPool
operator =	glib-core/ds.h	/^TVecPool<TVal>& TVecPool<TVal>::operator = (const TVecPool& Pool) {$/;"	f	class:TGLib_OLD::TVecPool
operator =	glib-core/dt.cpp	/^TChA& TChA::operator=(const TChA& ChA){$/;"	f	class:TChA
operator =	glib-core/dt.cpp	/^TChA& TChA::operator=(const TStr& Str){$/;"	f	class:TChA
operator =	glib-core/dt.cpp	/^TChA& TChA::operator=(const char* CStr){$/;"	f	class:TChA
operator =	glib-core/dt.cpp	/^TStrPool& TStrPool::operator = (const TStrPool& Pool) {$/;"	f	class:TStrPool
operator =	glib-core/dt.cpp	/^TStrPool64& TStrPool64::operator=(const TStrPool64& StrPool) {$/;"	f	class:TStrPool64
operator =	glib-core/dt.h	/^  TMem& operator=(const TMem& Mem){$/;"	f
operator =	glib-core/dt.h	/^  TRnd& operator=(const TRnd& Rnd){Seed=Rnd.Seed; return *this;}$/;"	f	class:TRnd
operator =	glib-core/env.h	/^  TEnv& operator=(const TEnv& Env){$/;"	f	class:TEnv
operator =	glib-core/fl.h	/^  TCs& operator=(const TCs& Cs){Val=Cs.Val; return *this;}$/;"	f	class:TCs
operator =	glib-core/gnuplot.cpp	/^TGnuPlot& TGnuPlot::operator = (const TGnuPlot& GnuPlot) {$/;"	f	class:TGnuPlot
operator =	glib-core/gnuplot.cpp	/^TGnuPlot::TGpSeries& TGnuPlot::TGpSeries::operator = (const TGnuPlot::TGpSeries& Gps) {$/;"	f	class:TGnuPlot::TGpSeries
operator =	glib-core/hash.cpp	/^TBigStrPool& TBigStrPool::operator = (const TBigStrPool& Pool) {$/;"	f	class:TBigStrPool
operator =	glib-core/hash.h	/^  PHash<TKey, TDat>& operator=(const PHash<TKey, TDat>& Vec){$/;"	f	class:PHash
operator =	glib-core/hash.h	/^  THash& operator=(const THash& Hash){$/;"	f	class:THash
operator =	glib-core/hash.h	/^  THashKeyDat& operator=(const THashKeyDat& HashKeyDat){$/;"	f	class:THashKeyDat
operator =	glib-core/hash.h	/^  THashKeyDatI& operator=(const THashKeyDatI& HashKeyDatI){$/;"	f	class:THashKeyDatI
operator =	glib-core/hashmp.h	/^  THashMP& operator=(const THashMP& Hash){$/;"	f	class:THashMP
operator =	glib-core/hashmp.h	/^  THashMPKeyDat& operator=(const THashMPKeyDat& HashKeyDat){$/;"	f	class:THashMPKeyDat
operator =	glib-core/hashmp.h	/^  THashMPKeyDatI& operator=(const THashMPKeyDatI& HashKeyDatI){$/;"	f	class:THashMPKeyDatI
operator =	glib-core/html.h	/^  THtmlLxChDef& operator=(const THtmlLxChDef&){Fail; return *this;}$/;"	f
operator =	glib-core/http.cpp	/^  THttpChDef& operator=(const THttpChDef&){Fail; return *this;}$/;"	f	class:THttpChDef
operator =	glib-core/http.cpp	/^  THttpChRet& operator=(const THttpChRet&){Fail; return *this;}$/;"	f	class:THttpChRet
operator =	glib-core/http.cpp	/^  THttpLx& operator=(const THttpLx&){Fail; return *this;}$/;"	f	class:THttpLx
operator =	glib-core/http.h	/^  THttpRq& operator=(const THttpRq&){Fail; return *this;}$/;"	f
operator =	glib-core/lx.h	/^  TLxChDef& operator=(const TLxChDef& ChDef){$/;"	f
operator =	glib-core/os.h	/^  TSysMemStat& operator=(const TSysMemStat&){Fail; return *this;}$/;"	f
operator =	glib-core/shash.h	/^  THashSet& operator=(const THashSet& Set) {$/;"	f	class:THashSet
operator =	glib-core/shash.h	/^  THashSetKey& operator=(const THashSetKey& SetKey) {$/;"	f	class:THashSetKey
operator =	glib-core/shash.h	/^  THashSetKeyI& operator=(const THashSetKeyI& SetKeyI) {$/;"	f	class:THashSetKeyI
operator =	glib-core/shash.h	/^  TPackVec<TVal>& operator = (const TPackVec<TVal>& Vec) { Gen(Vec.Len());$/;"	f	class:TPackVec
operator =	glib-core/shash.h	/^  TSHashKeyDat& operator = (const TSHashKeyDat& HashKeyDat) { if (this != &HashKeyDat) {$/;"	f	class:TSHashKeyDat
operator =	glib-core/shash.h	/^  TSparseTableI& operator = (const TSparseTableI& STI) {$/;"	f	class:TSparseTableI
operator =	glib-core/shash.h	/^  TVec<TVal>& operator = (const TVec<TVal>& Vec) { Gen(Vec.Len());$/;"	f	class:TPackVec
operator =	glib-core/shash.h	/^TSparseGroup<TVal, GroupSize>& TSparseGroup<TVal, GroupSize>::operator = (const TSparseGroup& SG) {$/;"	f	class:TSparseGroup
operator =	glib-core/shash.h	/^TSparseHash<TKey, TDat, GroupSize>& TSparseHash<TKey, TDat, GroupSize>::operator = (const TSparseHash& SHT) {$/;"	f	class:TSparseHash
operator =	glib-core/shash.h	/^TSparseSet<TKey, GroupSize>& TSparseSet<TKey, GroupSize>::operator = (const TSparseSet& SSet) {$/;"	f	class:TSparseSet
operator =	glib-core/shash.h	/^TSparseTable<TVal, GroupSize>& TSparseTable<TVal, GroupSize>::operator = (const TSparseTable& ST) {$/;"	f	class:TSparseTable
operator =	glib-core/ss.h	/^  TSs& operator=(const TSs& Ss){$/;"	f
operator =	glib-core/tm.h	/^  TExeTm& operator=(const TExeTm& Tm){$/;"	f	class:TExeTm
operator =	glib-core/tm.h	/^  TSecTm& operator=(const TSecTm& SecTm){$/;"	f	class:TSecTm
operator =	glib-core/tm.h	/^  TSecTm& operator=(const uint& _AbsSecs){$/;"	f	class:TSecTm
operator =	glib-core/tm.h	/^  TTm& operator=(const TTm& Tm){$/;"	f	class:TTm
operator =	glib-core/unicode.h	/^		TUcdFileReader& operator = (const TUcdFileReader& r) { Fail; return *((TUcdFileReader *) 0); }$/;"	f	class:TUniChDb::TUcdFileReader
operator =	glib-core/unicodestring.h	/^  TUStr& operator=(const TUStr& UStr){$/;"	f	class:TUStr
operator =	glib-core/wch.h	/^  TWCh& operator=(const TWCh& WCh){$/;"	f	class:TWCh
operator =	glib-core/wch.h	/^  TWChA& operator=(const TChA& ChA){PutCStr(ChA.CStr()); return *this;}$/;"	f	class:TWChA
operator =	glib-core/wch.h	/^  TWChA& operator=(const TStr& Str){PutCStr(Str.CStr()); return *this;}$/;"	f	class:TWChA
operator =	glib-core/wch.h	/^  TWChA& operator=(const TWChA& WChA){$/;"	f	class:TWChA
operator =	glib-core/wch.h	/^  TWChA& operator=(const char* CStr){PutCStr(CStr); return *this;}$/;"	f	class:TWChA
operator =	glib-core/xfl.h	/^  TFFileDesc& operator=(const TFFileDesc&){Fail; return *this;}$/;"	f
operator =	glib-core/xmath.h	/^  TMom& operator=(const TMom& Mom){$/;"	f
operator =	glib-core/xml.h	/^  TXmlChDef& operator=(const TXmlChDef&){Fail; return *this;}$/;"	f
operator =	snap-adv/kronecker.cpp	/^TKronMtx& TKronMtx::operator = (const TKronMtx& Kronecker) {$/;"	f	class:TKronMtx
operator =	snap-adv/kronecker.h	/^    TFEval& operator = (const TFEval& FEval) { if (this!=&FEval) {$/;"	f	class:TKronMaxLL::TFEval
operator =	snap-adv/mag.cpp	/^TMAGAffMtx& TMAGAffMtx::operator = (const TMAGAffMtx& Kronecker) {$/;"	f	class:TMAGAffMtx
operator =	snap-adv/mag.cpp	/^TMAGNodeBern& TMAGNodeBern::operator=(const TMAGNodeBern& Dist) {$/;"	f	class:TMAGNodeBern
operator =	snap-adv/mag.cpp	/^TMAGNodeBeta& TMAGNodeBeta::operator=(const TMAGNodeBeta& Dist) {$/;"	f	class:TMAGNodeBeta
operator =	snap-adv/mag.h	/^	TMAGNodeSimple& operator=(const TMAGNodeSimple& Simple) {  Mu = Simple.Mu;  Dim = Simple.Dim;  return (*this);  }$/;"	f	class:TMAGNodeSimple
operator =	snap-adv/mag.h	/^TMAGParam<TNodeAttr>& TMAGParam<TNodeAttr>::operator=(const TMAGParam<TNodeAttr>& MAGParam) {$/;"	f	class:TMAGParam
operator =	snap-core/bignet.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode;  EndNode=EdgeI.EndNode;  CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TBigNet::TEdgeI
operator =	snap-core/bignet.h	/^    TNodeI& operator = (const TNodeI& NI) { NodeHI=NI.NodeHI; Pool=NI.Pool; GetInOutNIdV(); return *this; }$/;"	f	class:TBigNet::TNodeI
operator =	snap-core/bignet.h	/^  TBigNet& operator = (const TBigNet& Net) { if (this!=&Net) {$/;"	f	class:TBigNet
operator =	snap-core/cncom.h	/^  TCnCom& operator = (const TCnCom& CC) { if (this != &CC) NIdV = CC.NIdV;  return *this; }$/;"	f	class:TCnCom
operator =	snap-core/gbase.h	/^  THeap& operator = (const THeap& H) { Cmp=H.Cmp; HeapV=H.HeapV; return *this; }$/;"	f	class:THeap
operator =	snap-core/gbase.h	/^  TSnapQueue& operator=(const TSnapQueue& Queue) { if (this != &Queue) { MxFirst=Queue.MxFirst;$/;"	f	class:TSnapQueue
operator =	snap-core/gbase.h	/^  TUnionFind& operator = (const TUnionFind& UF) { KIdSetH=UF.KIdSetH; return *this; }$/;"	f	class:TUnionFind
operator =	snap-core/ghash.cpp	/^TGraphKey& TGraphKey::operator = (const TGraphKey& GraphKey) {$/;"	f	class:TGraphKey
operator =	snap-core/graph.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode; EndNode=EdgeI.EndNode; CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TBPGraph::TEdgeI
operator =	snap-core/graph.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode; EndNode=EdgeI.EndNode; CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TNGraph::TEdgeI
operator =	snap-core/graph.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode; EndNode=EdgeI.EndNode; CurEdge=EdgeI.CurEdge; } return *this; }$/;"	f	class:TUNGraph::TEdgeI
operator =	snap-core/graph.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { EdgeHI=EdgeI.EdgeHI; Graph=EdgeI.Graph; }  return *this; }$/;"	f	class:TNEGraph::TEdgeI
operator =	snap-core/graph.h	/^    TNodeI& operator = (const TNodeI& NodeI) { LeftHI = NodeI.LeftHI; RightHI=NodeI.RightHI; return *this; }$/;"	f	class:TBPGraph::TNodeI
operator =	snap-core/graph.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; Graph=NodeI.Graph; return *this; }$/;"	f	class:TNEGraph::TNodeI
operator =	snap-core/graph.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; return *this; }$/;"	f	class:TNGraph::TNodeI
operator =	snap-core/graph.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; return *this; }$/;"	f	class:TUNGraph::TNodeI
operator =	snap-core/graph.h	/^  TBPGraph& operator = (const TBPGraph& BPGraph) {$/;"	f	class:TBPGraph
operator =	snap-core/graph.h	/^  TNEGraph& operator = (const TNEGraph& Graph) { if (this!=&Graph) {$/;"	f	class:TNEGraph
operator =	snap-core/graph.h	/^  TNGraph& operator = (const TNGraph& Graph) {$/;"	f	class:TNGraph
operator =	snap-core/graph.h	/^  TUNGraph& operator = (const TUNGraph& Graph) {$/;"	f	class:TUNGraph
operator =	snap-core/graphmp.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode; EndNode=EdgeI.EndNode; CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TNGraphMP::TEdgeI
operator =	snap-core/graphmp.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; return *this; }$/;"	f	class:TNGraphMP::TNodeI
operator =	snap-core/graphmp.h	/^  TNGraphMP& operator = (const TNGraphMP& Graph) {$/;"	f	class:TNGraphMP
operator =	snap-core/gstat.cpp	/^TGStat& TGStat::operator = (const TGStat& GStat) {$/;"	f	class:TGStat
operator =	snap-core/gstat.cpp	/^TGStatVec& TGStatVec::operator = (const TGStatVec& GStat) {$/;"	f	class:TGStatVec
operator =	snap-core/gsvd.h	/^  TNGraphMtx& operator = (const TNGraphMtx& GraphMtx) { Graph=GraphMtx.Graph;  return *this; }$/;"	f	class:TNGraphMtx
operator =	snap-core/gsvd.h	/^  TUNGraphMtx& operator = (const TUNGraphMtx& GraphMtx) { Graph=GraphMtx.Graph;  return *this; }$/;"	f	class:TUNGraphMtx
operator =	snap-core/mmnet.h	/^    TAFltI& operator = (const TAFltI& I) { HI = I.HI; Graph=I.Graph; attr = I.attr; return *this; }$/;"	f	class:TCrossNet::TAFltI
operator =	snap-core/mmnet.h	/^    TAIntI& operator = (const TAIntI& I) { HI = I.HI; Graph=I.Graph; attr = I.attr; return *this; }$/;"	f	class:TCrossNet::TAIntI
operator =	snap-core/mmnet.h	/^    TAStrI& operator = (const TAStrI& I) { HI = I.HI; Graph=I.Graph; attr = I.attr; return *this; }$/;"	f	class:TCrossNet::TAStrI
operator =	snap-core/mmnet.h	/^    TCrossEdgeI& operator = (const TCrossEdgeI& EdgeI) { if (this!=&EdgeI) { CrossHI=EdgeI.CrossHI; Graph=EdgeI.Graph; }  return *this; }$/;"	f	class:TCrossNet::TCrossEdgeI
operator =	snap-core/mmnet.h	/^    TCrossNetI& operator = (const TCrossNetI& CrossNetI) { CrossNetHI = CrossNetI.CrossNetHI; Graph=CrossNetI.Graph; return *this; }$/;"	f	class:TMMNet::TCrossNetI
operator =	snap-core/mmnet.h	/^    TModeNetI& operator = (const TModeNetI& ModeNetI) { ModeNetHI = ModeNetI.ModeNetHI; Graph=ModeNetI.Graph; return *this; }$/;"	f	class:TMMNet::TModeNetI
operator =	snap-core/mmnet.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; Graph=NodeI.Graph; return *this; }$/;"	f	class:TModeNet::TNodeI
operator =	snap-core/mmnet.h	/^  TCrossNet& operator=(const TCrossNet& OtherTCrossNet) {$/;"	f	class:TCrossNet
operator =	snap-core/mmnet.h	/^  TModeNet& operator = (const TModeNet& Graph) { $/;"	f	class:TModeNet
operator =	snap-core/network.h	/^    TAFltI& operator = (const TAFltI& I) { HI = I.HI; Graph=I.Graph; isNode = I.isNode; attr = I.attr; return *this; }$/;"	f	class:TNEANet::TAFltI
operator =	snap-core/network.h	/^    TAIntI& operator = (const TAIntI& I) { HI = I.HI; Graph=I.Graph; isNode = I.isNode; attr = I.attr; return *this; }$/;"	f	class:TNEANet::TAIntI
operator =	snap-core/network.h	/^    TAIntVI& operator = (const TAIntVI& I) { HI = I.HI; Graph=I.Graph; isNode = I.isNode; attr = I.attr; return *this; }$/;"	f	class:TNEANet::TAIntVI
operator =	snap-core/network.h	/^    TAStrI& operator = (const TAStrI& I) { HI = I.HI; Graph=I.Graph; isNode = I.isNode; attr = I.attr; return *this; }$/;"	f	class:TNEANet::TAStrI
operator =	snap-core/network.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode;  EndNode=EdgeI.EndNode;  CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TNodeEDatNet::TEdgeI
operator =	snap-core/network.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode;  EndNode=EdgeI.EndNode;  CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TNodeNet::TEdgeI
operator =	snap-core/network.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode; EndNode=EdgeI.EndNode; CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TDirNet::TEdgeI
operator =	snap-core/network.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode; EndNode=EdgeI.EndNode; CurEdge=EdgeI.CurEdge; } return *this; }$/;"	f	class:TUndirNet::TEdgeI
operator =	snap-core/network.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { EdgeHI=EdgeI.EdgeHI;  Net=EdgeI.Net; }  return *this; }$/;"	f	class:TNodeEdgeNet::TEdgeI
operator =	snap-core/network.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { EdgeHI=EdgeI.EdgeHI; Graph=EdgeI.Graph; }  return *this; }$/;"	f	class:TNEANet::TEdgeI
operator =	snap-core/network.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI;  Net=NodeI.Net;  return *this; }$/;"	f	class:TNodeEdgeNet::TNodeI
operator =	snap-core/network.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; Graph=NodeI.Graph; return *this; }$/;"	f	class:TNEANet::TNodeI
operator =	snap-core/network.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; return *this; }$/;"	f	class:TDirNet::TNodeI
operator =	snap-core/network.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; return *this; }$/;"	f	class:TUndirNet::TNodeI
operator =	snap-core/network.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI=NodeI.NodeHI; Net=NodeI.Net; return *this; }$/;"	f	class:TNodeEDatNet::TNodeI
operator =	snap-core/network.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI=NodeI.NodeHI; Net=NodeI.Net; return *this; }$/;"	f	class:TNodeNet::TNodeI
operator =	snap-core/network.h	/^  TDirNet& operator = (const TDirNet& Graph) {$/;"	f	class:TDirNet
operator =	snap-core/network.h	/^  TNEANet& operator = (const TNEANet& Graph) { if (this!=&Graph) {$/;"	f	class:TNEANet
operator =	snap-core/network.h	/^  TNodeEDatNet& operator = (const TNodeEDatNet& NodeNet) { if (this!=&NodeNet) {$/;"	f	class:TNodeEDatNet
operator =	snap-core/network.h	/^  TNodeEdgeNet& operator = (const TNodeEdgeNet& Net) {$/;"	f	class:TNodeEdgeNet
operator =	snap-core/network.h	/^  TNodeNet& operator = (const TNodeNet& NodeNet) {$/;"	f	class:TNodeNet
operator =	snap-core/network.h	/^  TUndirNet& operator = (const TUndirNet& Graph) {$/;"	f	class:TUndirNet
operator =	snap-core/networkmp.h	/^    TAFltI& operator = (const TAFltI& I) { HI = I.HI; Graph=I.Graph; isNode = I.isNode; attr = I.attr; return *this; }$/;"	f	class:TNEANetMP::TAFltI
operator =	snap-core/networkmp.h	/^    TAIntI& operator = (const TAIntI& I) { HI = I.HI; Graph=I.Graph; isNode = I.isNode; attr = I.attr; return *this; }$/;"	f	class:TNEANetMP::TAIntI
operator =	snap-core/networkmp.h	/^    TAStrI& operator = (const TAStrI& I) { HI = I.HI; Graph=I.Graph; isNode = I.isNode; attr = I.attr; return *this; }$/;"	f	class:TNEANetMP::TAStrI
operator =	snap-core/networkmp.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { EdgeHI=EdgeI.EdgeHI; Graph=EdgeI.Graph; }  return *this; }$/;"	f	class:TNEANetMP::TEdgeI
operator =	snap-core/networkmp.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; Graph=NodeI.Graph; return *this; }$/;"	f	class:TNEANetMP::TNodeI
operator =	snap-core/networkmp.h	/^  TNEANetMP& operator = (const TNEANetMP& Graph) { if (this!=&Graph) {$/;"	f	class:TNEANetMP
operator =	snap-core/timenet.cpp	/^TTimeNENet& TTimeNENet::operator = (const TTimeNENet& TimeNet) {$/;"	f	class:TTimeNENet
operator =	snap-core/timenet.cpp	/^TTimeNet& TTimeNet::operator = (const TTimeNet& TimeNet) {$/;"	f	class:TTimeNet
operator =	snap-core/timenet.h	/^    TTmBucket& operator = (const TTmBucket& TmBucket) { if (this!=&TmBucket) {$/;"	f	class:TTimeNet::TTmBucket
operator =	snap-exp/graphmp-exp.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { CurNode=EdgeI.CurNode; EndNode=EdgeI.EndNode; CurEdge=EdgeI.CurEdge; }  return *this; }$/;"	f	class:TUNGraphMP::TEdgeI
operator =	snap-exp/graphmp-exp.h	/^    TNodeI& operator = (const TNodeI& NodeI) { NodeHI = NodeI.NodeHI; return *this; }$/;"	f	class:TUNGraphMP::TNodeI
operator =	snap-exp/graphmp-exp.h	/^  TUNGraphMP& operator = (const TUNGraphMP& Graph) {$/;"	f	class:TUNGraphMP
operator =	snap-exp/memes.h	/^    TTmUrlCnt& operator = (const TTmUrlCnt& Tuc) { if(this!=&Tuc){memcpy((void*)this, (void*)&Tuc, sizeof(TTmUrlCnt));} return *this; }$/;"	f	class:TQuote::TTmUrlCnt
operator =	snap-exp/mmgraph-exp.h	/^    TEdgeI& operator = (const TEdgeI& EdgeI) { if (this!=&EdgeI) { EdgeHI=EdgeI.EdgeHI; Graph=EdgeI.Graph; }  return *this; }$/;"	f	class:TMNet::TEdgeI
operator =	snap-exp/mmgraph-exp.h	/^    TMNodeI& operator = (const TMNodeI& NodeI) { VecI=NodeI.VecI; VecEndI=NodeI.VecEndI; HashI=NodeI.HashI; Graph=NodeI.Graph; return *this; }$/;"	f	class:TMNet::TMNodeI
operator =	snap-exp/mmgraph-exp.h	/^  TMNet& operator = (const TMNet& Graph) { if (this!=&Graph) {$/;"	f	class:TMNet
operator =	snap-exp/spinn3r.cpp	/^TSpinn3rFullItem& TSpinn3rFullItem::operator = (const TSpinn3rFullItem& Item) {$/;"	f	class:TSpinn3rFullItem
operator ==	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^			const bool operator==(const TIterator &IT) {$/;"	f	class:TSBitSet::TIterator
operator ==	glib-core/bd.h	/^  bool operator==(const TPt& Pt) const {return *Addr==*Pt.Addr;}$/;"	f	class:TPt
operator ==	glib-core/bits.cpp	/^bool TBSet::operator==(const TBSet& BSet) const {$/;"	f	class:TBSet
operator ==	glib-core/bits.h	/^  bool operator==(const TB32Set& BSet) const {return B4==BSet.B4;}$/;"	f	class:TB32Set
operator ==	glib-core/bits.h	/^  bool operator==(const TB8Set& BSet) const {return B1==BSet.B1;}$/;"	f	class:TB8Set
operator ==	glib-core/bits.h	/^  bool operator==(const TFSet& FSet) const {return B4V==FSet.B4V;}$/;"	f	class:TFSet
operator ==	glib-core/blobbs.h	/^  bool operator==(const TBlobPt& Pt) const {$/;"	f
operator ==	glib-core/ds.h	/^  bool operator == (const TTuple& Tup) const {$/;"	f	class:TTuple
operator ==	glib-core/ds.h	/^  bool operator==(const PVec<TVal>& Vec) const {return V==Vec.V;}$/;"	f	class:PVec
operator ==	glib-core/ds.h	/^  bool operator==(const TAPt& Pt) const {return *Addr==*Pt.Addr;}$/;"	f	class:TAPt
operator ==	glib-core/ds.h	/^  bool operator==(const TFunc& Func) const {$/;"	f	class:TFunc
operator ==	glib-core/ds.h	/^  bool operator==(const TKeyDat& KeyDat) const {return Key==KeyDat.Key;}$/;"	f	class:TKeyDat
operator ==	glib-core/ds.h	/^  bool operator==(const TPair& Pair) const {$/;"	f	class:TPair
operator ==	glib-core/ds.h	/^  bool operator==(const TQuad& Quad) const {$/;"	f	class:TQuad
operator ==	glib-core/ds.h	/^  bool operator==(const TSStack& Stack) const {return this==&Stack;}$/;"	f	class:TSStack
operator ==	glib-core/ds.h	/^  bool operator==(const TTree& Tree) const {return NodeV==Tree.NodeV;}$/;"	f	class:TTree
operator ==	glib-core/ds.h	/^  bool operator==(const TTriple& Triple) const {$/;"	f	class:TTriple
operator ==	glib-core/ds.h	/^  bool operator==(const TVVVec& Vec) const {$/;"	f	class:TVVVec
operator ==	glib-core/ds.h	/^  bool operator==(const TVVec& Vec) const {$/;"	f	class:TVVec
operator ==	glib-core/ds.h	/^bool TVec<TVal, TSizeTy>::operator==(const TVec<TVal, TSizeTy>& Vec) const {$/;"	f	class:TVec
operator ==	glib-core/dt.h	/^  bool operator==(const TRnd&) const {Fail; return false;}$/;"	f	class:TRnd
operator ==	glib-core/fl.h	/^  bool operator==(const TCs& Cs) const {return Val==Cs.Val;}$/;"	f	class:TCs
operator ==	glib-core/hash.h	/^  bool operator==(const PHash<TKey, TDat>& Vec) const {return H==Vec.H;}$/;"	f	class:PHash
operator ==	glib-core/hash.h	/^  bool operator==(const THashKeyDat& HashKeyDat) const {$/;"	f	class:THashKeyDat
operator ==	glib-core/hash.h	/^  bool operator==(const THashKeyDatI& HashKeyDatI) const {$/;"	f	class:THashKeyDatI
operator ==	glib-core/hash.h	/^bool THash<TKey, TDat, THashFunc>::operator==(const THash& Hash) const {$/;"	f	class:THash
operator ==	glib-core/hashmp.h	/^  bool operator==(const THashMPKeyDat& HashKeyDat) const {$/;"	f	class:THashMPKeyDat
operator ==	glib-core/hashmp.h	/^  bool operator==(const THashMPKeyDatI& HashKeyDatI) const {$/;"	f	class:THashMPKeyDatI
operator ==	glib-core/hashmp.h	/^bool THashMP<TKey, TDat, THashFunc>::operator==(const THashMP& Hash) const {$/;"	f	class:THashMP
operator ==	glib-core/json.cpp	/^bool TJsonVal::operator==(const TJsonVal& JsonVal) const {$/;"	f	class:TJsonVal
operator ==	glib-core/shash.h	/^  bool operator == (const TSHashKeyDat& HashKeyDat) const { return Key == HashKeyDat.Key; }$/;"	f	class:TSHashKeyDat
operator ==	glib-core/shash.h	/^  bool operator == (const TSparseTableI& STI) const {$/;"	f	class:TSparseTableI
operator ==	glib-core/shash.h	/^  bool operator==(const THashSetKeyI& SetKeyI) const {$/;"	f	class:THashSetKeyI
operator ==	glib-core/shash.h	/^bool THashSet<TKey, THashFunc>::operator==(const THashSet& Set) const {$/;"	f	class:THashSet
operator ==	glib-core/shash.h	/^bool TSparseGroup<TVal, GroupSize>::operator == (const TSparseGroup& SG) const {$/;"	f	class:TSparseGroup
operator ==	glib-core/shash.h	/^bool TSparseHash<TKey, TDat, GroupSize>::operator == (const TSparseHash& SHT) const {$/;"	f	class:TSparseHash
operator ==	glib-core/shash.h	/^bool TSparseSet<TKey, GroupSize>::operator == (const TSparseSet& SSet) const {$/;"	f	class:TSparseSet
operator ==	glib-core/shash.h	/^bool TSparseTable<TVal, GroupSize>::operator == (const TSparseTable& ST) const {$/;"	f	class:TSparseTable
operator ==	glib-core/tm.h	/^  bool operator==(const TSecTm& SecTm) const {$/;"	f	class:TSecTm
operator ==	glib-core/tm.h	/^  bool operator==(const TTm& Tm) const {$/;"	f	class:TTm
operator ==	glib-core/unicodestring.h	/^  bool operator==(const TUStr& UStr) const {return UniChV==UStr.UniChV;}$/;"	f	class:TUStr
operator ==	glib-core/wch.h	/^  bool operator==(const TWCh& WCh) const {$/;"	f	class:TWCh
operator ==	glib-core/wch.h	/^  bool operator==(const TWChA& WChA) const {return WChV==WChA.WChV;}$/;"	f	class:TWChA
operator ==	glib-core/wch.h	/^  bool operator==(const char* CStr) const {return strcmp(GetStr().CStr(), CStr)!=0;}$/;"	f	class:TWChA
operator ==	glib-core/xmath.h	/^  bool operator==(const TMom& Mom) const {$/;"	f
operator ==	snap-adv/kronecker.h	/^  bool operator == (const TKronMtx& Kronecker) const { return SeedMtx==Kronecker.SeedMtx; }$/;"	f	class:TKronMtx
operator ==	snap-adv/mag.h	/^  bool operator == (const TMAGAffMtx& Kronecker) const { return SeedMtx==Kronecker.SeedMtx; }$/;"	f	class:TMAGAffMtx
operator ==	snap-core/bignet.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TBigNet::TEdgeI
operator ==	snap-core/bignet.h	/^    bool operator == (const TNodeI& NI) const { return NodeHI == NI.NodeHI; }$/;"	f	class:TBigNet::TNodeI
operator ==	snap-core/cncom.h	/^  bool operator == (const TCnCom& CC) const { return NIdV == CC.NIdV; }$/;"	f	class:TCnCom
operator ==	snap-core/ghash.h	/^  bool operator == (const TGraphKey& GraphKey) const { return SigV==GraphKey.SigV && VariantId==GraphKey.VariantId; }$/;"	f	class:TGraphKey
operator ==	snap-core/ghash.h	/^  bool operator == (const TSimpleGraph& Graph) const { return EdgeV == Graph.EdgeV; }$/;"	f	class:TSimpleGraph
operator ==	snap-core/graph.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TBPGraph::TEdgeI
operator ==	snap-core/graph.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TNGraph::TEdgeI
operator ==	snap-core/graph.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TUNGraph::TEdgeI
operator ==	snap-core/graph.h	/^    bool operator == (const TEdgeI& EdgeI) const { return EdgeHI == EdgeI.EdgeHI; }$/;"	f	class:TNEGraph::TEdgeI
operator ==	snap-core/graph.h	/^    bool operator == (const TNodeI& NodeI) const { return LeftHI==NodeI.LeftHI && RightHI==NodeI.RightHI; }$/;"	f	class:TBPGraph::TNodeI
operator ==	snap-core/graph.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNEGraph::TNodeI
operator ==	snap-core/graph.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNGraph::TNodeI
operator ==	snap-core/graph.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TUNGraph::TNodeI
operator ==	snap-core/graphmp.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TNGraphMP::TEdgeI
operator ==	snap-core/graphmp.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNGraphMP::TNodeI
operator ==	snap-core/gstat.cpp	/^bool TGStat::operator == (const TGStat& GStat) const {$/;"	f	class:TGStat
operator ==	snap-core/mmnet.h	/^    bool operator == (const TAFltI& I) const { return HI == I.HI; }$/;"	f	class:TCrossNet::TAFltI
operator ==	snap-core/mmnet.h	/^    bool operator == (const TAIntI& I) const { return HI == I.HI; }$/;"	f	class:TCrossNet::TAIntI
operator ==	snap-core/mmnet.h	/^    bool operator == (const TAStrI& I) const { return HI == I.HI; }$/;"	f	class:TCrossNet::TAStrI
operator ==	snap-core/mmnet.h	/^    bool operator == (const TCrossEdgeI& EdgeI) const { return CrossHI == EdgeI.CrossHI; }$/;"	f	class:TCrossNet::TCrossEdgeI
operator ==	snap-core/mmnet.h	/^    bool operator == (const TCrossNetI& CrossNetI) const { return CrossNetHI == CrossNetI.CrossNetHI; }$/;"	f	class:TMMNet::TCrossNetI
operator ==	snap-core/mmnet.h	/^    bool operator == (const TModeNetI& ModeNetI) const { return ModeNetHI == ModeNetI.ModeNetHI; }$/;"	f	class:TMMNet::TModeNetI
operator ==	snap-core/mmnet.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TModeNet::TNodeI
operator ==	snap-core/network.h	/^    bool operator == (const TAFltI& I) const { return HI == I.HI; }$/;"	f	class:TNEANet::TAFltI
operator ==	snap-core/network.h	/^    bool operator == (const TAIntI& I) const { return HI == I.HI; }$/;"	f	class:TNEANet::TAIntI
operator ==	snap-core/network.h	/^    bool operator == (const TAIntVI& I) const { return HI == I.HI; }$/;"	f	class:TNEANet::TAIntVI
operator ==	snap-core/network.h	/^    bool operator == (const TAStrI& I) const { return HI == I.HI; }$/;"	f	class:TNEANet::TAStrI
operator ==	snap-core/network.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TDirNet::TEdgeI
operator ==	snap-core/network.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TNodeEDatNet::TEdgeI
operator ==	snap-core/network.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TNodeNet::TEdgeI
operator ==	snap-core/network.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TUndirNet::TEdgeI
operator ==	snap-core/network.h	/^    bool operator == (const TEdgeI& EdgeI) const { return EdgeHI == EdgeI.EdgeHI; }$/;"	f	class:TNEANet::TEdgeI
operator ==	snap-core/network.h	/^    bool operator == (const TEdgeI& EdgeI) const { return EdgeHI == EdgeI.EdgeHI; }$/;"	f	class:TNodeEdgeNet::TEdgeI
operator ==	snap-core/network.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TDirNet::TNodeI
operator ==	snap-core/network.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNEANet::TNodeI
operator ==	snap-core/network.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNodeEDatNet::TNodeI
operator ==	snap-core/network.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNodeEdgeNet::TNodeI
operator ==	snap-core/network.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNodeNet::TNodeI
operator ==	snap-core/network.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TUndirNet::TNodeI
operator ==	snap-core/networkmp.h	/^    bool operator == (const TAFltI& I) const { return HI == I.HI; }$/;"	f	class:TNEANetMP::TAFltI
operator ==	snap-core/networkmp.h	/^    bool operator == (const TAIntI& I) const { return HI == I.HI; }$/;"	f	class:TNEANetMP::TAIntI
operator ==	snap-core/networkmp.h	/^    bool operator == (const TAStrI& I) const { return HI == I.HI; }$/;"	f	class:TNEANetMP::TAStrI
operator ==	snap-core/networkmp.h	/^    bool operator == (const TEdgeI& EdgeI) const { return EdgeHI == EdgeI.EdgeHI; }$/;"	f	class:TNEANetMP::TEdgeI
operator ==	snap-core/networkmp.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TNEANetMP::TNodeI
operator ==	snap-core/table.cpp	/^bool TRowIterator::operator == (const TRowIterator& RowI) const {$/;"	f	class:TRowIterator
operator ==	snap-core/table.cpp	/^bool TRowIteratorWithRemove::operator == (const TRowIteratorWithRemove& RowI) const {$/;"	f	class:TRowIteratorWithRemove
operator ==	snap-core/table.h	/^	TBool operator ==(const GroupStmt& stmt) const{$/;"	f	class:GroupStmt
operator ==	snap-exp/alternativetable.cpp	/^bool ExplicitStringRowIterator::operator == (const ExplicitStringRowIterator& RowI) const {$/;"	f	class:ExplicitStringRowIterator
operator ==	snap-exp/alternativetable.cpp	/^bool ExplicitStringRowIteratorWithRemove::operator == (const ExplicitStringRowIteratorWithRemove& RowI) const {$/;"	f	class:ExplicitStringRowIteratorWithRemove
operator ==	snap-exp/alternativetable.cpp	/^bool RowBasedRowIterator::operator == (const RowBasedRowIterator& RowI) const {$/;"	f	class:RowBasedRowIterator
operator ==	snap-exp/graphmp-exp.h	/^    bool operator == (const TEdgeI& EdgeI) const { return CurNode == EdgeI.CurNode && CurEdge == EdgeI.CurEdge; }$/;"	f	class:TUNGraphMP::TEdgeI
operator ==	snap-exp/graphmp-exp.h	/^    bool operator == (const TNodeI& NodeI) const { return NodeHI == NodeI.NodeHI; }$/;"	f	class:TUNGraphMP::TNodeI
operator ==	snap-exp/memes.h	/^    bool operator == (const TTmUrlCnt& Val) const { return memcmp((void*) this, (void*)&Val, sizeof(TTmUrlCnt))==0; }$/;"	f	class:TQuote::TTmUrlCnt
operator ==	snap-exp/mmgraph-exp.h	/^    bool operator == (const TEdgeI& EdgeI) const { return EdgeHI == EdgeI.EdgeHI; }$/;"	f	class:TMNet::TEdgeI
operator ==	snap-exp/mmgraph-exp.h	/^    bool operator == (const TMNodeI& NodeI) const { return VecI == NodeI.VecI && HashI == NodeI.HashI; }$/;"	f	class:TMNet::TMNodeI
operator >	glib-core/bd.h	/^bool operator>(const TRec& Rec1, const TRec& Rec2){return Rec2<Rec1;}$/;"	f
operator >=	glib-core/bd.h	/^bool operator>=(const TRec& Rec1, const TRec& Rec2){return !(Rec1<Rec2);}$/;"	f
operator >>	glib-core/fl.h	/^  TSIn& operator>>(bool& Bool){Cs+=GetBf(&Bool, sizeof(Bool)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(char& Ch){Cs+=GetBf(&Ch, sizeof(Ch)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(double& Double){Cs+=GetBf(&Double, sizeof(Double)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(float& Flt){Cs+=GetBf(&Flt, sizeof(Flt)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(int& Int){Cs+=GetBf(&Int, sizeof(Int)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(int64& Int){Cs+=GetBf(&Int, sizeof(Int)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(long double& LDouble){Cs+=GetBf(&LDouble, sizeof(LDouble)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(short& Sh){Cs+=GetBf(&Sh, sizeof(Sh)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(uchar& UCh){Cs+=GetBf(&UCh, sizeof(UCh)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(uint& UInt){Cs+=GetBf(&UInt, sizeof(UInt)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(uint64& UInt){Cs+=GetBf(&UInt, sizeof(UInt)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^  TSIn& operator>>(ushort& USh){Cs+=GetBf(&USh, sizeof(USh)); return *this;}$/;"	f	class:TSIn
operator >>	glib-core/fl.h	/^TSIn& operator>>(TSIn& SIn, T& Val) {$/;"	f
operator >>=	glib-core/bits.h	/^  TB32Set& operator>>=(const int& ShiftBits){B4>>=ShiftBits; return *this;}$/;"	f	class:TB32Set
operator >>=	glib-core/bits.h	/^  TB8Set& operator>>=(const int& ShiftBits){B1>>=ShiftBits; return *this;}$/;"	f	class:TB8Set
operator TIntV	glib-core/unicode.cpp	/^	operator TIntV() const { return TIntV(); }$/;"	f	class:__anon54::TVectorBuilder
operator TIntV	glib-core/unicode.cpp	/^	operator TIntV() const { return v; }$/;"	f	class:__anon54::TVectorBuilder2
operator []	glib-core/bd.h	/^  TRec& operator[](const int& RecN) const {$/;"	f	class:TPt
operator []	glib-core/ds.h	/^  TRec& operator[](const int& RecN) const {$/;"	f	class:TAPt
operator []	glib-core/ds.h	/^  TVal& operator[] (const int& ValN) { return ValV[ValN]; }$/;"	f	class:TTuple
operator []	glib-core/ds.h	/^  TVal& operator[](const TSizeTy& ValN){$/;"	f	class:TVec
operator []	glib-core/ds.h	/^  TVal& operator[](const int& ValN) const {return V[ValN];}$/;"	f	class:PVec
operator []	glib-core/ds.h	/^  TVal& operator[](const int& ValN) {return ValV[ValV.Len()-ValN-1];}$/;"	f	class:TSStack
operator []	glib-core/ds.h	/^  const TVal& operator[] (const int& ValN) const { return ValV[ValN]; }$/;"	f	class:TTuple
operator []	glib-core/ds.h	/^  const TVal& operator[](const TSizeTy& ValN) const {$/;"	f	class:TVec
operator []	glib-core/ds.h	/^  const TVal& operator[](const int& ValN) const {Assert((0<=ValN)&&(ValN<Len()));$/;"	f	class:TQQueue
operator []	glib-core/ds.h	/^  const TVal& operator[](const int& ValN) const {return ValV[ValV.Len()-ValN-1];}$/;"	f	class:TSStack
operator []	glib-core/dt.h	/^  char& operator[](const int& ChN) const {$/;"	f
operator []	glib-core/hash.h	/^  TDat& operator[](const int& KeyId){return GetHashKeyDat(KeyId).Dat;}$/;"	f	class:THash
operator []	glib-core/hash.h	/^  const TDat& operator[](const int& KeyId) const {return GetHashKeyDat(KeyId).Dat;}$/;"	f	class:THash
operator []	glib-core/hashmp.h	/^  TDat& operator[](const int& KeyId){return GetPHashKeyDat(KeyId).Dat;}$/;"	f	class:THashMP
operator []	glib-core/hashmp.h	/^  const TDat& operator[](const int& KeyId) const {return GetPHashKeyDat(KeyId).Dat;}$/;"	f	class:THashMP
operator []	glib-core/shash.h	/^  TKey& operator[](const int& KeyId) {return GetSetKey(KeyId).Key; }$/;"	f	class:THashSet
operator []	glib-core/shash.h	/^  TVal& operator [] (const int& ValN) { return ValT[ValN]; }$/;"	f	class:TPackVec
operator []	glib-core/shash.h	/^  const TKey& operator[](const int& KeyId) const {return GetSetKey(KeyId).Key; }$/;"	f	class:THashSet
operator []	glib-core/shash.h	/^  const TVal& operator [] (const int ValN) const { return Get(ValN); }$/;"	f	class:TSparseGroup
operator []	glib-core/shash.h	/^  const TVal& operator [] (const int& ValN) const { return ValT[ValN]; }$/;"	f	class:TPackVec
operator []	glib-core/ssmp.h	/^  char* operator [] (const int& FldN) { return FldV[FldN]; }$/;"	f
operator []	glib-core/ssmp.h	/^  const char* operator [] (const int& FldN) const { return FldV[FldN]; }$/;"	f
operator []	glib-core/unicodestring.h	/^  int operator[](const int& UniChN) const {return UniChV[UniChN];}$/;"	f	class:TUStr
operator []	glib-core/wch.h	/^  TWCh operator[](const int& ChN) const {return WChV[ChN];}$/;"	f	class:TWChA
operator []	snap-adv/subgraphenum.h	/^		inline bool operator[](int i) const { return m_nodes[i]; }$/;"	f	class:TSubGraphEnum::TSSet
operator []	snap-adv/subgraphenum.h	/^		inline int operator[](int i) const { return m_arr[i]; }$/;"	f	class:TSubGraphEnum::TSVec
operator []	snap-core/cncom.h	/^  const TInt& operator [] (const int& NIdN) const { return NIdV[NIdN]; }$/;"	f	class:TCnCom
operator []	snap-core/gbase.h	/^  const TVal& operator[](const int& ValN) const { return ValV[First+ValN]; }$/;"	f	class:TSnapQueue
operator []	snap-core/ghash.h	/^  TDat& operator [] (const int& KeyId) { return GraphH[KeyId]; }$/;"	f	class:TGHash
operator []	snap-core/ghash.h	/^  const TDat& operator [] (const int& KeyId) const { return GraphH[KeyId]; }$/;"	f	class:TGHash
operator []	snap-core/gstat.h	/^  PGStat operator[](const int& ValN) const { return GStatV[ValN]; }$/;"	f	class:TGStatVec
operator []	snap-exp/wikinet.h	/^  const TWikiElec& operator [] (const int& EId) const { return ElecV[EId]; }$/;"	f	class:TWikiElecBs
operator []	snap-exp/wikinet.h	/^  const TWikiVote& operator [] (const int& VoteN) const { return GetVote(VoteN); }$/;"	f	class:TWikiElec
operator ^	glib-core/bits.h	/^  friend TB32Set operator^(const TB32Set& LBSet, const TB32Set& RBSet){$/;"	f	class:TB32Set
operator ^	glib-core/bits.h	/^  friend TB8Set operator^(const TB8Set& LBSet, const TB8Set& RBSet){$/;"	f	class:TB8Set
operator ^	glib-core/bits.h	/^  friend TBSet operator^(const TBSet& LBSet, const TBSet& RBSet){$/;"	f
operator ^	glib-core/bits.h	/^  friend TBSet operator^(const TBSet& LBSet, const int& BitN){$/;"	f
operator ^=	glib-core/bits.h	/^  TB32Set& operator^=(const TB32Set& BSet){B4^=BSet.B4; return *this;}$/;"	f	class:TB32Set
operator ^=	glib-core/bits.h	/^  TB8Set& operator^=(const TB8Set& BSet){B1^=BSet.B1; return *this;}$/;"	f	class:TB8Set
operator ^=	glib-core/bits.h	/^  TBSet& operator^=(const TBSet& BSet){$/;"	f
operator char	glib-core/wch.h	/^  operator char() const {return LsVal;}$/;"	f	class:TWCh
operator uint	glib-core/tm.h	/^  operator uint() const {return AbsSecs.Val;}$/;"	f	class:TSecTm
operator |	glib-core/bits.h	/^  TFSet& operator|(const TFSet& FSet){Incl(FSet); return *this;}$/;"	f	class:TFSet
operator |	glib-core/bits.h	/^  TFSet& operator|(const int& FlagN){Incl(FlagN); return *this;}$/;"	f	class:TFSet
operator |	glib-core/bits.h	/^  friend TB32Set operator|(const TB32Set& LBSet, const TB32Set& RBSet){$/;"	f	class:TB32Set
operator |	glib-core/bits.h	/^  friend TB8Set operator|(const TB8Set& LBSet, const TB8Set& RBSet){$/;"	f	class:TB8Set
operator |	glib-core/bits.h	/^  friend TBSet operator|(const TBSet& LBSet, const TBSet& RBSet){$/;"	f
operator |	glib-core/bits.h	/^  friend TBSet operator|(const TBSet& LBSet, const int& BitN){$/;"	f
operator |=	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	TSBitSet& operator|=(TSBitSet &bs){$/;"	f	class:TSBitSet
operator |=	glib-core/bits.h	/^  TB32Set& operator|=(const TB32Set& BSet){B4|=BSet.B4; return *this;}$/;"	f	class:TB32Set
operator |=	glib-core/bits.h	/^  TB8Set& operator|=(const TB8Set& BSet){B1|=BSet.B1; return *this;}$/;"	f	class:TB8Set
operator |=	glib-core/bits.h	/^  TB8Set& operator|=(const int& BitN){Incl(BitN); return *this;}$/;"	f	class:TB8Set
operator |=	glib-core/bits.h	/^  TBSet& operator|=(const TBSet& BSet){$/;"	f
operator |=	glib-core/bits.h	/^  TBSet& operator|=(const int& BitN){$/;"	f
operator ~	glib-core/bits.h	/^  TB32Set& operator~(){B4=~B4; return *this;}$/;"	f	class:TB32Set
operator ~	glib-core/bits.h	/^  TB8Set& operator~(){B1=TB1Def::TB1(~B1); return *this;}$/;"	f	class:TB8Set
operator ~	glib-core/bits.h	/^  TBSet& operator~(){$/;"	f
operator ~	glib-core/bits.h	/^  friend TB32Set operator~(const TB32Set& BSet){$/;"	f	class:TB32Set
operator ~	glib-core/bits.h	/^  friend TB8Set operator~(const TB8Set& BSet){$/;"	f	class:TB8Set
operator ~	glib-core/bits.h	/^  friend TBSet operator~(const TBSet& BSet){$/;"	f
orig_graph_	snap-adv/motifcluster.h	/^  PUNGraph orig_graph_;$/;"	m	class:ChibaNishizekiWeighter
outputPoint	examples/lshtest/lshtest.cpp	/^void outputPoint(TFltV Point) {$/;"	f
owner	glib-core/unicode.h	/^		TUniChDb &owner;$/;"	m	class:TUniChDb::TSubcatHelper
pairs	glib-core/unicode.h	/^	THash<TItemPr, TVoid> pairs;$/;"	m	class:TUniTrie
print	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  void print() {$/;"	f	class:TMatchingMachine
print	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  void print() {$/;"	f	class:TMatchingMachine
printv	test/test-helper.cpp	/^void printv(TIntV IntV) {$/;"	f
properties	glib-core/unicode.h	/^	int properties; \/\/ a combination of TUniChProperties$/;"	m	class:TUniChInfo
propertiesX	glib-core/unicode.h	/^	int propertiesX; \/\/ a combination of TUniChPropertiesX$/;"	m	class:TUniChInfo
putBackCh	glib-core/unicode.h	/^		int putBackCh;$/;"	m	class:TUniChDb::TUcdFileReader
pythag	glib-core/linalg.cpp	/^double TNumericalStuff::pythag(double a, double b) {$/;"	f	class:TNumericalStuff
q	glib-core/dt.cpp	/^const int TRnd::q=127773; \/\/ m DIV a$/;"	m	class:TRnd	file:
q	glib-core/dt.h	/^  static const int a, m, q, r;$/;"	m	class:TRnd
qtCentr	snap-exp/memes.h	/^  qtUndef, qtQuote, qtInClust, qtRoot, qtCentr$/;"	e	enum:__anon13
qtInClust	snap-exp/memes.h	/^  qtUndef, qtQuote, qtInClust, qtRoot, qtCentr$/;"	e	enum:__anon13
qtQuote	snap-exp/memes.h	/^  qtUndef, qtQuote, qtInClust, qtRoot, qtCentr$/;"	e	enum:__anon13
qtRoot	snap-exp/memes.h	/^  qtUndef, qtQuote, qtInClust, qtRoot, qtCentr$/;"	e	enum:__anon13
qtUndef	snap-exp/memes.h	/^  qtUndef, qtQuote, qtInClust, qtRoot, qtCentr$/;"	e	enum:__anon13
r	glib-core/dt.cpp	/^const int TRnd::r=2836; \/\/ m MOD a$/;"	m	class:TRnd	file:
r	glib-core/dt.h	/^  static const int a, m, q, r;$/;"	m	class:TRnd
replacementChar	glib-core/unicode.h	/^	int replacementChar;$/;"	m	class:T8BitCodec
replacementChar	glib-core/unicode.h	/^	int replacementChar;$/;"	m	class:TUniCodec
roEq	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	e	enum:__anon40
roGEq	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	e	enum:__anon40
roGt	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	e	enum:__anon40
roLEq	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	e	enum:__anon40
roLs	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	e	enum:__anon40
roNEq	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	e	enum:__anon40
roUndef	glib-core/bd.h	/^typedef enum {roUndef, roLs, roLEq, roEq, roNEq, roGEq, roGt} TRelOp;$/;"	e	enum:__anon40
roots	glib-core/unicode.h	/^	THash<TItemTr, TInt> roots;$/;"	m	class:TUniTrie
run	examples/zygote/zydemo.cpp	/^int run(int objc, void* objv[], int argc, char* argv[]) {$/;"	f
s_size_t	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^typedef int32_t s_size_t;$/;"	t
sbExTrie	glib-core/unicode.h	/^	TUniTrie<TInt> sbExTrie;$/;"	m	class:TUniChDb
sbitset_block	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^typedef u_size_t sbitset_block;$/;"	t
script	glib-core/unicode.h	/^	signed char script; \/\/ keyId into 'TUniChDb.scriptNames'; -1 if unknown$/;"	m	class:TUniChInfo
scriptUnknown	glib-core/unicode.h	/^	int scriptUnknown; \/\/ = scripts.GetKey("Unknown")$/;"	m	class:TUniChDb
scripts	glib-core/unicode.h	/^	TStrIntH scripts; \/\/ keyID = used in TUniChInfo.script; key = script name; dat = number of characters (informative only)$/;"	m	class:TUniChDb
sdouble	glib-core/bd.h	/^typedef float sdouble;$/;"	t
semiclique	snap-adv/motifcluster.h	/^  semiclique, \/\/ u  --  v, u  --  w, u  --  x, v  --  w, v  --  x$/;"	e	enum:MotifType
shash_h	glib-core/shash.h	2;"	d
sib	glib-core/unicode.h	/^		int child, sib;$/;"	m	class:TUniTrie::TNode
sign	glib-core/linalg.cpp	/^double TNumericalStuff::sign(double a, double b) {$/;"	f	class:TNumericalStuff
simpleLowerCaseMapping	glib-core/unicode.h	/^	int simpleUpperCaseMapping, simpleLowerCaseMapping, simpleTitleCaseMapping; \/\/ from UnicodeData.txt$/;"	m	class:TUniChInfo
simpleTitleCaseMapping	glib-core/unicode.h	/^	int simpleUpperCaseMapping, simpleLowerCaseMapping, simpleTitleCaseMapping; \/\/ from UnicodeData.txt$/;"	m	class:TUniChInfo
simpleUpperCaseMapping	glib-core/unicode.h	/^	int simpleUpperCaseMapping, simpleLowerCaseMapping, simpleTitleCaseMapping; \/\/ from UnicodeData.txt$/;"	m	class:TUniChInfo
singles	glib-core/unicode.h	/^	THash<TItem, TVoid> singles; \/\/$/;"	m	class:TUniTrie
skipBom	glib-core/unicode.h	/^	bool skipBom;$/;"	m	class:TUniCodec
snap_agm_h	snap-adv/agm.h	2;"	d
snap_agmfast_h	snap-adv/agmfast.h	2;"	d
snap_agmfit_h	snap-adv/agmfit.h	2;"	d
snap_arxiv	snap-exp/arxiv.h	2;"	d
snap_cascdynetinf_h	snap-adv/cascdynetinf.h	2;"	d
snap_cascnetinf_h	snap-adv/cascnetinf.h	2;"	d
snap_core_priorityqueue_h	glib-core/priorityqueue.h	10;"	d
snap_core_randwalk_h	snap-core/randwalk.h	9;"	d
snap_dblp	snap-exp/dblp.h	2;"	d
snap_imbd_net_h	snap-exp/imdbnet.h	2;"	d
snap_kronecker_h	snap-adv/kronecker.h	2;"	d
snap_link_pred	snap-exp/linkpred.h	2;"	d
snap_lsh_h	snap-exp/lsh.h	2;"	d
snap_mag_h	snap-adv/mag.h	2;"	d
snap_max_dag_h	snap-exp/mxdag.h	2;"	d
snap_memenet_h	snap-exp/memenet.h	2;"	d
snap_memes_h	snap-exp/memes.h	2;"	d
snap_motifcluster_h	snap-adv/motifcluster.h	2;"	d
snap_network_community_profile_h	snap-adv/ncp.h	2;"	d
snap_rolx_h	snap-adv/rolx.h	2;"	d
snap_signed_network_h	snap-exp/signnet.h	2;"	d
snap_sir_h	snap-exp/sir.h	2;"	d
snap_spinn3r_h	snap-exp/spinn3r.h	2;"	d
snap_trawiling_h	snap-exp/trawling.h	2;"	d
snap_wgtnet_h	snap-exp/wgtnet.h	2;"	d
snap_wikinet_h	snap-exp/wikinet.h	2;"	d
snprintf	glib-core/bd.h	82;"	d
specialCasingLower	glib-core/unicode.h	/^	TIntIntVH specialCasingLower, specialCasingUpper, specialCasingTitle;$/;"	m	class:TUniChDb
specialCasingTitle	glib-core/unicode.h	/^	TIntIntVH specialCasingLower, specialCasingUpper, specialCasingTitle;$/;"	m	class:TUniChDb
specialCasingUpper	glib-core/unicode.h	/^	TIntIntVH specialCasingLower, specialCasingUpper, specialCasingTitle;$/;"	m	class:TUniChDb
sqr	glib-core/linalg.cpp	/^double TNumericalStuff::sqr(double a) {$/;"	f	class:TNumericalStuff
srFlood	snap-core/ff.h	/^  typedef enum { srUndef, srOk, srFlood, srTimeLimit } TStopReason;$/;"	e	enum:TFfGGen::__anon86
srOk	snap-core/ff.h	/^  typedef enum { srUndef, srOk, srFlood, srTimeLimit } TStopReason;$/;"	e	enum:TFfGGen::__anon86
srTimeLimit	snap-core/ff.h	/^  typedef enum { srUndef, srOk, srFlood, srTimeLimit } TStopReason;$/;"	e	enum:TFfGGen::__anon86
srUndef	snap-core/ff.h	/^  typedef enum { srUndef, srOk, srFlood, srTimeLimit } TStopReason;$/;"	e	enum:TFfGGen::__anon86
srcChar	glib-core/unicode.h	/^	int srcChar;   \/\/ the source character at the position srcIdx$/;"	m	class:TUnicodeException
srcIdx	glib-core/unicode.h	/^	size_t srcIdx; \/\/ the position in the source vector where the error occurred$/;"	m	class:TUnicodeException
srcdir	doxygen/doxyblock.py	/^    srcdir = sys.argv[1]$/;"	v
srcpath	doxygen/doxyblock.py	/^        srcpath = os.path.join(workdir, path)$/;"	v
ssfCommaSep	glib-core/ss.h	/^  ssfCommaSep,     \/\/\/< Comma separated$/;"	e	enum:__anon56
ssfMx	glib-core/ss.h	/^  ssfMx} TSsFmt;$/;"	e	enum:__anon56
ssfSemicolonSep	glib-core/ss.h	/^  ssfSemicolonSep, \/\/\/< Semicolon separated$/;"	e	enum:__anon56
ssfSpaceSep	glib-core/ss.h	/^  ssfSpaceSep,     \/\/\/< Space separated$/;"	e	enum:__anon56
ssfTabSep	glib-core/ss.h	/^  ssfTabSep,       \/\/\/< Tab separated$/;"	e	enum:__anon56
ssfUndef	glib-core/ss.h	/^typedef enum {ssfUndef,$/;"	e	enum:__anon56
ssfVBar	glib-core/ss.h	/^  ssfVBar,         \/\/\/< Vertical bar separated$/;"	e	enum:__anon56
ssfWhiteSep	glib-core/ss.h	/^  ssfWhiteSep,     \/\/\/< Whitespace (space or tab) separated$/;"	e	enum:__anon56
ssize_t	glib-core/bd.h	/^typedef ptrdiff_t ssize_t;$/;"	t
ssotFull	glib-core/linalg.h	/^typedef enum { ssotNoOrto, ssotSelective, ssotFull } TSpSVDReOrtoType;$/;"	e	enum:__anon26
ssotNoOrto	glib-core/linalg.h	/^typedef enum { ssotNoOrto, ssotSelective, ssotFull } TSpSVDReOrtoType;$/;"	e	enum:__anon26
ssotSelective	glib-core/linalg.h	/^typedef enum { ssotNoOrto, ssotSelective, ssotFull } TSpSVDReOrtoType;$/;"	e	enum:__anon26
start_time	contrib/unict_univr-risnap/RI-DSToSnap/timer.h	/^inline TIMEHANDLE start_time()$/;"	f
start_time	contrib/unict_univr-risnap/RiToSnap/timer.h	/^inline TIMEHANDLE start_time()$/;"	f
state	glib-core/md5.h	/^  uint4 state[4];$/;"	v
strict	glib-core/unicode.h	/^	bool strict;$/;"	m	class:TUniCodec
subCat	glib-core/unicode.h	/^		bool hasCat; TUniChSubCategory subCat;$/;"	m	class:TUniChDb::TSubcatHelper
subCat	glib-core/unicode.h	/^	TUniChSubCategory subCat; \/\/ = TUniChSubCategory(cat << 8 | subCat)$/;"	m	class:TUniChInfo
sweep_profile	snap-adv/motifcluster.h	/^  TFltV sweep_profile;  \/\/ Sweep profile: kth entry is conductance(Sk)$/;"	m	class:TSweepCut
sync_bool_compare_and_swap	snap-core/table.cpp	/^int sync_bool_compare_and_swap(int *lock) {$/;"	f
terminal	glib-core/unicode.h	/^		bool terminal;$/;"	m	class:TUniTrie::TNode
test	snap-exp/bfs-dev/test.cpp	/^bool test(PGraph &graph, bool followOut, bool followIn) {$/;"	f
test	snap-exp/bfs-dev/test1.cpp	/^bool test(PGraph &graph, bool followOut, bool followIn) {$/;"	f
test	snap-exp/bfs-dev/test_parallel.cpp	/^bool test(PGraph &graph, bool followOut, bool followIn) {$/;"	f
test_ints	snap-exp/test-dev/TableIndexTest.cpp	/^void test_ints() {$/;"	f
test_strs	snap-exp/test-dev/TableIndexTest.cpp	/^void test_strs() {$/;"	f
theta	snap-exp/circles/circles.h	/^  TFlt* theta; \/\/ Community parameters$/;"	m	class:TCluster
timeInSeconds	snap-exp/bfs-dev/livejournal.cpp	/^double timeInSeconds(struct timeval &tv1, struct timeval &tv2) {$/;"	f
timeInSeconds	snap-exp/bfs-dev/microsoft.cpp	/^double timeInSeconds(struct timeval &tv1, struct timeval &tv2) {$/;"	f
timeInSeconds	snap-exp/bfs-dev/test.cpp	/^double timeInSeconds(struct timeval &tv1, struct timeval &tv2) {$/;"	f
timeInSeconds	snap-exp/bfs-dev/test1.cpp	/^double timeInSeconds(struct timeval &tv1, struct timeval &tv2) {$/;"	f
timeInSeconds	snap-exp/bfs-dev/test_parallel.cpp	/^double timeInSeconds(struct timeval &tv1, struct timeval &tv2) {$/;"	f
timeInSeconds	snap-exp/bfs-dev/twitter.cpp	/^double timeInSeconds(struct timeval &tv1, struct timeval &tv2) {$/;"	f
timezone	glib-core/base.h	141;"	d
tmu10Min	glib-core/tm.h	/^  tmuUndef, tmu1Sec, tmu1Min, tmu10Min, tmu15Min, tmu30Min,$/;"	e	enum:__anon32
tmu12Hour	glib-core/tm.h	/^  tmu1Hour, tmu2Hour, tmu4Hour, tmu6Hour, tmu12Hour, tmuDay, tmuWeek, \/\/ Sunday is the start of the week$/;"	e	enum:__anon32
tmu15Min	glib-core/tm.h	/^  tmuUndef, tmu1Sec, tmu1Min, tmu10Min, tmu15Min, tmu30Min,$/;"	e	enum:__anon32
tmu1Hour	glib-core/tm.h	/^  tmu1Hour, tmu2Hour, tmu4Hour, tmu6Hour, tmu12Hour, tmuDay, tmuWeek, \/\/ Sunday is the start of the week$/;"	e	enum:__anon32
tmu1Min	glib-core/tm.h	/^  tmuUndef, tmu1Sec, tmu1Min, tmu10Min, tmu15Min, tmu30Min,$/;"	e	enum:__anon32
tmu1Sec	glib-core/tm.h	/^  tmuUndef, tmu1Sec, tmu1Min, tmu10Min, tmu15Min, tmu30Min,$/;"	e	enum:__anon32
tmu2Hour	glib-core/tm.h	/^  tmu1Hour, tmu2Hour, tmu4Hour, tmu6Hour, tmu12Hour, tmuDay, tmuWeek, \/\/ Sunday is the start of the week$/;"	e	enum:__anon32
tmu30Min	glib-core/tm.h	/^  tmuUndef, tmu1Sec, tmu1Min, tmu10Min, tmu15Min, tmu30Min,$/;"	e	enum:__anon32
tmu4Hour	glib-core/tm.h	/^  tmu1Hour, tmu2Hour, tmu4Hour, tmu6Hour, tmu12Hour, tmuDay, tmuWeek, \/\/ Sunday is the start of the week$/;"	e	enum:__anon32
tmu6Hour	glib-core/tm.h	/^  tmu1Hour, tmu2Hour, tmu4Hour, tmu6Hour, tmu12Hour, tmuDay, tmuWeek, \/\/ Sunday is the start of the week$/;"	e	enum:__anon32
tmuDay	glib-core/tm.h	/^  tmu1Hour, tmu2Hour, tmu4Hour, tmu6Hour, tmu12Hour, tmuDay, tmuWeek, \/\/ Sunday is the start of the week$/;"	e	enum:__anon32
tmuEdges	glib-core/tm.h	/^  tmuMonth, tmuYear, tmuNodes, tmuEdges$/;"	e	enum:__anon32
tmuMonth	glib-core/tm.h	/^  tmuMonth, tmuYear, tmuNodes, tmuEdges$/;"	e	enum:__anon32
tmuNodes	glib-core/tm.h	/^  tmuMonth, tmuYear, tmuNodes, tmuEdges$/;"	e	enum:__anon32
tmuUndef	glib-core/tm.h	/^  tmuUndef, tmu1Sec, tmu1Min, tmu10Min, tmu15Min, tmu30Min,$/;"	e	enum:__anon32
tmuWeek	glib-core/tm.h	/^  tmu1Hour, tmu2Hour, tmu4Hour, tmu6Hour, tmu12Hour, tmuDay, tmuWeek, \/\/ Sunday is the start of the week$/;"	e	enum:__anon32
tmuYear	glib-core/tm.h	/^  tmuMonth, tmuYear, tmuNodes, tmuEdges$/;"	e	enum:__anon32
toUnicodeTable	glib-core/unicode.cpp	/^const int TEncoding_CP1250::toUnicodeTable[8 * 16] = {$/;"	m	class:TEncoding_CP1250	file:
toUnicodeTable	glib-core/unicode.cpp	/^const int TEncoding_CP437::toUnicodeTable[8 * 16] = {$/;"	m	class:TEncoding_CP437	file:
toUnicodeTable	glib-core/unicode.cpp	/^const int TEncoding_CP852::toUnicodeTable[8 * 16] = {$/;"	m	class:TEncoding_CP852	file:
toUnicodeTable	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_2::toUnicodeTable[6 * 16] =$/;"	m	class:TEncoding_ISO8859_2	file:
toUnicodeTable	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_3::toUnicodeTable[6 * 16] = {$/;"	m	class:TEncoding_ISO8859_3	file:
toUnicodeTable	glib-core/unicode.cpp	/^const int TEncoding_ISO8859_4::toUnicodeTable[6 * 16] = {$/;"	m	class:TEncoding_ISO8859_4	file:
toUnicodeTable	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16];$/;"	m	class:TEncoding_ISO8859_2
toUnicodeTable	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16];$/;"	m	class:TEncoding_ISO8859_4
toUnicodeTable	glib-core/unicode.h	/^	static const int toUnicodeTable[6 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2];$/;"	m	class:TEncoding_ISO8859_3
toUnicodeTable	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[11 * 16];$/;"	m	class:TEncoding_CP852
toUnicodeTable	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[14 * 16], fromUnicodeTable2[2 * 16], fromUnicodeTable3[3 * 16];$/;"	m	class:TEncoding_CP1250
toUnicodeTable	glib-core/unicode.h	/^	static const int toUnicodeTable[8 * 16], fromUnicodeTable1[6 * 16], fromUnicodeTable2[4 * 16], fromUnicodeTable3[6 * 16], fromUnicodeTable4[11 * 16];$/;"	m	class:TEncoding_CP437
train	snap-exp/circles/circles.cpp	/^void TCluster::train(TInt outerReps, TInt gradientReps, TInt mcmcReps) {$/;"	f	class:TCluster
transitiveTransform	snap-core/cmty.cpp	/^void transitiveTransform(TIntV& a, TIntV& b) {$/;"	f	namespace:TSnap::TSnapDetail
triangle	snap-adv/motifcluster.h	/^  triangle,   \/\/ undirected cliques$/;"	e	enum:MotifType
u_size_t	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^typedef uint32_t u_size_t;$/;"	t
ucd	glib-core/unicode.h	/^	TUniChDb ucd;$/;"	m	class:TUnicode
ucfCompatibilityDecomposition	glib-core/unicode.h	/^	ucfCompatibilityDecomposition = 1, \/\/ if this flag is not set, the decomposition is canonical$/;"	e	enum:TUniChFlags_
ucfCompositionExclusion	glib-core/unicode.h	/^	ucfCompositionExclusion = 1 << 1,       \/\/ from CompositionExclusions.txt$/;"	e	enum:TUniChFlags_
ucfDcpAlphabetic	glib-core/unicode.h	/^	ucfDcpAlphabetic = 1 << 19,$/;"	e	enum:TUniChFlags_
ucfDcpDefaultIgnorableCodePoint	glib-core/unicode.h	/^	ucfDcpDefaultIgnorableCodePoint = 1 << 20,$/;"	e	enum:TUniChFlags_
ucfDcpGraphemeBase	glib-core/unicode.h	/^	ucfDcpGraphemeBase = 1 << 22,$/;"	e	enum:TUniChFlags_
ucfDcpGraphemeExtend	glib-core/unicode.h	/^	ucfDcpGraphemeExtend = 1 << 23,$/;"	e	enum:TUniChFlags_
ucfDcpIdContinue	glib-core/unicode.h	/^	ucfDcpIdContinue = 1 << 25,$/;"	e	enum:TUniChFlags_
ucfDcpIdStart	glib-core/unicode.h	/^	ucfDcpIdStart = 1 << 24,$/;"	e	enum:TUniChFlags_
ucfDcpLowercase	glib-core/unicode.h	/^	ucfDcpLowercase = 1 << 21,$/;"	e	enum:TUniChFlags_
ucfDcpMask	glib-core/unicode.h	/^	ucfDcpMask = ucfDcpAlphabetic | ucfDcpDefaultIgnorableCodePoint | ucfDcpLowercase | ucfDcpGraphemeBase | ucfDcpGraphemeExtend |$/;"	e	enum:TUniChFlags_
ucfDcpMath	glib-core/unicode.h	/^	ucfDcpMath = 1 << 26,$/;"	e	enum:TUniChFlags_
ucfDcpUppercase	glib-core/unicode.h	/^	ucfDcpUppercase = 1 << 27,$/;"	e	enum:TUniChFlags_
ucfDcpXidContinue	glib-core/unicode.h	/^	ucfDcpXidContinue = 1 << 29,$/;"	e	enum:TUniChFlags_
ucfDcpXidStart	glib-core/unicode.h	/^	ucfDcpXidStart = 1 << 28,$/;"	e	enum:TUniChFlags_
ucfPrAsciiHexDigit	glib-core/unicode.h	/^	ucfPrAsciiHexDigit = 1,$/;"	e	enum:TUniChProperties_
ucfPrBidiControl	glib-core/unicode.h	/^	ucfPrBidiControl = 2,$/;"	e	enum:TUniChProperties_
ucfPrDash	glib-core/unicode.h	/^	ucfPrDash = 4,$/;"	e	enum:TUniChProperties_
ucfPrDeprecated	glib-core/unicode.h	/^	ucfPrDeprecated = 8,$/;"	e	enum:TUniChProperties_
ucfPrDiacritic	glib-core/unicode.h	/^	ucfPrDiacritic = 0x10,$/;"	e	enum:TUniChProperties_
ucfPrExtender	glib-core/unicode.h	/^	ucfPrExtender = 0x20,$/;"	e	enum:TUniChProperties_
ucfPrGraphemeLink	glib-core/unicode.h	/^	ucfPrGraphemeLink = 0x40,$/;"	e	enum:TUniChProperties_
ucfPrHexDigit	glib-core/unicode.h	/^	ucfPrHexDigit = 0x80,$/;"	e	enum:TUniChProperties_
ucfPrHyphen	glib-core/unicode.h	/^	ucfPrHyphen = 0x100,$/;"	e	enum:TUniChProperties_
ucfPrIdeographic	glib-core/unicode.h	/^	ucfPrIdeographic = 0x200,$/;"	e	enum:TUniChProperties_
ucfPrJoinControl	glib-core/unicode.h	/^	ucfPrJoinControl = 0x400,$/;"	e	enum:TUniChProperties_
ucfPrLogicalOrderException	glib-core/unicode.h	/^	ucfPrLogicalOrderException = 0x800,$/;"	e	enum:TUniChProperties_
ucfPrNoncharacterCodePoint	glib-core/unicode.h	/^	ucfPrNoncharacterCodePoint = 0x1000,$/;"	e	enum:TUniChProperties_
ucfPrPatternSyntax	glib-core/unicode.h	/^	ucfPrPatternSyntax = 0x2000,$/;"	e	enum:TUniChProperties_
ucfPrPatternWhiteSpace	glib-core/unicode.h	/^	ucfPrPatternWhiteSpace = 0x4000,$/;"	e	enum:TUniChProperties_
ucfPrQuotationMark	glib-core/unicode.h	/^	ucfPrQuotationMark = 0x8000,$/;"	e	enum:TUniChProperties_
ucfPrSTerm	glib-core/unicode.h	/^	ucfPrSTerm = 0x20000,$/;"	e	enum:TUniChProperties_
ucfPrSoftDotted	glib-core/unicode.h	/^	ucfPrSoftDotted = 0x10000,$/;"	e	enum:TUniChProperties_
ucfPrTerminalPunctuation	glib-core/unicode.h	/^	ucfPrTerminalPunctuation = 0x40000,$/;"	e	enum:TUniChProperties_
ucfPrVariationSelector	glib-core/unicode.h	/^	ucfPrVariationSelector = 0x80000,$/;"	e	enum:TUniChProperties_
ucfPrWhiteSpace	glib-core/unicode.h	/^	ucfPrWhiteSpace = 0x100000$/;"	e	enum:TUniChProperties_
ucfPxIdsBinaryOperator	glib-core/unicode.h	/^	ucfPxIdsBinaryOperator = 0x100,$/;"	e	enum:TUniChPropertiesX_
ucfPxIdsTrinaryOperator	glib-core/unicode.h	/^	ucfPxIdsTrinaryOperator = 0x200,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherAlphabetic	glib-core/unicode.h	/^	ucfPxOtherAlphabetic = 1,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherDefaultIgnorableCodePoint	glib-core/unicode.h	/^	ucfPxOtherDefaultIgnorableCodePoint = 2,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherGraphemeExtend	glib-core/unicode.h	/^	ucfPxOtherGraphemeExtend = 4,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherIdContinue	glib-core/unicode.h	/^	ucfPxOtherIdContinue = 8,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherIdStart	glib-core/unicode.h	/^	ucfPxOtherIdStart = 0x10,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherLowercase	glib-core/unicode.h	/^	ucfPxOtherLowercase = 0x20,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherMath	glib-core/unicode.h	/^	ucfPxOtherMath = 0x40,$/;"	e	enum:TUniChPropertiesX_
ucfPxOtherUppercase	glib-core/unicode.h	/^	ucfPxOtherUppercase = 0x80,$/;"	e	enum:TUniChPropertiesX_
ucfPxRadical	glib-core/unicode.h	/^	ucfPxRadical = 0x400,$/;"	e	enum:TUniChPropertiesX_
ucfPxUnifiedIdeograph	glib-core/unicode.h	/^	ucfPxUnifiedIdeograph = 0x800$/;"	e	enum:TUniChPropertiesX_
ucfSbATerm	glib-core/unicode.h	/^	ucfSbATerm = 1 << 16,$/;"	e	enum:TUniChFlags_
ucfSbClose	glib-core/unicode.h	/^	ucfSbClose = 1 << 18,$/;"	e	enum:TUniChFlags_
ucfSbFormat	glib-core/unicode.h	/^	ucfSbFormat = 1 << 10,$/;"	e	enum:TUniChFlags_
ucfSbLower	glib-core/unicode.h	/^	ucfSbLower = 1 << 12,$/;"	e	enum:TUniChFlags_
ucfSbMask	glib-core/unicode.h	/^	ucfSbMask = ucfSbSep | ucfSbFormat | ucfSbSp | ucfSbLower | ucfSbUpper | ucfSbOLetter | ucfSbNumeric | ucfSbATerm | ucfSbSTerm | ucfSbClose,$/;"	e	enum:TUniChFlags_
ucfSbNumeric	glib-core/unicode.h	/^	ucfSbNumeric = 1 << 15,$/;"	e	enum:TUniChFlags_
ucfSbOLetter	glib-core/unicode.h	/^	ucfSbOLetter = 1 << 14,$/;"	e	enum:TUniChFlags_
ucfSbSTerm	glib-core/unicode.h	/^	ucfSbSTerm = 1 << 17,$/;"	e	enum:TUniChFlags_
ucfSbSep	glib-core/unicode.h	/^	ucfSbSep = 1 << 9,$/;"	e	enum:TUniChFlags_
ucfSbSp	glib-core/unicode.h	/^	ucfSbSp = 1 << 11,$/;"	e	enum:TUniChFlags_
ucfSbUpper	glib-core/unicode.h	/^	ucfSbUpper = 1 << 13,$/;"	e	enum:TUniChFlags_
ucfWbALetter	glib-core/unicode.h	/^	ucfWbALetter = 1 << 4,$/;"	e	enum:TUniChFlags_
ucfWbExtendNumLet	glib-core/unicode.h	/^	ucfWbExtendNumLet = 1 << 8,$/;"	e	enum:TUniChFlags_
ucfWbFormat	glib-core/unicode.h	/^	ucfWbFormat = 1 << 2,$/;"	e	enum:TUniChFlags_
ucfWbKatakana	glib-core/unicode.h	/^	ucfWbKatakana = 1 << 3,$/;"	e	enum:TUniChFlags_
ucfWbMask	glib-core/unicode.h	/^	ucfWbMask = ucfWbFormat | ucfWbKatakana | ucfWbALetter | ucfWbMidLetter | ucfWbMidNum | ucfWbNumeric | ucfWbExtendNumLet | ucfSbSep,$/;"	e	enum:TUniChFlags_
ucfWbMidLetter	glib-core/unicode.h	/^	ucfWbMidLetter = 1 << 5,$/;"	e	enum:TUniChFlags_
ucfWbMidNum	glib-core/unicode.h	/^	ucfWbMidNum = 1 << 6,$/;"	e	enum:TUniChFlags_
ucfWbNumeric	glib-core/unicode.h	/^	ucfWbNumeric = 1 << 7,$/;"	e	enum:TUniChFlags_
uchar	glib-core/bd.h	/^typedef unsigned char uchar;$/;"	t
uehAbort	glib-core/unicode.h	/^	uehAbort = 3    \/\/ - the encoding\/decoding process stops immediately$/;"	e	enum:TUnicodeErrorHandling_
uehIgnore	glib-core/unicode.h	/^	uehIgnore = 0,  \/\/ - it is silently ignored (nothing is added to the output vector)$/;"	e	enum:TUnicodeErrorHandling_
uehReplace	glib-core/unicode.h	/^	uehReplace = 2, \/\/ - the replacement character is added to the output vector$/;"	e	enum:TUnicodeErrorHandling_
uehThrow	glib-core/unicode.h	/^	uehThrow = 1,   \/\/ - an exception is thrown (TUnicodeException)$/;"	e	enum:TUnicodeErrorHandling_
uint	glib-core/bd.h	/^typedef unsigned int uint;$/;"	t
uint1	glib-core/md5.h	/^  typedef TB1Def::TB1 uint1; \/\/ assumes 1 byte long$/;"	t
uint16	glib-core/bd.h	/^typedef unsigned short uint16;$/;"	t
uint2	glib-core/md5.h	/^  typedef TB2Def::TB2 uint2; \/\/ assumes 2 byte long$/;"	t
uint32	glib-core/bd.h	/^typedef unsigned int uint32;$/;"	t
uint4	glib-core/md5.h	/^  typedef TB4Def::TB4 uint4; \/\/ assumes 4 byte long$/;"	t
uint64	glib-core/bd.h	/^typedef u_int64_t uint64;$/;"	t
uint64	glib-core/bd.h	/^typedef unsigned __int64 uint64;$/;"	t
uint64	glib-core/bd.h	/^typedef unsigned long long uint64;$/;"	t
uint8	glib-core/bd.h	/^typedef unsigned char uint8;$/;"	t
ulong	glib-core/bd.h	/^typedef unsigned long ulong;$/;"	t
uniChars	glib-core/unicode.cpp	/^const int TEncoding_YuAscii::uniChars[10] =     {  0x106,  0x107,  0x10c,  0x10d,  0x160,  0x161,  0x17d,  0x17e,   0x110,  0x111  };$/;"	m	class:TEncoding_YuAscii	file:
uniChars	glib-core/unicode.h	/^	static const int uniChars[10], yuAsciiChars[10];$/;"	m	class:TEncoding_YuAscii
usHttp	glib-core/url.h	/^typedef enum {usUndef, usHttp, usOther} TUrlScheme;$/;"	e	enum:__anon34
usOther	glib-core/url.h	/^typedef enum {usUndef, usHttp, usOther} TUrlScheme;$/;"	e	enum:__anon34
usUndef	glib-core/url.h	/^typedef enum {usUndef, usHttp, usOther} TUrlScheme;$/;"	e	enum:__anon34
usage	contrib/unict_univr-risnap/RI-DSToSnap/risnapds.cpp	/^void usage(char* args0){$/;"	f
usage	contrib/unict_univr-risnap/RiToSnap/risnap.cpp	/^void usage(char* args0) {$/;"	f
ushort	glib-core/bd.h	/^typedef unsigned short ushort;$/;"	t
utBlog	snap-exp/memes.h	/^  utUndef=0, utBlogLeft=1, utBlogRight=2, utBlog=3, utMedia=4$/;"	e	enum:__anon14
utBlogLeft	snap-exp/memes.h	/^  utUndef=0, utBlogLeft=1, utBlogRight=2, utBlog=3, utMedia=4$/;"	e	enum:__anon14
utBlogRight	snap-exp/memes.h	/^  utUndef=0, utBlogLeft=1, utBlogRight=2, utBlog=3, utMedia=4$/;"	e	enum:__anon14
utMedia	snap-exp/memes.h	/^  utUndef=0, utBlogLeft=1, utBlogRight=2, utBlog=3, utMedia=4$/;"	e	enum:__anon14
utUndef	snap-exp/memes.h	/^  utUndef=0, utBlogLeft=1, utBlogRight=2, utBlog=3, utMedia=4$/;"	e	enum:__anon14
v	glib-core/unicode.cpp	/^	TIntV v;$/;"	m	class:__anon54::TVectorBuilder2	file:
value	glib-core/bd.h	/^template <> struct TStaticAssert<true> { enum { value = 1 }; };$/;"	e	enum:TStaticAssert::__anon38
vectorIntersect	snap-core/cmty.cpp	/^int vectorIntersect(TIntV& a, TIntV& b) {$/;"	f	namespace:TSnap::TSnapDetail
vsnprintf	glib-core/bd.h	83;"	d
weights	snap-adv/motifcluster.h	/^  WeightVH& weights() { return weights_; }$/;"	f	class:ChibaNishizekiWeighter
weights_	snap-adv/motifcluster.h	/^  WeightVH weights_;  \/\/ motif adjacency weights$/;"	m	class:ChibaNishizekiWeighter
workdir	doxygen/doxyblock.py	/^    workdir = os.getcwd()$/;"	v
yanglib_agmattr1_h	snap-adv/agmattr.h	2;"	d
yanglib_agmdirected_h	snap-adv/agmdirected.h	2;"	d
yuAscii	glib-core/unicode.h	/^	T8BitCodec<TEncoding_YuAscii> yuAscii;$/;"	m	class:TUnicode
yuAsciiChars	glib-core/unicode.cpp	/^const int TEncoding_YuAscii::yuAsciiChars[10] = {   0x5d,   0x7d,   0x5e,   0x7e,   0x5b,   0x7b,   0x40,   0x60,    0x5c,   0x7c  };$/;"	m	class:TEncoding_YuAscii	file:
yuAsciiChars	glib-core/unicode.h	/^	static const int uniChars[10], yuAsciiChars[10];$/;"	m	class:TEncoding_YuAscii
zeroOne	snap-adv/circles.h	/^  zeroOne = 0,$/;"	e	enum:lossType
zipfl_h	glib-core/zipfl.h	2;"	d
~TAGMFit	snap-adv/agmfit.h	/^  ~TAGMFit() { }$/;"	f	class:TAGMFit
~TB1Def	glib-core/bits.h	/^  ~TB1Def(){delete[] B1P2T; delete[] B1BitsT;}$/;"	f	class:TB1Def
~TB2Def	glib-core/bits.h	/^  ~TB2Def(){delete[] B2P2T;}$/;"	f	class:TB2Def
~TB4Def	glib-core/bits.h	/^  ~TB4Def(){delete[] B4P2T;}$/;"	f	class:TB4Def
~TBSet	glib-core/bits.h	/^  ~TBSet(){delete[] B4T;}$/;"	f
~TBigNet	snap-core/bignet.h	/^  virtual ~TBigNet() { }$/;"	f	class:TBigNet
~TBigStrPool	glib-core/hash.h	/^  ~TBigStrPool() { if (Bf) free(Bf); else IAssert(MxBfL == 0);  MxBfL = 0; BfL = 0; }$/;"	f
~TBlobPt	glib-core/blobbs.h	/^  ~TBlobPt(){}$/;"	f
~TCRef	glib-core/bd.h	/^  ~TCRef(){Assert(Refs==0);}$/;"	f	class:TCRef
~TCluster	snap-adv/circles.h	/^  ~TCluster() {$/;"	f	class:TCluster
~TCluster	snap-exp/circles/circles.h	/^  ~TCluster() {$/;"	f	class:TCluster
~TCodecBase	glib-core/unicode.h	/^	virtual ~TCodecBase() { }$/;"	f	class:TCodecBase
~TCom	glib-core/os.h	/^  ~TCom(){\/*CoUninitialize();*\/}$/;"	f	class:TCom
~TFFile	glib-core/xfl.cpp	/^TFFile::~TFFile(){$/;"	f	class:TFFile
~TFFile	glib-core/xfl.cpp	/^TFFile::~TFFile(){}$/;"	f	class:TFFile
~TFFileDesc	glib-core/xfl.cpp	/^TFFileDesc::~TFFileDesc() {$/;"	f	class:TFFileDesc
~TFFileDesc	glib-core/xfl.cpp	/^TFFileDesc::~TFFileDesc() {}$/;"	f	class:TFFileDesc
~TFIn	glib-core/fl.cpp	/^TFIn::~TFIn(){$/;"	f	class:TFIn
~TFInOut	glib-core/fl.h	/^  ~TFInOut() { if (FileId!=NULL) IAssert(fclose(FileId) == 0); }$/;"	f	class:TFInOut
~TFOut	glib-core/fl.cpp	/^TFOut::~TFOut(){$/;"	f	class:TFOut
~TFRnd	glib-core/fl.cpp	/^TFRnd::~TFRnd(){$/;"	f	class:TFRnd
~TFSet	glib-core/bits.h	/^  ~TFSet(){}$/;"	f	class:TFSet
~TGBlobBs	glib-core/blobbs.cpp	/^TGBlobBs::~TGBlobBs(){$/;"	f	class:TGBlobBs
~TGraphAttributes	snap-adv/circles.h	/^  ~TGraphAttributes() {$/;"	f	class:TGraphAttributes
~TGraphAttributes	snap-exp/circles/circles.h	/^  ~TGraphAttributes() {$/;"	f	class:TGraphAttributes
~THttpRq	glib-core/http.h	/^  ~THttpRq(){}$/;"	f
~TIDer	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	~TIDer(){ }$/;"	f	class:TIDer
~TLSHash	snap-exp/lsh.cpp	/^TLSHash::~TLSHash() { }$/;"	f	class:TLSHash
~TLogRegFit	snap-adv/agm.h	/^  ~TLogRegFit() {}$/;"	f	class:TLogRegFit
~TLpExample	snap-exp/linkpred.h	/^  ~TLpExample() { CRef.UnRef(); }$/;"	f	class:TLpExample
~TLst	glib-core/ds.h	/^  ~TLst(){Clr();}$/;"	f	class:TLst
~TMBlobBs	glib-core/blobbs.cpp	/^TMBlobBs::~TMBlobBs(){$/;"	f	class:TMBlobBs
~TMIn	glib-core/fl.cpp	/^TMIn::~TMIn(){$/;"	f	class:TMIn
~TMOut	glib-core/fl.h	/^  ~TMOut(){if (OwnBf&&(Bf!=NULL)){delete[] Bf;}}$/;"	f	class:TMOut
~TMatchListener	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual ~TMatchListener() { };$/;"	f	class:TMatchListener
~TMatchListener	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  virtual ~TMatchListener() {};$/;"	f	class:TMatchListener
~TMatchingMachine	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual ~TMatchingMachine() {$/;"	f	class:TMatchingMachine
~TMatchingMachine	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  virtual ~TMatchingMachine() {$/;"	f	class:TMatchingMachine
~TMatrix	glib-core/linalg.h	/^    virtual ~TMatrix() { }$/;"	f	class:TMatrix
~TMem	glib-core/dt.h	/^  ~TMem(){if (Bf!=NULL){delete[] Bf;}}$/;"	f
~TNodeEDatNet	snap-core/network.h	/^  virtual ~TNodeEDatNet() { }$/;"	f	class:TNodeEDatNet
~TNodeEdgeNet	snap-core/network.h	/^  virtual ~TNodeEdgeNet() { }$/;"	f	class:TNodeEdgeNet
~TNodeList	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual ~TNodeList() {$/;"	f	class:TNodeList
~TNodeList	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  virtual ~TNodeList() {};$/;"	f	class:TNodeList
~TNodeNet	snap-core/network.h	/^  virtual ~TNodeNet() { }$/;"	f	class:TNodeNet
~TNotify	glib-core/ut.h	/^  virtual ~TNotify(){}$/;"	f
~TPackVec	glib-core/shash.h	/^  ~TPackVec() { if (ValT != NULL) { free(ValT); } }$/;"	f	class:TPackVec
~TPt	glib-core/bd.h	/^  ~TPt(){UnRef();}$/;"	f	class:TPt
~TQuoteExtractor	snap-exp/spinn3r.cpp	/^TQuoteExtractor::~TQuoteExtractor() {$/;"	f	class:TQuoteExtractor
~TQuoteLoader	snap-exp/memes.h	/^  virtual ~TQuoteLoader() { }$/;"	f	class:TQuoteLoader
~TSBase	glib-core/fl.h	/^  virtual ~TSBase(){}$/;"	f	class:TSBase
~TSBitSet	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^	~TSBitSet() {$/;"	f	class:TSBitSet
~TSIn	glib-core/fl.h	/^  virtual ~TSIn(){}$/;"	f	class:TSIn
~TSInOut	glib-core/fl.h	/^  virtual ~TSInOut(){}$/;"	f	class:TSInOut
~TSOut	glib-core/fl.h	/^  virtual ~TSOut(){}$/;"	f	class:TSOut
~TSSet	snap-adv/subgraphenum.h	/^		~TSSet() { free(m_nodes); }$/;"	f	class:TSubGraphEnum::TSSet
~TSStr	glib-core/bd.h	/^  ~TSStr(){delete[] Bf;}$/;"	f	class:TSStr
~TSolver	contrib/unict_univr-risnap/RI-DSToSnap/rids.h	/^  virtual ~TSolver() { }$/;"	f	class:TSolver
~TSolver	contrib/unict_univr-risnap/RiToSnap/rinetmatch.h	/^  virtual ~TSolver() {}$/;"	f	class:TSolver
~TSparseGroup	glib-core/shash.h	/^  ~TSparseGroup() { if (Group != NULL) delete [] Group; }$/;"	f	class:TSparseGroup
~TSpinn3rFeedItem	snap-exp/spinn3r.h	/^  virtual ~TSpinn3rFeedItem() { if (XmlLxPt!=NULL) { delete XmlLxPt; } }$/;"	f	class:TSpinn3rFeedItem
~TSpinn3rFullItem	snap-exp/spinn3r.h	/^  virtual ~TSpinn3rFullItem() { if (XmlLxPt!=NULL) { delete XmlLxPt; } }$/;"	f	class:TSpinn3rFullItem
~TSs	glib-core/ss.h	/^  ~TSs(){}$/;"	f
~TSsParser	glib-core/ss.cpp	/^TSsParser::~TSsParser() {$/;"	f	class:TSsParser
~TSsParserMP	glib-core/ssmp.cpp	/^TSsParserMP::~TSsParserMP() {$/;"	f	class:TSsParserMP
~TStdIOPipe	glib-core/os.cpp	/^TStdIOPipe::~TStdIOPipe() {$/;"	f	class:TStdIOPipe
~TSubcatHelper	glib-core/unicode.h	/^		~TSubcatHelper()$/;"	f	class:TUniChDb::TSubcatHelper
~TSysConsole	glib-core/os.cpp	/^TSysConsole::~TSysConsole(){$/;"	f	class:TSysConsole
~TSysMemStat	glib-core/os.h	/^  ~TSysMemStat(){}$/;"	f
~TTm	glib-core/tm.h	/^  ~TTm(){}$/;"	f	class:TTm
~TUStr	glib-core/unicodestring.h	/^  ~TUStr(){}$/;"	f	class:TUStr
~TUcdFileReader	glib-core/unicode.h	/^		~TUcdFileReader() { Close(); }$/;"	f	class:TUniChDb::TUcdFileReader
~TUnicodeDef	glib-core/unicodestring.h	/^  ~TUnicodeDef(){if (Unicode!=NULL){delete Unicode;} Unicode=NULL;}$/;"	f	class:TUnicodeDef
~TUrl	glib-core/url.h	/^  ~TUrl(){}$/;"	f
~TVec	glib-core/ds.h	/^  ~TVec(){if ((ValT!=NULL) && (MxVals!=-1)){delete[] ValT;}}$/;"	f	class:TVec
~TVecPool	glib-core/ds.h	/^  ~TVecPool() { if (ValBf != NULL) { delete [] ValBf; } ValBf=NULL; }$/;"	f	class:TGLib_OLD::TVecPool
~TVecPool	glib-core/ds.h	/^  ~TVecPool() { if (ValBf != NULL) { delete [] ValBf; } ValBf=NULL; }$/;"	f	class:TVecPool
~TWChA	glib-core/wch.h	/^  ~TWChA(){}$/;"	f	class:TWChA
~TXmlObjSerTagNm	glib-core/xml.cpp	/^TXmlObjSerTagNm::~TXmlObjSerTagNm(){$/;"	f	class:TXmlObjSerTagNm
~TZipIn	glib-core/zipfl.cpp	/^TZipIn::~TZipIn(){$/;"	f	class:TZipIn
~TZipOut	glib-core/zipfl.cpp	/^TZipOut::~TZipOut() {$/;"	f	class:TZipOut
